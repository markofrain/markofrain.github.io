<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PostgreSQL 导入导出</title>
    <url>/2021/04/23/PostgreSQL/PostgreSQL-%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<p>// 导出<br>pg_dump.exe –dbname=postgres –schema=business –file=C:\Users\chen\postgres_192_168_6_44-2021_04_23_17_49_56-dump.sql –create –username=postgres –host=192.168.6.44 –port=5432<br>// 导入<br>psql.exe -U postgres postgres &lt; C:\Users\chen\postgres_192_168_6_44-2021_04_23_18_13_46-dump.sql</p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
  </entry>
  <entry>
    <title>Apereo CAS Server-Client授权登录</title>
    <url>/2021/04/23/%E4%B8%AD%E9%97%B4%E4%BB%B6/Apereo-CAS-Server-Client%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h2 id="一、CAS-Server-模板启动基础使用"><a href="#一、CAS-Server-模板启动基础使用" class="headerlink" title="一、CAS Server 模板启动基础使用"></a>一、CAS Server 模板启动基础使用</h2><p>从github下载opereo的<strong><a href="https://github.com/apereo/cas-overlay-template/tree/5.3">cas-overlay-template</a></strong>，这里下载的是5.3版本的。下载的名是cas-overlay-template-5.3，此处进入根目录，直接执行<code>mvn clean package</code>命令进行打包，然后在target目录下会生成cas.war文件，将cas.war文件放到tomcat的webapps目录下即可。启动tomcat。</p>
<p>访问<code>http://localhost:8080/cas</code>是跳转到<code>http://localhost:8080/cas/login</code>页面</p>
<h3 id="支持http-配置修改"><a href="#支持http-配置修改" class="headerlink" title="支持http 配置修改"></a>支持http 配置修改</h3><p>因为CAS默认使用https，没有添加http的配置，因此改一下配置支持http</p>
<p>进入<code>\WEB-INF\classes\application.properties</code></p>
<p>修改增加如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增</span></span><br><span class="line"><span class="meta">cas.tgc.secure</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 新增 引入services下的json注册文件</span></span><br><span class="line"><span class="meta">cas.serviceRegistry.initFromJson</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 修改默认的用户名密码</span></span><br><span class="line"><span class="meta">cas.authn.accept.users</span>=<span class="string">admin::admin</span></span><br></pre></td></tr></table></figure>

<p>修改<code>\WEB-INF\classes\services\HTTPSandIMAPS-10000001.json</code>文件，修改如下，增加http</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@class&quot;</span> : <span class="string">&quot;org.apereo.cas.services.RegexRegisteredService&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;serviceId&quot;</span> : <span class="string">&quot;^(https|imaps|http)://.*&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;HTTPS and IMAPS&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span> : <span class="number">10000001</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span> : <span class="string">&quot;This service definition authorizes all application urls that support HTTPS and IMAPS protocols.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;evaluationOrder&quot;</span> : <span class="number">10000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后重新启动tomcat容器。此时再次通过admin/admin登录成功</p>
<h3 id="添加客户端测试"><a href="#添加客户端测试" class="headerlink" title="添加客户端测试"></a>添加客户端测试</h3><p>创建一个SpringBoot项目，添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.unicon.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-client-autoconfig-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml中进行如下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">cas:</span></span><br><span class="line">  <span class="comment"># cas登录地址</span></span><br><span class="line">  <span class="attr">server-login-url:</span> <span class="string">http://localhost:8080/cas/login</span></span><br><span class="line">  <span class="comment"># cas server全追</span></span><br><span class="line">  <span class="attr">server-url-prefix:</span> <span class="string">http://localhost:8080/cas</span></span><br><span class="line">  <span class="comment"># 客户端地址</span></span><br><span class="line">  <span class="attr">client-host-url:</span> <span class="string">http://localhost:9000</span></span><br><span class="line">  <span class="comment"># Ticket校验器</span></span><br><span class="line">  <span class="attr">validation-type:</span> <span class="string">cas</span></span><br><span class="line">  <span class="comment"># 是否使用session</span></span><br><span class="line">  <span class="attr">use-session:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>添加测试controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">casTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;cas test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>访问<code>localhost:9000/test</code>将会重定向到<code>http://localhost:8080/cas/login?service=http%3A%2F%2Flocalhost%3A9001%2Ftest</code>地址，也就是cas登录地址</li>
</ol>
<p><img src="https://oss.chenguangqi.com/2021/source/QQ%E6%88%AA%E5%9B%BE20210424013624.png" alt=""></p>
<ol start="2">
<li>随后浏览器就通过重定向拿到Location的地址进行请求，于是就到了这个登录页面，如下</li>
</ol>
<p><img src="https://oss.chenguangqi.com/2021/source/QQ%E6%88%AA%E5%9B%BE20210424013743.png" alt=""></p>
<ol start="3">
<li>在页面中通过POST接口来请求，传递用户名密码和execution参数到后台，这个登录请求也返回了302重定向到一个新地址，这个要重定向的地址就是我们的回调地址，后面添加了ticket参数</li>
</ol>
<p><img src="https://oss.chenguangqi.com/2021/source/QQ%E6%88%AA%E5%9B%BE20210424013948.png" alt=""></p>
<ol start="4">
<li>之后就请求这个这个地址了。</li>
</ol>
<p><img src="https://oss.chenguangqi.com/2021/source/QQ%E6%88%AA%E5%9B%BE20210424014241.png" alt=""></p>
<ol start="5">
<li>可想而知，结果又是重定向，此时重定向的结果是回调地址，并设置了cookie，便正常返回结果了。</li>
</ol>
<p><img src="https://oss.chenguangqi.com/2021/source/QQ%E6%88%AA%E5%9B%BE20210424014433.png" alt=""></p>
<p>此时再创建client2并启动不用登陆。</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/qq_20397315/article/details/93877221">CAS服务端搭建和结合Springboot搭建CAS客户端验证单点登录</a></p>
<p>CAS 流程分析：<a href="https://blog.csdn.net/qq_41258204/article/details/84036875">CAS单点登录原理分析</a></p>
</blockquote>
<h2 id="二、CAS-Server-改造-CasConfigurationProperties"><a href="#二、CAS-Server-改造-CasConfigurationProperties" class="headerlink" title="二、CAS Server 改造 CasConfigurationProperties"></a>二、CAS Server 改造 CasConfigurationProperties</h2><h3 id="CAS-Server-环境搭建"><a href="#CAS-Server-环境搭建" class="headerlink" title="CAS Server 环境搭建"></a>CAS Server 环境搭建</h3><p>新建一个普通maven项目，而不是springboot项目。</p>
<p><strong>搭建项目中，如果包含父项目，则一定不要给该项目springboot-parent的依赖，尽量没有parent。因为如果添加了spring-boot-parent依赖，在项目中spring.factories是无法被springboot解析的，导致自定义登录逻辑注册失败</strong></p>
<p>我们修改pom文件，大致如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cgq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cas.version</span>&gt;</span>5.3.10<span class="tag">&lt;/<span class="name">cas.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app.server</span>&gt;</span>-tomcat<span class="tag">&lt;/<span class="name">app.server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springboot.version</span>&gt;</span>2.1.10.RELEASE<span class="tag">&lt;/<span class="name">springboot.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mainClassName</span>&gt;</span>org.springframework.boot.loader.WarLauncher<span class="tag">&lt;/<span class="name">mainClassName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">isExecutable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">isExecutable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">manifestFileToUse</span>&gt;</span></span><br><span class="line">        $&#123;project.build.directory&#125;/war/work/org.apereo.cas/cas-server-webapp$&#123;app.server&#125;/META-INF/MANIFEST.MF</span><br><span class="line">    <span class="tag">&lt;/<span class="name">manifestFileToUse</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 和maven-war-plugin里配置的overlays配合使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apereo.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-server-webapp$&#123;app.server&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cas.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>war<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apereo.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-server-core-configuration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cas.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apereo.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-server-core-authentication<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cas.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apereo.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-server-core-authentication-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cas.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自己需要的jar包，我这里用到了查库验证身份，所以引入了mysql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springboot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;mainClassName&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executable</span>&gt;</span>$&#123;isExecutable&#125;<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">layout</span>&gt;</span>WAR<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">warName</span>&gt;</span>cas<span class="tag">&lt;/<span class="name">warName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">recompressZippedFiles</span>&gt;</span>false<span class="tag">&lt;/<span class="name">recompressZippedFiles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">compress</span>&gt;</span>false<span class="tag">&lt;/<span class="name">compress</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifestFile</span>&gt;</span>$&#123;manifestFileToUse&#125;<span class="tag">&lt;/<span class="name">manifestFile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overlays</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overlay</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apereo.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-server-webapp$&#123;app.server&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--原有的服务不再初始化进去--&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--&lt;excludes&gt;</span></span><br><span class="line"><span class="comment">                                &lt;exclude&gt;WEB-INF/classes/services/*&lt;/exclude&gt;</span></span><br><span class="line"><span class="comment">                                &lt;exclude&gt;WEB-INF/classes/application.*&lt;/exclude&gt;</span></span><br><span class="line"><span class="comment">                            &lt;/excludes&gt;--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">overlay</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">overlays</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>cas<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>该配置文件基本上就是拷贝cas-overlay-template的pom中的</p>
<p>overlays的用处是，在打包的时候，框架会在这个war包的基础上，把该项目自己写的类加入到这个依赖中，位置重复的就会覆盖。</p>
<p>此处没有粘贴仓库配置，给定的仓库是很慢的，aliyun仓库中都有，直接使用就行。</p>
<p>项目依然使用tomcat来启动。在IDEA中添加一个Local tomcat配置，设置applicationContext为/cas，修改war exploded的 Output directory地址为<code>\target\cas</code>。</p>
<p>在cas-overlay-template项目或刚创建的项目打包后，在项目根目录下会出现overlays目录，是overlays的解析出来的。</p>
<p>我们从里面找<code>\WEB-INF\classes</code>下的<code>application.properties</code>、<code>log4j2.xml</code>以及<code>META-INF\spring.factories</code>这三个文件到我们新建项目的resources下</p>
<p><img src="https://oss.chenguangqi.com/2021/source/QQ%E6%88%AA%E5%9B%BE20210424020425.png" alt=""></p>
<p>我们修改application.properties文件的<code>cas.authn.accept.users=admin::admin</code>，启动tomcat，进行测试。</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/u010588262/article/details/79741626">手把手教Apereo CAS5.2.3服务端Server的开发环境</a></p>
</blockquote>
<h3 id="自定义登录验证"><a href="#自定义登录验证" class="headerlink" title="自定义登录验证"></a>自定义登录验证</h3><p>创建一个登录验证类，并进行注册。</p>
<h4 id="创建登录验证类"><a href="#创建登录验证类" class="headerlink" title="创建登录验证类"></a>创建登录验证类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 集成AuthenticationHandler处理认证</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> cgq</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2021/4/23</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">AbstractUsernamePasswordAuthenticationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Login.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Login</span><span class="params">(String name, ServicesManager servicesManager, PrincipalFactory principalFactory, Integer order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, servicesManager, principalFactory, order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationHandlerExecutionResult <span class="title">authenticateUsernamePasswordInternal</span><span class="params">(UsernamePasswordCredential credential, String originalPassword)</span> <span class="keyword">throws</span> GeneralSecurityException, PreventedException </span>&#123;</span><br><span class="line">        DriverManagerDataSource d=<span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        d.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        d.setUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/cas?serverTimezone=UTC&amp;characterEncoding=utf-8&quot;</span>);</span><br><span class="line">        d.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        d.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        JdbcTemplate template=<span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        template.setDataSource(d);</span><br><span class="line">        String username=credential.getUsername();</span><br><span class="line">        String pd=credential.getPassword();</span><br><span class="line">        <span class="comment">//查询数据库加密的的密码</span></span><br><span class="line">        Map&lt;String,Object&gt; user = template.queryForMap(<span class="string">&quot;SELECT `password` FROM sys_user WHERE username = ?&quot;</span>, credential.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FailedLoginException(<span class="string">&quot;没有该用户&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回多属性（暂时不知道怎么用，没研究）</span></span><br><span class="line">        Map&lt;String, Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;XXXXX@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        BCryptPasswordEncoder encoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        <span class="keyword">if</span>(encoder.matches(credential.getPassword(),user.get(<span class="string">&quot;password&quot;</span>).toString()))&#123;</span><br><span class="line">            <span class="keyword">return</span> createHandlerResult(credential, principalFactory.createPrincipal(username, map), <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FailedLoginException(<span class="string">&quot;Sorry, login attemp failed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在authenticateUsernamePasswordInternal方法里，我们通过spring自带的数据库查询工具进行查询，实际上这个里面可以通过拿到用户名和密码做任何操作。</p>
<h4 id="创建配置类，通过spring-factories进行注入"><a href="#创建配置类，通过spring-factories进行注入" class="headerlink" title="创建配置类，通过spring.factories进行注入"></a>创建配置类，通过spring.factories进行注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 登录验证配置类，创建的自定义认证类进行注册，并添加到spring.factories</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> cgq</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2021/4/23</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration(&quot;CustomAuthConfig&quot;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CasConfigurationProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthConfig</span>  <span class="keyword">implements</span> <span class="title">AuthenticationEventExecutionPlanConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CasConfigurationProperties casProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;servicesManager&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ServicesManager servicesManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationHandler <span class="title">myAuthenticationHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Login handler = <span class="keyword">new</span> Login(Login.class.getSimpleName(), servicesManager, <span class="keyword">new</span> DefaultPrincipalFactory(), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAuthenticationExecutionPlan</span><span class="params">(AuthenticationEventExecutionPlan plan)</span> </span>&#123;</span><br><span class="line">        plan.registerAuthenticationHandler(myAuthenticationHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处注入的AuthenticationHandler的最后一个参数是order，我们将它设为第一个。</p>
<p>同时在<code>META-INF\spring.factories</code>中修改EnableAutoConfiguration如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">com.cgq.cas.CustomAuthConfig</span></span><br></pre></td></tr></table></figure>

<p>并修改<code>application.properties</code>中的<code>cas.authn.accept.users</code>注释掉。</p>
<p>通过重启容器，会看到登录时进入到了定义的Login类中。</p>
<p>通过<code>PolicyBasedAuthenticationManager</code>类的AuthenticationBuilder方法，可以看到it变量就是所有注入进去的AuthenticationHandler。默认走的验证是继承自AbstractUsernamePasswordAuthenticationHandler类的AcceptUsersAuthenticationHandler类。</p>
<p>如果没有进入，则排序一下是否解析了<code>spring.factories</code>。如果该项目直接或间接的配置了parent为<code>spring-boot-parent</code>则可能导致失败。</p>
<blockquote>
<p>参考：</p>
<p><a href="https://blog.csdn.net/u010588262/article/details/79757609">手把手教Apereo CAS5.2.3服务端 查数据库验证身份</a></p>
<p><a href="https://blog.csdn.net/qq_34021712/article/details/81144874">cas5.3.2单点登录-自定义登录验证(四)</a></p>
</blockquote>
<h3 id="通过数据库进行身份验证"><a href="#通过数据库进行身份验证" class="headerlink" title="通过数据库进行身份验证"></a>通过数据库进行身份验证</h3><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apereo.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-server-support-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cas.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apereo.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-server-support-jdbc-drivers<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cas.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将<code>cas.authn.accept.users</code>注释掉。</p>
<p>在application.properties中添加如下字段</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加jdbc认证</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].sql</span>=<span class="string">SELECT * FROM sys_user WHERE username =?</span></span><br><span class="line"><span class="comment">#那一个字段作为密码字段</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].fieldPassword</span>=<span class="string">password</span></span><br><span class="line"><span class="comment">#配置数据库连接</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/cas?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSL=false</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].dialect</span>=<span class="string">org.hibernate.dialect.MySQLDialect</span></span><br><span class="line"><span class="comment">#数据库用户名</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].user</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#数据库密码</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#mysql驱动</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置加密策略 如果数据库密码使用了passwordEncoder加密MD5方式的话</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.type</span>=<span class="string">DEFAULT</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.characterEncoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm</span>=<span class="string">MD5</span></span><br></pre></td></tr></table></figure>

<p>配置完成后，先去除在<code>spring.factories</code>对刚自定义验证类的注入。使用AcceptUsersAuthenticationHandler类进行验证。</p>
<p>重启容器后就可以看到已经可以通过数据库用户名密码进行登录了。</p>
<p>然而对于配置cas jdbc和自定义验证登录的话，建议选择自定义验证登录，并在自定义中进行数据库的验证操作，避免jdbc的不确定性，以及问题排查不友好的情况。</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/qq_34021712/article/details/80956047">cas5.3.2单点登录-JDBC认证(密码MD5和密码加盐)(二)</a></p>
</blockquote>
<h2 id="三、客户端验证配置"><a href="#三、客户端验证配置" class="headerlink" title="三、客户端验证配置"></a>三、客户端验证配置</h2><h3 id="验证现有认证是否满足"><a href="#验证现有认证是否满足" class="headerlink" title="验证现有认证是否满足"></a>验证现有认证是否满足</h3><p>客户端仍然以章节一的客户端测试。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">cas:</span></span><br><span class="line">  <span class="comment"># cas登录地址</span></span><br><span class="line">  <span class="attr">server-login-url:</span> <span class="string">http://localhost:8080/cas/login</span></span><br><span class="line">  <span class="comment"># cas server全追</span></span><br><span class="line">  <span class="attr">server-url-prefix:</span> <span class="string">http://localhost:8080/cas</span></span><br><span class="line">  <span class="comment"># 客户端地址</span></span><br><span class="line">  <span class="attr">client-host-url:</span> <span class="string">http://localhost:9001</span></span><br><span class="line">  <span class="comment"># Ticket校验器</span></span><br><span class="line">  <span class="attr">validation-type:</span> <span class="string">cas</span></span><br><span class="line">  <span class="attr">use-session:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>以上是原来的配置文件。我们进行如下修改。</p>
<p>为server、client1、client2配置对应的域名控制，模拟不同域名访问。使用SwatchHosts!工具或直接在<code>C:\Windows\System32\drivers\etc\hosts</code>处增加ip域名映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># My hosts</span><br><span class="line">127.0.0.1 www.cgq-server.com</span><br><span class="line">127.0.0.1 www.cgq-client1.com</span><br><span class="line">127.0.0.1 www.cgq-client2.com</span><br></pre></td></tr></table></figure>

<p>然后我们修改配置文件如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">cas:</span></span><br><span class="line">  <span class="attr">server-login-url:</span> <span class="string">http://www.cgq-server.com:8080/cas/login</span></span><br><span class="line">  <span class="attr">server-url-prefix:</span> <span class="string">http://www.cgq-server.com:8080/cas</span></span><br><span class="line">  <span class="attr">client-host-url:</span> <span class="string">http://www.cgq-client2.com:9001</span></span><br><span class="line">  <span class="attr">validation-type:</span> <span class="string">cas</span></span><br><span class="line">  <span class="attr">use-session:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>启动client后再次访问<code>www.cgq-client2.com:9001/test</code>出现如下页面，跟之前的提示不一样了</p>
<p><img src="https://oss.chenguangqi.com/2021/source/QQ%E6%88%AA%E5%9B%BE20210424134642.png" alt=""></p>
<p>它的请求过程如下:</p>
<ol>
<li>客户端访问地址后，会重定向到登录接口的。</li>
<li>因为未服务端未检测到客户端的定义记录，则直接被拒绝</li>
</ol>
<p>同时服务端会提示如下日志，表示找不到匹配的注册服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-24 13:48:23,574 WARN [org.apereo.cas.web.flow.ServiceAuthorizationCheck] - &lt;No service definitions are found in the service manager. Service [http:&#x2F;&#x2F;www.cgq-client2.com:9001&#x2F;test] will not be automatically authorized to request authentication.&gt;</span><br><span class="line"></span><br><span class="line">2021-04-24 13:48:23,575 WARN [org.apereo.cas.services.web.RegisteredServiceThemeResolver] - &lt;No registered service is found to match [AbstractWebApplicationService(id&#x3D;http:&#x2F;&#x2F;www.cgq-client2.com:9001&#x2F;test, originalUrl&#x3D;http:&#x2F;&#x2F;www.cgq-client2.com:9001&#x2F;test, artifactId&#x3D;null, principal&#x3D;null, source&#x3D;service, loggedOutAlready&#x3D;false, format&#x3D;XML, attributes&#x3D;&#123;&#125;)] or access is denied. Using default theme [cas-theme-default]&gt;</span><br></pre></td></tr></table></figure>

<h3 id="设置服务端配置"><a href="#设置服务端配置" class="headerlink" title="设置服务端配置"></a>设置服务端配置</h3><ol>
<li>添加application.properties配置</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启识别json文件，默认false</span></span><br><span class="line"><span class="meta">cas.serviceRegistry.initFromJson</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#自动扫描服务配置，默认开启</span></span><br><span class="line"><span class="meta">cas.serviceRegistry.watcherEnabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#120秒扫描一遍,默认PT2M</span></span><br><span class="line"><span class="meta">cas.serviceRegistry.schedule.repeatInterval</span>=<span class="string">120000</span></span><br><span class="line"><span class="comment">#延迟15秒开启,默认PT15S</span></span><br><span class="line"><span class="comment">#cas.serviceRegistry.schedule.startDelay=15000</span></span><br><span class="line"><span class="comment">#资源加载路径,默认就是services</span></span><br><span class="line"><span class="meta">cas.serviceRegistry.json.location</span>=<span class="string">classpath:/services</span></span><br></pre></td></tr></table></figure>

<p>查看CasConfigurationProperties配置类，不同版本的属性各有变动，如果配置不对，项目启动不起来</p>
<ol start="2">
<li>从overlays中拷贝services目录到resources下，新建一个相同格式不同id的json文件<code>&#123;name&#125;-&#123;id&#125;.json</code>。注意要删除HTTPSandIMAPS-10000001.json，因为它定义了所有https和imaps的协议。咱目前是http的可暂时不用关心。</li>
</ol>
<p>拷贝Apereo-10000002.json内容，定义新文件内容为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@class&quot;</span> : <span class="string">&quot;org.apereo.cas.services.RegexRegisteredService&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;serviceId&quot;</span> : <span class="string">&quot;^http://www.cgq-client.*&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;client服务&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;theme&quot;</span> : <span class="string">&quot;apereo&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span> : <span class="number">10000003</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span> : <span class="string">&quot;本地client服务&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;evaluationOrder&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们启动服务，会发现日只有如下打印</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-24 14:44:30,091 INFO [org.apereo.cas.services.ServiceRegistryInitializer] - &lt;Service registry [InMemoryServiceRegistry] contains [3] service definitions&gt;</span><br><span class="line"></span><br><span class="line">2021-04-24 14:44:30,095 WARN [org.apereo.cas.services.ServiceRegistryInitializer] - &lt;Service registry [InMemoryServiceRegistry] will be auto-initialized from JSON service definitions. This behavior is only useful for testing purposes and MAY NOT be appropriate for production. Consider turning off this behavior via the setting [cas.serviceRegistry.initFromJson&#x3D;false] and explicitly register definitions in the services registry.&gt;</span><br><span class="line"></span><br><span class="line">2021-04-24 14:44:30,098 WARN [org.apereo.cas.services.ServiceRegistryInitializer] - &lt;Skipping [Apereo] JSON service definition as a matching service [Apereo] is found in the registry&gt;</span><br><span class="line"></span><br><span class="line">2021-04-24 14:44:30,098 WARN [org.apereo.cas.services.ServiceRegistryInitializer] - &lt;Skipping [client服务] JSON service definition as a matching service [client服务] is found in the registry&gt;</span><br><span class="line"></span><br><span class="line">2021-04-24 14:44:30,098 WARN [org.apereo.cas.services.ServiceRegistryInitializer] - &lt;Skipping [HTTPS and IMAPS] JSON service definition as a matching service [HTTPS and IMAPS] is found in the registry&gt;</span><br></pre></td></tr></table></figure>



<p>我们再次访问<code>www.cgq-client2.com/test</code>条件即可到正常登录页面</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/qq_34021712/article/details/81318649">cas5.3.2单点登录-集成客户端(六)</a></p>
</blockquote>
<h3 id="过滤不需要登录的路径"><a href="#过滤不需要登录的路径" class="headerlink" title="过滤不需要登录的路径"></a>过滤不需要登录的路径</h3><p>通过查看参考文章，发现创建手动的starter并不一定灵活，因为有一堆东西还要设置，如果有高度配置灵活的可以参考这个自定义starter。</p>
<p>我们现在只需要对其拓展即可。从源码中我们可以发现主要的CasClientConfiguration类中注入了CasClientConfigurer类，它的提供了空的实现类CasClientConfigurerAdapter在CasClientConfiguration配置类中进行拓展，我们可以继承空CasClientConfigurerAdapter类来实现这几个方法。</p>
<p>我们在client2中，创建类继承它</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCasClientConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">CasClientConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCasClientConfigurerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置认证过滤器相关信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationFilter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAuthenticationFilter</span><span class="params">(FilterRegistrationBean authenticationFilter)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map = authenticationFilter.getInitParameters();</span><br><span class="line">        map.put(<span class="string">&quot;ignorePattern&quot;</span>,<span class="string">&quot;/test|/test/mvn&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置校验相关信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> validationFilter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureValidationFilter</span><span class="params">(FilterRegistrationBean validationFilter)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对HttpServletRequestWrapper的一些国战</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequestWrapperFilter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureHttpServletRequestWrapperFilter</span><span class="params">(FilterRegistrationBean httpServletRequestWrapperFilter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.configureHttpServletRequestWrapperFilter(httpServletRequestWrapperFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * casAssertionThreadLocalFilter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> assertionThreadLocalFilter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAssertionThreadLocalFilter</span><span class="params">(FilterRegistrationBean assertionThreadLocalFilter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.configureAssertionThreadLocalFilter(assertionThreadLocalFilter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处，<strong>ignorePattern</strong>属性用于忽略路径，因此默认是政策表达式判断规则，所以使用“|”符号进行分割，我们在做成从配置文件获取时。</p>
<p>参考文中还提到使用<strong>ignoreUrlPatternType</strong>属性来通过规则过滤路径，该参数值是一个策略类的完全限定名。用于解析ignorePattern属性值是否匹配的。</p>
<h4 id="规则匹配策略类"><a href="#规则匹配策略类" class="headerlink" title="规则匹配策略类"></a>规则匹配策略类</h4><p>它是cas-client-core包提供的一个接口UrlPatternMatcherStrategy，下面有3个实现类，分别为ExactUrlPatternMatcherStrategy全等策略、ContainsPatternUrlPatternMatcherStrategy包含策略、RegexUrlPatternMatcherStrategy正则表达式策略。</p>
<p>我们完全可以自己实现这个接口，参考文中在第10、11章继承了第9章自己写的starter可以看到。</p>
<p>ignorePattern属性是setPattern实现方法的参数表示规则，</p>
<p>而matches实现方法的url是所有请求的路径，它的值是回调地址，如<code>http://www.cgq-client2.com:9001/inMemory</code>，所以可能需要进行对相对路径进行过滤。</p>
<p>默认使用正则表达式进行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexUrlPatternMatcherStrategy</span> <span class="keyword">implements</span> <span class="title">UrlPatternMatcherStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pattern pattern;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegexUrlPatternMatcherStrategy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegexUrlPatternMatcherStrategy</span><span class="params">(<span class="keyword">final</span> String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setPattern(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此处url为回调地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(<span class="keyword">final</span> String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pattern.matcher(url).find();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此处为配置的ignorePattern属性值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPattern</span><span class="params">(<span class="keyword">final</span> String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pattern = Pattern.compile(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>关于其他的属性通过CasClientConfigurerAdapter往深入找都能找到。例如在<code>ConfigurationKeys</code>接口类中配置了所有的默认常量值，包括ignorePattern(null)和ignoreUrlPatternType(REGEX)</p>
<p>关键类ConfigurationKeys、AuthenticationFilter</p>
<blockquote>
<p>](<a href="https://blog.csdn.net/qq_34021712/article/details/81486699">https://blog.csdn.net/qq_34021712/article/details/81486699</a>)</p>
</blockquote>
<h3 id="登出CAS"><a href="#登出CAS" class="headerlink" title="登出CAS"></a>登出CAS</h3><p>这个是默认的登出，实际上会默认跳转到登出页面，若不设置重定向则默认是空白</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 登出</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> cgq</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2021/4/24</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;logout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    HttpSession session = request.getSession();</span><br><span class="line">    session.invalidate();</span><br><span class="line">    System.out.println(<span class="string">&quot;登出系统&quot;</span>);</span><br><span class="line">    <span class="comment">// 跳转到登出页面</span></span><br><span class="line">    response.sendRedirect(<span class="string">&quot;http://www.cgq-server.com:8080/cas/logout&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="跳转到指定页面"><a href="#跳转到指定页面" class="headerlink" title="跳转到指定页面"></a>跳转到指定页面</h4><p>以下是cas提供的登出配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置单点登出</span></span><br><span class="line"><span class="comment">#配置允许登出后跳转到指定页面</span></span><br><span class="line"><span class="meta">cas.logout.followServiceRedirects</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#跳转到指定页面需要的参数名为 service</span></span><br><span class="line"><span class="meta">cas.logout.redirectParameter</span>=<span class="string">service</span></span><br><span class="line"><span class="comment">#登出后需要跳转到的地址,如果配置该参数,service将无效。</span></span><br><span class="line"><span class="meta">cas.logout.redirectUrl</span>=<span class="string">https://www.taobao.com</span></span><br><span class="line"><span class="comment">#在退出时是否需要 确认退出提示   true弹出确认提示框  false直接退出</span></span><br><span class="line"><span class="meta">cas.logout.confirmLogout</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否移除子系统的票据</span></span><br><span class="line"><span class="meta">cas.logout.removeDescendantTickets</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#禁用单点登出,默认是false不禁止</span></span><br><span class="line"><span class="comment">#cas.slo.disabled=true</span></span><br><span class="line"><span class="comment">#默认异步通知客户端,清除session</span></span><br><span class="line"><span class="comment">#cas.slo.asynchronous=true</span></span><br></pre></td></tr></table></figure>

<p>我们在server端配置以下信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置允许登出后跳转到指定页面</span></span><br><span class="line"><span class="meta">cas.logout.followServiceRedirects</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#跳转到指定页面需要的参数名为 service</span></span><br><span class="line"><span class="meta">cas.logout.redirectParameter</span>=<span class="string">service</span></span><br><span class="line"><span class="comment">#在退出时是否需要 确认一下  true确认 false直接退出</span></span><br><span class="line"><span class="meta">cas.logout.confirmLogout</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#是否移除子系统的票据</span></span><br><span class="line"><span class="meta">cas.logout.removeDescendantTickets</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>修改一下重定向地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(&quot;http:&#x2F;&#x2F;www.cgq-server.com:8080&#x2F;cas&#x2F;logout?service&#x3D;http:&#x2F;&#x2F;www.cgq-server.com:8081&#x2F;oneMap&quot;);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，尽管是登出，service的登出地址也需要在cas server中注册过。</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/qq_34021712/article/details/81515317">cas5.3.2单点登录-单点登出(十一)</a></p>
</blockquote>
<h2 id="四、返回自定义用户信息给客户端"><a href="#四、返回自定义用户信息给客户端" class="headerlink" title="四、返回自定义用户信息给客户端"></a>四、返回自定义用户信息给客户端</h2><p>只有CAS3协议才会有信息打印出来</p>
<p>在server中配置对应服务的json，添加如下属性</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;attributeReleasePolicy&quot; : &#123;</span><br><span class="line">    &quot;@class&quot; : &quot;org.apereo.cas.services.ReturnAllAttributeReleasePolicy&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>并在客户端中获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">index</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取cas给我们传递回来的对象，这个东西放到了session中，session的 key是 _const_cas_assertion_</span></span><br><span class="line">        Object attribute = request.getSession(<span class="keyword">true</span>).getAttribute(AbstractCasFilter.CONST_CAS_ASSERTION);</span><br><span class="line">        <span class="keyword">if</span> (attribute <span class="keyword">instanceof</span> Assertion)&#123;</span><br><span class="line">            Assertion assertion = (Assertion) attribute;</span><br><span class="line">            <span class="comment">// 获取登录用户名</span></span><br><span class="line">            String name = assertion.getPrincipal().getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名为:&quot;</span> + name);</span><br><span class="line">            <span class="keyword">if</span> (request.getUserPrincipal()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                AttributePrincipal  principal = (AttributePrincipal) request.getUserPrincipal();</span><br><span class="line">                <span class="comment">// cas传递过来的数据</span></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * credentialType:UsernamePasswordCredential</span></span><br><span class="line"><span class="comment">                 * isFromNewLogin:true</span></span><br><span class="line"><span class="comment">                 * authenticationDate:2021-04-24T17:05:07.719+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="comment">                 * authenticationMethod:Login</span></span><br><span class="line"><span class="comment">                 * successfulAuthenticationHandlers:Login</span></span><br><span class="line"><span class="comment">                 * longTermAuthenticationRequestTokenUsed:false</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                Map&lt;String, Object&gt; attributes = principal.getAttributes();</span><br><span class="line">                attributes.forEach((k,v)-&gt;&#123;</span><br><span class="line">                    System.out.println(k+<span class="string">&quot;:&quot;</span>+v);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><a href="https://apereo.github.io/cas/5.3.x/integration/Attribute-Release-Policies.html">https://apereo.github.io/cas/5.3.x/integration/Attribute-Release-Policies.html</a></p>
<h2 id="五、动态添加客户端"><a href="#五、动态添加客户端" class="headerlink" title="五、动态添加客户端"></a>五、动态添加客户端</h2><p><a href="https://blog.csdn.net/qq_34021712/article/details/81638090">https://blog.csdn.net/qq_34021712/article/details/81638090</a></p>
<h2 id="六、Oauth认证"><a href="#六、Oauth认证" class="headerlink" title="六、Oauth认证"></a>六、Oauth认证</h2><h3 id="server端处理"><a href="#server端处理" class="headerlink" title="server端处理"></a>server端处理</h3><p>在server处添加oauth的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apereo.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-server-support-oauth-webflow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cas.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>增加application.properies配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此处设置cas.server地址，否则跳转到cas.expamle.org</span></span><br><span class="line"><span class="meta">cas.server.name</span>=<span class="string">http://localhost:8080</span></span><br><span class="line"><span class="meta">cas.server.prefix</span>=<span class="string">http://localhost:8080/cas</span></span><br><span class="line"><span class="meta">cas.tgc.secure</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># oauth属性设置</span></span><br><span class="line"><span class="meta">cas.authn.oauth.refreshToken.timeToKillInSeconds</span>=<span class="string">2592000</span></span><br><span class="line"><span class="meta">cas.authn.oauth.code.timeToKillInSeconds</span>=<span class="string">30</span></span><br><span class="line"><span class="meta">cas.authn.oauth.code.numberOfUses</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">cas.authn.oauth.accessToken.releaseProtocolAttributes</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">cas.authn.oauth.accessToken.timeToKillInSeconds</span>=<span class="string">7200</span></span><br><span class="line"><span class="meta">cas.authn.oauth.accessToken.maxTimeToLiveInSeconds</span>=<span class="string">28800</span></span><br><span class="line"><span class="meta">cas.authn.oauth.grants.resourceOwner.requireServiceHeader</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">cas.authn.oauth.userProfileViewType</span>=<span class="string">NESTED</span></span><br></pre></td></tr></table></figure>

<p>添加services json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@class&quot;</span> : <span class="string">&quot;org.apereo.cas.support.oauth.services.OAuthRegisteredService&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;clientId&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;clientSecret&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;serviceId&quot;</span> : <span class="string">&quot;^(https|http|imaps)://.*&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;OAuthService&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span> : <span class="number">1001</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处@class变为<code>OAuthRegisteredService</code></p>
<h3 id="浏览器测试"><a href="#浏览器测试" class="headerlink" title="浏览器测试"></a>浏览器测试</h3><ol>
<li><p>通过浏览器 GET  <a href="http://localhost:8080/cas/oauth2.0/authorize?response_type=code&amp;client_id=admin&amp;redirect_uri=http://www.baidu.com">http://localhost:8080/cas/oauth2.0/authorize?response_type=code&amp;client_id=admin&amp;redirect_uri=http://www.baidu.com</a></p>
<p>访问后需要进行登录然后重定向到回调页面并在url包含一个code参数。</p>
</li>
<li><p>通过返回code获取accessToken POST localhost:8080/cas/oauth2.0/accessToken</p>
<p>grant_type:authorization_code<br>client_id:admin<br>client_secret:admin<br>code:OC-3-HgFi8mxwU6ND0LqhMdo2ieiLh29i3jZr<br>redirect_uri:<a href="http://www.baidu.com">http://www.baidu.com</a></p>
<p>返回类似<code>access_token=AT-1-wOEITA7wsvFY3yMnr9wdXK34mnbvcIA1&amp;expires_in=28800</code>信息</p>
</li>
<li><p>获取用户信息 GET <a href="http://localhost:8080/cas/oauth2.0/profile?access_token=AT-1-wOEITA7wsvFY3yMnr9wdXK34mnbvcIA1">http://localhost:8080/cas/oauth2.0/profile?access_token=AT-1-wOEITA7wsvFY3yMnr9wdXK34mnbvcIA1</a></p>
</li>
</ol>
<blockquote>
<p>参考：</p>
<p><a href="https://blog.csdn.net/qq_34021712/article/details/82290876"></a></p>
<p><a href="https://apereo.github.io/cas/5.3.x/installation/OAuth-OpenId-Authentication.html"></a></p>
</blockquote>
<h2 id="七、openId认证"><a href="#七、openId认证" class="headerlink" title="七、openId认证"></a>七、openId认证</h2><p><a href="https://apereo.github.io/cas/5.3.x/protocol/OpenID-Protocol.html">https://apereo.github.io/cas/5.3.x/protocol/OpenID-Protocol.html</a></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="CAS-不同域名-不同端口无法共享cookie"><a href="#CAS-不同域名-不同端口无法共享cookie" class="headerlink" title="CAS 不同域名 不同端口无法共享cookie"></a>CAS 不同域名 不同端口无法共享cookie</h3><h3 id="使用域名后，系统重启还需要再次登录"><a href="#使用域名后，系统重启还需要再次登录" class="headerlink" title="使用域名后，系统重启还需要再次登录"></a>使用域名后，系统重启还需要再次登录</h3><h2 id="cas-client-autoconfig-support解析"><a href="#cas-client-autoconfig-support解析" class="headerlink" title="cas-client-autoconfig-support解析"></a>cas-client-autoconfig-support解析</h2>]]></content>
      <categories>
        <category>SSO</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA搭建及构建mybatis源码</title>
    <url>/2021/04/18/MyBatis/IDEA%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%9E%84%E5%BB%BAmybatis%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p><a href="https://github.com/mybatis/mybatis-3/archive/refs/tags/mybatis-3.5.6.zip">此处github下载mybatis3.5.6源码</a></p>
<p>使用IDEA创建一个标准的maven项目</p>
<p>删除maven项目的src，将创建的项目作为parent项目。</p>
<p>将下载的mybatis源码拷贝到项目根目录中，作为其子模块。</p>
<p>我们打开项目的<code>project structure</code>项目管理工具，</p>
<ol>
<li>点击modules，</li>
<li>点击加号，</li>
<li>点import modules 添加myabtis源码所在的目录，</li>
<li>选择maven导入</li>
</ol>
<p>点击parent项目右键，创建一个新模块作为测试模块。</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
  </entry>
  <entry>
    <title>MyBatis初始化解析Mybatis-Config.xml文件</title>
    <url>/2021/04/18/MyBatis/MyBatis%E5%88%9D%E5%A7%8B%E5%8C%96%E8%A7%A3%E6%9E%90Mybatis-Config.xml%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>在解析mybatis-config.xml配置文件中，使用了XMLConfigBuilder类来处理解析配置文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">    SqlSessionFactory sessionFactory = builder.build(Resources.getResourceAsReader(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">    SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    <span class="keyword">int</span> count = mapper.count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cgq.mapper.BlogMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select count(*) from time_zone_name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mysql?serverTimezone=Asia/Shanghai&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;com/cgq/mapper/BlogMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper class=&quot;com.cgq.mapper.BlogMapper&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;http://localhost/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上代码表示一个示例。我们可以一步步来分析是怎么处理的。</p>
<p>首先代码是通过实例化SqlSessionFactoryBuilder类，来构建一个SqlSessionFactory。</p>
<p>我们需要了解这个SqlSessionFactory是怎么构建出来？</p>
<p>是如何解析mybatis-config.xml配置文件的？</p>
<h3 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h3><p>首先我们进入SqlSessionFactoryBuilder类，该类只提供了build方法，并进行不同方式的重载。其最终是以不同方式获取到配置文件的信息。</p>
<p>build方法的代码只有两行，主要的解析都在XMLConfigBuilder类中，他是处理整个配置文件的核心类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化一个XmlConfigBuilder</span></span><br><span class="line">XMLConfigBuilder parser = <span class="keyword">new</span> XMLConfigBuilder(reader, environment, properties);</span><br><span class="line"><span class="comment">// 解析配置文件得到的Configuration对象，创建defaultSqlSessionFactory对象</span></span><br><span class="line"><span class="keyword">return</span> build(parser.parse());</span><br></pre></td></tr></table></figure>



<h3 id="XMLConfigBuilder"><a href="#XMLConfigBuilder" class="headerlink" title="XMLConfigBuilder"></a>XMLConfigBuilder</h3><p>该类继承自BaseBuilder抽象类，并且可以知道，它使用了建造者模式，他有多个实现类，后面会讲到。</p>
<p>我们首先要知道它从父类那里继承了Configuration、TypeAliasRegistry、TypeHandlerRegistry这三个属性。</p>
<p>它们分别表示</p>
<ul>
<li>Configuration: mybatis初始化时的核心对象，保存几乎所有配置。在初始化时创建且全局只有一个。</li>
<li>TypeAliasRegistry：类型别名注册器，它存储了所有Class与其对应的别名。类中使用一个HashMap来存储</li>
<li>TypeHandlerRegistry：类型处理注册器，主要处理java类型与jdbc类型的映射关系信息</li>
</ul>
<p>除了从父类继承的属性，还包含自身的属性，</p>
<ul>
<li>parsed：是否已经解析过mybatis-config.xml文件</li>
<li>parser：由ibatis封装的XpathParser类型的XML解析器</li>
<li>enviroment：当前读取的enviroments节点中的default属性的值，表示默认环境名称</li>
<li>localReflectorFactory：反射器工厂，反射器是ibatis的反射模块的基础，每个Reflector对象对应一个类，存储了反射所需要的类的元信息等。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">XMLConfigBuilder</span><span class="params">(XPathParser parser, String environment, Properties props)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="keyword">new</span> Configuration());</span><br><span class="line">    ErrorContext.instance().resource(<span class="string">&quot;SQL Mapper Configuration&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.configuration.setVariables(props);</span><br><span class="line">    <span class="keyword">this</span>.parsed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.environment = environment;</span><br><span class="line">    <span class="keyword">this</span>.parser = parser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseBuilder</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.configuration = configuration;</span><br><span class="line">    <span class="keyword">this</span>.typeAliasRegistry = <span class="keyword">this</span>.configuration.getTypeAliasRegistry();</span><br><span class="line">    <span class="keyword">this</span>.typeHandlerRegistry = <span class="keyword">this</span>.configuration.getTypeHandlerRegistry();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这个是XmlConfigBuilder的构造函数，super(new Configuration());初始化了Configuration对象，父类将调用configuration属性的getTypeAliasRegistry()和getTypeHandlerRegistry()；</p>
<p>其中TypeAliasRegistry中的数据Configuration初始化的时候就将已知默认的别名注册到注册器中；TypeHandlerRegistry则在创建自身的时候在构造函数里注册已知默认的类型处理器。</p>
<p>最后是调用parse方法，这里面调用了parseConfiguration()方法来解析整个配置文件。</p>
<h3 id="parseConfiguration"><a href="#parseConfiguration" class="headerlink" title="parseConfiguration"></a>parseConfiguration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析Configuration配置文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseConfiguration</span><span class="params">(XNode root)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 解析properties节点</span></span><br><span class="line">    <span class="comment">// issue #117 read properties first</span></span><br><span class="line">    propertiesElement(root.evalNode(<span class="string">&quot;properties&quot;</span>));</span><br><span class="line">    <span class="comment">// 解析setting节点</span></span><br><span class="line">    Properties settings = settingsAsProperties(root.evalNode(<span class="string">&quot;settings&quot;</span>));</span><br><span class="line">    <span class="comment">// 设置vfsImpl字段</span></span><br><span class="line">    loadCustomVfs(settings);</span><br><span class="line">    <span class="comment">//设置logImpl</span></span><br><span class="line">    loadCustomLogImpl(settings);</span><br><span class="line">    <span class="comment">// 解析typeAliases节点</span></span><br><span class="line">    typeAliasesElement(root.evalNode(<span class="string">&quot;typeAliases&quot;</span>));</span><br><span class="line">    <span class="comment">// 解析plugins节点</span></span><br><span class="line">    pluginElement(root.evalNode(<span class="string">&quot;plugins&quot;</span>));</span><br><span class="line">    <span class="comment">// 解析objectFactory节点</span></span><br><span class="line">    objectFactoryElement(root.evalNode(<span class="string">&quot;objectFactory&quot;</span>));</span><br><span class="line">    <span class="comment">// 解析 objectWrapperFactory节点</span></span><br><span class="line">    objectWrapperFactoryElement(root.evalNode(<span class="string">&quot;objectWrapperFactory&quot;</span>));</span><br><span class="line">    <span class="comment">// 解析reflectorFactory节点</span></span><br><span class="line">    reflectorFactoryElement(root.evalNode(<span class="string">&quot;reflectorFactory&quot;</span>));</span><br><span class="line">    <span class="comment">// 将settings设置到configuration</span></span><br><span class="line">    settingsElement(settings);</span><br><span class="line">    <span class="comment">// 解析environments节点</span></span><br><span class="line">    <span class="comment">// read it after objectFactory and objectWrapperFactory issue #631</span></span><br><span class="line">    environmentsElement(root.evalNode(<span class="string">&quot;environments&quot;</span>));</span><br><span class="line">    <span class="comment">// 解析databaseIdProvider节点</span></span><br><span class="line">    databaseIdProviderElement(root.evalNode(<span class="string">&quot;databaseIdProvider&quot;</span>));</span><br><span class="line">    <span class="comment">// 解析typeHandlers节点</span></span><br><span class="line">    typeHandlerElement(root.evalNode(<span class="string">&quot;typeHandlers&quot;</span>));</span><br><span class="line">    <span class="comment">// 解析mappers节点</span></span><br><span class="line">    mapperElement(root.evalNode(<span class="string">&quot;mappers&quot;</span>));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BuilderException(<span class="string">&quot;Error parsing SQL Mapper Configuration. Cause: &quot;</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法中通过多个对应的方法分别对各个节点进行解析。</p>
<p>XNode也是ibatis解析模块中重要的类，它有众多的xml解析方法，是作为ibatis基础模块。</p>
<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>解析该节点的是propertiesElement方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析properties节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">propertiesElement</span><span class="params">(XNode context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (context != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取properties节点下子节点信息并组成Properties对象</span></span><br><span class="line">    Properties defaults = context.getChildrenAsProperties();</span><br><span class="line">    <span class="comment">// 获取resource属性</span></span><br><span class="line">    String resource = context.getStringAttribute(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取url属性</span></span><br><span class="line">    String url = context.getStringAttribute(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    <span class="comment">// 根据不同类型使用不用的解析方式，一个在类路径下载，一个是url的方式</span></span><br><span class="line">    <span class="keyword">if</span> (resource != <span class="keyword">null</span> &amp;&amp; url != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BuilderException(<span class="string">&quot;The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resource != <span class="keyword">null</span>) &#123;</span><br><span class="line">      defaults.putAll(Resources.getResourceAsProperties(resource));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url != <span class="keyword">null</span>) &#123;</span><br><span class="line">      defaults.putAll(Resources.getUrlAsProperties(url));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// configuration的variables是否有值</span></span><br><span class="line">    Properties vars = configuration.getVariables();</span><br><span class="line">    <span class="keyword">if</span> (vars != <span class="keyword">null</span>) &#123;</span><br><span class="line">      defaults.putAll(vars);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将属性设置XNodeParser</span></span><br><span class="line">    parser.setVariables(defaults);</span><br><span class="line">    <span class="comment">// 将解析的properties重新设置到configuration中</span></span><br><span class="line">    configuration.setVariables(defaults);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法即获取properties解析下子节点property的信息封装成Properties对象，再解析节点属性resource或url，将其合并。将结果设置给Configuration对象。</p>
<h3 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * settings节点属性检查</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Properties <span class="title">settingsAsProperties</span><span class="params">(XNode context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Properties();</span><br><span class="line">  &#125;</span><br><span class="line">  Properties props = context.getChildrenAsProperties();</span><br><span class="line">  <span class="comment">// Check that all settings are known to the configuration class</span></span><br><span class="line">  MetaClass metaConfig = MetaClass.forClass(Configuration.class, localReflectorFactory);</span><br><span class="line">  <span class="keyword">for</span> (Object key : props.keySet()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!metaConfig.hasSetter(String.valueOf(key))) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BuilderException(<span class="string">&quot;The setting &quot;</span> + key + <span class="string">&quot; is not known.  Make sure you spelled it correctly (case sensitive).&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> props;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法检查settings的属性是否合规，在settings里的全部的key属性都在configuration的属性中存储。MetaClass.forClass检查Configuration的元信息，并检查是否有key的这个setter方法，如果没有则会报错，无法进行下去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">settingsElement</span><span class="params">(Properties props)</span> </span>&#123;</span><br><span class="line">  configuration.setAutoMappingBehavior(AutoMappingBehavior.valueOf(props.getProperty(<span class="string">&quot;autoMappingBehavior&quot;</span>, <span class="string">&quot;PARTIAL&quot;</span>)));</span><br><span class="line">  configuration.setAutoMappingUnknownColumnBehavior(AutoMappingUnknownColumnBehavior.valueOf(props.getProperty(<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span>, <span class="string">&quot;NONE&quot;</span>)));</span><br><span class="line">  configuration.setCacheEnabled(booleanValueOf(props.getProperty(<span class="string">&quot;cacheEnabled&quot;</span>), <span class="keyword">true</span>));</span><br><span class="line">  configuration.setProxyFactory((ProxyFactory) createInstance(props.getProperty(<span class="string">&quot;proxyFactory&quot;</span>)));</span><br><span class="line">  configuration.setLazyLoadingEnabled(booleanValueOf(props.getProperty(<span class="string">&quot;lazyLoadingEnabled&quot;</span>), <span class="keyword">false</span>));</span><br><span class="line">  configuration.setAggressiveLazyLoading(booleanValueOf(props.getProperty(<span class="string">&quot;aggressiveLazyLoading&quot;</span>), <span class="keyword">false</span>));</span><br><span class="line">  configuration.setMultipleResultSetsEnabled(booleanValueOf(props.getProperty(<span class="string">&quot;multipleResultSetsEnabled&quot;</span>), <span class="keyword">true</span>));</span><br><span class="line">  configuration.setUseColumnLabel(booleanValueOf(props.getProperty(<span class="string">&quot;useColumnLabel&quot;</span>), <span class="keyword">true</span>));</span><br><span class="line">  configuration.setUseGeneratedKeys(booleanValueOf(props.getProperty(<span class="string">&quot;useGeneratedKeys&quot;</span>), <span class="keyword">false</span>));</span><br><span class="line">  configuration.setDefaultExecutorType(ExecutorType.valueOf(props.getProperty(<span class="string">&quot;defaultExecutorType&quot;</span>, <span class="string">&quot;SIMPLE&quot;</span>)));</span><br><span class="line">  configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty(<span class="string">&quot;defaultStatementTimeout&quot;</span>), <span class="keyword">null</span>));</span><br><span class="line">  configuration.setDefaultFetchSize(integerValueOf(props.getProperty(<span class="string">&quot;defaultFetchSize&quot;</span>), <span class="keyword">null</span>));</span><br><span class="line">  configuration.setDefaultResultSetType(resolveResultSetType(props.getProperty(<span class="string">&quot;defaultResultSetType&quot;</span>)));</span><br><span class="line">  configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty(<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span>), <span class="keyword">false</span>));</span><br><span class="line">  configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty(<span class="string">&quot;safeRowBoundsEnabled&quot;</span>), <span class="keyword">false</span>));</span><br><span class="line">  configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty(<span class="string">&quot;localCacheScope&quot;</span>, <span class="string">&quot;SESSION&quot;</span>)));</span><br><span class="line">  configuration.setJdbcTypeForNull(JdbcType.valueOf(props.getProperty(<span class="string">&quot;jdbcTypeForNull&quot;</span>, <span class="string">&quot;OTHER&quot;</span>)));</span><br><span class="line">  configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty(<span class="string">&quot;lazyLoadTriggerMethods&quot;</span>), <span class="string">&quot;equals,clone,hashCode,toString&quot;</span>));</span><br><span class="line">  configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty(<span class="string">&quot;safeResultHandlerEnabled&quot;</span>), <span class="keyword">true</span>));</span><br><span class="line">  configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty(<span class="string">&quot;defaultScriptingLanguage&quot;</span>)));</span><br><span class="line">  configuration.setDefaultEnumTypeHandler(resolveClass(props.getProperty(<span class="string">&quot;defaultEnumTypeHandler&quot;</span>)));</span><br><span class="line">  configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty(<span class="string">&quot;callSettersOnNulls&quot;</span>), <span class="keyword">false</span>));</span><br><span class="line">  configuration.setUseActualParamName(booleanValueOf(props.getProperty(<span class="string">&quot;useActualParamName&quot;</span>), <span class="keyword">true</span>));</span><br><span class="line">  configuration.setReturnInstanceForEmptyRow(booleanValueOf(props.getProperty(<span class="string">&quot;returnInstanceForEmptyRow&quot;</span>), <span class="keyword">false</span>));</span><br><span class="line">  configuration.setLogPrefix(props.getProperty(<span class="string">&quot;logPrefix&quot;</span>));</span><br><span class="line">  configuration.setConfigurationFactory(resolveClass(props.getProperty(<span class="string">&quot;configurationFactory&quot;</span>)));</span><br><span class="line">  configuration.setShrinkWhitespacesInSql(booleanValueOf(props.getProperty(<span class="string">&quot;shrinkWhitespacesInSql&quot;</span>), <span class="keyword">false</span>));</span><br><span class="line">  configuration.setDefaultSqlProviderType(resolveClass(props.getProperty(<span class="string">&quot;defaultSqlProviderType&quot;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个是真正的设置方法，直接使用setter方法设置，并设置默认值</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
  </entry>
  <entry>
    <title>Java集合</title>
    <url>/2021/04/16/Java/2021-04-16-Java%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><h2 id="Arraylist"><a href="#Arraylist" class="headerlink" title="Arraylist"></a>Arraylist</h2><p>内部通过数组实现，允许对元素进行快速随机访问。</p>
<p>当大小不满足时需要增加存储能力，将已有数组的数据复制到新的存储空间中。</p>
<p>每次增删改都通过System.arraycopy移动数据</p>
<p>非索引查找都需要循环</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>无参构造函数初始化数组长度为0，在第一次add时拓展为长度为10的数组</p>
<p>有参构造函数,初始化一个长度为n的数组</p>
<h3 id="add-element"><a href="#add-element" class="headerlink" title="add(element)"></a>add(element)</h3><p>如果已有数据量大于数组容量则进行拓展</p>
<ol>
<li><p>通过原数据量+1 得到目前最小容量</p>
</li>
<li><p>增加修改次数</p>
</li>
<li><p>如果这个最小容量 小于 当前数组的长度则进行数组拓展拷贝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">	grow(minCapacity);</span><br></pre></td></tr></table></figure>
</li>
<li><p>(grow)拓展 以数组大小 右偏移一位，即(e+e/2)长度进行新数据拷贝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">	newCapacity = minCapacity;</span><br><span class="line">elementData = Arrays.copyOf(elementData, newCapacity);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="add-index-element"><a href="#add-index-element" class="headerlink" title="add(index,element)"></a>add(index,element)</h3><p>只比add(element)多了元素的移动方法</p>
<ol>
<li>验证是否数组越界</li>
<li>是否拓展数组</li>
<li>使用System.arraycopy()方法，将原index位置之后的数据向后移1位</li>
<li>插入index位置的数据</li>
</ol>
<h3 id="addAll-collection"><a href="#addAll-collection" class="headerlink" title="addAll(collection)"></a>addAll(collection)</h3><ol>
<li>获取插入这些数据所需最小容量，与数组长度比较是否需要拓展</li>
<li>将元素拷贝到已有元素的后面</li>
</ol>
<h3 id="addAll-collection-1"><a href="#addAll-collection-1" class="headerlink" title="addAll(collection)"></a>addAll(collection)</h3><p>方式与add(index,element)相同</p>
<h3 id="remove-index"><a href="#remove-index" class="headerlink" title="remove(index)"></a>remove(index)</h3><p>使用System.arraycopy将index后的数据向前移一位，(size-1)位置设置为null</p>
<h3 id="remove-object"><a href="#remove-object" class="headerlink" title="remove(object)"></a>remove(object)</h3><p><strong>需要循环数组</strong></p>
<p>找到元素位置后,单个索引快速移除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="removeAll-collection"><a href="#removeAll-collection" class="headerlink" title="removeAll(collection)"></a>removeAll(collection)</h3><p>将原有数据里不在 要删除collection中的，依次放入这个数组中，进行数据拷贝并将删除的位置置空</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">            <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</span><br><span class="line">                elementData[w++] = elementData[r];</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></span><br><span class="line">        <span class="comment">// even if c.contains() throws.</span></span><br><span class="line">        <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">            System.arraycopy(elementData, r,</span><br><span class="line">                             elementData, w,</span><br><span class="line">                             size - r);</span><br><span class="line">            w += size - r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">            <span class="comment">// clear to let GC do its work</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</span><br><span class="line">                elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">            modCount += size - w;</span><br><span class="line">            size = w;</span><br><span class="line">            modified = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="拓展方法"><a href="#拓展方法" class="headerlink" title="拓展方法"></a>拓展方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> * 返回 要插入当前元素需要的最小容量</span><br><span class="line"> * <span class="meta">@param</span> elementData</span><br><span class="line"> * <span class="meta">@param</span> minCapacity</span><br><span class="line"> * <span class="meta">@return</span></span><br><span class="line"> */</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 保证内部容量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据所需容量和数组的长度，判断是否需要拓展</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>链式结构，内部使用Node进行连接，有pre、next、item属性进行前后连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Pointer to first node.</span></span><br><span class="line"><span class="comment">     * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment">     *            (first.prev == null &amp;&amp; first.item != null)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Pointer to last node.</span></span><br><span class="line"><span class="comment">     * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment">     *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a list containing the elements of the specified</span></span><br><span class="line"><span class="comment">     * collection, in the order they are returned by the collection&#x27;s</span></span><br><span class="line"><span class="comment">     * iterator.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>内部维护了一个HashMap，值的存储作为HashMap的key，值统一为Object。iterator就是hashMap的keySet。</p>
<p>包括添加删除都是HashMap的方法。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>yml与properties文件的解析及如何存储</title>
    <url>/2021/04/15/SpringBoot/yml%E4%B8%8Eproperties%E6%96%87%E4%BB%B6%E7%9A%84%E8%A7%A3%E6%9E%90%E5%8F%8A%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>openFeign相关问题</title>
    <url>/2021/04/14/SpringCloud/openFeign%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="全局Feign增加请求头"><a href="#全局Feign增加请求头" class="headerlink" title="全局Feign增加请求头"></a>全局Feign增加请求头</h3><p>增加token的Authorization请求头</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局的feign调用使用的配置类</span></span><br><span class="line"><span class="comment"> * 1.无法获取attributes的问题，是hystrix机制的隔离策略。最终发现RequestContextHolder.getRequestAttributes()该方法是从ThreadLocal</span></span><br><span class="line"><span class="comment"> * 需要修改配置即可hystrix.command.default.execution.isolation.strategy: SEMAPHORE,但不推荐设置此值</span></span><br><span class="line"><span class="comment"> * 当隔离策略为 THREAD 时，是没办法拿到 ThreadLocal 中的值的。</span></span><br><span class="line"><span class="comment"> * 2. 可自定义配置策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> FeignHystrixConcurrencyStrategy https://blog.csdn.net/crystalqy/article/details/79083857</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cgq_r</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalFeignConfiguration</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate requestTemplate)</span> </span>&#123;</span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes)</span><br><span class="line">                RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="keyword">if</span> (attributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            HttpServletRequest request = attributes.getRequest();</span><br><span class="line">            Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">            <span class="keyword">if</span> (headerNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">                    String name = headerNames.nextElement();</span><br><span class="line">                    <span class="keyword">if</span> (Constants.TOKEN_HEADER.toLowerCase().equals(name)) &#123;</span><br><span class="line">                        requestTemplate.header(Constants.TOKEN_HEADER, request.getHeader(name));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            requestTemplate.header(Constants.GATEWAY_NAME,<span class="keyword">new</span> String(Base64Utils.encode(Constants.GATEWAY_VALUE.getBytes())));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Feign调用出现中文乱码问题"><a href="#Feign调用出现中文乱码问题" class="headerlink" title="Feign调用出现中文乱码问题"></a>Feign调用出现中文乱码问题</h3><p>可在FeignClient中的请求@GetMapping等注解添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">produces &#x3D; MediaType.APPLICATION_JSON_UTF8_VALUE, consumes &#x3D; &quot;application&#x2F;json;charset&#x3D;UTF-8&quot;</span><br></pre></td></tr></table></figure>

<p>或者在Configuration中配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决因sentinel依赖的jackjson-format-xml默认转为xml结果。设置默认结果为json类型。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> configurer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    configurer.defaultContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该代码配置默认的上下文类型为JSON，配置默认的内容格式。本来是为了解决意外转换为xml的问题。此处也可以解决。</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>docker-compose相关操作</title>
    <url>/2021/04/13/Docker/docker-compose%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Java 设计模式</title>
    <url>/2021/04/13/Java/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>jackson ObjectMapper相关说明</title>
    <url>/2021/04/13/Spring/ObjectMapper%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">om.setVisibility(PropertyAccessor.ALL, Visibility.ANY);</span><br><span class="line">om.enableDefaultTyping(DefaultTyping.NON_FINAL);</span><br><span class="line">jackson2JsonRedisSerializer.setObjectMapper(om);</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;java.util.ArrayList&quot;</span>,[<span class="string">&quot;asd&quot;</span>,<span class="string">&quot;zxc&quot;</span>]]</span><br></pre></td></tr></table></figure>

<p>ObjectMapper的enableDefaultTyping方法用来指定序列化对象的默认类型，当其值为<code>DefaultTyping.NON_FINAL</code>是，将会为(String、Boolean、Integer、Double)除外的其他类型及非final类型的数组添加反序列化所需要的类型。</p>
<p>例如List序列化时，会为序列化字符串添加反序列化需要的完全限定名。</p>
<h2 id="enableDefaultTyping"><a href="#enableDefaultTyping" class="headerlink" title="enableDefaultTyping"></a>enableDefaultTyping</h2><p>可以认为是序列化是，添加复杂类型的默认类型，以便反序列化时可以精确类型。</p>
<p>其重载方法包含了两个参数DefaultTyping类型和JsonTypeInfo.As类型</p>
<h3 id="DefaultTyping"><a href="#DefaultTyping" class="headerlink" title="DefaultTyping"></a>DefaultTyping</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">DefaultTyping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        JAVA_LANG_OBJECT,</span><br><span class="line">        </span><br><span class="line">        OBJECT_AND_NON_CONCRETE,</span><br><span class="line"></span><br><span class="line">        NON_CONCRETE_AND_ARRAYS,</span><br><span class="line">        </span><br><span class="line">        NON_FINAL</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这四个类型的级别从上往下，返回逐渐扩大。</p>
<p>这几个类型都不会对（String、Boolean、Integer、Double）进行设置默认类型。</p>
<h4 id="Java-LANG-OBJECT"><a href="#Java-LANG-OBJECT" class="headerlink" title="Java_LANG_OBJECT"></a>Java_LANG_OBJECT</h4><p>表示将Object类型作为声明类型的属性 设置默认类型。</p>
<p>但尽管设置Object，一般都为复杂类型的值，像基本类型和其包装类型的值(String、Boolean、Integer、Double)不会添加默认类型。像自定义对象，List，map等实际对象的都会被添加。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">856496198687642675L</span>;</span><br><span class="line">    <span class="comment">// 省略getter/setter</span></span><br><span class="line">    String name;</span><br><span class="line">    Object info;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">        <span class="comment">// 省略getter/setter</span></span><br><span class="line">		String age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>,<span class="keyword">new</span> Person.Info());</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">objectMapper.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT);</span><br><span class="line">String s = objectMapper.writeValueAsString(person);</span><br><span class="line"><span class="comment">// 打印结果为,此时已经有了默认的类型。但如果只是简单的&quot;123&quot;,则不会指明类型</span></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;info&quot;</span>:[<span class="string">&quot;com.jeeplus.config.redis.RedisConfig$Person$Info&quot;</span>,&#123;<span class="string">&quot;age&quot;</span>:<span class="keyword">null</span>&#125;]&#125;</span><br></pre></td></tr></table></figure>



<h4 id="OBJECT-AND-NON-CONCRETE"><a href="#OBJECT-AND-NON-CONCRETE" class="headerlink" title="OBJECT_AND_NON_CONCRETE"></a>OBJECT_AND_NON_CONCRETE</h4><p>当属性为Object或非具体类型(抽象类或接口)，但不包括数组类型。</p>
<p>当我们定义一个含有接口类的属性时，会设置默认类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略getter/setter</span></span><br><span class="line">Sex sex;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sex</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isMan</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">implements</span> <span class="title">Sex</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Object info, Sex sex, Sex[] sexs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.info = info;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    <span class="keyword">this</span>.sexs = sexs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>,<span class="keyword">new</span> Person.Info(),<span class="keyword">new</span> Person.Man());</span><br><span class="line">objectMapper.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT);</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;info&quot;</span>:[<span class="string">&quot;com.jeeplus.config.redis.RedisConfig$Person$Info&quot;</span>,&#123;<span class="string">&quot;age&quot;</span>:<span class="keyword">null</span>&#125;],<span class="string">&quot;sex&quot;</span>:&#123;<span class="string">&quot;man&quot;</span>:<span class="keyword">true</span>&#125;&#125;</span><br><span class="line"><span class="comment">// 设置成OBJECT_AND_NON_CONCRETE，打印如下</span></span><br><span class="line">objectMapper.enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;info&quot;</span>:[<span class="string">&quot;com.jeeplus.config.redis.RedisConfig$Person$Info&quot;</span>,&#123;<span class="string">&quot;age&quot;</span>:<span class="keyword">null</span>&#125;],<span class="string">&quot;sex&quot;</span>:[<span class="string">&quot;com.jeeplus.config.redis.RedisConfig$Person$Man&quot;</span>,&#123;<span class="string">&quot;man&quot;</span>:<span class="keyword">true</span>&#125;]&#125;</span><br></pre></td></tr></table></figure>



<h4 id="NON-CONCRETE-AND-ARRAYS"><a href="#NON-CONCRETE-AND-ARRAYS" class="headerlink" title="NON_CONCRETE_AND_ARRAYS"></a>NON_CONCRETE_AND_ARRAYS</h4><p>OBJECT_AND_NON_CONCRETE值说明了不包含array类型。此属性专门添加了array类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略setter/getter</span></span><br><span class="line">Sex[] sexs;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Object info, Sex sex, Sex[] sexs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.info = info;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    <span class="keyword">this</span>.sexs = sexs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>,<span class="keyword">new</span> Person.Info(),<span class="keyword">new</span> Person.Man(),<span class="keyword">new</span> Person.Sex[]&#123;<span class="keyword">new</span> Person.Man()&#125;);</span><br><span class="line">objectMapper.enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;info&quot;</span>:[<span class="string">&quot;com.jeeplus.config.redis.RedisConfig$Person$Info&quot;</span>,&#123;<span class="string">&quot;age&quot;</span>:<span class="keyword">null</span>&#125;],<span class="string">&quot;sex&quot;</span>:[<span class="string">&quot;com.jeeplus.config.redis.RedisConfig$Person$Man&quot;</span>,&#123;<span class="string">&quot;man&quot;</span>:<span class="keyword">true</span>&#125;],<span class="string">&quot;sexs&quot;</span>:[[<span class="string">&quot;com.jeeplus.config.redis.RedisConfig$Person$Man&quot;</span>,&#123;<span class="string">&quot;man&quot;</span>:<span class="keyword">true</span>&#125;]]&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到在sexs中只包含了Sex的类型，并未标注sexs的类型。此时更改为NON_CONCRETE_AND_ARRAYS则包含</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>,<span class="keyword">new</span> Person.Info(),<span class="keyword">new</span> Person.Man(),<span class="keyword">new</span> Person.Sex[]&#123;<span class="keyword">new</span> Person.Man()&#125;);</span><br><span class="line">objectMapper.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS);</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;info&quot;</span>:[<span class="string">&quot;com.jeeplus.config.redis.RedisConfig$Person$Info&quot;</span>,&#123;<span class="string">&quot;age&quot;</span>:<span class="keyword">null</span>&#125;],<span class="string">&quot;sex&quot;</span>:[<span class="string">&quot;com.jeeplus.config.redis.RedisConfig$Person$Man&quot;</span>,&#123;<span class="string">&quot;man&quot;</span>:<span class="keyword">true</span>&#125;],<span class="string">&quot;sexs&quot;</span>:[<span class="string">&quot;[Lcom.jeeplus.config.redis.RedisConfig$Person$Sex;&quot;</span>,[[<span class="string">&quot;com.jeeplus.config.redis.RedisConfig$Person$Man&quot;</span>,&#123;<span class="string">&quot;man&quot;</span>:<span class="keyword">true</span>&#125;]]]&#125;</span><br></pre></td></tr></table></figure>



<h4 id="NON-FINAL"><a href="#NON-FINAL" class="headerlink" title="NON_FINAL"></a>NON_FINAL</h4><p>表示将应用与除final修饰外的所有属性，以及所有非final的数组。</p>
<p>基本上Object类型和array类型及interface、abstract修饰的类。这些都足以进行序列化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//省略getter/setter</span></span><br><span class="line"><span class="keyword">final</span> String[] args = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;123&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">objectMapper.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS);</span><br><span class="line">objectMapper.enableDefaultTyping(DefaultTyping.NON_FINAL);</span><br></pre></td></tr></table></figure>

<p>我们可以看到，无论设置什么枚举值，都无法将args添加序列化类型。</p>
<h3 id="JsonTypeInfo-As"><a href="#JsonTypeInfo-As" class="headerlink" title="JsonTypeInfo.As"></a>JsonTypeInfo.As</h3><h4 id="PROPERTY"><a href="#PROPERTY" class="headerlink" title="PROPERTY"></a>PROPERTY</h4><p>它将包含@class属性，作为序列化的一个属性，值就是完全限定名类型。当前类及其属性都会添加这个名为@class的属性。</p>
<h4 id="WRAPPER-OBJECT"><a href="#WRAPPER-OBJECT" class="headerlink" title="WRAPPER_OBJECT"></a>WRAPPER_OBJECT</h4><p>将完全限定名类型直接作为key，将值作为序列化值</p>
<h4 id="WRAPPER-ARRAY"><a href="#WRAPPER-ARRAY" class="headerlink" title="WRAPPER_ARRAY"></a>WRAPPER_ARRAY</h4><p>将序列化的结果变为array类型，格式与不加JsonTypeInfo.As一致</p>
<h4 id="EXISTING-PROPERTY"><a href="#EXISTING-PROPERTY" class="headerlink" title="EXISTING_PROPERTY"></a>EXISTING_PROPERTY</h4><p>仅包含序列化内容，TypeSerializer将不会执行任何操作。与@JsonTypeId注解相似</p>
<h3 id="JsonTypeInfo-Id"><a href="#JsonTypeInfo-Id" class="headerlink" title="JsonTypeInfo.Id"></a>JsonTypeInfo.Id</h3><h4 id="NONE"><a href="#NONE" class="headerlink" title="NONE"></a>NONE</h4><p>不包括类型，仅为标准的json序列化值</p>
<h4 id="CLASS"><a href="#CLASS" class="headerlink" title="CLASS"></a>CLASS</h4><p>使用@class属性标注类型</p>
<h4 id="MINIMAL-CLASS"><a href="#MINIMAL-CLASS" class="headerlink" title="MINIMAL_CLASS"></a>MINIMAL_CLASS</h4><p>使用@c属性标注类型</p>
<h4 id="NAME"><a href="#NAME" class="headerlink" title="NAME"></a>NAME</h4><p>使用@type属性标注类型，但只有类名，不是完全限定名，需要将名称单独解析为实际的具体类型（类）。</p>
<h4 id="CUSTOM"><a href="#CUSTOM" class="headerlink" title="CUSTOM"></a>CUSTOM</h4><p>使用自定义的实现TypeSerializer和TypeDeserializer</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>社会统计学</title>
    <url>/2021/04/05/%E7%A4%BE%E4%BC%9A%E7%BB%9F%E8%AE%A1%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="定比、定距、定类、定序变量"><a href="#定比、定距、定类、定序变量" class="headerlink" title="定比、定距、定类、定序变量"></a>定比、定距、定类、定序变量</h3><p>定比数据：表现为数值，可进行加减以及精确计算数据，如身高、体重。</p>
<p>定距数据：表现为数值，有单位，可以做加减运算，不能做乘除运算。比如温度。</p>
<p>定类数据：按事物某种属性分类或分组，数字大小代表类别。如性别(男和女)。</p>
<p>定序数据：数据的中间级，用数字表示个体在某个有序状态中所处的位置，不能做四则运算。比如：对天猫的满意度如何（非常不满意、比较不满意、一般、比较满意、非常满意）</p>
<h3 id="四分位差"><a href="#四分位差" class="headerlink" title="四分位差"></a>四分位差</h3><p><strong><a href="https://baike.baidu.com/item/四分位数/5040599">四分位数</a>是将一组数据由小到大（或由大到小）排序后，用3个点将全部数据分为4等份，与这3个点位置上相对应的数值称为四分位数</strong>，分别记为Q1（第一四分位数），说明数据中有25%的数据小于或等于Q1，Q2（第二四分位数，即中位数）说明数据中有50%的数据小于或等于Q2、Q3（第三四分位数）说明数据中有75%的数据小于或等于Q3。其中，Q3到Q1之间的距离的差的一半又称为分半四分位差，记为（Q3-Q1）/2。</p>
<h4 id="未分组数据"><a href="#未分组数据" class="headerlink" title="未分组数据"></a>未分组数据</h4><p>首先对数据进行排序，求出<em>Q*</em>l<em>、</em>Q<em>3所在的位置；其次根据位置确定其对应的标志值即</em>Q*<em>l</em>、<em>Q</em>3;最后计算二者差额的一半，即就是四分位差。</p>
<p>Q1的位置= （n + 1) / 4</p>
<p>Q3的位置= 3*（n + 1) / 4</p>
<h4 id="单项式数列"><a href="#单项式数列" class="headerlink" title="单项式数列"></a>单项式数列</h4><p>先计算各组的累计次数，然后确定分位点位置。</p>
<p>Q1的位置= Σf / 4</p>
<p>Q3的位置= 3 * Σf / 4</p>
<h3 id="极差"><a href="#极差" class="headerlink" title="极差"></a>极差</h3><p>范围误差或全距。其最大值与最小值之间的差距，即最大值减最小值所得的数据</p>
<h3 id="众值"><a href="#众值" class="headerlink" title="众值"></a>众值</h3><p>众数，总体中出现次数最多的数</p>
<h3 id="偏态系数"><a href="#偏态系数" class="headerlink" title="偏态系数"></a>偏态系数</h3><p>偏差系数，说明随机系列分配不对称程度的统计参数。偏态系数绝对值越大，偏斜越严重。</p>
<p>偏态系数以平<a href="https://baike.baidu.com/item/均值">均值</a>与<a href="https://baike.baidu.com/item/中位数">中位数</a>之差对<a href="https://baike.baidu.com/item/标准差">标准差</a>之比率来衡量偏斜的程度</p>
<ul>
<li>偏态系数的取值为0时，表示数据为完全的对称分布。</li>
<li>偏态系数的取值为正数时，表示数据为正偏态或右偏态</li>
<li>偏态系数的取值为负数时，表示数据为负偏态，或左偏态</li>
</ul>
<h3 id="异众比率"><a href="#异众比率" class="headerlink" title="异众比率"></a>异众比率</h3><p>总体中非众数次数与总体全部次数之比。换句话说，异众比率指非众数组的频数占总频数的比例。</p>
<ul>
<li>异众比率主要适合测度分类数据的离散程度</li>
<li>异众比率主要用于衡量众数对一组数据的代表程度。</li>
<li>异众比率的作用是衡量<a href="https://baike.baidu.com/item/众数">众数</a>对一组数据的代表程度。</li>
</ul>
<h3 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h3><p>方差是各个数据与<a href="https://baike.baidu.com/item/平均数">平均数</a>之差的平方的和的平均数</p>
<img src="https://bkimg.cdn.bcebos.com/formula/6f45b13ca943244c18d3354f4d386497.svg">

<p>其中，x表示<a href="https://baike.baidu.com/item/样本">样本</a>的平均数，n表示样本的数量，xi表示个体，而s2就表示方差。</p>
<h3 id="标准差"><a href="#标准差" class="headerlink" title="标准差"></a>标准差</h3><p>方差的算数平方根</p>
<p>标准差也被称为标准偏差，或者实验标准差，在<a href="https://baike.baidu.com/item/概率/828845">概率</a>统计中最常使用作为<a href="https://baike.baidu.com/item/统计分布/8478867">统计分布</a>程度上的测量依据。</p>
<p>标准差是方差的算术平方根。标准差能反映一个数据集的离散程度。平均数相同的两组数据，标准差未必相同。</p>
<h3 id="回归直线"><a href="#回归直线" class="headerlink" title="回归直线"></a>回归直线</h3><p>回归直线方程是根据样本资料通过回归分析所得到的反映一个变量（<a href="https://baike.baidu.com/item/因变量">因变量</a>）对另一个或一组变量（<a href="https://baike.baidu.com/item/自变量">自变量</a>）的回归关系的数学表达式。指在一组具有相关关系的变量的数据（x与Y）间，一条最好地反映x与Y之间的关系直线。</p>
<h3 id="标准正态分布"><a href="#标准正态分布" class="headerlink" title="标准正态分布"></a>标准正态分布</h3><p><a href="https://baike.baidu.com/item/期望值/8664642">期望值</a>μ=0，即曲线图象对称轴为Y轴，<a href="https://baike.baidu.com/item/标准差/1415772">标准差</a>σ=1条件下的<a href="https://baike.baidu.com/item/正态分布">正态分布</a>，记为N(0，1)。</p>
<img src="https://bkimg.cdn.bcebos.com/pic/4bed2e738bd4b31c04ff2c9f85d6277f9f2ff8d7?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2UyMjA=,g_7,xp_5,yp_5/format,f_auto">]]></content>
  </entry>
  <entry>
    <title>截取视频帧数图片</title>
    <url>/2021/04/04/Java/%E6%88%AA%E5%8F%96%E8%A7%86%E9%A2%91%E5%B8%A7%E6%95%B0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bytedeco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javacv-platform<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 截取视频第六帧的图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 视频路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图片的全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">videoImage</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String pngPath = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    FFmpegFrameGrabber ff = FFmpegFrameGrabber.createDefault(file);</span><br><span class="line"></span><br><span class="line">    ff.start();</span><br><span class="line">    <span class="keyword">int</span> ffLength = ff.getLengthInFrames();</span><br><span class="line">    Frame f;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; ffLength) &#123;</span><br><span class="line">        f = ff.grabFrame();</span><br><span class="line">        <span class="comment">//截取第6帧</span></span><br><span class="line">        <span class="keyword">if</span> ((i &gt; <span class="number">1</span>) &amp;&amp; (f.image != <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="comment">//生成图片的相对路径 例如：pic/uuid.png</span></span><br><span class="line">            pngPath = getPngPath();</span><br><span class="line">            <span class="comment">//执行截图并放入指定位置</span></span><br><span class="line">            System.out.println(<span class="string">&quot;存储图片 ： &quot;</span> + pngPath);</span><br><span class="line">            doExecuteFrame(f, pngPath);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    ff.stop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pngPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成图片的相对路径</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图片的相对路径 例：pic/1.png</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getPngPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Constants.TEMP_DIR + IdUtil.simpleUUID() + <span class="string">&quot;.png&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 截取缩略图</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> f                       Frame</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targerFilePath:封面图片存放路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doExecuteFrame</span><span class="params">(Frame f, String targerFilePath)</span> </span>&#123;</span><br><span class="line">    String imagemat = <span class="string">&quot;png&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == f || <span class="keyword">null</span> == f.image) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Java2DFrameConverter converter = <span class="keyword">new</span> Java2DFrameConverter();</span><br><span class="line">    BufferedImage bi = converter.getBufferedImage(f);</span><br><span class="line">    File output = <span class="keyword">new</span> File(targerFilePath);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ImageIO.write(bi, imagemat, output);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot整合Redisson分布式锁</title>
    <url>/2021/04/04/SpringBoot/SpringBoot%E6%95%B4%E5%90%88Redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<p>使用redisson包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置RedissClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissonClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RedissonClient redissonClient;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        String url = <span class="string">&quot;redis://&quot;</span> + properties.getHost()</span><br><span class="line">                + <span class="string">&quot;:&quot;</span> + properties.getPort();</span><br><span class="line">        config.useSingleServer().setAddress(url) <span class="comment">//单机</span></span><br><span class="line">                .setPassword(StringUtils.isNotBlank(properties.getPassword())? properties.getPassword() : <span class="keyword">null</span>)</span><br><span class="line">                .setDatabase(properties.getDatabase());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加主从配置</span></span><br><span class="line">        <span class="comment">//config.useMasterSlaveServers().setMasterAddress(&quot;&quot;).setPassword(&quot;&quot;).addSlaveAddress(new String[]&#123;&quot;&quot;,&quot;&quot;&#125;);</span></span><br><span class="line">        <span class="comment">//集群</span></span><br><span class="line">        <span class="comment">//config.useClusterServers().addNodeAddress(new String[]&#123;&quot;&quot;,&quot;&quot;&#125;).setPassword(&quot;&quot;);</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redissonClient = Redisson.create(config);</span><br><span class="line">            <span class="keyword">return</span> redissonClient;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;RedissonClient init redis url :[&#123;&#125;]&quot;</span>,url,e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用RedissonClient操作分布式锁</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>openjdk:8-jdk-alpine镜像相关问题</title>
    <url>/2021/04/02/Docker/openjdk8-jdk-alpine%E9%95%9C%E5%83%8F%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>openjdk:8-jdk-alpine镜像没有字体库字体资源(其他版本也可能会有)。若业务有部分字体渲染，图片渲染情况，将无法使用，并且会导致正常的程序出现空指针等异常情况?</p>
<p>解决办法：增加字体库字体资源</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> -e <span class="string">&quot;https://mirror.tuna.tsinghua.edu.cn/alpine/v3.4/main&quot;</span> &gt; /etc/apk/repositories</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --update ttf-dejavu fontconfig &amp;&amp; rm -rf /var/cache/apk/*</span></span><br></pre></td></tr></table></figure>



<p>如果业务使用到定时任务，则需要设置容器的时区，时间?</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add tzdata &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp;  <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; apk del tzdata</span></span><br></pre></td></tr></table></figure>

<p>在Dockerfile增加此语句</p>
<blockquote>
<p> 以上，感谢<code>https://www.jianshu.com/p/eaac0b8ee385</code>解决了这些问题</p>
</blockquote>
<p>部分图片渲染使用宋体等中文字体时，无法正常显示文字，显示为方框的问题?</p>
<p>解决方法：增加字体文件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> SIMSUN.TTC /usr/share/fonts/</span></span><br></pre></td></tr></table></figure>

<p>将window下C:\windows\fonts下的宋体字体文件拷贝到fonts目录下。如果容器在运行中使用cp到容器里命令，则容器需要重启生效。</p>
<p>如果以上方式不可用，可参照其他博客，将字体库放在$JAVA_HOME/jre/lib/fonts/fallback下。</p>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>mysql常见问题</title>
    <url>/2021/03/30/MySQL/mysql%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="Error-executing-DDL-type-MyISAM-via-JDBC-Statement"><a href="#Error-executing-DDL-type-MyISAM-via-JDBC-Statement" class="headerlink" title="Error executing DDL type=MyISAM via JDBC Statement"></a><a href="https://blog.csdn.net/shandeai520/article/details/103955014">Error executing DDL type=MyISAM via JDBC Statement</a></h3><p>异常:</p>
<p>2020-01-09 19:22:42.347 WARN 13276 — [ main] o.h.t.s.i.ExceptionHandlerLoggedImpl : GenerationTarget encountered exception accepting command : Error executing DDL “create table Rfe (id bigint not null, reference varchar(255), title varchar(255), primary key (id)) type=MyISAM” via JDBC Statement</p>
<p>org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL “create table Rfe (id bigint not null, reference varchar(255), title varchar(255), primary key (id)) type=MyISAM” via JDBC Statement</p>
<p>at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:67) ~[hibernate-core-5.4.9.Final.jar:5.4.9.Final]</p>
<p>解决: org.hibernate.dialect.MySQLDialect 改为 org.hibernate.dialect.MySQL5Dialect</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/30/mysql/</url>
    <content><![CDATA[<h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><p>避免使用blob和text进行排序，否则使用substring(column,length)截取为字符串进行排序，尽量截取的足够短，不会使临时表的大小超过max_heap_table_size或temp_table_size。或mysql默认的max_sort_length配置，并可以减小此配置的值。</p>
<p>如果explain执行计划中的Extra包含“Using temporay”，说明这个查询使用了隐式临时表。</p>
<p>枚举数据类型存储常用的字符串类型，应避免枚举值为数字，且排序是按照枚举出的值的先后顺序排序的，与本身枚举值无关。</p>
]]></content>
  </entry>
  <entry>
    <title>Redis命令操作</title>
    <url>/2021/03/22/Redis/Redis%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis缓存过期策略与内存淘汰策略</title>
    <url>/2021/03/22/Redis/Redis%E7%BC%93%E5%AD%98%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E4%B8%8E%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h2 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h2><h3 id="设置过期和移除过期"><a href="#设置过期和移除过期" class="headerlink" title="设置过期和移除过期"></a>设置过期和移除过期</h3><p>expire和persist可分别设置过期和取消过期</p>
<p><code>expire key</code>设置成功会返回1，不存在或者不能设置过期时间返回0</p>
<p><code>persist key</code>设置成功会返回1，不存在或者不能设置过期时间返回0</p>
<p><code>ttl key</code>获取键的剩余时间，如果有过期时间则输出过期时间，没有过期时间则为-1。如果该键不存在则返回-2</p>
<p>在Redis2.6起，过期时间误差缩小为0-1毫秒</p>
<p>redis过期时间采用unix时间戳存储，与服务器本机时间有关，如果将数据迁移到未来时间，则会立即过期失效。</p>
<h3 id="过期方式"><a href="#过期方式" class="headerlink" title="过期方式"></a>过期方式</h3><p>惰性过期：当客户端访问它时，key会被发现并主动过期</p>
<p>定期过期，redis每10秒操作一下流程，他会一直重复，直到过期的keys的百分比低于25%</p>
<ol>
<li>测试随机的20个keys进行相关过期检测。</li>
<li>删除所有已经过期的keys。</li>
<li>如果有多于25%的keys过期，重复步骤1。</li>
</ol>
<h2 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h2><p>当内存达到内存限制时，Redis将尝试删除keys，根据选择的逐出策略<code>maxmemory-policy</code></p>
<p>该配置项配置了如下几个配置，默认是<code>noeviction</code></p>
<table>
<thead>
<tr>
<th>item</th>
<th>desc</th>
</tr>
</thead>
<tbody><tr>
<td>noeviction</td>
<td>不移除任何键，当写入数据时会发生错误</td>
</tr>
<tr>
<td>volatile-lru</td>
<td>在所有设置了过期时间的键中，移除最久没有使用的key</td>
</tr>
<tr>
<td>allkeys-lru</td>
<td>在所有键中，移除最久没有使用的key</td>
</tr>
<tr>
<td>volatile-lfu</td>
<td>在所有设置了过期时间的建中，移除使用频率最少的key</td>
</tr>
<tr>
<td>allkeys-lfu</td>
<td>在所有键中，移除使用频率最少的key</td>
</tr>
<tr>
<td>volatile-random</td>
<td>在所有设置了过期时间的键中，随机删除任意键</td>
</tr>
<tr>
<td>allkeys-random</td>
<td>在所有键中，随机删除任意键</td>
</tr>
<tr>
<td>volatile-ttl</td>
<td>在所有设置过期时间的键中，删除过期时间最近的键</td>
</tr>
</tbody></table>
<p>LRU：长时间未被使用。LFU(Redis4.0)：一定时间内访问次数最少</p>
<p>配置项<code>maxmemory</code>可设置最大内存数，以字节为单位，默认无限制，可以为其配置最大内存，以便服务器可以留出其他内存用于输出缓冲区，副本同步，网络问题等。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis RDB与AOF持久化</title>
    <url>/2021/03/22/Redis/Redis-RDB%E4%B8%8EAOF%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<p>持久化操作可分为RDB(Redis DataBase)方式AOF(Append Only File)方式。</p>
<h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>RDB文件用于保存和还原Redis服务器所有数据库中的所有键值对，它会在指定时间段内按规则进行一次全量保存。</p>
<p>RDB文件是一个经过压缩的二进制文件，由多个部分组成。</p>
<p><strong>指令</strong></p>
<ul>
<li>save   直接阻塞服务器进程，服务器不能处理任何请求，等待直到RDB创建完毕</li>
<li>bgsave   派生出一个子进程，由子进程负责创建RDB文件，父进程继续处理请求</li>
</ul>
<p><strong>创建</strong></p>
<p>创建RDB文件实际由rdb.c/rdbSave函数完成,两个命令则以不同的方式调用这个函数。</p>
<p><strong>载入</strong></p>
<p>redis没有直接载入RDB文件的命令，只要redis服务启动，则自动 载入RDB文件，服务器会一直处以阻塞状态，直到载入工作完成。</p>
<p>载入文件的实际工作由rdb.c/rdbLoad函数完成</p>
<h3 id="客户端save指令保存"><a href="#客户端save指令保存" class="headerlink" title="客户端save指令保存"></a>客户端save指令保存</h3><p>当SAVE执行时，Redis服务器会被阻塞，客户端发送的请求都会被拒绝</p>
<p>只有执行完SAVE命令后，才能重新开始接收命令请求，客户端发送的命令才会被处理</p>
<h3 id="间隔性保存-bgsave"><a href="#间隔性保存-bgsave" class="headerlink" title="间隔性保存 bgsave"></a>间隔性保存 bgsave</h3><p>redis <code>bgsave</code>执行命令会在后台子进程执行，所以redis允许用户设置服务器配置save选项，让服务器每隔一段时间bgsave一次。该命令并不会阻塞服务器</p>
<p>在redis.conf的<code>SNAPSHOTTING</code>注释模块是rdb的配置。其中注释了三行数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"># Unless specified otherwise, by default Redis will save the DB:</span><br><span class="line">#   * After 3600 seconds (an hour) if at least 1 key changed</span><br><span class="line">#   * After 300 seconds (5 minutes) if at least 100 keys changed</span><br><span class="line">#   * After 60 seconds if at least 10000 keys changed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># save 3600 1</span><br><span class="line"># save 300 100</span><br><span class="line"># save 60 10000</span><br></pre></td></tr></table></figure>

<ul>
<li>900秒内，至少对数据库执行1次命令</li>
<li>300秒内，至少对数据库执行10次命令</li>
<li>60秒内，至少对数据库执行10000次命令</li>
</ul>
<p>以上为默认配置，可以进行修改和增加。</p>
<p>满足以上三个任意的条件将会自动触发bgsave命令，Redis调用bgsaveCommand函数，该函数fork一个子进程执行rdbSave函数进行实际的快照存储工作，而父进程可以继续处理客户端请求。当子进程退出后，父进程调用相关回调函数进行后续处理。</p>
<p><strong>BGSAVE命令执行时服务器状态</strong></p>
<ul>
<li>保存工作有子进程执行，redis服务器仍可以处理命令请求</li>
<li>在bgsave执行期间，客户端发送save命令会被服务器拒绝。禁止父子进程同时执行rdbSave函数，防止产生竞争</li>
<li>在bgsave执行期间 ，客户端发送bgsave会被拒绝，防止产生竞争条件</li>
<li>bgrewriteraof和bgsave不能同时执行<ul>
<li>如果bgsave正在执行，那么bgrewriteraof会被延迟到在bgsave执行完毕后执行</li>
<li>如果bgrewriteraof正在执行，那么bgsave会被拒绝</li>
<li>这两个命令都是由子进程执行，两者并没有冲突的地方，不能同时执行，只是因为性能方面的考虑，因为这个两个子进程都会执行大量磁盘写入操作</li>
</ul>
</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>AOF持久化是通过保存Redis服务器所执行的<strong>写的命令</strong>来记录的。</p>
<p>当aof持久化打开时，服务器会以Redis协议格式将被执行的命令追加到服务器状态的aof_buf缓冲区末尾，之后再定期写入并同步到AOF文件中。</p>
<p>默认不开启AOF，可修改<code>appendonly</code>的值为<code>yes</code>；<code>appendfilename</code>可指定持久化文件名称，默认可不修改。</p>
<p>AOF保存的是一条条命令，理论上可以做到发生故障时只丢失一条命令。但由于操作系统中执行写文件操作代价很大，Redis提供了配置参数，通过对安全性和性能的折中，我们可以设置不同的策略。</p>
<p><code>appendfsync</code>配置项配置了策略，可用值分别为:</p>
<ul>
<li>always：同步持久化，每次发生改变立即记录到磁盘。性能查数据完整性好</li>
<li>everysec：默认，每秒触发一次，将aof_buf缓存区中的内容写到aof文件中，这个同步操作由一个线程专门负责</li>
<li>no：不进行操作</li>
</ul>
<h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>随着aof文件越来越大，可能会造成影响，使用AOF还原数据的时间也就越多，因此Redis提供了重写功能。</p>
<p>假如客户端向服务器执行了5条<code>lpush mylist xxx</code>语句，因此，就要向aof中写入这五条记录，然而重写可以将这5条变成一条，即<code>lpush mylist xxx xxx xxx xxx xxx</code>，这样5条命令就变成了一条，用着一条代替之前记录的多条命令。</p>
<p>AOF重写会产生一个新的AOF文件，这个新的AOF文件和原有的AOF文件所保存的数据库状态一样，但体积更小。</p>
<p>重写触发机制会执行<code>bgrewriteaof</code>命令，Redis服务器会维护一个AOF重写缓冲区，该缓冲区会在子进程中创建新AOF文件期间，记录服务器执行的所有命令。当子进程完成创建新的AOF文件之后，服务器会将重写缓冲区的所有内容追加到新的AOF文件中，使得新旧两个AOF文件所保存的数据状态一致。最后服务器用新的AOF文件替换旧的AOF文件。</p>
<p><strong>重写配置</strong></p>
<p>Redis会记录上次重写时的AOF大小，当AOF文件大小是上次rewriter后大小的一倍且文件大于64MB时触发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 是否开启重写机制</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"># 百分比</span><br><span class="line">uto-aof-rewrite-percentage 100</span><br><span class="line"># 大小</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：在处理重写时,在列表，哈希，集合可能会带有多个元素的键时，会先检查键所包含的数量，超过一定数量后会用多条命令处理重写触发机制=</p>
</blockquote>
<h3 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h3><p>混合持久化指进行AOF重写时子进程将当前时间点的数据快照保存为RDB文件格式，而后将父进程累积命令保存为AOF格式。</p>
<p>加载时，首先会识别AOF文件是否以REDIS字符串开头，如果是，就按RDB格式加载，加载完RDB后继续按AOF格式加载剩余部分。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aof-use-rdb-preamble yes</span><br></pre></td></tr></table></figure>



<h2 id="RDB与AOF区别"><a href="#RDB与AOF区别" class="headerlink" title="RDB与AOF区别"></a>RDB与AOF区别</h2><p>AOF更新频率会比RDB高</p>
<p>如果服务其启动了AOF，则优先通过AOF还原数据，只有在AOF关闭的情况下才使用RDB文件来还原数据库状态</p>
<p>AOF在载入数据库时会比RDB载入慢很多</p>
<p>RDB数据可能会出现丢失，比AOF安全性低。</p>
<p>RDB保存的是最终的结果，AOF保存最终结果之间的过程。</p>
<h3 id="其他相关配置项"><a href="#其他相关配置项" class="headerlink" title="其他相关配置项"></a>其他相关配置项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启该参数后，如果开启了RDB快照（即配置了bgsave指令），并且最近一次快照执行失败，则Redis将停止接收写相关的请求</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"># 开启该参数后，如果后台正在执行一次RDB快照或者AOF重写，则主进程不再进行fsync操作（即使将appendfsync配置为always或者everysec）</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"># AOF文件以追加日志的方式生成，所以服务端发生故障时可能会有尾部命令不完整的情况。</span><br><span class="line"># 该参数后，在此种情况下，AOF文件会截断尾部不完整的命令然后继续加载，并且会在日志中进行提示。如果不开启该参数，则加载AOF文件时会打印错误日志，然后直接退出</span><br><span class="line"># 在重新启动服务器之前，可以尝试执行bin下的redis-check-AOF工具检查修改AOF</span><br><span class="line">aof-load-truncated yes</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>缓存穿透、缓存击穿、缓存雪崩</title>
    <url>/2021/03/22/Redis/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/</url>
    <content><![CDATA[<p>link: <a href="https://www.imooc.com/article/283986"><strong>阿里一面：关于【缓存穿透、缓存击穿、缓存雪崩、热点数据失效】问题的解决方案</strong></a></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis集群模式</title>
    <url>/2021/03/22/Redis/Redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>Docker Redis version=6.2.1</p>
<h2 id="指令与命令"><a href="#指令与命令" class="headerlink" title="指令与命令"></a>指令与命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> redis-cli指令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看主从关系</span></span><br><span class="line">info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> 集群信息</span></span><br><span class="line">cluster nodes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看cluster集群的相关命令</span></span><br><span class="line">redis-cli --cluster help</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>一主多从，master可进行读写操作，slave服务只能进行读操作，否则将引发<code>(error) READONLY You can&#39;t write against a read only replica.</code></p>
<p>以6379作为master，6380，6381作为slave。可以使用docker创建多个容器（连接ip使用宿主机ip，否则slave有反应，master无法反应）</p>
<p>使用如下命令可将当前服务作为指定服务的从节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>

<p>slaveof命令流程:</p>
<p>1）从服务器127.0.0.1:6380向主服务器127.0.0.1:6379发送sync命令，请求同步数据。<br>2）主服务器127.0.0.1:6379接收到sync命令请求，开始执行bgsave命令持久化数据到RDB文件，并且在持久化数据期间会将所有新执行的写入命令都保存到一个缓冲区。<br>3）当持久化数据执行完毕后，主服务器127.0.0.1:6379将该RDB文件发送给从服务器127.0.0.1:6380，从服务器接收该RDB文件，并将文件中的数据加载到内存。<br>4）主服务器127.0.0.1:6379将缓冲区中的命令请求发送给从服务器127.0.0.1:6380。<br>5）每当主服务器127.0.0.1:6379接收到写命令请求时，都会将该命令请求按照Redis协议格式发送给从服务器127.0.0.1:6380，从服务器接收并处理主服务器发送过来的命令请求。</p>
<p>同步数据有全面复制和增量复制。</p>
<p>当执行此slaveof命令时，不管父服务器在此之前都写了什么，子服务器都会全面复制。slave 启动成功连接到master后会发送一个sync命令。</p>
<p>当主服务器挂了：所属从服务器会原地待命，角色依然是slave,父服务器依然是原来的。</p>
<p>当某个从服务器挂了：再重新启动时，角色将更改为master，再次执行slaveof后，依然是立即全面复制</p>
<p>命令<code>slaveof no one</code>可以将当前从服务器关闭复制，将该服务器变为master，就是退出主从同步。</p>
<p>如果slaveof 指向新的主服务器地址，则会放弃旧的主服务器同步。</p>
<h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>哨兵用于自动监听各节点信息，并切换各节点的master和slave。</p>
<p>基本架构为一主多从+3个及以上的奇数哨兵节点</p>
<h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><ul>
<li>sentinel模式是建立在主从模式的基础上，如果只有一个Redis节点，sentinel就没有任何意义</li>
<li>当master挂了以后，sentinel会在slave中选择一个做为master，并修改它们的配置文件，其他slave的配置文件也会被修改，比如slaveof属性会指向新的master</li>
<li>当master重新启动后，它将不再是master而是做为slave接收新的master的同步数据</li>
<li>sentinel因为也是一个进程有挂掉的可能，所以sentinel也会启动多个形成一个sentinel集群</li>
<li>多sentinel配置的时候，sentinel之间也会自动监控</li>
<li>当主从模式配置密码时，sentinel也会同步将配置信息修改到配置文件中，不需要担心</li>
<li>一个sentinel或sentinel集群可以管理多个主从Redis，多个sentinel也可以监控同一个redis</li>
<li>sentinel最好不要和Redis部署在同一台机器，不然Redis的服务器挂了以后，sentinel也挂了</li>
</ul>
<h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><ul>
<li>每个sentinel以每秒钟一次的频率向它所知的master，slave以及其他sentinel实例发送一个 PING 命令 </li>
<li>如果一个实例距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被sentinel标记为主观下线。 </li>
<li>如果一个master被标记为主观下线，则正在监视这个master的所有sentinel要以每秒一次的频率确认master的确进入了主观下线状态</li>
<li>当有足够数量的sentinel（大于等于配置文件指定的值）在指定的时间范围内确认master的确进入了主观下线状态， 则master会被标记为客观下线 </li>
<li>在一般情况下， 每个sentinel会以每 10 秒一次的频率向它已知的所有master，slave发送 INFO 命令 </li>
<li>当master被sentinel标记为客观下线时，sentinel向下线的master的所有slave发送 INFO 命令的频率会从 10 秒一次改为 1 秒一次 </li>
<li>若没有足够数量的sentinel同意master已经下线，master的客观下线状态就会被移除；<br>若master重新向sentinel的 PING 命令返回有效回复，master的主观下线状态就会被移除</li>
</ul>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul>
<li>+reset-master ：主服务器已被重置。</li>
<li>+slave ：一个新的从服务器已经被 Sentinel 识别并关联。</li>
<li>+failover-state-reconf-slaves ：故障转移状态切换到了 reconf-slaves 状态。</li>
<li>+failover-detected ：另一个 Sentinel 开始了一次故障转移操作，或者一个从服务器转换成了主服务器。</li>
<li>+slave-reconf-sent ：领头（leader）的 Sentinel 向实例发送了 <a href="/commands/slaveof.html">SLAVEOF</a> 命令，为实例设置新的主服务器。</li>
<li>+slave-reconf-inprog ：实例正在将自己设置为指定主服务器的从服务器，但相应的同步过程仍未完成。</li>
<li>+slave-reconf-done ：从服务器已经成功完成对新主服务器的同步。</li>
<li>-dup-sentinel ：对给定主服务器进行监视的一个或多个 Sentinel 已经因为重复出现而被移除 —— 当 Sentinel 实例重启的时候，就会出现这种情况。</li>
<li>+sentinel ：一个监视给定主服务器的新 Sentinel 已经被识别并添加。</li>
<li>+sdown ：给定的实例现在处于主观下线状态。</li>
<li>-sdown ：给定的实例已经不再处于主观下线状态。</li>
<li>+odown ：给定的实例现在处于客观下线状态。</li>
<li>-odown ：给定的实例已经不再处于客观下线状态。</li>
<li>+new-epoch ：当前的纪元（epoch）已经被更新。</li>
<li>+try-failover ：一个新的故障迁移操作正在执行中，等待被大多数 Sentinel 选中（waiting to be elected by the majority）。</li>
<li>+elected-leader ：赢得指定纪元的选举，可以进行故障迁移操作了。</li>
<li>+failover-state-select-slave ：故障转移操作现在处于 select-slave 状态 —— Sentinel 正在寻找可以升级为主服务器的从服务器。</li>
<li>no-good-slave ：Sentinel 操作未能找到适合进行升级的从服务器。Sentinel 会在一段时间之后再次尝试寻找合适的从服务器来进行升级，又或者直接放弃执行故障转移操作。</li>
<li>selected-slave ：Sentinel 顺利找到适合进行升级的从服务器。</li>
<li>failover-state-send-slaveof-noone ：Sentinel 正在将指定的从服务器升级为主服务器，等待升级功能完成。</li>
<li>failover-end-for-timeout ：故障转移因为超时而中止，不过最终所有从服务器都会开始复制新的主服务器</li>
<li>failover-end ：故障转移操作顺利完成。所有从服务器都开始复制新的主服务器了。</li>
<li>+switch-master ：配置变更，主服务器的 IP 和地址已经改变。 这是绝大多数外部用户都关心的信息。</li>
<li>+tilt ：进入 tilt 模式。</li>
<li>-tilt ：退出 tilt 模式。</li>
</ul>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载sentinel.conf</span></span><br><span class="line">wget http://download.redis.io/redis-stable/sentinel.conf</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name sentinel -v /home/mini/docker/sentinel/:/etc/redis/ redis redis-sentinel /etc/redis/sentinel.conf</span><br></pre></td></tr></table></figure>

<p>使用docker的方式启动redis和sentinel可能会会导致集群无法正常。如果不进行设置redis master中的slave都是172.17.0.1:6379。master中slave信息会如下展示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slave0:ip&#x3D;172.17.0.1,port&#x3D;6380,state&#x3D;online,offset&#x3D;14,lag&#x3D;1</span><br></pre></td></tr></table></figure>

<p>这在主从复制的情况下能正常操作访问，但是有哨兵之后，哨兵会从master中获取salve的信息，然后拿到了不是宿主机的ip，如果sentinel设置的mater地址是宿主机地址，则ip对不上，master连同之前的slave都会变成slave指向宿主机的master。</p>
<p>原因就在于docker中的ip获取拿到的不是192.168.38.140，而是docker的网络ip，但是因为有映射，对外访问服务是没问题的。</p>
<p>使用<code>--network=host</code>的方式，不存在端口映射,-p端口映射将会失效，容器端口直接关联宿主机端口，或者使用bridge桥接模式(必须用户自定义，默认docker限制很多,可在最后查看创建方式)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis --restart always -p 6379:6379 --network host -v /home/mini/docker/redis/config:/etc/redis -v /home/mini/docker/redis/data:/data redis redis-server /etc/redis/redis.conf --appendonly yes</span><br><span class="line"></span><br><span class="line">docker run -d --name redis2 --restart always -p 6380:6380 --network host -v /home/mini/docker/redis2/config:/etc/redis -v /home/mini/docker/redis2/data:/data redis redis-server /etc/redis/redis.conf --appendonly yes</span><br><span class="line"></span><br><span class="line">docker run -d --name redis3 --restart always -p 6381:6381 --network host -v /home/mini/docker/redis3/config:/etc/redis -v /home/mini/docker/redis3/data:/data redis redis-server /etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication                                  </span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span>                                                     </span><br><span class="line">role:master                                                       </span><br><span class="line">connected_slaves:2                                                </span><br><span class="line">slave0:ip=192.168.38.140,port=6380,state=online,offset=1260,lag=1 </span><br><span class="line">slave1:ip=192.168.38.140,port=6381,state=online,offset=1260,lag=1 </span><br><span class="line">master_failover_state:no-failover                                 </span><br><span class="line">master_replid:e48196914a3953ac0a2024e155150ff14e068f81            </span><br><span class="line">master_replid2:0000000000000000000000000000000000000000           </span><br><span class="line">master_repl_offset:1260                                           </span><br><span class="line">second_repl_offset:-1                                             </span><br><span class="line">repl_backlog_active:1                                             </span><br><span class="line">repl_backlog_size:1048576                                         </span><br><span class="line">repl_backlog_first_byte_offset:1                                  </span><br><span class="line">repl_backlog_histlen:1260                                         </span><br></pre></td></tr></table></figure>

<p>三台sentinel配置一样，但是使用的不是同一个配置文件，不需要进行network host的配置，也不需要-p映射，内部即可，只要能访问宿主机ip即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bind 0.0.0.0</span><br><span class="line">port 26379</span><br><span class="line">daemonize no</span><br><span class="line">sentinel monitor mymaster 192.168.38.140 6379 2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在配置文件的#Generated by CONFIG REWRITE处，senintel会自动编辑这个配置文件，将从slave的节点信息追加到下面。包括sentinel myid这行也要注释，同样会自动生成，避免多个sentinel的id一样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 现在的</span><br><span class="line">sentinel known-replica mymaster 192.168.38.140 6381</span><br><span class="line"># 之前没有设置--network&#x3D;host的docker容器内情况</span><br><span class="line">sentinel known-replica mymaster 172.17.0.1 6381</span><br><span class="line"># 每个sentinel配置文件都应该不一样</span><br><span class="line">#sentinel myid 135b0151b412cd460efee0eff874703a9967813c</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name sentinel -v /home/mini/docker/sentinel/:/etc/redis/ redis redis-sentinel /etc/redis/sentinel.conf</span><br><span class="line"></span><br><span class="line">docker run -d --name sentinel2 -v /home/mini/docker/sentinel2/:/etc/redis/ redis redis-sentinel /etc/redis/sentinel.conf</span><br><span class="line"></span><br><span class="line">docker run -d --name sentinel3 -v /home/mini/docker/sentinel3/:/etc/redis/ redis redis-sentinel /etc/redis/sentinel.conf</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1:X 24 Mar 2021 01:44:31.394 # Redis version&#x3D;6.2.1, bits&#x3D;64, commit&#x3D;00000000, modified&#x3D;0, pid&#x3D;1, just started</span><br><span class="line">1:X 24 Mar 2021 01:44:31.394 # Configuration loaded</span><br><span class="line">1:X 24 Mar 2021 01:44:31.395 * monotonic clock: POSIX clock_gettime</span><br><span class="line">1:X 24 Mar 2021 01:44:31.396 * Running mode&#x3D;sentinel, port&#x3D;26379.</span><br><span class="line">1:X 24 Mar 2021 01:44:31.396 # WARNING: The TCP backlog setting of 511 cannot be enforced because &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn is set to the lower value of 128.</span><br><span class="line">1:X 24 Mar 2021 01:44:31.396 # Sentinel ID is 135b0151b412cd460efee0eff874703a9967813c</span><br><span class="line">1:X 24 Mar 2021 01:44:31.396 # +monitor master mymaster 192.168.38.140 6379 quorum 2</span><br><span class="line">1:X 24 Mar 2021 01:44:31.401 * +slave slave 192.168.38.140:6380 192.168.38.140 6380 @ mymaster 192.168.38.140 6379</span><br><span class="line">1:X 24 Mar 2021 01:44:31.406 * +slave slave 192.168.38.140:6381 192.168.38.140 6381 @ mymaster 192.168.38.140 6379</span><br></pre></td></tr></table></figure>

<p>redis master 6379停止后sentinel会打印如下消息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1:X 24 Mar 2021 02:29:50.611 # +sdown master mymaster 192.168.38.140 6379</span><br><span class="line">1:X 24 Mar 2021 02:29:50.671 # +new-epoch 1</span><br><span class="line">1:X 24 Mar 2021 02:29:50.672 # +vote-for-leader 78a361c40e1e9fd86f4384b4b4ee61e52ebf02ed 1</span><br><span class="line">1:X 24 Mar 2021 02:29:50.674 # +odown master mymaster 192.168.38.140 6379 #quorum 3&#x2F;2</span><br><span class="line">1:X 24 Mar 2021 02:29:50.674 # Next failover delay: I will not start a failover before Wed Mar 24 02:35:51 2021</span><br><span class="line">1:X 24 Mar 2021 02:29:51.328 # +config-update-from sentinel 78a361c40e1e9fd86f4384b4b4ee61e52ebf02ed 172.17.0.3 26379 @ mymaster 192.168.38.140 6379</span><br><span class="line">1:X 24 Mar 2021 02:29:51.328 # +switch-master mymaster 192.168.38.140 6379 192.168.38.140 6381</span><br><span class="line">1:X 24 Mar 2021 02:29:51.328 * +slave slave 192.168.38.140:6380 192.168.38.140 6380 @ mymaster 192.168.38.140 6381</span><br><span class="line">1:X 24 Mar 2021 02:29:51.328 * +slave slave 192.168.38.140:6379 192.168.38.140 6379 @ mymaster 192.168.38.140 6381</span><br><span class="line">1:X 24 Mar 2021 02:29:56.337 # +sdown slave 192.168.38.140:6379 192.168.38.140 6379 @ mymaster 192.168.38.140 6381</span><br></pre></td></tr></table></figure>

<p>可见选举出了6381作为master，并将6379和6380改为其slave，主观下线的6379变成slave的主观下线。</p>
<p>当redis6379服务再次启动后，则不再处于主观下线状态，info replication也变成slave指向master6381。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1:X 24 Mar 2021 02:44:12.269 # -sdown slave 192.168.38.140:6379 192.168.38.140 6379 @ mymaster 192.168.38.140 6381</span><br></pre></td></tr></table></figure>



<h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><p>参考中文官网<a href="http://www.redis.cn/topics/cluster-tutorial.html">http://www.redis.cn/topics/cluster-tutorial.html</a> 教程较老，基于3.x版本，有些命令操作已经更换，如启动集群命令。</p>
<p>可参考英文官网<a href="https://redis.io/topics/cluster-tutorial/">https://redis.io/topics/cluster-tutorial/</a></p>
<p>基本架构为3个及以上奇数的主从模式。横向拓展，主从模式复制多个。当数据量增多时一主多从放不下那么多数据。</p>
<p>背后理论思想是将数据通过某种算法分布到不同的服务节点，这样当节点越多，单台节点所需提供服务的数据就越少。很显然，集群首先需要解决如下问题</p>
<p>1）分槽（slot）：即如何决定某条数据应该由哪个节点提供服务；<br>2）端如何向集群发起请求（客户端并不知道某个数据应该由哪个节点提供服务，并且如果扩容或者节点发生故障后，不应该影响客户端的访问）？<br>3）某个节点发生故障之后，该节点服务的数据该如何处理？<br>4）扩容，即向集群中添加新节点该如何操作？<br>5）同一条命令需要处理的key分布在不同的节点中（如Redis中集合取并集、交集的相关命令），如何操作？</p>
<h3 id="1-分槽Slot"><a href="#1-分槽Slot" class="headerlink" title="1. 分槽Slot"></a>1. 分槽Slot</h3><p>Redis将键空间分为16384个slot，通过如下算法计算出每个key所属的slot。客户端可以请求任意一个节点，每个节点都会保存所有16384个slot对应那个节点的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HASH_SLOT&#x3D;CRC16(key) mod 16384</span><br></pre></td></tr></table></figure>

<p>集群会分配这16384个slot到各个master上，如</p>
<ul>
<li>节点 A 包含 0 到 5500号哈希槽.</li>
<li>节点 B 包含5501 到 11000 号哈希槽.</li>
<li>节点 C 包含11001 到 16384号哈希槽.</li>
</ul>
<h3 id="2-如何向集群发起请求"><a href="#2-如何向集群发起请求" class="headerlink" title="2. 如何向集群发起请求"></a>2. 如何向集群发起请求</h3><p>如果一个key所属的slot正好由被请求的节点提供服务，则直接处理并返回结果，否则返回MOVED重定向信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET key</span><br><span class="line">-MOVED slot IP:PORT</span><br></pre></td></tr></table></figure>

<p>客户端应该处理该重定向信息，并且向拥有该key的节点发起请求。实际应用中，Redis客户端可以通过向集群请求slot和节点的映射关系并缓存，然后通过本地计算要操作的key所属的slot，查询映射关系，直接向正确的节点发起请求，这样可以获得几乎等价于单节点部署的性能</p>
<h3 id="某个节点发生故障之后，该节点服务的数据该如何处理"><a href="#某个节点发生故障之后，该节点服务的数据该如何处理" class="headerlink" title="某个节点发生故障之后，该节点服务的数据该如何处理"></a>某个节点发生故障之后，该节点服务的数据该如何处理</h3><p>当集群由于节点故障或者扩容导致重新分片后，客户端先通过重定向获取到数据，每次发生重定向后，客户端可以将新的映射关系进行缓存，下次仍然可以直接向正确的节点发起请求</p>
<p>集群中的数据分片之后由不同的节点提供服务，即每个主节点的数据都不相同，此种情况下，<strong>为了确保没有单点故障，主服务必须挂载至少一个从服务</strong>。客户端请求时可以向任意一个主节点或者从节点发起，<u>当向从节点发起请求时，从节点会返回MOVED信息重定向到相应的主节点</u>。</p>
<p>Redis集群中，<u>客户端只能在主节点执行读写操作</u>。如果需要在从节点中进行读操作，需要满足如下条件：</p>
<p>①首先在客户端中执行readonly命令；<br>②如果一个key所属的slot由主节点A提供服务，则请求该key时可以向A所属的从节点发起读请求。该请求不会被重定向。<br><strong>当一个主节点发生故障后，其挂载的从节点会切换为主节点继续提供服务</strong>。<br>最后，当一条命令需要操作的key分属于不同的节点时，Redis会报错。Redis提供了一种称为hash tags的机制，由业务方保证当需要进行多个key的处理时，将所有key分布到同一个节点，该机制实现原理如下：<br>如果一个key包括{substring}这种模式，则计算slot时只计算“{”和“}”之间的子字符串。即keys{sub}1、keys{sub}2、keys{sub}3计算slot时都会按照sub串进行。这样保证这3个字符串会分布到同一个节点。</p>
<h3 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h3><p>首先创建7000,70001,7002,7003,7004,7005六个目录，配置redis.conf，启动实例，分为三组主从节点，奇数为master，偶数slave</p>
<p>以下是最少选项的集群配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port 7000 #更改各文件的端口号</span><br><span class="line">cluster-enabled yes # 启用集群</span><br><span class="line">cluster-config-file nodes.conf # 保存节点配置文件的路径</span><br><span class="line">cluster-node-timeout 5000 # 节点超时时间</span><br><span class="line">appendonly yes # 开启aof持久化</span><br></pre></td></tr></table></figure>

<p>此处依然使用了<code>--network host</code>模式，或者你应该使用下面的桥接模式，否则直接映射的话，ip的原因，会一直卡在<code>Waiting for the cluster to join...........</code>。跟哨兵集群的情况是一样的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis7000 --restart always -p 7000:7000 --network host -v /home/mini/docker/redis7000/config:/etc/redis redis redis-server /etc/redis/redis.conf --appendonly yes</span><br><span class="line"></span><br><span class="line">docker run -d --name redis7001 --restart always -p 7001:7001  --network host -v /home/mini/docker/redis7001/config:/etc/redis redis redis-server /etc/redis/redis.conf --appendonly yes</span><br><span class="line"></span><br><span class="line">docker run -d --name redis7002 --restart always -p 7002:7002 --network host -v /home/mini/docker/redis7002/config:/etc/redis redis redis-server /etc/redis/redis.conf --appendonly yes</span><br><span class="line"></span><br><span class="line">docker run -d --name redis7003 --restart always -p 7003:7003 --network host -v /home/mini/docker/redis7003/config:/etc/redis redis redis-server /etc/redis/redis.conf --appendonly yes</span><br><span class="line"></span><br><span class="line">docker run -d --name redis7004 --restart always -p 7004:7004 --network host -v /home/mini/docker/redis7004/config:/etc/redis redis redis-server /etc/redis/redis.conf --appendonly yes</span><br><span class="line"></span><br><span class="line">docker run -d --name redis7005 --restart always -p 7005:7005 --network host -v /home/mini/docker/redis7005/config:/etc/redis redis redis-server /etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure>

<p>启动完成后，不需要slaveof命令手动关联主从，下面的命令会自动分配。且此时处于集群未启动状态，所有写操作会被拒绝。</p>
<p>执行官网的命令<code>./redis-trib.rb create --replicas 1 192.168.38.140:7000 192.168.38.140:7001 192.168.38.140:7002 192.168.38.140:7003 192.168.38.140:7004 192.168.38.140:7005</code>将会出现提示<code>redis-trib.rb is not longer available</code>，表示不再支持，并提示出使用redis-cli来执行，避免了使用redis-trib.rb还需要安装ruby的问题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost src]# redis-cli --cluster create 192.168.38.140:7000 192.168.38.140:7001 192.168.38.140:7002 192.168.38.140:7003 192.168.38.140:7004 192.168.38.140:7005 --cluster-replicas 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span></span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 192.168.38.140:7004 to 192.168.38.140:7000</span><br><span class="line">Adding replica 192.168.38.140:7005 to 192.168.38.140:7001</span><br><span class="line">Adding replica 192.168.38.140:7003 to 192.168.38.140:7002</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Trying to optimize slaves allocation <span class="keyword">for</span> anti-affinity</span></span><br><span class="line">[WARNING] Some slaves are in the same host as their master</span><br><span class="line">M: ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003</span><br><span class="line">   replicates ff444f0436d1cf64a18e8cf843066cd30d8b7c12</span><br><span class="line">S: 4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004</span><br><span class="line">   replicates 7ca1df6f191129d02c0908216c4e4728fd585f35</span><br><span class="line">S: 30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005</span><br><span class="line">   replicates bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes # 此处一定要输入yes，不能输入其他的。</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span></span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing Cluster Check (using node 192.168.38.140:7000)</span></span><br><span class="line">M: ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line">S: 463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ff444f0436d1cf64a18e8cf843066cd30d8b7c12</span><br><span class="line">M: bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 7ca1df6f191129d02c0908216c4e4728fd585f35</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check slots coverage...</span></span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>

<p>知道打印出<code>[OK] All 16384 slots covered.</code>便完成集群</p>
<p>此处集群主从分为</p>
<table>
<thead>
<tr>
<th>master</th>
<th>slave</th>
<th>slot</th>
</tr>
</thead>
<tbody><tr>
<td>7000</td>
<td>7003</td>
<td>[0-5460]</td>
</tr>
<tr>
<td>7001</td>
<td>7004</td>
<td>[5461-10922]</td>
</tr>
<tr>
<td>7002</td>
<td>7005</td>
<td>[10923-16383]</td>
</tr>
</tbody></table>
<h3 id="使用集群"><a href="#使用集群" class="headerlink" title="使用集群"></a>使用集群</h3><p>使用<code>redis-cli -c</code>命令启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost src]# redis-cli -c -p 7000                  </span><br><span class="line">127.0.0.1:7000&gt; set foo bar                                 </span><br><span class="line">-&gt; Redirected to slot [12182] located at 192.168.38.140:7002</span><br><span class="line">OK                                                          </span><br><span class="line">192.168.38.140:7002&gt; set hello world                      </span><br><span class="line">-&gt; Redirected to slot [866] located at 192.168.38.140:7000</span><br><span class="line">OK                                                        </span><br></pre></td></tr></table></figure>

<p>与官网一样，设置名称为<code>foo</code>的键计算的slot值为12182，按照上面集群的结果处于7002master处。</p>
<p>通过命令<code>cluster nodes</code>获取所有节点信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost src]# redis-cli -p 7000 cluster nodes</span><br><span class="line">30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005@17005 slave bc32418802f9221a43f3c040ad6dbceb03786b3b 0 1616572503205 3 connected</span><br><span class="line">463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003@17003 slave ff444f0436d1cf64a18e8cf843066cd30d8b7c12 0 1616572505000 1 connected</span><br><span class="line">bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002@17002 master - 0 1616572506255 3 connected 10923-16383</span><br><span class="line">7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001@17001 master - 0 1616572505236 2 connected 5461-10922</span><br><span class="line">4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004@17004 slave 7ca1df6f191129d02c0908216c4e4728fd585f35 0 1616572504224 2 connected</span><br><span class="line">ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000@17000 myself,master - 0 1616572504000 1 connected 0-5460</span><br></pre></td></tr></table></figure>

<ul>
<li>节点id</li>
<li>ip:端口</li>
<li>标志:master,slave,myself,fail</li>
<li>如果是个从节点, 这里是它的主节点的NODE ID</li>
<li>集群最近一次向节点发送 PING 命令之后， 没收到响应的时间</li>
<li>节点最近一次返回 PING 回复的时间</li>
<li>节点的配置纪元（configuration epoch）</li>
<li>本节点的网络连接情况：例如 connected</li>
<li>节点目前包含的槽</li>
</ul>
<h3 id="3-主从切换-故障转移"><a href="#3-主从切换-故障转移" class="headerlink" title="3. 主从切换 (故障转移)"></a>3. 主从切换 (故障转移)</h3><h4 id="手动故障转移"><a href="#手动故障转移" class="headerlink" title="手动故障转移"></a>手动故障转移</h4><p>在从节点处执行，如slave7003客户端执行<code>cluster failover</code>命令可手动进行故障转移，此时当前角色已经变为master，原来的7000master变为slave。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:7003&gt; cluster failover</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7003&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=192.168.38.140,port=7000,state=online,offset=22136,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:6fdfe1683507a8c20ec19c91c35e8ad4522f3d01</span><br><span class="line">master_replid2:7979887f6a6549eba0ef99b69923bcc1ec2656c3</span><br><span class="line">master_repl_offset:22136</span><br><span class="line">second_repl_offset:22137</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:22136</span><br></pre></td></tr></table></figure>

<p>强制手动故障转移比自动故障转移更加安全，因为手动故障转移时客户端的切换是在确保新的主节点完全复制了失败的旧的主节点数据的前提下下发生的，所以避免了数据的丢失。可以用于升级主节点的master进程。</p>
<p>在7003的打印消息如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1:S 25 Mar 2021 00:26:48.618 # Manual failover user request accepted.</span><br><span class="line">1:S 25 Mar 2021 00:26:48.619 # Received replication offset for paused master manual failover: 22136</span><br><span class="line">1:S 25 Mar 2021 00:26:48.619 # All master replication stream processed, manual failover can start.</span><br><span class="line">1:S 25 Mar 2021 00:26:48.619 # Start of election delayed for 0 milliseconds (rank #0, offset 22136).</span><br><span class="line">1:S 25 Mar 2021 00:26:48.619 # Starting a failover election for epoch 7.</span><br><span class="line">1:S 25 Mar 2021 00:26:48.634 # Failover election won: I&#x27;m the new master.</span><br><span class="line">1:S 25 Mar 2021 00:26:48.634 # configEpoch set to 7 after successful failover</span><br><span class="line">1:M 25 Mar 2021 00:26:48.634 # Connection with master lost.</span><br><span class="line">1:M 25 Mar 2021 00:26:48.634 * Caching the disconnected master state.</span><br><span class="line">1:M 25 Mar 2021 00:26:48.634 * Discarding previously cached master state.</span><br><span class="line">1:M 25 Mar 2021 00:26:48.634 # Setting secondary replication ID to 7979887f6a6549eba0ef99b69923bcc1ec2656c3, valid up to offset: 22137. New replication ID is 6fdfe1683507a8c20ec19c91c35e8ad4522f3d01</span><br><span class="line">1:M 25 Mar 2021 00:26:48.668 * Replica 192.168.38.140:7000 asks for synchronization</span><br><span class="line">1:M 25 Mar 2021 00:26:48.668 * Partial resynchronization request from 192.168.38.140:7000 accepted. Sending 0 bytes of backlog starting from offset 22137.</span><br></pre></td></tr></table></figure>

<p>其基本过程如下：客户端不再链接我们淘汰的主节点，同时主节点向从节点发送复制偏移量,从节点得到复制偏移量后故障转移开始,接着通知主节点进行配置切换,当客户端在旧的master上解锁后重新连接到新的主节点上。</p>
<p>7001打印日志如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1:M 25 Mar 2021 00:26:48.619 # Manual failover requested by replica 463977abfab278f6c7225cfae26a72f800b07e9f.</span><br><span class="line">1:M 25 Mar 2021 00:26:48.634 # Connection with replica 192.168.38.140:7003 lost.</span><br><span class="line">1:M 25 Mar 2021 00:26:48.663 # Failover auth granted to 463977abfab278f6c7225cfae26a72f800b07e9f for epoch 7</span><br><span class="line">1:M 25 Mar 2021 00:26:48.664 # Configuration change detected. Reconfiguring myself as a replica of 463977abfab278f6c7225cfae26a72f800b07e9f</span><br><span class="line">1:S 25 Mar 2021 00:26:48.664 * Before turning into a replica, using my own master parameters to synthesize a cached master: I may be able to synchronize with the new master with just a partial transfer.</span><br><span class="line">1:S 25 Mar 2021 00:26:48.664 * Connecting to MASTER 192.168.38.140:7003</span><br><span class="line">1:S 25 Mar 2021 00:26:48.664 * MASTER &lt;-&gt; REPLICA sync started</span><br><span class="line">1:S 25 Mar 2021 00:26:48.665 * Non blocking connect for SYNC fired the event.</span><br><span class="line">1:S 25 Mar 2021 00:26:48.668 * Master replied to PING, replication can continue...</span><br><span class="line">1:S 25 Mar 2021 00:26:48.668 * Trying a partial resynchronization (request 7979887f6a6549eba0ef99b69923bcc1ec2656c3:22137).</span><br><span class="line">1:S 25 Mar 2021 00:26:48.668 * Successful partial resynchronization with master.</span><br><span class="line">1:S 25 Mar 2021 00:26:48.668 # Master replication ID changed to 6fdfe1683507a8c20ec19c91c35e8ad4522f3d01</span><br><span class="line">1:S 25 Mar 2021 00:26:48.668 * MASTER &lt;-&gt; REPLICA sync: Master accepted a Partial Resynchronization.</span><br></pre></td></tr></table></figure>

<h4 id="自动故障转移"><a href="#自动故障转移" class="headerlink" title="自动故障转移"></a>自动故障转移</h4><p>尝试直接关闭主节点服务，刚才7000已变成slave，现在关闭master7003服务，让7000重升为master。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker stop 433e547b3e35</span><br><span class="line">433e547b3e35</span><br><span class="line">[root@localhost ~]# redis-cli -c -p 7001 cluster nodes</span><br><span class="line">bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002@17002 master - 0 1616633076363 3 connected 10923-16383</span><br><span class="line">463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003@17003 master,fail - 1616633061144 1616633056099 7 disconnected 0-5460</span><br><span class="line">7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001@17001 myself,master - 0 1616633076000 2 connected 5461-10922</span><br><span class="line">4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004@17004 slave 7ca1df6f191129d02c0908216c4e4728fd585f35 0 1616633074336 2 connected</span><br><span class="line">30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005@17005 slave bc32418802f9221a43f3c040ad6dbceb03786b3b 0 1616633075000 3 connected</span><br><span class="line">ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000@17000 slave 463977abfab278f6c7225cfae26a72f800b07e9f 0 1616633075351 7 connected</span><br><span class="line">[root@localhost ~]# redis-cli -c -p 7001 cluster nodes</span><br><span class="line">bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002@17002 master - 0 1616633085503 3 connected 10923-16383</span><br><span class="line">463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003@17003 master,fail - 1616633061144 1616633056099 7 disconnected</span><br><span class="line">7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001@17001 myself,master - 0 1616633083000 2 connected 5461-10922</span><br><span class="line">4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004@17004 slave 7ca1df6f191129d02c0908216c4e4728fd585f35 0 1616633084485 2 connected</span><br><span class="line">30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005@17005 slave bc32418802f9221a43f3c040ad6dbceb03786b3b 0 1616633084000 3 connected</span><br><span class="line">ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000@17000 master - 0 1616633084000 8 connected 0-5460</span><br></pre></td></tr></table></figure>

<p>这是关闭7003后两次查看集群信息，可见两次信息中对于7000slave转master并没有非常及时，可能会有写命令丢失的情况</p>
<p>再次启动后发现查看集群信息已经连接上并称为7000的slave。以下是7003启动后打印的日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1:C 25 Mar 2021 01:13:31.578 # Redis version=6.2.1, bits=64, commit=00000000, modified=0, pid=1, just started</span><br><span class="line">1:C 25 Mar 2021 01:13:31.578 # Configuration loaded</span><br><span class="line">1:M 25 Mar 2021 01:13:31.578 * monotonic clock: POSIX clock_gettime</span><br><span class="line">1:M 25 Mar 2021 01:13:31.579 * Node configuration loaded, I&#x27;m 463977abfab278f6c7225cfae26a72f800b07e9f</span><br><span class="line">1:M 25 Mar 2021 01:13:31.580 * Running mode=cluster, port=7003.</span><br><span class="line">1:M 25 Mar 2021 01:13:31.580 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">1:M 25 Mar 2021 01:13:31.580 # Server initialized</span><br><span class="line">1:M 25 Mar 2021 01:13:31.580 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span><br><span class="line">1:M 25 Mar 2021 01:13:31.581 * Reading RDB preamble from AOF file...</span><br><span class="line">1:M 25 Mar 2021 01:13:31.581 * Loading RDB produced by version 6.2.1</span><br><span class="line">1:M 25 Mar 2021 01:13:31.581 * RDB age 64092 seconds</span><br><span class="line">1:M 25 Mar 2021 01:13:31.581 * RDB memory usage when created 2.50 Mb</span><br><span class="line">1:M 25 Mar 2021 01:13:31.581 * RDB has an AOF tail</span><br><span class="line">1:M 25 Mar 2021 01:13:31.581 * Reading the remaining AOF tail...</span><br><span class="line">1:M 25 Mar 2021 01:13:31.581 * DB loaded from append only file: 0.000 seconds</span><br><span class="line">1:M 25 Mar 2021 01:13:31.581 * Ready to accept connections</span><br><span class="line">1:M 25 Mar 2021 01:13:31.582 # Configuration change detected. Reconfiguring myself as a replica of ff444f0436d1cf64a18e8cf843066cd30d8b7c12</span><br><span class="line">1:S 25 Mar 2021 01:13:31.582 * Before turning into a replica, using my own master parameters to synthesize a cached master: I may be able to synchronize with the new master with just a partial transfer.</span><br><span class="line">1:S 25 Mar 2021 01:13:31.582 * Connecting to MASTER 192.168.38.140:7000</span><br><span class="line">1:S 25 Mar 2021 01:13:31.582 * MASTER &lt;-&gt; REPLICA sync started</span><br><span class="line">1:S 25 Mar 2021 01:13:31.582 # Cluster state changed: ok</span><br><span class="line">1:S 25 Mar 2021 01:13:31.584 * Non blocking connect for SYNC fired the event.</span><br><span class="line">1:S 25 Mar 2021 01:13:31.584 * Master replied to PING, replication can continue...</span><br><span class="line">1:S 25 Mar 2021 01:13:31.584 * Trying a partial resynchronization (request 032daf539cf041be78bb575c6d19bcd6fc72cf69:1).</span><br><span class="line">1:S 25 Mar 2021 01:13:31.586 * Full resync from master: ea91c3bc4ea55da0a10115af943607da1f1c44db:23564</span><br><span class="line">1:S 25 Mar 2021 01:13:31.586 * Discarding previously cached master state.</span><br><span class="line">1:S 25 Mar 2021 01:13:31.651 * MASTER &lt;-&gt; REPLICA sync: receiving 194 bytes from master to disk</span><br><span class="line">1:S 25 Mar 2021 01:13:31.651 * MASTER &lt;-&gt; REPLICA sync: Flushing old data</span><br><span class="line">1:S 25 Mar 2021 01:13:31.651 * MASTER &lt;-&gt; REPLICA sync: Loading DB in memory</span><br><span class="line">1:S 25 Mar 2021 01:13:31.652 * Loading RDB produced by version 6.2.1</span><br><span class="line">1:S 25 Mar 2021 01:13:31.652 * RDB age 0 seconds</span><br><span class="line">1:S 25 Mar 2021 01:13:31.652 * RDB memory usage when created 2.53 Mb</span><br><span class="line">1:S 25 Mar 2021 01:13:31.652 * MASTER &lt;-&gt; REPLICA sync: Finished with success</span><br><span class="line">1:S 25 Mar 2021 01:13:31.652 * Background append only file rewriting started by pid 17</span><br><span class="line">1:S 25 Mar 2021 01:13:31.722 * AOF rewrite child asks to stop sending diffs.</span><br><span class="line">17:C 25 Mar 2021 01:13:31.722 * Parent agreed to stop sending diffs. Finalizing AOF...</span><br><span class="line">17:C 25 Mar 2021 01:13:31.722 * Concatenating 0.00 MB of AOF diff received from parent.</span><br><span class="line">17:C 25 Mar 2021 01:13:31.722 * SYNC append only file rewrite performed</span><br><span class="line">17:C 25 Mar 2021 01:13:31.722 * AOF rewrite: 0 MB of memory used by copy-on-write</span><br><span class="line">1:S 25 Mar 2021 01:13:31.786 * Background AOF rewrite terminated with success</span><br><span class="line">1:S 25 Mar 2021 01:13:31.786 * Residual parent diff successfully flushed to the rewritten AOF (0.00 MB)</span><br><span class="line">1:S 25 Mar 2021 01:13:31.786 * Background AOF rewrite finished successfully</span><br></pre></td></tr></table></figure>

<p>首先加载RDB和AOF恢复数据，然后连接master，同步数据，变更集群状态为ok，同步刷新数据等等。</p>
<h3 id="4-添加一个新节点"><a href="#4-添加一个新节点" class="headerlink" title="4. 添加一个新节点"></a>4. 添加一个新节点</h3><p>添加新的节点的基本过程就是添加一个空的节点然后移动一些数据给它，有两种情况，添加一个主节点和添加一个从节点（添加从节点时需要将这个新的节点设置为集群中某个节点的复制）</p>
<p>两种情况的第一步都是先创建一个空节点。</p>
<h4 id="添加一个主节点"><a href="#添加一个主节点" class="headerlink" title="添加一个主节点"></a>添加一个主节点</h4><p>创建7006，作为master。直接拷贝7000的配置目录为7006，更换配置文件的端口即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis7006 --restart always -p 7006:7006 --network host -v /home/mini/docker/redis7006/config:/etc/redis redis redis-server /etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure>

<p>使用以下命令将节点添加到集群，其中192.168.38.140:700为新增的主节点地址，192.168.38.140:7000为任意一个可连接的集群地址。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-stable]# redis-cli --cluster add-node 192.168.38.140:7006 192.168.38.140:7000</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Adding node 192.168.38.140:7006 to cluster 192.168.38.140:7000</span>                                 </span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing Cluster Check (using node 192.168.38.140:7000)</span>                                      </span><br><span class="line">M: ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000                                    </span><br><span class="line">   slots:[0-5460] (5461 slots) master                                                              </span><br><span class="line">   1 additional replica(s)                                                                         </span><br><span class="line">S: 30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005                                    </span><br><span class="line">   slots: (0 slots) slave                                                                          </span><br><span class="line">   replicates bc32418802f9221a43f3c040ad6dbceb03786b3b                                             </span><br><span class="line">S: 463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003                                    </span><br><span class="line">   slots: (0 slots) slave                                                                          </span><br><span class="line">   replicates ff444f0436d1cf64a18e8cf843066cd30d8b7c12                                             </span><br><span class="line">M: bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002                                    </span><br><span class="line">   slots:[10923-16383] (5461 slots) master                                                         </span><br><span class="line">   1 additional replica(s)                                                                         </span><br><span class="line">M: 7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001                                    </span><br><span class="line">   slots:[5461-10922] (5462 slots) master                                                          </span><br><span class="line">   1 additional replica(s)                                                                         </span><br><span class="line">S: 4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004                                    </span><br><span class="line">   slots: (0 slots) slave                                                                          </span><br><span class="line">   replicates 7ca1df6f191129d02c0908216c4e4728fd585f35                                             </span><br><span class="line">[OK] All nodes agree about slots configuration.                                                    </span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span>                                                                        </span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check slots coverage...</span>                                                                        </span><br><span class="line">[OK] All 16384 slots covered.                                                                      </span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Send CLUSTER MEET to node 192.168.38.140:7006 to make it join the cluster.</span>                     </span><br><span class="line">[OK] New node added correctly.                                                                     </span><br></pre></td></tr></table></figure>

<p>查看集群信息可以看到已经添加进去了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-stable]# redis-cli -c -p 7000 cluster nodes</span><br><span class="line">30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005@17005 slave bc32418802f9221a43f3c040ad6dbceb03786b3b 0 1616636240500 3 connected</span><br><span class="line">463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003@17003 slave ff444f0436d1cf64a18e8cf843066cd30d8b7c12 0 1616636241512 8 connected</span><br><span class="line">bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002@17002 master - 0 1616636240000 3 connected 10923-16383</span><br><span class="line">4dd72c4c8e11723a53e7960c03a8c592b50a6e81 192.168.38.140:7006@17006 master - 0 1616636239482 0 connected</span><br><span class="line">7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001@17001 master - 0 1616636238000 2 connected 5461-10922</span><br><span class="line">4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004@17004 slave 7ca1df6f191129d02c0908216c4e4728fd585f35 0 1616636239000 2 connected</span><br><span class="line">ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000@17000 myself,master - 0 1616636237000 8 connected 0-5460</span><br></pre></td></tr></table></figure>

<p>但是虽然是主节点，但其中并没有包含任何数据，因为没有任何hash槽。使用如下命令可进行slot迁移</p>
<h4 id="slot分配"><a href="#slot分配" class="headerlink" title="slot分配"></a>slot分配</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard 192.168.38.140:7000</span><br></pre></td></tr></table></figure>

<p>以下命令中因为已经执行过一次了，没有拷贝打印，因此再添加一次，默认第一次的话7006master的slots会显示<code>slots: (0 slots) master</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-stable]# redis-cli --cluster reshard 192.168.38.140:7000</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing Cluster Check (using node 192.168.38.140:7000)</span>                </span><br><span class="line">M: ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000              </span><br><span class="line">   slots:[999-5460] (4462 slots) master                                      </span><br><span class="line">   1 additional replica(s)                                                   </span><br><span class="line">S: 30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005              </span><br><span class="line">   slots: (0 slots) slave                                                    </span><br><span class="line">   replicates bc32418802f9221a43f3c040ad6dbceb03786b3b                       </span><br><span class="line">S: 463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003              </span><br><span class="line">   slots: (0 slots) slave                                                    </span><br><span class="line">   replicates ff444f0436d1cf64a18e8cf843066cd30d8b7c12                       </span><br><span class="line">M: bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002              </span><br><span class="line">   slots:[11922-16383] (4462 slots) master                                   </span><br><span class="line">   1 additional replica(s)                                                   </span><br><span class="line">M: 4dd72c4c8e11723a53e7960c03a8c592b50a6e81 192.168.38.140:7006              </span><br><span class="line">   slots:[0-998],[5461-6461],[10923-11921] (2999 slots) master               </span><br><span class="line">M: 7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001              </span><br><span class="line">   slots:[6462-10922] (4461 slots) master                                    </span><br><span class="line">   1 additional replica(s)                                                   </span><br><span class="line">S: 4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004              </span><br><span class="line">   slots: (0 slots) slave                                                    </span><br><span class="line">   replicates 7ca1df6f191129d02c0908216c4e4728fd585f35                       </span><br><span class="line">[OK] All nodes agree about slots configuration.                              </span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span>                                                  </span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check slots coverage...</span>                                                  </span><br><span class="line">[OK] All 16384 slots covered.                                                </span><br><span class="line">How many slots do you want to move (from 1 to 16384)? # 此处输入要迁移的数量   </span><br><span class="line">What is the receiving node ID?  # 此处输入新增加master节点的id</span><br><span class="line">Please enter all the source node IDs.</span><br><span class="line">  Type &#x27;all&#x27; to use all the nodes as source nodes for the hash slots.</span><br><span class="line">  Type &#x27;done&#x27; once you entered all the source nodes IDs.</span><br><span class="line">Source node #1:  # 此处输入all将选中数量的slot添加到源节点</span><br><span class="line">Do you want to proceed with the proposed reshard plan (yes/no)? # 此处输入yes确认转移</span><br><span class="line">Moving slot 11980 from 192.168.38.140:7002 to 192.168.38.140:7006:</span><br><span class="line">Moving slot 11981 from 192.168.38.140:7002 to 192.168.38.140:7006:</span><br><span class="line">Moving slot 11982 from 192.168.38.140:7002 to 192.168.38.140:7006:</span><br><span class="line">Moving slot 11983 from 192.168.38.140:7002 to 192.168.38.140:7006:</span><br><span class="line">Moving slot 11984 from 192.168.38.140:7002 to 192.168.38.140:7006:</span><br><span class="line">Moving slot 11985 from 192.168.38.140:7002 to 192.168.38.140:7006:</span><br><span class="line">Moving slot 11986 from 192.168.38.140:7002 to 192.168.38.140:7006:</span><br><span class="line">Moving slot 11987 from 192.168.38.140:7002 to 192.168.38.140:7006:</span><br><span class="line">Moving slot 6524 from 192.168.38.140:7001 to 192.168.38.140:7006:</span><br><span class="line">Moving slot 6525 from 192.168.38.140:7001 to 192.168.38.140:7006:</span><br><span class="line">Moving slot 6526 from 192.168.38.140:7001 to 192.168.38.140:7006:</span><br><span class="line">Moving slot 6527 from 192.168.38.140:7001 to 192.168.38.140:7006:</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<p>我们再次查看节点信息可以看到，新增的如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一次没记录日志时增加3000</span></span><br><span class="line">[root@localhost redis-stable]# redis-cli -c -p 7000 cluster nodes</span><br><span class="line">30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005@17005 slave bc32418802f9221a43f3c040ad6dbceb03786b3b 0 1616637182132 3 connected</span><br><span class="line">463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003@17003 slave ff444f0436d1cf64a18e8cf843066cd30d8b7c12 0 1616637186193 8 connected</span><br><span class="line">bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002@17002 master - 0 1616637184000 3 connected 11922-16383</span><br><span class="line">4dd72c4c8e11723a53e7960c03a8c592b50a6e81 192.168.38.140:7006@17006 master - 0 1616637185176 9 connected 0-998 5461-6461 10923-11921</span><br><span class="line">7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001@17001 master - 0 1616637183000 2 connected 6462-10922</span><br><span class="line">4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004@17004 slave 7ca1df6f191129d02c0908216c4e4728fd585f35 0 1616637184164 2 connected</span><br><span class="line">ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000@17000 myself,master - 0 1616637182000 8 connected 999-5460</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二次增加200</span></span><br><span class="line">[root@localhost redis-stable]# redis-cli -c -p 7000 cluster nodes</span><br><span class="line">30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005@17005 slave bc32418802f9221a43f3c040ad6dbceb03786b3b 0 1616637580567 3 connected</span><br><span class="line">463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003@17003 slave ff444f0436d1cf64a18e8cf843066cd30d8b7c12 0 1616637580000 8 connected</span><br><span class="line">bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002@17002 master - 0 1616637581587 3 connected 11988-16383</span><br><span class="line">4dd72c4c8e11723a53e7960c03a8c592b50a6e81 192.168.38.140:7006@17006 master - 0 1616637582000 9 connected 0-1065 5461-6527 10923-11987</span><br><span class="line">7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001@17001 master - 0 1616637582600 2 connected 6528-10922</span><br><span class="line">4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004@17004 slave 7ca1df6f191129d02c0908216c4e4728fd585f35 0 1616637583610 2 connected</span><br><span class="line">ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000@17000 myself,master - 0 1616637578000 8 connected 1066-5460</span><br></pre></td></tr></table></figure>

<p>由此可见，新迁移的slot会从其他主节点各自拿一些slot分配到当前被增加节点中，因此会出现了断层，三块的情况。</p>
<p>客户端在连接到原来的节点slot会重定向到新的主节点获取slot中的键，客户端并缓存到本地。</p>
<h4 id="添加一个从节点"><a href="#添加一个从节点" class="headerlink" title="添加一个从节点"></a>添加一个从节点</h4><p>创建7007容器作为slave</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis7007 --restart always -p 7007:7007 --network host -v &#x2F;home&#x2F;mini&#x2F;docker&#x2F;redis7007&#x2F;config:&#x2F;etc&#x2F;redis redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf --appendonly yes</span><br></pre></td></tr></table></figure>

<p>添加到任意master节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node 127.0.0.1:7007 127.0.0.1:7000 --cluster-slave</span><br></pre></td></tr></table></figure>

<p>添加从节点到指定master节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost config]# redis-cli --cluster add-node 192.168.38.140:7007 192.168.38.140:7000 --cluster-slave --cluster-master-id ff444f0436d1cf64a18e8cf843066cd30d8b7c12</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Adding node 192.168.38.140:7007 to cluster 192.168.38.140:7000</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing Cluster Check (using node 192.168.38.140:7000)</span></span><br><span class="line">M: ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000</span><br><span class="line">   slots:[1066-5460] (4395 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line">S: 463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ff444f0436d1cf64a18e8cf843066cd30d8b7c12</span><br><span class="line">M: bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002</span><br><span class="line">   slots:[11988-16383] (4396 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 4dd72c4c8e11723a53e7960c03a8c592b50a6e81 192.168.38.140:7006</span><br><span class="line">   slots:[0-1065],[5461-6527],[10923-11987] (3198 slots) master</span><br><span class="line">M: 7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001</span><br><span class="line">   slots:[6528-10922] (4395 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 7ca1df6f191129d02c0908216c4e4728fd585f35</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check slots coverage...</span></span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Send CLUSTER MEET to node 192.168.38.140:7007 to make it join the cluster.</span></span><br><span class="line">Waiting for the cluster to join</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Configure node as replica of 192.168.38.140:7000.</span></span><br><span class="line">[OK] New node added correctly.</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost config]# redis-cli -p 7000 cluster nodes</span><br><span class="line">30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005@17005 slave bc32418802f9221a43f3c040ad6dbceb03786b3b 0 1616640112259 3 connected</span><br><span class="line">463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003@17003 slave 4dd72c4c8e11723a53e7960c03a8c592b50a6e81 0 1616640110224 9 connected</span><br><span class="line">bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002@17002 master - 0 1616640109000 3 connected 11988-16383</span><br><span class="line">4dd72c4c8e11723a53e7960c03a8c592b50a6e81 192.168.38.140:7006@17006 master - 0 1616640108000 9 connected 0-1065 5461-6527 10923-11987</span><br><span class="line">7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001@17001 master - 0 1616640109000 2 connected 6528-10922</span><br><span class="line">4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004@17004 slave 7ca1df6f191129d02c0908216c4e4728fd585f35 0 1616640110000 2 connected</span><br><span class="line">ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000@17000 myself,master - 0 1616640106000 8 connected 1066-5460</span><br><span class="line">78ae56d814b19a4210ea8814be6ca087fb702bbb 192.168.38.140:7007@17007 slave ff444f0436d1cf64a18e8cf843066cd30d8b7c12 0 1616640111240 8 connected</span><br></pre></td></tr></table></figure>

<p>或者在redis-cli中将当前节点作为某个主节点的从属节点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:7007&gt; cluster replicate 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e</span><br></pre></td></tr></table></figure>

<p>3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e为要加入master节点的nodeid</p>
<h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster del-node 127.0.0.1:7000 `&lt;node-id&gt;`</span><br></pre></td></tr></table></figure>

<p>第一个参数是任意一个节点的地址,第二个参数是你想要移除的节点id。</p>
<p>使用同样的方法移除主节点,不过在移除主节点前，需要<strong>确保这个主节点是空的</strong>. 如果不是空的,需要将这个节点的数据重新分片到其他主节点上.</p>
<p>假设我们要删除master7002 <code>bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002@17002 master - 0 1616641444000 3 connected 11988-16383</code></p>
<p>则我们要先迁移master7002里的所有slot，我们将7002的slot都迁移到master7000，则执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost config]# redis-cli --cluster reshard 192.168.38.140:7000 --cluster-from bc32418802f9221a43f3c040ad6dbceb03786b3b --cluster-to ff444f0436d1cf64a18e8cf843066cd30d8b7c12</span><br><span class="line">.....</span><br><span class="line">    Moving slot 16373 from bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line">    Moving slot 16374 from bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line">    Moving slot 16375 from bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line">    Moving slot 16376 from bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line">    Moving slot 16377 from bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line">    Moving slot 16378 from bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line">    Moving slot 16379 from bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line">    Moving slot 16380 from bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line">    Moving slot 16381 from bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line">    Moving slot 16382 from bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line">    Moving slot 16383 from bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line"> Do you want to proceed with the proposed reshard plan (yes/no)? yes</span><br><span class="line"> ......</span><br><span class="line"> Moving slot 16376 from 192.168.38.140:7002 to 192.168.38.140:7000:</span><br><span class="line"> Moving slot 16377 from 192.168.38.140:7002 to 192.168.38.140:7000:</span><br><span class="line"> Moving slot 16378 from 192.168.38.140:7002 to 192.168.38.140:7000:</span><br><span class="line"> Moving slot 16379 from 192.168.38.140:7002 to 192.168.38.140:7000:</span><br><span class="line"> Moving slot 16380 from 192.168.38.140:7002 to 192.168.38.140:7000:</span><br><span class="line"> Moving slot 16381 from 192.168.38.140:7002 to 192.168.38.140:7000:</span><br><span class="line"> Moving slot 16382 from 192.168.38.140:7002 to 192.168.38.140:7000:</span><br><span class="line"> Moving slot 16383 from 192.168.38.140:7002 to 192.168.38.140:7000:</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost config]# redis-cli -p 7000 cluster nodes</span><br><span class="line">30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005@17005 slave ff444f0436d1cf64a18e8cf843066cd30d8b7c12 0 1616641730748 10 connected</span><br><span class="line">463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003@17003 slave 4dd72c4c8e11723a53e7960c03a8c592b50a6e81 0 1616641728718 9 connected</span><br><span class="line">bc32418802f9221a43f3c040ad6dbceb03786b3b 192.168.38.140:7002@17002 master - 0 1616641729733 3 connected</span><br><span class="line">4dd72c4c8e11723a53e7960c03a8c592b50a6e81 192.168.38.140:7006@17006 master - 0 1616641728000 9 connected 0-1065 5461-6527 10923-11987</span><br><span class="line">7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001@17001 master - 0 1616641730000 2 connected 6528-10922</span><br><span class="line">4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004@17004 slave 7ca1df6f191129d02c0908216c4e4728fd585f35 0 1616641728000 2 connected</span><br><span class="line">ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000@17000 myself,master - 0 1616641727000 10 connected 1066-5460 11988-16383</span><br><span class="line">78ae56d814b19a4210ea8814be6ca087fb702bbb 192.168.38.140:7007@17007 slave ff444f0436d1cf64a18e8cf843066cd30d8b7c12 0 1616641728000 10 connected</span><br></pre></td></tr></table></figure>

<p>此时master7002的slot为空了，7000的slot增加了[11988-16383]，从最开始的 [10923-16383]，再分给新master7006的一部分，剩下的就是现在看到的。</p>
<p>此时我们再删除master7002节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost config]# redis-cli --cluster del-node 192.168.38.140:7000 bc32418802f9221a43f3c040ad6dbceb03786b3b</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Removing node bc32418802f9221a43f3c040ad6dbceb03786b3b from cluster 192.168.38.140:7000</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Sending CLUSTER RESET SOFT to the deleted node.</span></span><br></pre></td></tr></table></figure>

<p>此时只是移除集群，再查看集群信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost config]# redis-cli -p 7000 cluster nodes</span><br><span class="line">30e88e1699bca088056b4e16a68f15dc3eda54b4 192.168.38.140:7005@17005 slave ff444f0436d1cf64a18e8cf843066cd30d8b7c12 0 1616642003000 10 connected</span><br><span class="line">463977abfab278f6c7225cfae26a72f800b07e9f 192.168.38.140:7003@17003 slave 4dd72c4c8e11723a53e7960c03a8c592b50a6e81 0 1616642003618 9 connected</span><br><span class="line">4dd72c4c8e11723a53e7960c03a8c592b50a6e81 192.168.38.140:7006@17006 master - 0 1616642003000 9 connected 0-1065 5461-6527 10923-11987</span><br><span class="line">7ca1df6f191129d02c0908216c4e4728fd585f35 192.168.38.140:7001@17001 master - 0 1616642004635 2 connected 6528-10922</span><br><span class="line">4cf2662f48b2f94316c9af3d91cd68237e53ee5e 192.168.38.140:7004@17004 slave 7ca1df6f191129d02c0908216c4e4728fd585f35 0 1616642002000 2 connected</span><br><span class="line">ff444f0436d1cf64a18e8cf843066cd30d8b7c12 192.168.38.140:7000@17000 myself,master - 0 1616642004000 10 connected 1066-5460 11988-16383</span><br><span class="line">78ae56d814b19a4210ea8814be6ca087fb702bbb 192.168.38.140:7007@17007 slave ff444f0436d1cf64a18e8cf843066cd30d8b7c12 0 1616642002000 10 connected</span><br></pre></td></tr></table></figure>

<p>master7002的数据都给7000了。它的slave7005也成了master7000的slave。其实早在7002移除slot之后，7005就临阵倒戈了。此时进入7002的redis-cli查看info replication</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost config]# redis-cli -p 7002             </span><br><span class="line">127.0.0.1:7002&gt; info replication                       </span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span>                                          </span><br><span class="line">role:master                                            </span><br><span class="line">connected_slaves:0                                     </span><br><span class="line">master_failover_state:no-failover                      </span><br><span class="line">master_replid:d5928ee393634e5cac85c840ecb9d68c798e11a6 </span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:35384                               </span><br><span class="line">second_repl_offset:-1                                  </span><br><span class="line">repl_backlog_active:1                                  </span><br><span class="line">repl_backlog_size:1048576                              </span><br><span class="line">repl_backlog_first_byte_offset:1                       </span><br><span class="line">repl_backlog_histlen:35384                             </span><br></pre></td></tr></table></figure>

<p>看一下slave7005的日志，最新的消息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1:S 25 Mar 2021 03:07:30.922 * 1 changes in 3600 seconds. Saving...</span><br><span class="line">1:S 25 Mar 2021 03:07:30.923 * Background saving started by pid 19</span><br><span class="line">19:C 25 Mar 2021 03:07:30.926 * DB saved on disk</span><br><span class="line">19:C 25 Mar 2021 03:07:30.927 * RDB: 0 MB of memory used by copy-on-write</span><br><span class="line">1:S 25 Mar 2021 03:07:31.023 * Background saving terminated with success</span><br><span class="line">1:S 25 Mar 2021 03:07:40.906 # Configuration change detected. Reconfiguring myself as a replica of ff444f0436d1cf64a18e8cf843066cd30d8b7c12</span><br><span class="line">1:M 25 Mar 2021 03:07:40.907 # Connection with master lost.</span><br><span class="line">1:M 25 Mar 2021 03:07:40.907 * Caching the disconnected master state.</span><br><span class="line">1:S 25 Mar 2021 03:07:40.907 * Connecting to MASTER 192.168.38.140:7000</span><br><span class="line">1:S 25 Mar 2021 03:07:40.907 * MASTER &lt;-&gt; REPLICA sync started</span><br><span class="line">1:S 25 Mar 2021 03:07:40.908 * Non blocking connect for SYNC fired the event.</span><br><span class="line">1:S 25 Mar 2021 03:07:40.908 * Master replied to PING, replication can continue...</span><br><span class="line">1:S 25 Mar 2021 03:07:40.908 * Trying a partial resynchronization (request d5928ee393634e5cac85c840ecb9d68c798e11a6:35385).</span><br><span class="line">1:S 25 Mar 2021 03:07:40.909 * Full resync from master: ea91c3bc4ea55da0a10115af943607da1f1c44db:33077</span><br><span class="line">1:S 25 Mar 2021 03:07:40.909 * Discarding previously cached master state.</span><br><span class="line">1:S 25 Mar 2021 03:07:40.955 * MASTER &lt;-&gt; REPLICA sync: receiving 192 bytes from master to disk</span><br><span class="line">1:S 25 Mar 2021 03:07:40.955 * MASTER &lt;-&gt; REPLICA sync: Flushing old data</span><br><span class="line">1:S 25 Mar 2021 03:07:40.955 * MASTER &lt;-&gt; REPLICA sync: Loading DB in memory</span><br><span class="line">1:S 25 Mar 2021 03:07:40.956 * Loading RDB produced by version 6.2.1</span><br><span class="line">1:S 25 Mar 2021 03:07:40.956 * RDB age 0 seconds</span><br><span class="line">1:S 25 Mar 2021 03:07:40.956 * RDB memory usage when created 2.62 Mb</span><br><span class="line">1:S 25 Mar 2021 03:07:40.956 * MASTER &lt;-&gt; REPLICA sync: Finished with success</span><br><span class="line">1:S 25 Mar 2021 03:07:40.956 * Background append only file rewriting started by pid 20</span><br><span class="line">1:S 25 Mar 2021 03:07:40.982 * AOF rewrite child asks to stop sending diffs.</span><br><span class="line">20:C 25 Mar 2021 03:07:40.982 * Parent agreed to stop sending diffs. Finalizing AOF...</span><br><span class="line">20:C 25 Mar 2021 03:07:40.982 * Concatenating 0.00 MB of AOF diff received from parent.</span><br><span class="line">20:C 25 Mar 2021 03:07:40.982 * SYNC append only file rewrite performed</span><br><span class="line">20:C 25 Mar 2021 03:07:40.983 * AOF rewrite: 0 MB of memory used by copy-on-write</span><br><span class="line">1:S 25 Mar 2021 03:07:41.043 * Background AOF rewrite terminated with success</span><br><span class="line">1:S 25 Mar 2021 03:07:41.043 * Residual parent diff successfully flushed to the rewritten AOF (0.00 MB)</span><br><span class="line">1:S 25 Mar 2021 03:07:41.044 * Background AOF rewrite finished successfully</span><br></pre></td></tr></table></figure>

<h3 id="节点迁移-副本漂移"><a href="#节点迁移-副本漂移" class="headerlink" title="节点迁移(副本漂移)"></a>节点迁移(副本漂移)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:7007&gt; cluster replicate 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e</span><br></pre></td></tr></table></figure>

<p>将当前节点设置为其他master节点的从节点。</p>
<p>在特定的场景下，不需要系统管理员的协助下，自动将一个从节点从当前的主节点切换到另一个主节 的自动重新配置的过程叫做复制迁移（从节点迁移），从节点的迁移能够提高整个Redis集群的可用性.。</p>
<p>假如MasterA有三个从节点，MasterB有一个从节点，假如MasterB节点断开，只剩下MasterB1从节点，为保证不单点故障，则会从masterA的从节点中分离一个到MasterB中。使用了一个clusterCron的周期调度函数来定期检测。</p>
<p>1）是否存在单点的主节点，即主节点没有任何一台可用的从节点；<br>2）是否存在有两台及以上可用从节点的主节点。<br>如果以上两个条件都满足，则从有最多可用从节点的主节点中选择一台从节点执行副本漂移。选择标准为按节点名称的字母序从小到大，选择最靠前的一台从节点执行漂移。漂移具体过程如下<br>1）从C的记录中将C1移除；<br>2）将C1所记录的主节点更改为A1；<br>3）在A1中添加C1为从节点；<br>4）将C1的数据同步源设置为A1。<br>可以看到，漂移过程只是更改一些节点所记录的信息，之后会通过心跳包将该信息同步到所有的集群节点。</p>
<h2 id="使用自建桥接网络搭建集群"><a href="#使用自建桥接网络搭建集群" class="headerlink" title="使用自建桥接网络搭建集群"></a>使用自建桥接网络搭建集群</h2><p>首先使用桥接是可以的，默认使用的就是docker的名称为bridge的桥接网络，但是限制很多，而且宿主机还ping不同容器ip。假如使用默认的桥接,可能会出现以下错误。并且如果不指定ip创建，然后使用slaveof，看到master的状态是down，master里也看不到salve。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker: Error response from daemon: user specified IP address is supported on user defined networks only.</span><br></pre></td></tr></table></figure>

<p>因此手动创建一个桥接网络。创建一个名称为redis的桥接网络，网卡段为192.168.10.0</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create --driver bridge redis --subnet 192.168.10.0/24</span><br></pre></td></tr></table></figure>

<p>查看所有的网络网卡</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure>

<p>查看网络信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network inspect redis</span><br></pre></td></tr></table></figure>

<p>创建完成后会在ifconfig中看到一个新建的桥接虚拟网卡</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">br-3e66bee493f5: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500      </span><br><span class="line">        inet 192.168.10.1  netmask 255.255.255.0  broadcast 192.168.10.255 </span><br><span class="line">        inet6 fe80::42:99ff:febc:d3b5  prefixlen 64  scopeid 0x20&lt;link&gt;    </span><br><span class="line">        ether 02:42:99:bc:d3:b5  txqueuelen 0  (Ethernet)                  </span><br><span class="line">        RX packets 2138152  bytes 423610052 (403.9 MiB)                    </span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0                        </span><br><span class="line">        TX packets 1952205  bytes 543173540 (518.0 MiB)                    </span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0         </span><br></pre></td></tr></table></figure>

<p>创建redis容器 增加 <code>--net redis --ip 192.168.10.10</code>，在宿主机上，可直接ping通这个ip,且其他192.168.10.10与192.168.10.11也能互相ping通</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis --restart always -p 6379:6379 --net redis --ip 192.168.10.10 -v &#x2F;home&#x2F;mini&#x2F;docker&#x2F;redis&#x2F;config:&#x2F;etc&#x2F;redis -v &#x2F;home&#x2F;mini&#x2F;docker&#x2F;redis&#x2F;data:&#x2F;data redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf --appendonly yes</span><br><span class="line"></span><br><span class="line">docker run -d --name redis2 --restart always -p 6380:6380 --net redis --ip 192.168.10.11 -v &#x2F;home&#x2F;mini&#x2F;docker&#x2F;redis2&#x2F;config:&#x2F;etc&#x2F;redis -v &#x2F;home&#x2F;mini&#x2F;docker&#x2F;redis2&#x2F;data:&#x2F;data redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf --appendonly yes</span><br></pre></td></tr></table></figure>

<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -a|grep redis7|awk &#39;&#123;print $1&#125;&#39;</span><br></pre></td></tr></table></figure>

<p>docker ps -a获取docker所有启动和停止的容器信息，grep可进行筛选字符串，awk用于打印第一列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -a|grep redis7|awk &#39;&#123;print $1&#125;&#39;)</span><br></pre></td></tr></table></figure>

<p>此命令可以将过滤出来的数据一起删除</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Java监听Redis缓存过期事件</title>
    <url>/2021/03/21/Redis/Redis%E7%BC%93%E5%AD%98%E8%BF%87%E6%9C%9F%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<p><strong>使用缓存过期监听事件并不能真实意义上的TTL为0时触发过期，只是理论上的。</strong>这意味着只能将过期事件使用在，并不需要严格的业务逻辑掺杂的键上。</p>
<p><strong>Timing of expired events</strong></p>
<p>Keys with a time to live associated are expired by Redis in two ways:</p>
<ul>
<li>When the key is accessed by a command and is found to be expired.</li>
<li>Via a background system that looks for expired keys in the background, incrementally, in order to be able to also collect keys that are never accessed.</li>
</ul>
<p>The <code>expired</code> events are generated when a key is accessed and is found to be expired by one of the above systems, as a result there are no guarantees that the Redis server will be able to generate the <code>expired</code> event at the time the key time to live reaches the value of zero.</p>
<p>If no command targets the key constantly, and there are many keys with a TTL associated, there can be a significant delay between the time the key time to live drops to zero, and the time the <code>expired</code> event is generated.</p>
<p>Basically <code>expired</code> events <strong>are generated when the Redis server deletes the key</strong> and not when the time to live theoretically reaches the value of zero.</p>
<p><strong>Events in a cluster</strong></p>
<p>Every node of a Redis cluster generates events about its own subset of the keyspace as described above. However, unlike regular Pub/Sub communication in a cluster, events’ notifications <strong>are not</strong> broadcasted to all nodes. Put differently, keyspace events are node-specific. This means that to receive all keyspace events of a cluster, clients need to subscribe to each of the nodes.</p>
<p>过期:<a href="https://redis.io/commands/expire">https://redis.io/commands/expire</a></p>
<p>空间通知:<a href="https://redis.io/topics/notifications">https://redis.io/topics/notifications</a></p>
<p>文档论述到检验过期为，命令访问时，检查缓存是否过期(被动)，或通过服务端逐步查找(主动)。</p>
<h3 id="Redis-Server设置"><a href="#Redis-Server设置" class="headerlink" title="Redis-Server设置"></a>Redis-Server设置</h3><p>在设置缓存时，会同市设置TTL缓存过期时间，当缓存过期后希望在程序中触发监听程序来获得到这个缓存。</p>
<p>我们可以通过redis的缓存过期策略来操作，但是只能监听到redis缓存的key，而获取不到value。</p>
<p>我们可以在redis.conf配置文件中找到<code>notify-keyspace-events</code>配置项，为其设置值为<code>Ex</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">notify-keyspace-events Ex</span><br></pre></td></tr></table></figure>

<p>他的默认值是 <code>&quot;&quot;</code>，只是一个空字符串，什么都没设。</p>
<p>对于可设置值的介绍在配置项上边的注释中可以看到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># K    键空间通知，以__keyspace@&lt;db&gt;__为前缀</span><br><span class="line"># E    键事件通知，以__keysevent@&lt;db&gt;__为前缀</span><br><span class="line"># g    del , expipre , rename 等类型无关的通用命令的通知, ...</span><br><span class="line"># $    String命令</span><br><span class="line"># l    List命令</span><br><span class="line"># s    Set命令</span><br><span class="line"># h    Hash命令</span><br><span class="line"># z    有序集合命令</span><br><span class="line"># x    过期事件（每次key过期时生成）</span><br><span class="line"># e    驱逐事件（当key在内存满了被清除时生成）</span><br><span class="line"># A    g$lshzxe的别名，因此”AKE”意味着所有的事件</span><br></pre></td></tr></table></figure>

<p>修改完后进行重启服务</p>
<h3 id="Java代码设置监听"><a href="#Java代码设置监听" class="headerlink" title="Java代码设置监听"></a>Java代码设置监听</h3><h4 id="继承KeyExpirationEventMessageListener类"><a href="#继承KeyExpirationEventMessageListener类" class="headerlink" title="继承KeyExpirationEventMessageListener类"></a>继承KeyExpirationEventMessageListener类</h4><p>在doRegister方法中添加的监听名称为<code>__keyevent@&lt;db&gt;__:expired</code>的这种格式，这个<code>db</code>表示Redis的第几个数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* redis缓存过期事件监听</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> chen</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2021/3/10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyKeyExpirationEventMessageListener</span> <span class="keyword">extends</span> <span class="title">KeyExpirationEventMessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates new &#123;<span class="doctag">@link</span> MessageListener&#125; for &#123;<span class="doctag">@code</span> __keyevent@*__:expired&#125; messages.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listenerContainer must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyKeyExpirationEventMessageListener</span><span class="params">(RedisMessageListenerContainer listenerContainer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(listenerContainer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doRegister</span><span class="params">(RedisMessageListenerContainer listenerContainer,String dbName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Topic kEY_EVENT_EXPIRED_TOPIC = <span class="keyword">new</span> PatternTopic(<span class="string">&quot;__keyevent@&quot;</span>+ dbName +<span class="string">&quot;__:expired&quot;</span>);</span><br><span class="line"></span><br><span class="line">        listenerContainer.addMessageListener(<span class="keyword">this</span>, kEY_EVENT_EXPIRED_TOPIC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注入RedisMessageListenerContainer"><a href="#注入RedisMessageListenerContainer" class="headerlink" title="注入RedisMessageListenerContainer"></a>注入RedisMessageListenerContainer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* redis消息监听容器bean</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> lettuceConnectionFactory</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisMessageListenerContainer <span class="title">container</span><span class="params">(LettuceConnectionFactory lettuceConnectionFactory, ApplicationContext context)</span> </span>&#123;</span><br><span class="line">    RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">    container.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line">    MyKeyExpirationEventMessageListener listener = <span class="keyword">new</span> MyKeyExpirationEventMessageListener(container);</span><br><span class="line">    listener.doRegister(container,dbNum);</span><br><span class="line">    listener.setApplicationEventPublisher(context);</span><br><span class="line">    <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用注解来监听"><a href="#使用注解来监听" class="headerlink" title="使用注解来监听"></a>使用注解来监听</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener(classes = RedisKeyExpiredEvent.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenerUploadFile</span><span class="params">(RedisKeyExpiredEvent event)</span> </span>&#123;</span><br><span class="line">    String id = <span class="keyword">new</span> String(event.getId());</span><br><span class="line">    String source = <span class="keyword">new</span> String(event.getSource());</span><br><span class="line">    String keyspace = event.getKeyspace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis安装</title>
    <url>/2021/03/21/Redis/Redis%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="centos-mini下安装redis"><a href="#centos-mini下安装redis" class="headerlink" title="centos mini下安装redis"></a>centos mini下安装redis</h3><p>由于mini安装缺少各种依赖，因此需要新下载依赖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum -y install gcc gcc-c++ libstdc++-devel</span><br><span class="line">sudo yum install centos-release-scl</span><br><span class="line">sudo yum install devtoolset-7-gcc*</span><br><span class="line">scl enable devtoolset-7 bash</span><br><span class="line"></span><br><span class="line">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-6.0.6.tar.gz</span><br><span class="line">tar xzf redis-6.0.6.tar.gz</span><br><span class="line">cd redis-6.0.6</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>gui安装可能全部包含，直接下载编译，出现问题可在网上搜索报错信息。</p>
<h3 id="window安装3-0-503"><a href="#window安装3-0-503" class="headerlink" title="window安装3.0.503"></a>window安装3.0.503</h3><p>github地址:<a href="https://github.com/ServiceStack/redis-windows">https://github.com/ServiceStack/redis-windows</a></p>
<p>下载地址:<a href="https://github.com/ServiceStack/redis-windows/raw/master/downloads/redis-latest.zip">https://github.com/ServiceStack/redis-windows/raw/master/downloads/redis-latest.zip</a></p>
<p>版本太老，仅用于缓存的存储使用。其它高级功能需要更高版本的。</p>
<h3 id="RedisDesktopMange-windows-gui界面版redis"><a href="#RedisDesktopMange-windows-gui界面版redis" class="headerlink" title="RedisDesktopMange-windows gui界面版redis"></a>RedisDesktopMange-windows gui界面版redis</h3><p>下载地址:<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>redisTemplate-java工具类</title>
    <url>/2021/03/21/Redis/redisTemplate-java%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.common.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.common.json.JsonMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.BoundListOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cgq_r</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,<span class="keyword">byte</span>[]&gt; byteRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisUtil</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getByteArray(String key)&#123;</span><br><span class="line">        <span class="keyword">return</span> key==<span class="keyword">null</span>?<span class="keyword">null</span>:byteRedisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setByteArray</span><span class="params">(String key,<span class="keyword">byte</span>[] value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            byteRedisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setByteArray</span><span class="params">(String key,<span class="keyword">byte</span>[] value,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                byteRedisTemplate.opsForValue().set(key,value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delByteArray</span><span class="params">(String ... key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key!=<span class="keyword">null</span>&amp;&amp;key.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key.length==<span class="number">1</span>)&#123;</span><br><span class="line">                byteRedisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                byteRedisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key,TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String ... key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key!=<span class="keyword">null</span>&amp;&amp;key.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key.length==<span class="number">1</span>)&#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================String=============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key==<span class="keyword">null</span>?<span class="keyword">null</span>:redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> region</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getRegion</span><span class="params">(String region,String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(region))&#123;</span><br><span class="line">            region = applicationName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> get(region + <span class="string">&quot;:&quot;</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> region 命名空间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setRegion</span><span class="params">(String region,String key,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(region))&#123;</span><br><span class="line">            region = applicationName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set(region + <span class="string">&quot;:&quot;</span> + key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key,Object value,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> region 命名空间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setRegion</span><span class="params">(String region, String key,Object value,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(region))&#123;</span><br><span class="line">            region = applicationName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set(region + <span class="string">&quot;:&quot;</span> + key,value,time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delRegion</span><span class="params">(String region, String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(region))&#123;</span><br><span class="line">            region = applicationName;</span><br><span class="line">        &#125;</span><br><span class="line">        del(region + <span class="string">&quot;:&quot;</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(delta&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(delta&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//================================Map=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key,String item)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object,Object&gt; <span class="title">hmget</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String,Object&gt; map, <span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key,String item,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key,String item,Object value,<span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key,item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item,<span class="keyword">double</span> by)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by 要减少记(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item,<span class="keyword">double</span> by)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item,-by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================set=============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object...values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key,<span class="keyword">long</span> time,Object...values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span>(time&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object ...values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 结束  0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引  index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key,<span class="keyword">long</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key,<span class="keyword">long</span> count,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模糊查询获取key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set <span class="title">keys</span><span class="params">(String pattern)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Redis的消息队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertAndSend</span><span class="params">(String channel, Object message)</span></span>&#123;</span><br><span class="line">        redisTemplate.convertAndSend(channel,message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=========BoundListOperations 用法 start============</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *将数据添加到Redis的list中（从右边添加）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireEnum 有效期的枚举类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 待添加的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*public void addToListRight(String listKey, Status.ExpireEnum expireEnum, Object... values) &#123;</span></span><br><span class="line"><span class="comment">        //绑定操作</span></span><br><span class="line"><span class="comment">        BoundListOperations&lt;String, Object&gt; boundValueOperations = redisTemplate.boundListOps(listKey);</span></span><br><span class="line"><span class="comment">        //插入数据</span></span><br><span class="line"><span class="comment">        boundValueOperations.rightPushAll(values);</span></span><br><span class="line"><span class="comment">        //设置过期时间</span></span><br><span class="line"><span class="comment">        boundValueOperations.expire(expireEnum.getTime(),expireEnum.getTimeUnit());</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据起始结束序号遍历Redis中的list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start  起始序号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end  结束序号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">rangeList</span><span class="params">(String listKey, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//绑定操作</span></span><br><span class="line">        BoundListOperations&lt;String, Object&gt; boundValueOperations = redisTemplate.boundListOps(listKey);</span><br><span class="line">        <span class="comment">//查询数据</span></span><br><span class="line">        <span class="keyword">return</span> boundValueOperations.range(start, end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 弹出右边的值 --- 并且移除这个值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">rifhtPop</span><span class="params">(String listKey)</span></span>&#123;</span><br><span class="line">        <span class="comment">//绑定操作</span></span><br><span class="line">        BoundListOperations&lt;String, Object&gt; boundValueOperations = redisTemplate.boundListOps(listKey);</span><br><span class="line">        <span class="keyword">return</span> boundValueOperations.rightPop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 set方法设置的List&lt; Bean &gt;复杂对象获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classBean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getList</span><span class="params">(String key,Class&lt;? extends T&gt; classBean)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getList(<span class="keyword">null</span>,key,classBean);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 set方法设置的List&lt; Bean &gt;复杂对象获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classBean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getList</span><span class="params">(String region,String key,Class&lt;? extends T&gt; classBean)</span></span>&#123;</span><br><span class="line">        JsonMapper jsonMapper = <span class="keyword">new</span> JsonMapper();</span><br><span class="line">        String s = jsonMapper.toJson(get(StringUtils.isNotBlank(region) ? (region + <span class="string">&quot;:&quot;</span> + key) : key));</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(s))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonMapper.fromJson(s,jsonMapper.createCollectionType(ArrayList.class, classBean));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot actuator404 Could not find acceptable representation</title>
    <url>/2021/03/18/SpringBoot/SpringBoot-actuator404-Could-not-find-acceptable-representation/</url>
    <content><![CDATA[<p>解决方案：</p>
<p>增加MediaType为<code>application/vnd.spring-boot.actuator.v2+json</code>的value值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">supportedMediaTypes.add(MediaType.valueOf(<span class="string">&quot;application/vnd.spring-boot.actuator.v2+json&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>默认初始搭建的项目不会出现此问题。若重写了HttpMessageConverter的SupportedMediaTypes配置可能出现此问题</p>
<p><strong>附：</strong></p>
<p>sprog-boot-actuator集成</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>开放所有端点</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">ALWAYS</span></span><br></pre></td></tr></table></figure>

<p>访问路径: <a href="http://localhost:8080/autator">http://localhost:8080/autator</a></p>
<p>更多操作可查看：<a href="http://blog.battcn.com/2018/05/24/springboot/v2-actuator-introduce/">http://blog.battcn.com/2018/05/24/springboot/v2-actuator-introduce/</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot配置logback-spring.xml</title>
    <url>/2021/03/17/SpringBoot/SpringBoot%E9%85%8D%E7%BD%AElogback%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>在<a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#boot-features-custom-log-configuration下是SpringBoot对log日志的配置说明">https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#boot-features-custom-log-configuration下是SpringBoot对log日志的配置说明</a></p>
<p>其中定义了环境变量SystemProperty，对应了Spring Environment，可以直接通过property标签进行引用，在文件中引入时为${指定变量}的方式</p>
<table>
<thead>
<tr>
<th>Spring Environment</th>
<th>System Property</th>
<th>Comments</th>
</tr>
</thead>
<tbody><tr>
<td><code>logging.exception-conversion-word</code></td>
<td><code>LOG_EXCEPTION_CONVERSION_WORD</code></td>
<td>The conversion word used when logging exceptions.</td>
</tr>
<tr>
<td><code>logging.file</code></td>
<td><code>LOG_FILE</code></td>
<td>If defined, it is used in the default log configuration.</td>
</tr>
<tr>
<td><code>logging.file.max-size</code></td>
<td><code>LOG_FILE_MAX_SIZE</code></td>
<td>Maximum log file size (if LOG_FILE enabled). (Only supported with the default Logback setup.)</td>
</tr>
<tr>
<td><code>logging.file.max-history</code></td>
<td><code>LOG_FILE_MAX_HISTORY</code></td>
<td>Maximum number of archive log files to keep (if LOG_FILE enabled). (Only supported with the default Logback setup.)</td>
</tr>
<tr>
<td><code>logging.path</code></td>
<td><code>LOG_PATH</code></td>
<td>If defined, it is used in the default log configuration.</td>
</tr>
<tr>
<td><code>logging.pattern.console</code></td>
<td><code>CONSOLE_LOG_PATTERN</code></td>
<td>The log pattern to use on the console (stdout). (Only supported with the default Logback setup.)</td>
</tr>
<tr>
<td><code>logging.pattern.dateformat</code></td>
<td><code>LOG_DATEFORMAT_PATTERN</code></td>
<td>Appender pattern for log date format. (Only supported with the default Logback setup.)</td>
</tr>
<tr>
<td><code>logging.pattern.file</code></td>
<td><code>FILE_LOG_PATTERN</code></td>
<td>The log pattern to use in a file (if <code>LOG_FILE</code> is enabled). (Only supported with the default Logback setup.)</td>
</tr>
<tr>
<td><code>logging.pattern.level</code></td>
<td><code>LOG_LEVEL_PATTERN</code></td>
<td>The format to use when rendering the log level (default <code>%5p</code>). (Only supported with the default Logback setup.)</td>
</tr>
<tr>
<td><code>PID</code></td>
<td><code>PID</code></td>
<td>The current process ID (discovered if possible and when not already defined as an OS environment variable).</td>
</tr>
</tbody></table>
<p>除了执行的日志变量外，还可以使用spring配置文件里的任意变量</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fluentHost&quot;</span> <span class="attr">source</span>=<span class="string">&quot;myapp.fluentd.host&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;localhost&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中scope为context标识Spring上下文引用</p>
<p>name为在当前日志要引用的名称，使用${name}来引用</p>
<p>source是在spring配置文件中定义的属性</p>
<p>defaultValue为无法获得值时的默认值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--官方配置 start--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--保留官方配置，方便使用官方配置的特性,参考:spring-boot-2.1.0.RELEASE.jar!\org\springframework\boot\logging\logback\base.xml--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_FILE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/console-appender.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/file-appender.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--全局输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--官方配置 end--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--从spring配置文件中获取属性--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;springProperty scope=&quot;context&quot; name=&quot;abc&quot; default=&quot;kjgh&quot; source=&quot;abc&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--######自定义配置  start########--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--########################kjgh包所有内容日志输出配置#################################--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义配置__单独输出到一个日志文件中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;kjgh&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;_kjgh.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;_kjgh.%d&#123;yyyy-MM-dd&#125;.%i.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;LOG_FILE_MAX_SIZE:-10MB&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;LOG_FILE_MAX_HISTORY:-0&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定包或者类的日志配置（这里是局部配置，它能覆盖全局配置）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义配置__配置业务日志输出至单独的日志文件中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.jeeplus.modules.kjgh&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用自定义的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;kjgh&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里也引用控制台appender，才能在控制台中看到我们的日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--########################kjgh包所有内容日志输出配置#################################--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--名称为other的业务配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;appender name=&quot;other&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;encoder&gt;</span></span><br><span class="line"><span class="comment">            &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;/pattern&gt;</span></span><br><span class="line"><span class="comment">        &lt;/encoder&gt;</span></span><br><span class="line"><span class="comment">        &lt;file&gt;$&#123;LOG_FILE&#125;_other.log&lt;/file&gt;</span></span><br><span class="line"><span class="comment">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;fileNamePattern&gt;$&#123;LOG_FILE&#125;_other.%d&#123;yyyy-MM-dd&#125;.%i.gz&lt;/fileNamePattern&gt;</span></span><br><span class="line"><span class="comment">            &lt;maxFileSize&gt;$&#123;LOG_FILE_MAX_SIZE:-10MB&#125;&lt;/maxFileSize&gt;</span></span><br><span class="line"><span class="comment">            &lt;maxHistory&gt;$&#123;LOG_FILE_MAX_HISTORY:-0&#125;&lt;/maxHistory&gt;</span></span><br><span class="line"><span class="comment">        &lt;/rollingPolicy&gt;</span></span><br><span class="line"><span class="comment">    &lt;/appender&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;logger name=&quot;com.cgq.logback.other&quot; additivity=&quot;false&quot; level=&quot;debug&quot;&gt;</span></span><br><span class="line"><span class="comment">        &amp;lt;!&amp;ndash; 引用自定义的appender &amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">        &lt;appender-ref ref=&quot;other&quot;/&gt;</span></span><br><span class="line"><span class="comment">        &amp;lt;!&amp;ndash; 这里也引用控制台appender，才能在控制台中看到我们的日志 &amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">        &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/logger&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--######自定义配置  end########--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>filtter安装使用</title>
    <url>/2021/03/14/fultter/%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><code>Navigator</code>是一个路由管理的组件，它提供了打开和退出路由页方法。<code>Navigator</code>通过一个栈来管理活动路由集合。通常当前屏幕显示的页面就是栈顶的路由。<code>Navigator</code>提供了一系列方法来管理路由栈。</p>
<p><code>Navigator</code>提供了一系列方法来管理路由栈，在此我们只介绍其最常用的两个方法：</p>
<ul>
<li><p>Future push(BuildContext context, Route route)</p>
<p>将给定的路由入栈(即打开新的页面)，返回一个<code>Future</code>对象，用以接收新路由出栈(即关闭)时返回的数据</p>
</li>
<li><p>bool pop(BuildContext context, [ result ])</p>
<p>将栈顶路由出栈，result为页面关闭时返回给上一个页面的数据</p>
</li>
</ul>
<p><code>Navigator</code> 还有很多其它方法，如<code>Navigator.replace</code>、<code>Navigator.popUntil</code>等。</p>
<h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><p>路由配置，在MaterialApp添加属性routes，通过路由名和Widget对象，routes是一个map类型</p>
<p>在使用路由的时候通过<code>Navigator.pushNamed(context, &quot;new_page&quot;);</code>push到新的路由界面</p>
<h4 id="命名路由传参"><a href="#命名路由传参" class="headerlink" title="命名路由传参"></a>命名路由传参</h4><p><code>Navigator.pushNamed</code>的第三个参数是一个object类型的值，可传递参数</p>
<h4 id="路由生成钩子"><a href="#路由生成钩子" class="headerlink" title="路由生成钩子"></a>路由生成钩子</h4><p><code>MaterialApp</code>有一个<code>onGenerateRoute</code>属性，它在打开命名路由时可能会被调用。</p>
<p>当调用<code>Navigator.pushNamed(...)</code>打开命名路由时，如果指定的路由名在路由表中已注册，则会调用路由表中的<code>builder</code>函数来生成路由组件；如果路由表中没有注册，才会调用<code>onGenerateRoute</code>来生成路由。</p>
<p><code>Route&lt;dynamic&gt; Function(RouteSettings settings)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onGenerateRoute:(RouteSettings settings)&#123;</span><br><span class="line"> return MaterialPageRoute(builder: (context)&#123;</span><br><span class="line">   String routeName &#x3D; settings.name;</span><br><span class="line">     &#x2F;&#x2F; 如果访问的路由页需要登录，但当前未登录，则直接返回登录页路由，</span><br><span class="line">     &#x2F;&#x2F; 引导用户登录；其它情况则正常打开路由。</span><br><span class="line">   &#125;</span><br><span class="line"> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在执行fultter doctor后，出现需要执行添加android-license时，说命令不正确，找不到命令，则需要再android studio处安装commandtool</p>
<p><img src="QQ%E6%88%AA%E5%9B%BE20210314152543.png" alt=""></p>
<p>然后再执行<code>flutter doctor --android-licenses</code></p>
<p>这个licenses一定要执行通过的，否则AVD Manger添加的虚拟设备，在执行android studio 的fultter demo的时候不会将包安装到虚拟设备中</p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
  </entry>
  <entry>
    <title>windows与deepin双系统</title>
    <url>/2021/03/06/Linux/windows%E4%B8%8Edeepin%E5%8F%8C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>deepin安装失败问题？<br>说磁盘为MBR，最大支持2T，最多4个分区，最后怎么设置大小都无法安装上。</p>
<p>window双系统安装<br>先安装windows系统，默认是UEFI引导安装，将机械硬盘整个格式化，并修改为GPT格式。<br>安装Deepin，选择手动安装，首先添加挂载/分区,然后按提示添加efi分区、swap分区</p>
<p><a href="https://jingyan.baidu.com/article/ea24bc394ac30c9a63b33175.html">https://jingyan.baidu.com/article/ea24bc394ac30c9a63b33175.html</a><br><a href="https://blog.csdn.net/weixin_36059638/article/details/112162511">https://blog.csdn.net/weixin_36059638/article/details/112162511</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>axios携带请求头下载文件</title>
    <url>/2021/03/03/Javascript/axios%E5%8F%8Axhr%E6%90%BA%E5%B8%A6%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">checkDownLoad</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">&quot;sk-web/f/kjgh/plan/kjghQualityResult/download/pkg/&quot;</span>+id,</span><br><span class="line">    responseType:<span class="string">&#x27;blob&#x27;</span>,</span><br><span class="line">    method:<span class="string">&quot;get&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码request函数是封装的，内部还是使用axios设置参数，重要的属性是responseType设置为blob类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">checkDownLoad(val.id).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.data.type===<span class="string">&#x27;application/octet-stream&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> filename = res.headers[<span class="string">&quot;content-disposition&quot;</span>];</span><br><span class="line">        <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([res.data]);</span><br><span class="line">        <span class="keyword">var</span> downloadElement = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> href = <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br><span class="line">        downloadElement.href = href;</span><br><span class="line">        downloadElement.download = filename.split(<span class="string">&quot;filename=&quot;</span>)[<span class="number">1</span>].replaceAll(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        downloadElement.click();</span><br><span class="line">        <span class="built_in">window</span>.URL.revokeObjectURL(href);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在调用时，通过URL.createObjectURL(blob);的方式获取blob转href的一个功能进行a标签的下载。</p>
<p>首先需要注意的是，跨域问题首先要解决，这不是主要的，因为其它接口也会出现跨域。</p>
<p>其次<code>res.data.type</code>和<code>content-disposition</code>的响应头值需要得到。这两个是响应头需要在后台设置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=\&quot;&quot;</span> + downloadFile + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// 二进制流</span></span><br><span class="line">response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);</span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Expose-Headers&quot;</span>,<span class="string">&quot;Content-Disposition&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第一行设置Content-Disposition包含文件名称</p>
<p>第二行设置ContentType，值一定是MediaType下带VALUE的字符串返回值，不要拿APPLICATION_OCTET_STREAM来获取。</p>
<p>第三行设置用于导出的响应头，因为需要拿到文件名,<code>Content-Disposition</code>属性是一定要前段拿到的。</p>
<p>在默认请求下，浏览器只能访问到默认的响应头</p>
<ul>
<li>Cache-Control</li>
<li>Content-Language</li>
<li>Content-Type</li>
<li>Expires</li>
<li>Last-Modified</li>
<li>Pragma</li>
</ul>
<p>其他属性需要通过Access-Control-Expose-Headers响应头设置要额外返回的响应头名字。</p>
<p>携带head时：</p>
<p>a标签download下载，非同源跨域，则download属性不起作用，若下载类型为浏览器不可直接预览的则依旧会自动下载。</p>
<p>get进行下载时，全局设置跨域后依然跨域(有时候好的有时候不行)。</p>
<p>post进行下载时，不跨域，但是无法弹出下载器进行下载(此问题不管是原生ajax还是封装的，只要res.data获取blob数据都会一次性将文件下载到浏览器内存，下载完成后拷贝到磁盘上，拷贝这个速度很快，如果下载的文件较大则会导致浏览器内存溢出并崩溃)。</p>
<p>携带认证头的可选择使用param参数的方式，加密到后台，并进行解密，使用两种方式混合。然后直接使用get方式进行加载就正常。</p>
<p>以上方式只适用于小文件。</p>
]]></content>
      <categories>
        <category>Vue2.0</category>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>大坑情况</title>
    <url>/2021/03/01/other/%E5%A4%A7%E5%9D%91%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<h1 id="【已解决】谷歌浏览器提示：无法访问此网站网址为-http-localhost-6667-XXX-XXX-的网页可能暂时无法连接，或者它已永久性地移动到了新网址"><a href="#【已解决】谷歌浏览器提示：无法访问此网站网址为-http-localhost-6667-XXX-XXX-的网页可能暂时无法连接，或者它已永久性地移动到了新网址" class="headerlink" title="【已解决】谷歌浏览器提示：无法访问此网站网址为 http://localhost:6667/XXX/XXX 的网页可能暂时无法连接，或者它已永久性地移动到了新网址"></a>【已解决】谷歌浏览器提示：无法访问此网站网址为 <a href="http://localhost:6667/XXX/XXX">http://localhost:6667/XXX/XXX</a> 的网页可能暂时无法连接，或者它已永久性地移动到了新网址</h1><p><a href="https://blog.csdn.net/qq_44799924/article/details/112989945">https://blog.csdn.net/qq_44799924/article/details/112989945</a></p>
]]></content>
      <categories>
        <category>大坑</category>
      </categories>
  </entry>
  <entry>
    <title>RocketMQ</title>
    <url>/2021/02/24/MQ/RocketMQ/</url>
    <content><![CDATA[<h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>下载发行版本并解压即可。</p>
<h3 id="单机启动"><a href="#单机启动" class="headerlink" title="单机启动"></a>单机启动</h3><ol>
<li>启动nameserver</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.启动NameServer</span></span><br><span class="line">nohup sh bin/mqnamesrv &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.查看启动日志</span></span><br><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动broker</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1.启动Broker</span><br><span class="line">nohup sh bin&#x2F;mqbroker -n localhost:9876 &amp;</span><br><span class="line"># 2.查看启动日志</span><br><span class="line">tail -f ~&#x2F;logs&#x2F;rocketmqlogs&#x2F;broker.log </span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p><a href="#jvmmem">修改默认jvm内存大小</a></p>
</li>
<li><p>可在conf/broker.conf下配置属性</p>
<p>配置brokerIP1设置访问ip</p>
</li>
</ol>
<h3 id="关闭nameserver和broker"><a href="#关闭nameserver和broker" class="headerlink" title="关闭nameserver和broker"></a>关闭nameserver和broker</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh mqshutdown namesrv</span><br><span class="line">sh mqshutdown broker</span><br></pre></td></tr></table></figure>



<h3 id="多master多slave同步集群"><a href="#多master多slave同步集群" class="headerlink" title="多master多slave同步集群"></a>多master多slave同步集群</h3><p>首先将rocketmq的bin配置到环境变量中，方便使用命令。</p>
<h4 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h4><table>
<thead>
<tr>
<th>编号</th>
<th>IP</th>
<th>角色</th>
<th>架构模式</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>192.168.38.130</td>
<td>nameserver,broker</td>
<td>master1,slave2</td>
</tr>
<tr>
<td>2</td>
<td>192.168.38.131</td>
<td>nameserver,broker</td>
<td>master2,slave1</td>
</tr>
</tbody></table>
<p>在进行nameserver集群是无需配置文件，一般一台机器一个nameserver，直接启动即可。</p>
<p>配置多主多从相关文件。在conf下有2m-2s-sync、2m-2s-async、2m-noslave目录，分别对应多种多从同步模式，多主多从异步模式，多主无从模式</p>
<p>多主多从同步与异步配置基本一致，本配置以同步为例。</p>
<p>在2m-2s-sync目录下包含broker-a.properties  broker-a-s.properties  broker-b.properties  broker-b-s.properties这些文件。不含-s的文件为master，否则为slave，但这只是一个名字的易于区分，具体角色在配置中的<code>brokerRole</code>属性进行区分。</p>
<p>在130机器中编辑broker-a.properties配置，和broker-b-s.properties</p>
<h4 id="broker-a-properties"><a href="#broker-a-properties" class="headerlink" title="broker-a.properties"></a>broker-a.properties</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">所属集群名字</span></span><br><span class="line">brokerClusterName=rocketmq-cluster</span><br><span class="line"><span class="meta">#</span><span class="bash">broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line">brokerName=broker-a</span><br><span class="line">brokerIP1=192.168.38.131</span><br><span class="line"><span class="meta">#</span><span class="bash">0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line">brokerId=0</span><br><span class="line"><span class="meta">#</span><span class="bash">nameServer地址，分号分割</span></span><br><span class="line">namesrvAddr=192.168.38.130:9876;193.168.38.131:9876</span><br><span class="line"><span class="meta">#</span><span class="bash">在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"><span class="meta">#</span><span class="bash">是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateTopicEnable=true</span><br><span class="line"><span class="meta">#</span><span class="bash">是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateSubscriptionGroup=true</span><br><span class="line"><span class="meta">#</span><span class="bash">Broker 对外服务的监听端口</span></span><br><span class="line">listenPort=10911</span><br><span class="line"><span class="meta">#</span><span class="bash">删除文件时间点，默认凌晨 4点</span></span><br><span class="line">deleteWhen=04</span><br><span class="line"><span class="meta">#</span><span class="bash">文件保留时间，默认 48 小时</span></span><br><span class="line">fileReservedTime=120</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog每个文件的大小默认1G</span></span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line"><span class="meta">#</span><span class="bash">ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line">mapedFileSizeConsumeQueue=300000</span><br><span class="line"><span class="meta">#</span><span class="bash">destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">检测物理文件磁盘空间</span></span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"><span class="meta">#</span><span class="bash">存储路径</span></span><br><span class="line">storePathRootDir=/usr/local/rocketmq/store</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=/usr/local/rocketmq/store/commitlog</span><br><span class="line"><span class="meta">#</span><span class="bash">消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=/usr/local/rocketmq/store/consumequeue</span><br><span class="line"><span class="meta">#</span><span class="bash">消息索引存储路径</span></span><br><span class="line">storePathIndex=/usr/local/rocketmq/store/index</span><br><span class="line"><span class="meta">#</span><span class="bash">checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=/usr/local/rocketmq/store/checkpoint</span><br><span class="line"><span class="meta">#</span><span class="bash">abort 文件存储路径</span></span><br><span class="line">abortFile=/usr/local/rocketmq/store/abort</span><br><span class="line"><span class="meta">#</span><span class="bash">限制的消息大小</span></span><br><span class="line">maxMessageSize=65536</span><br><span class="line"><span class="meta">#</span><span class="bash">flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="meta">#</span><span class="bash">flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Broker 的角色</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- SLAVE</span></span><br><span class="line">brokerRole=SYNC_MASTER</span><br><span class="line"><span class="meta">#</span><span class="bash">刷盘方式</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- SYNC_FLUSH 同步刷盘</span></span><br><span class="line">flushDiskType=SYNC_FLUSH</span><br><span class="line"><span class="meta">#</span><span class="bash">checkTransactionMessageEnable=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">发消息线程池数量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="meta">#</span><span class="bash">拉消息线程池数量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">pullMessageThreadPoolNums=128</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="broker-b-s-properties"><a href="#broker-b-s-properties" class="headerlink" title="broker-b-s.properties"></a>broker-b-s.properties</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">所属集群名字</span></span><br><span class="line">brokerClusterName=rocketmq-cluster</span><br><span class="line"><span class="meta">#</span><span class="bash">broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line">brokerName=broker-b</span><br><span class="line">brokerIP1=192.168.38.131</span><br><span class="line"><span class="meta">#</span><span class="bash">0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line">brokerId=1</span><br><span class="line"><span class="meta">#</span><span class="bash">nameServer地址，分号分割</span></span><br><span class="line">namesrvAddr=192.168.38.130:9876;192.168.38.131:9876</span><br><span class="line"><span class="meta">#</span><span class="bash">在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"><span class="meta">#</span><span class="bash">是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateTopicEnable=true</span><br><span class="line"><span class="meta">#</span><span class="bash">是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateSubscriptionGroup=true</span><br><span class="line"><span class="meta">#</span><span class="bash">Broker 对外服务的监听端口</span></span><br><span class="line">listenPort=11011</span><br><span class="line"><span class="meta">#</span><span class="bash">删除文件时间点，默认凌晨 4点</span></span><br><span class="line">deleteWhen=04</span><br><span class="line"><span class="meta">#</span><span class="bash">文件保留时间，默认 48 小时</span></span><br><span class="line">fileReservedTime=120</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog每个文件的大小默认1G</span></span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line"><span class="meta">#</span><span class="bash">ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line">mapedFileSizeConsumeQueue=300000</span><br><span class="line"><span class="meta">#</span><span class="bash">destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">检测物理文件磁盘空间</span></span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"><span class="meta">#</span><span class="bash">存储路径</span></span><br><span class="line">storePathRootDir=/usr/local/rocketmq/store2</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=/usr/local/rocketmq/store2/commitlog</span><br><span class="line"><span class="meta">#</span><span class="bash">消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=/usr/local/rocketmq/store2/consumequeue</span><br><span class="line"><span class="meta">#</span><span class="bash">消息索引存储路径</span></span><br><span class="line">storePathIndex=/usr/local/rocketmq/store2/index</span><br><span class="line"><span class="meta">#</span><span class="bash">checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=/usr/local/rocketmq/store2/checkpoint</span><br><span class="line"><span class="meta">#</span><span class="bash">abort 文件存储路径</span></span><br><span class="line">abortFile=/usr/local/rocketmq/store2/abort</span><br><span class="line"><span class="meta">#</span><span class="bash">限制的消息大小</span></span><br><span class="line">maxMessageSize=65536</span><br><span class="line"><span class="meta">#</span><span class="bash">flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="meta">#</span><span class="bash">flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Broker 的角色</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- SLAVE</span></span><br><span class="line">brokerRole=SLAVE</span><br><span class="line"><span class="meta">#</span><span class="bash">刷盘方式</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- SYNC_FLUSH 同步刷盘</span></span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line"><span class="meta">#</span><span class="bash">checkTransactionMessageEnable=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">发消息线程池数量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="meta">#</span><span class="bash">拉消息线程池数量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">pullMessageThreadPoolNums=128</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以130的这两个配置为例，131的配置属性相同，需要在部署时需要注意的属性如下:</p>
<ul>
<li>brokerClusterName：集群名字，多个broker配置相同的brokerClusterName组成一个broker集群</li>
<li>brokerName：broker名字可用来指定主从关系，如果同属于一个broker则brokerName应该相同，如何区分master和slave使用brokerId属性。</li>
<li>brokerId：同brokerName下的brokerId标识，如果为0则在当前brokerName中，该broker为master，大于0则为slave</li>
<li>brokerIP1：broker监听的IP，在多网卡ip的情况下需要显示设定ip，否则可能出现客户端连接失败的情况。</li>
<li>brokerIP2：主从关系存在时，slave会根据master的brokerIP2进行同步数据。</li>
<li>namesrvAddr：连接的nameserver地址，集群nameserver使用分号分开。</li>
<li>listenPort：broker监听端口，每个broker的端口在同一台机器上不能相同。</li>
<li>store*：数据存储目录，同一台机器上的broker的路径均不能重复。</li>
<li>brokerRole：当前broker配置文件定义了自身的角色。</li>
</ul>
<p>brokerName相同可以认为是一组broker，但仍然是由master和slave组成的多个broker，仅仅是确定了主从关系。</p>
<p>在131机器中编辑broker-b.properties配置，和broker-a-s.properties</p>
<h4 id="broker-b-properties"><a href="#broker-b-properties" class="headerlink" title="broker-b.properties"></a>broker-b.properties</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">所属集群名字</span></span><br><span class="line">brokerClusterName=rocketmq-cluster</span><br><span class="line"><span class="meta">#</span><span class="bash">broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line">brokerName=broker-b</span><br><span class="line">brokerIP1=192.168.38.130</span><br><span class="line"><span class="meta">#</span><span class="bash">0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line">brokerId=0</span><br><span class="line"><span class="meta">#</span><span class="bash">nameServer地址，分号分割</span></span><br><span class="line">namesrvAddr=192.168.38.130:9876;192.168.38.131:9876</span><br><span class="line"><span class="meta">#</span><span class="bash">在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"><span class="meta">#</span><span class="bash">是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateTopicEnable=true</span><br><span class="line"><span class="meta">#</span><span class="bash">是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateSubscriptionGroup=true</span><br><span class="line"><span class="meta">#</span><span class="bash">Broker 对外服务的监听端口</span></span><br><span class="line">listenPort=10911</span><br><span class="line"><span class="meta">#</span><span class="bash">删除文件时间点，默认凌晨 4点</span></span><br><span class="line">deleteWhen=04</span><br><span class="line"><span class="meta">#</span><span class="bash">文件保留时间，默认 48 小时</span></span><br><span class="line">fileReservedTime=120</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog每个文件的大小默认1G</span></span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line"><span class="meta">#</span><span class="bash">ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line">mapedFileSizeConsumeQueue=300000</span><br><span class="line"><span class="meta">#</span><span class="bash">destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">检测物理文件磁盘空间</span></span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"><span class="meta">#</span><span class="bash">存储路径</span></span><br><span class="line">storePathRootDir=/usr/local/rocketmq/store</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=/usr/local/rocketmq/store/commitlog</span><br><span class="line"><span class="meta">#</span><span class="bash">消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=/usr/local/rocketmq/store/consumequeue</span><br><span class="line"><span class="meta">#</span><span class="bash">消息索引存储路径</span></span><br><span class="line">storePathIndex=/usr/local/rocketmq/store/index</span><br><span class="line"><span class="meta">#</span><span class="bash">checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=/usr/local/rocketmq/store/checkpoint</span><br><span class="line"><span class="meta">#</span><span class="bash">abort 文件存储路径</span></span><br><span class="line">abortFile=/usr/local/rocketmq/store/abort</span><br><span class="line"><span class="meta">#</span><span class="bash">限制的消息大小</span></span><br><span class="line">maxMessageSize=65536</span><br><span class="line"><span class="meta">#</span><span class="bash">flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="meta">#</span><span class="bash">flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Broker 的角色</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- SLAVE</span></span><br><span class="line">brokerRole=SYNC_MASTER</span><br><span class="line"><span class="meta">#</span><span class="bash">刷盘方式</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- SYNC_FLUSH 同步刷盘</span></span><br><span class="line">flushDiskType=SYNC_FLUSH</span><br><span class="line"><span class="meta">#</span><span class="bash">checkTransactionMessageEnable=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">发消息线程池数量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="meta">#</span><span class="bash">拉消息线程池数量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">pullMessageThreadPoolNums=128</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="broker-a-s-properties"><a href="#broker-a-s-properties" class="headerlink" title="broker-a-s.properties"></a>broker-a-s.properties</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">所属集群名字</span></span><br><span class="line">brokerClusterName=rocketmq-cluster</span><br><span class="line"><span class="meta">#</span><span class="bash">broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line">brokerName=broker-a</span><br><span class="line">brokerIP1=192.168.38.130</span><br><span class="line"><span class="meta">#</span><span class="bash">0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line">brokerId=1</span><br><span class="line"><span class="meta">#</span><span class="bash">nameServer地址，分号分割</span></span><br><span class="line">namesrvAddr=192.168.38.130:9876;192.168.38.131:9876</span><br><span class="line"><span class="meta">#</span><span class="bash">在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"><span class="meta">#</span><span class="bash">是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateTopicEnable=true</span><br><span class="line"><span class="meta">#</span><span class="bash">是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateSubscriptionGroup=true</span><br><span class="line"><span class="meta">#</span><span class="bash">Broker 对外服务的监听端口</span></span><br><span class="line">listenPort=11011</span><br><span class="line"><span class="meta">#</span><span class="bash">删除文件时间点，默认凌晨 4点</span></span><br><span class="line">deleteWhen=04</span><br><span class="line"><span class="meta">#</span><span class="bash">文件保留时间，默认 48 小时</span></span><br><span class="line">fileReservedTime=120</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog每个文件的大小默认1G</span></span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line"><span class="meta">#</span><span class="bash">ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line">mapedFileSizeConsumeQueue=300000</span><br><span class="line"><span class="meta">#</span><span class="bash">destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">检测物理文件磁盘空间</span></span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"><span class="meta">#</span><span class="bash">存储路径</span></span><br><span class="line">storePathRootDir=/usr/local/rocketmq/store2</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=/usr/local/rocketmq/store2/commitlog</span><br><span class="line"><span class="meta">#</span><span class="bash">消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=/usr/local/rocketmq/store2/consumequeue</span><br><span class="line"><span class="meta">#</span><span class="bash">消息索引存储路径</span></span><br><span class="line">storePathIndex=/usr/local/rocketmq/store2/index</span><br><span class="line"><span class="meta">#</span><span class="bash">checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=/usr/local/rocketmq/store2/checkpoint</span><br><span class="line"><span class="meta">#</span><span class="bash">abort 文件存储路径</span></span><br><span class="line">abortFile=/usr/local/rocketmq/store2/abort</span><br><span class="line"><span class="meta">#</span><span class="bash">限制的消息大小</span></span><br><span class="line">maxMessageSize=65536</span><br><span class="line"><span class="meta">#</span><span class="bash">flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="meta">#</span><span class="bash">flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Broker 的角色</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- SLAVE</span></span><br><span class="line">brokerRole=SLAVE</span><br><span class="line"><span class="meta">#</span><span class="bash">刷盘方式</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="meta">#</span><span class="bash">- SYNC_FLUSH 同步刷盘</span></span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line"><span class="meta">#</span><span class="bash">checkTransactionMessageEnable=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">发消息线程池数量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="meta">#</span><span class="bash">拉消息线程池数量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">pullMessageThreadPoolNums=128</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h4><p>启动nameserver</p>
<p>分别在130和131机器上启动nameserver</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup sh mqnamesrv &amp;</span><br></pre></td></tr></table></figure>

<p>启动broker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 130启动broker</span></span><br><span class="line">nohup sh mqbroker -c /root/rocketmq/conf/2m-2s-sync/broker-a.properties &amp;</span><br><span class="line">nohup sh mqbroker -c /root/rocketmq/conf/2m-2s-sync/broker-b-s.properties &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 131启动broker</span></span><br><span class="line">nohup sh mqbroker -c /root/rocketmq/conf/2m-2s-sync/broker-b.properties &amp;</span><br><span class="line">nohup sh mqbroker -c /root/rocketmq/conf/2m-2s-sync/broker-a-s.properties &amp;</span><br></pre></td></tr></table></figure>

<h4 id="关闭集群"><a href="#关闭集群" class="headerlink" title="关闭集群"></a>关闭集群</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh mqshutdown namesrv</span><br><span class="line">sh mqshutdown broker</span><br></pre></td></tr></table></figure>

<h3 id="rocketmq-console控制台使用"><a href="#rocketmq-console控制台使用" class="headerlink" title="rocketmq-console控制台使用"></a>rocketmq-console控制台使用</h3><p>在<a href="https://github.com/apache/rocketmq-externals项目中下载或https://gitee.com/mirrors/RocketMQ-Externals上下载。进入rokcetmq-console中">https://github.com/apache/rocketmq-externals项目中下载或https://gitee.com/mirrors/RocketMQ-Externals上下载。进入rokcetmq-console中</a></p>
<p>进入resource，修改application.properties的<code>rocketmq.config.namesrvAddr</code>属性，配置rocketmq的nameserver，多个使用分号分隔</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rocketmq.config.namesrvAddr&#x3D;192.168.38.131:9876;192.168.38.130:9876</span><br></pre></td></tr></table></figure>

<p>更改后进入含pom的rockemq-console根目录下，执行<code>mvn clean package</code>即可。</p>
<h2 id="RocketMQ-队列"><a href="#RocketMQ-队列" class="headerlink" title="RocketMQ 队列"></a>RocketMQ 队列</h2><p>RocketMQ 每个主题都会有若干个队列，分布于集群中各个 broker 上，分布规律如下</p>
<p><img src="1.png" alt=""></p>
<p>队列会在 broker 中抽象成一个 consumer queue，在集群模式下，每个队列每个消费组只能存在一个消费者进行订阅消费，但是一个消费者可以消费多个队列，这也保证了在集群模式下消息不会被重复消费</p>
<p><img src="2.png" alt=""></p>
<p>在RocketMQ开源版本中，在创建主题时，通过集群创建模式，指定主题在集群中的队列数量，比如集群中有 2 个 broker，我们创建主题时选择队列数量为 4，就会在每个 broker 中为该主题创建 4 个 队列，那么该主题在集群中就会有 4 * 2 个队列数量，这里有个不好的地方就是无法精确控制队列数量，但这个问题不大</p>
<p>因此，RocketMQ 是依靠队列进行消费的，而队列数据通过主从同步实现消息的冗余。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">producer.setDefaultTopicQueueNums()</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="消息操作样例"><a href="#消息操作样例" class="headerlink" title="消息操作样例"></a>消息操作样例</h2><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><h4 id="同步消息发送"><a href="#同步消息发送" class="headerlink" title="同步消息发送"></a>同步消息发送</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SendResult sendResult = producer.send(msg);</span><br></pre></td></tr></table></figure>

<p>发送到broker后等待响应结果。</p>
<h4 id="异步消息发送"><a href="#异步消息发送" class="headerlink" title="异步消息发送"></a>异步消息发送</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">producer.send(msg, <span class="keyword">new</span> SendCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult sendResult)</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10d OK %s %n&quot;</span>, index,</span><br><span class="line">                          sendResult.getMsgId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-10d Exception %s %n&quot;</span>, index, e);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>增加一个回调接口，方法继续往下执行，得到响应后执行回调方法</p>
<h4 id="单向消息发送"><a href="#单向消息发送" class="headerlink" title="单向消息发送"></a>单向消息发送</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">producer.sendOneway(msg);</span><br></pre></td></tr></table></figure>

<p>无任何返回结果</p>
<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><h4 id="负载均衡消费模式"><a href="#负载均衡消费模式" class="headerlink" title="负载均衡消费模式"></a>负载均衡消费模式</h4><p>多个消费者共同消费队列消息，每个消费者处理的消息不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//负载均衡模式消费</span></span><br><span class="line">consumer.setMessageModel(MessageModel.CLUSTERING);</span><br><span class="line"><span class="comment">// 注册回调函数，处理消息</span></span><br><span class="line">consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class="line"><span class="function"><span class="params">        ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%s Receive New Messages: %s %n&quot;</span>, </span><br><span class="line">        Thread.currentThread().getName(), msgs);</span><br><span class="line">        <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="广播模式"><a href="#广播模式" class="headerlink" title="广播模式"></a>广播模式</h4><p>消费者采用广播的方式消费消息，每个消费者消费的消息都是相同的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//广播模式消费</span><br><span class="line">consumer.setMessageModel(MessageModel.BROADCASTING);</span><br><span class="line">// 注册回调函数，处理消息</span><br><span class="line">consumer.registerMessageListener(new MessageListenerConcurrently() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public ConsumeConcurrentlyStatus consumeMessage(List&lt;MessageExt&gt; msgs,</span><br><span class="line">                                                    ConsumeConcurrentlyContext context) &#123;</span><br><span class="line">        System.out.printf(&quot;%s Receive New Messages: %s %n&quot;, </span><br><span class="line">                          Thread.currentThread().getName(), msgs);</span><br><span class="line">        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="顺序消息"><a href="#顺序消息" class="headerlink" title="顺序消息"></a>顺序消息</h3><p>消息有序指的是可以按照消息的发送顺序来消费(FIFO)。RocketMQ可以严格的保证消息有序，可以分为分区有序或者全局有序</p>
<p>顺序消费的原理解析，在默认的情况下消息发送会采取Round Robin轮询方式把消息发送到不同的queue(分区队列)；而<strong>消费消息的时候从多个queue上拉取消息</strong>，这种情况发送和消费是不能保证顺序。但是如果<strong>控制发送的顺序消息只依次发送到同一个queue中，消费的时候只从这个queue上依次拉取</strong>，则就保证了顺序。<u>当发送和消费参与的queue只有一个，则是全局有序</u>；如果多个queue参与，则为分区有序，即相对每个queue，消息都是有序的</p>
<p>消息发送会存在多个队列，一个消费者只绑定一个队列，只从这一个队列中读取，发送消息时也是按队列号发送特定消息。</p>
<p>下面用订单进行分区有序的示例。一个订单的顺序流程是：创建、付款、推送、完成。订单号相同的消息会被先后发送到同一个队列中，消费时，同一个OrderId获取到的肯定是同一个队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] tags = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;TagA&quot;</span>, <span class="string">&quot;TagC&quot;</span>, <span class="string">&quot;TagD&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单列表</span></span><br><span class="line">List&lt;OrderStep&gt; orderList = <span class="keyword">new</span> Producer().buildOrders();</span><br><span class="line"></span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">String dateStr = sdf.format(date);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 加个时间前缀</span></span><br><span class="line">    String body = dateStr + <span class="string">&quot; Hello RocketMQ &quot;</span> + orderList.get(i);</span><br><span class="line">    Message msg = <span class="keyword">new</span> Message(<span class="string">&quot;TopicTest&quot;</span>, tags[i % tags.length], <span class="string">&quot;KEY&quot;</span> + i, body.getBytes());</span><br><span class="line"></span><br><span class="line">    SendResult sendResult = producer.send(msg, <span class="keyword">new</span> MessageQueueSelector() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> MessageQueue <span class="title">select</span><span class="params">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> </span>&#123;</span><br><span class="line">            Long id = (Long) arg;  <span class="comment">//根据订单id选择发送queue</span></span><br><span class="line">            <span class="keyword">long</span> index = id % mqs.size();</span><br><span class="line">            <span class="keyword">return</span> mqs.get((<span class="keyword">int</span>) index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, orderList.get(i).getOrderId());<span class="comment">//订单id</span></span><br><span class="line"></span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;SendResult status:%s, queueId:%d, body:%s&quot;</span>,</span><br><span class="line">                                     sendResult.getSendStatus(),</span><br><span class="line">                                     sendResult.getMessageQueue().getQueueId(),</span><br><span class="line">                                     body));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="延时消息"><a href="#延时消息" class="headerlink" title="延时消息"></a>延时消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Message message = <span class="keyword">new</span> Message(<span class="string">&quot;TopicTest&quot;</span>, (<span class="string">&quot;Hello scheduled message &quot;</span> + i).getBytes());</span><br><span class="line"><span class="comment">// 设置延时等级3,这个消息将在10s之后发送(现在只支持固定的几个时间,详看delayTimeLevel)</span></span><br><span class="line">message.setDelayTimeLevel(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">producer.send(message);</span><br></pre></td></tr></table></figure>

<p>RocketMq并不支持任意时间的延时，需要设置几个固定的延时等级，从1s到2h分别对应着等级1到18</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org/apache/rocketmq/store/config/MessageStoreConfig.java</span></span><br><span class="line"><span class="keyword">private</span> String messageDelayLevel = <span class="string">&quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&quot;</span>;</span><br></pre></td></tr></table></figure>







<h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><h3 id="默认虚拟机内存占用较大导致无法启动"><a href="#默认虚拟机内存占用较大导致无法启动" class="headerlink" title="默认虚拟机内存占用较大导致无法启动"></a>默认虚拟机内存占用较大导致无法启动</h3><p><span id="jvmmem">修改JVM内存</span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi runbroker.sh</span><br><span class="line">vi runserver.sh</span><br></pre></td></tr></table></figure>

<p>修改两个文件的此处<code>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m  -XX:MaxMetaspaceSize=320m&quot;</code></p>
<h3 id="集群分号问题"><a href="#集群分号问题" class="headerlink" title="集群分号问题"></a>集群分号问题</h3><p>集群配置，在properties配置文件还是在设置namesrvAddr都是分号分隔不同地址。</p>
<h3 id="存储消息路径问题"><a href="#存储消息路径问题" class="headerlink" title="存储消息路径问题"></a>存储消息路径问题</h3><p>同一台机器下，如果有多个broker，则不同broker的存储路径不能一致，如某机器下有1个master和1个slave，则在配置broker-a.properties文件和broker-b-s.properties中的一下路径是不能冲突的。否则可能造成broker无法启动成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#存储路径</span><br><span class="line">storePathRootDir&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store</span><br><span class="line">#commitLog 存储路径</span><br><span class="line">storePathCommitLog&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;commitlog</span><br><span class="line">#消费队列存储路径存储路径</span><br><span class="line">storePathConsumeQueue&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;consumequeue</span><br><span class="line">#消息索引存储路径</span><br><span class="line">storePathIndex&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;index</span><br><span class="line">#checkpoint 文件存储路径</span><br><span class="line">storeCheckpoint&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;checkpoint</span><br><span class="line">#abort 文件存储路径</span><br><span class="line">abortFile&#x3D;&#x2F;usr&#x2F;local&#x2F;rocketmq&#x2F;store&#x2F;abort</span><br></pre></td></tr></table></figure>





<h3 id="Exception-in-thread-“main”-org-apache-rocketmq-remoting-exception-RemotingTooMuchRequestException-sendDefaultImpl-call-timeout"><a href="#Exception-in-thread-“main”-org-apache-rocketmq-remoting-exception-RemotingTooMuchRequestException-sendDefaultImpl-call-timeout" class="headerlink" title="Exception in thread “main” org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout"></a>Exception in thread “main” org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout</h3><p>集群启动完成并且console上可以看到集群，但是生产者无法连接到broker发送消息。</p>
<p>IP问题，如果服务器有多个ip，需要在properties或conf中设置brokerIP1=192.168.38.130指定ip即可,并且namesrvAddr也尽量设置准确地址。 </p>
<p><strong>brokerIP1</strong> 当前broker监听的IP<br><strong>brokerIP2</strong> 存在broker主从时，在broker主节点上配置了brokerIP2的话,broker从节点会连接主节点配置的brokerIP2来同步。</p>
<p>默认不配置brokerIP1和brokerIP2时，都会根据当前网卡选择一个IP使用，当你的机器有多块网卡时，很有可能会有问题s</p>
<h3 id="org-apache-rocketmq-client-exception-MQClientException-Not-found-the-producer-group-connection-For-more-information-please-visit-the-url-http-rocketmq-apache-org-docs-faq"><a href="#org-apache-rocketmq-client-exception-MQClientException-Not-found-the-producer-group-connection-For-more-information-please-visit-the-url-http-rocketmq-apache-org-docs-faq" class="headerlink" title="org.apache.rocketmq.client.exception.MQClientException: Not found the producer group connection For more information, please visit the url, http://rocketmq.apache.org/docs/faq/"></a>org.apache.rocketmq.client.exception.MQClientException: Not found the producer group connection For more information, please visit the url, <a href="http://rocketmq.apache.org/docs/faq/">http://rocketmq.apache.org/docs/faq/</a></h3><p>在console上查询生产者页面信息时报错。原因为生产者生产完消息后不执行<code>producer.shutdown();</code>才行，否则无法查询到。</p>
<p>统称为主题。对于activemq的队列和消息区分有别。</p>
<p>activemq在最开始就定义当前消息组是队列还是主题。</p>
<p>rocketmq只向类型为top主题类型中发送消息，是队列还是主题由消费者来确定，负载均衡CLUSTERING则为队列模式，广播BROADCASTING则为主题模式。</p>
]]></content>
      <categories>
        <category>RocketMQ</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>PostGIS相关操作</title>
    <url>/2021/02/24/PostGIS/PostGIS%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>为数据库加载空间数据拓展</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION postgis;</span><br></pre></td></tr></table></figure>

<p>查看postgis版本</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> postgis_full_version();</span><br></pre></td></tr></table></figure>



<p>元数据表:空间参照标准</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> spatial_ref_sys;</span><br></pre></td></tr></table></figure>

<p>元数据表:空间数据表信息描述(视图)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> geometry_columns;</span><br></pre></td></tr></table></figure>

<p>更新数据表的SRID(空间参考标识符)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UpdateGeometrySRID(‘nyc_neighborhoods’,’geom’,<span class="number">26918</span>);</span><br></pre></td></tr></table></figure>

<h2 id="点线面对象"><a href="#点线面对象" class="headerlink" title="点线面对象"></a>点线面对象</h2><p>示例数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> geometries (<span class="keyword">name</span> <span class="built_in">varchar</span>, geom geometry);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> geometries <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;Point&#x27;</span>, <span class="string">&#x27;POINT(0 0)&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Linestring&#x27;</span>, <span class="string">&#x27;LINESTRING(0 0, 1 1, 2 1, 2 2)&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Polygon&#x27;</span>, <span class="string">&#x27;POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;PolygonWithHole&#x27;</span>, <span class="string">&#x27;POLYGON((0 0, 10 0, 10 10, 0 10, 0 0),(1 1, 1 2, 2 2, 2 1, 1 1))&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Collection&#x27;</span>, <span class="string">&#x27;GEOMETRYCOLLECTION(POINT(2 0),POLYGON((0 0, 1 0, 1 1, 0 1, 0 0)))&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, ST_AsText(geom) <span class="keyword">FROM</span> geometries;</span><br></pre></td></tr></table></figure>

<p>几何图形类型</p>
<ul>
<li><strong>ST_GeometryType(geometry)</strong>  ——  返回几何图形的类型</li>
<li><strong>ST_NDims(geometry)</strong>  ——  返回几何图形的维数</li>
<li><strong>ST_SRID(geometry)</strong>  ——  返回几何图形的空间参考标识码</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, ST_GeometryType(geom), ST_NDims(geom), ST_SRID(geom) <span class="keyword">FROM</span> geometries;</span><br></pre></td></tr></table></figure>

<h3 id="点-Point"><a href="#点-Point" class="headerlink" title="点(Point)"></a>点(Point)</h3><p>空间<strong>点</strong>（Point）表示地球上的单个位置。<strong>点</strong>由单个坐标表示（包括2维、3维或4维）。  当详细的细节（例如形状和大小）在目标空间尺度上不重要时，真实世界中的对象可以直接用<strong>点</strong>表示。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ST_AsText(geom) <span class="keyword">FROM</span> geometries <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">&#x27;Point&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>空间函数:</p>
<ul>
<li><strong>ST_X(geometry)</strong>  ——  返回X坐标</li>
<li><strong>ST_Y(geometry)</strong>  ——  返回Y坐标</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ST_X(geom), ST_Y(geom) <span class="keyword">FROM</span> geometries <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">&#x27;Point&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="线串-Linestring"><a href="#线串-Linestring" class="headerlink" title="线串(Linestring)"></a>线串(Linestring)</h3><p><strong>线串</strong>（Linestring）是表示两个或多个位置之间的路径，它的形式是由两个或多个<strong>点</strong>组成的有序序列。道路和河流通常表示为<strong>线串</strong>。</p>
<p>如果<strong>线串</strong>的起始点和结束点是同一个<strong>点</strong>，则称其是<strong>闭合的</strong>（closed）。</p>
<p>如果<strong>线串</strong>不与自身交叉或接触（如果<strong>线串</strong>是闭合的，则排除结束点），则称其是<strong>简单的</strong>（simple）。</p>
<p><strong>线串</strong>既可以是<strong>闭合的</strong>，也可以是<strong>简单的</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ST_AsText(geom) <span class="keyword">FROM</span> geometries <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">&#x27;Linestring&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>空间函数:</p>
<ul>
<li><strong>ST_Length(geometry)</strong>  ——  返回线串的长度</li>
<li><strong>ST_StartPoint(geometry)</strong>  ——  将线串的第一个坐标作为点返回</li>
<li><strong>ST_EndPoint(geometry）</strong>  ——  将线串的最后一个坐标作为点返回</li>
<li><strong>ST_NPoints(geometry)</strong>  ——  返回线串的坐标数量</li>
</ul>
<h3 id="多边形-Poltgon"><a href="#多边形-Poltgon" class="headerlink" title="多边形(Poltgon)"></a>多边形(Poltgon)</h3><p><strong>多边形</strong>（Polygon）是区域的表示形式。<strong>多边形</strong>的外部边界由一个<strong>环</strong>（Ring）表示，这个<strong>环</strong>是一个<strong>线串</strong>，如上面定义的，它既是闭合的，又是简单的。<strong>多边形</strong>中的<strong>孔</strong>（hole）也由<strong>环</strong>表示。</p>
<p><strong>多边形</strong>用于表示重视<strong>大小</strong>和<strong>形状</strong>这两个特征的地理对象。城市边界、公园、建筑或水体都通常需要表示为<strong>多边形</strong>，当比例尺足够大时，可以观测它们的面积。道路和河流有时也可以表示为<strong>多边形</strong>。</p>
<p>第一个<strong>多边形</strong>只有一个<strong>环</strong>，第二个<strong>多边形</strong>有一个内部的”<strong>孔洞</strong>（hole）”，大多数图形系统都包含<strong>多边形</strong>的概念，但GIS系统在允许<strong>多边形</strong>有<strong>孔</strong>方面是比较独特的</p>
<p>空间函数:</p>
<ul>
<li><strong>ST_Area(geometry)</strong>  ——   返回多边形的面积</li>
<li><strong>ST_NRings(geometry)</strong>  ——  返回多边形中环的数量（通常为1个，其他是孔）</li>
<li><strong>ST_ExteriorRing(geometry)</strong>  ——  以线串的形式返回多边形最外面的环</li>
<li><strong>ST_InteriorRingN(geometry, n)</strong>  ——  以线串形式返回指定的内部环</li>
<li><strong>ST_Perimeter(geometry)</strong>  ——  返回所有环的长度</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, ST_Area(geom) <span class="keyword">FROM</span> geometries <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">&#x27;Polygon%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="集合-Collection"><a href="#集合-Collection" class="headerlink" title="集合(Collection)"></a>集合(Collection)</h3><p>有四种<strong>集合</strong>（Collection）类型，它们将多个简单几何图形组合为<strong>图形集合</strong>：</p>
<ul>
<li><strong>MultiPoint</strong>   ——  点集合</li>
<li><strong>MultiLineString</strong>  ——  线串集合</li>
<li><strong>MultiPolygon</strong>  ——  多边形集合</li>
<li><strong>GeometryCollection</strong>  ——  由任意几何图形（包括其他GeometryCollection）组成的异构集合</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, ST_AsText(geom) <span class="keyword">FROM</span> geometries <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">&#x27;Collection&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>空间函数:</p>
<ul>
<li><strong>ST_NumGeometries(geometry)</strong>  ——  返回集合中的组成部分的数量</li>
<li><strong>ST_GeometryN(geometry, n)</strong>  ——  返回集合中指定的组成部分</li>
<li><strong>ST_Area(geometry)</strong>  ——  返回集合中所有多边形组成部分的总面积</li>
<li><strong>ST_Length(geometry)</strong>  ——  返回所有线段组成部分的总长度</li>
</ul>
<h3 id="几何图形输入输出函数"><a href="#几何图形输入输出函数" class="headerlink" title="几何图形输入输出函数"></a>几何图形输入输出函数</h3><p>WKT：Well Known Text 已知文本</p>
<p>EWKT：Extended Well Known Text PostGIS拓展用于处理3维和4维的几何图形</p>
<p>WKB：Well Known Binary 已知二进制</p>
<p>EWKB：Extended Well Known Binary PostGIS拓展用于处理3维和4维的几何图形</p>
<p>①Well-known text（<a href="https://postgis.net/workshops/postgis-intro/glossary.html#term-wkt">WKT</a>）</p>
<ul>
<li><p><strong>ST_GeomFromText(text, srid)</strong>  ——  返回geometry</p>
</li>
<li><p><strong>ST_AsText(geometry)</strong>  ——  返回text</p>
</li>
<li><p><strong>ST_AsEWKT(geometry)</strong>  ——  返回text</p>
<p>②Well-known binary（<a href="https://postgis.net/workshops/postgis-intro/glossary.html#term-wkb">WKB</a>）</p>
</li>
<li><p><strong>ST_GeomFromWKB(bytea)</strong>  ——  返回geometry</p>
</li>
<li><p><strong>ST_AsBinary(geometry)</strong>  ——  返回bytea</p>
</li>
<li><p><strong>ST_AsEWKB(geometry)</strong>  ——  返回bytea</p>
<p>③Geographic Mark-up Language（<a href="https://postgis.net/workshops/postgis-intro/glossary.html#term-gml">GML</a>）</p>
</li>
<li><p><strong>ST_GeomFromGML(text)</strong>  ——  返回geometry</p>
</li>
<li><p><strong>ST_ASGML(geometry)</strong>  ——  返回text</p>
<p>④Keyhole Mark-up Language（<a href="https://postgis.net/workshops/postgis-intro/glossary.html#term-kml">KML</a>）</p>
</li>
<li><p><strong>ST_GeomFromKML(text)</strong>  ——  返回geometry</p>
</li>
<li><p><strong>ST_ASKML(geometry)</strong>  ——   返回text</p>
<p>⑤<a href="https://postgis.net/workshops/postgis-intro/glossary.html#term-geojson">GeoJson</a></p>
</li>
<li><p><strong>ST_AsGeoJSON(geometry)</strong>  ——  返回text</p>
<p>⑥Scalable Vector Graphics(<a href="https://postgis.net/workshops/postgis-intro/glossary.html#term-svg">SVG</a>）</p>
</li>
<li><p><strong>ST_AsSVG(geometry)</strong>  ——  返回text</p>
</li>
</ul>
<p>EWKT和EWKB提供了与WKT和WKB相同的格式化功能，并且是在增加了<strong>维度</strong>的情况下。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ST_AsText(ST_GeometryFromText(<span class="string">&#x27;LINESTRING(0 0 0,1 0 0,1 1 2)&#x27;</span>));</span><br><span class="line">LINESTRING Z (0 0 0,1 0 0,1 1 2)</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ST_AsGeoJSON(ST_GeometryFromText(<span class="string">&#x27;LINESTRING(0 0 0,1 0 0,1 1 2)&#x27;</span>));</span><br><span class="line">&#123;&quot;type&quot;:&quot;LineString&quot;,&quot;coordinates&quot;:[[0,0,0],[1,0,0],[1,1,2]]&#125;</span><br></pre></td></tr></table></figure>



<p>注意：文本表示形式发生了变化！这是因为PostGIS的文本输入程序在使用方面是自由的。它可以使用：</p>
<ul>
<li><p>十六进制编码的EWKB</p>
</li>
<li><p>扩展的WKT</p>
</li>
<li><p>ISO标准的WKT</p>
<p>在输出端，ST_AsText()只返回<strong>ISO标准</strong>的WKT。</p>
<p>除了用于各种形式（WKT、WKB、GML、KML、JSON、SVG）的输出函数外，PostGIS还有基于四种形式（WKT、WKB、GML、KML）的输入函数。</p>
<p>大多数应用程序使用WKT或WKB几何图形创建函数，但是也可以使用其他形式的几何图形创建函数。</p>
</li>
</ul>
<p>WKT三维(3D)线串示例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ST_AsText(ST_GeometryFromText(<span class="string">&#x27;LINESTRING(0 0 0,1 0 0,1 1 2)&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>GML输入输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT ST_AsGeoJSON(ST_GeomFromGML(&#39;&lt;gml:Point&gt;&lt;gml:coordinates&gt;1,1&lt;&#x2F;gml:coordinates&gt;&lt;&#x2F;gml:Point&gt;&#39;));</span><br></pre></td></tr></table></figure>



<h3 id="文本类型转换"><a href="#文本类型转换" class="headerlink" title="文本类型转换"></a>文本类型转换</h3><p>将KWT字符串转换为几何图形geometry</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;POINT(0 0)&#x27;</span>::geometry;</span><br></pre></td></tr></table></figure>

<p>关于使用类型转换语法创建<strong>几何图形</strong>，需要注意一点：除非指定SRID，否则将得到一个包含未知SRID的<strong>几何图形</strong> </p>
<p>可以使用EWKT形式指定SRID，该形式在前面包含一个SRID：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &#39;SRID&#x3D;4326;POINT(0 0)&#39;::geometry;</span><br></pre></td></tr></table></figure>



<h2 id="基本函数集合"><a href="#基本函数集合" class="headerlink" title="基本函数集合"></a>基本函数集合</h2><table>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>ST_GeometryType(geometry)</td>
<td>返回集合图形的类型</td>
<td>select ST_GeometryType(geom) from geometries;</td>
</tr>
<tr>
<td>ST_NDims(geometry)</td>
<td>返回几何图形的维数</td>
<td>select ST_NDims(geom) from geometries;<br />select ST_NDims(ST_GeometryFromText(‘LINESTRING(0 0 0,1 0 0,1 1 2)’));</td>
</tr>
<tr>
<td>ST_SRID(geometry)</td>
<td>返回几何图形的空间参考标识号</td>
<td>select ST_SRID(geom) from geometries;</td>
</tr>
<tr>
<td>ST_X(point)</td>
<td>返回X坐标，只适用于点</td>
<td>select ST_X(geom) from geometries where name=’Point’;</td>
</tr>
<tr>
<td>ST_Y(point)</td>
<td>返回Y坐标，只适用于点</td>
<td>select ST_Y(geom) from geometries where name=’Point’;</td>
</tr>
<tr>
<td>ST_Length(linestring)</td>
<td>返回线串长度，其他类型为0</td>
<td>select ST_Length(geom) from geometries where name=’Linestring’;</td>
</tr>
<tr>
<td>ST_StartPoint(geometry)</td>
<td>返回第一个坐标作为点</td>
<td>select ST_StartPoint(geom) from geometries where name=’Linestring’;</td>
</tr>
<tr>
<td>ST_EndPoint(geometry)</td>
<td>返回最后一个坐标作为点</td>
<td>select ST_EndPoint(geom) from geometries where name=’Linestring’;</td>
</tr>
<tr>
<td>ST_NPoints(geometry)</td>
<td>返回坐标点数量</td>
<td>select ST_NPoints(geom) from geometries;</td>
</tr>
<tr>
<td>ST_Area(geometry)</td>
<td>返回区域面积，适用与多边形或集合</td>
<td>select ST_Area(geom) from geometries;</td>
</tr>
<tr>
<td>ST_NRings(geometry)</td>
<td>返回环的数量，适用于多边形或集合</td>
<td>select ST_NRings(geom) from geometries;</td>
</tr>
<tr>
<td>ST_ExteriorRing(geom)</td>
<td>以字符串的形式返回外环</td>
<td>select ST_ExteriorRing(geom) from geometries where name=’PolygonWithHole’;</td>
</tr>
<tr>
<td>ST_InteriorRingN(polygon, integer)</td>
<td>将指定的内环作为线字符串返回</td>
<td>select st_astext(ST_InteriorRingN(geom,1)) from geometries where name=’PolygonWithHole’;</td>
</tr>
<tr>
<td>ST_Perimeter(geometry)</td>
<td>返回所有环的长度,包括多边形的内环与外环,集合</td>
<td>select ST_Perimeter(geom) from geometries;</td>
</tr>
<tr>
<td>ST_NumGeometries(multi/geomcollection)</td>
<td>返回集合中的分片数</td>
<td>select ST_NumGeometries(geom) from geometries where name=’Collection’;</td>
</tr>
<tr>
<td>ST_GeometryN(geometry, integer)</td>
<td>返回集合的指定部分</td>
<td>select ST_AsText(ST_GeometryN(geom,2)) from geometries where name=’Collection’;</td>
</tr>
<tr>
<td><strong>以下为转换函数</strong></td>
<td></td>
<td><strong>以下为转换函数</strong></td>
</tr>
<tr>
<td>ST_GeomFromText(text)</td>
<td>通过WKT字符串返回geometry</td>
<td>select ST_AsText(ST_GeomFromText(‘Point(1 2)’));</td>
</tr>
<tr>
<td>ST_AsText(geometry)</td>
<td>返回WKT字符串</td>
<td>select ST_AsText(geom) from geometries;</td>
</tr>
<tr>
<td>ST_AsEWKT(geometry)</td>
<td>返回EWKT字符串</td>
<td>select ST_AsEWKT(geom) from geometries where name=’Collection’;</td>
</tr>
<tr>
<td>ST_GeomFromWKB(bytea)</td>
<td>通过WKB返回geometry</td>
<td>select ST_AsEWKB(geom) from geometries where name=’Point’;<br /> select st_astext(st_geomfromewkb(E’\x010100000000000000000000000000000000000000’));</td>
</tr>
<tr>
<td>ST_AsBinary(geometry)</td>
<td>返回WKB</td>
<td>select st_asbinary(geom) from geometries where name=’Point’;</td>
</tr>
<tr>
<td>ST_AsEWKB(geometry)</td>
<td>返回EWKB</td>
<td>select ST_AsEWKB(geom) from geometries where name=’Point’;</td>
</tr>
<tr>
<td>ST_GeomFromGML(text)</td>
<td>通过GML字符串返回geometry</td>
<td>SELECT ST_AsText(ST_GeomFromGML(‘&lt;gml:Point&gt;&lt;gml:coordinates&gt;1,1&lt;/gml:coordinates&gt;&lt;/gml:Point&gt;’));</td>
</tr>
<tr>
<td>ST_AsGML(geometry)</td>
<td>返回GML字符串</td>
<td>select st_asgml(geom) from geometries;</td>
</tr>
<tr>
<td>ST_AsKML(geometry)</td>
<td>返回KML</td>
<td>select ST_AsKML(‘SRID=4326;POINT(0 0)’::geometry);</td>
</tr>
<tr>
<td>ST_GeomFromKML(text)</td>
<td>通过KML返回geometry</td>
<td>select ST_GeomFromKML(‘&lt;Point&gt;&lt;coordinates&gt;0,0&lt;/coordinates&gt;&lt;/Point&gt;’);</td>
</tr>
<tr>
<td>ST_AsGeoJSON(geometry)</td>
<td>返回geojson字符串</td>
<td>select ST_AsGeoJSON(geom) from geometries;</td>
</tr>
<tr>
<td>ST_AsSVG(geometry)</td>
<td>返回svg字符串</td>
<td>select ST_AsSVG(geom) from geometries;</td>
</tr>
</tbody></table>
<h2 id="空间关系函数"><a href="#空间关系函数" class="headerlink" title="空间关系函数"></a>空间关系函数</h2><h3 id="相等"><a href="#相等" class="headerlink" title="相等"></a>相等</h3><h4 id="ST-Equals-geometry-A-geomrtey-B"><a href="#ST-Equals-geometry-A-geomrtey-B" class="headerlink" title="ST_Equals(geometry A,geomrtey B)"></a>ST_Equals(geometry A,geomrtey B)</h4><p>两个空间元素完全相等时，相当于对比坐标值的精确值,直接将geometry查询会输出一串数字就是精确值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  st_equals(st_geomfromtext(<span class="string">&#x27;Point(1 1)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;MultiPoint(0 1,1 1)&#x27;</span>)); // false</span><br><span class="line"><span class="keyword">select</span> st_equals(st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;POINT(1 1)&#x27;</span>)); // true</span><br></pre></td></tr></table></figure>

<h3 id="相交"><a href="#相交" class="headerlink" title="相交"></a>相交</h3><h4 id="ST-Intersects-geometry-A-geometry-B"><a href="#ST-Intersects-geometry-A-geometry-B" class="headerlink" title="ST_Intersects(geometry A, geometry B)"></a>ST_Intersects(geometry A, geometry B)</h4><h4 id="ST-Disjoint-geometry-A-geometry-B"><a href="#ST-Disjoint-geometry-A-geometry-B" class="headerlink" title="ST_Disjoint(geometry A, geometry B)"></a>ST_Disjoint(geometry A, geometry B)</h4><p>如果两个图形有相同的部分，即<strong>如果它们的边界或内部相交</strong>，则返回TRUE</p>
<p>对立方法是ST_Disjoint(geometry A, geometry B)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> st_intersects(st_geomfromtext(<span class="string">&#x27;Point(1 1)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;LINESTRING(1 1,2 2)&#x27;</span>)); // true</span><br><span class="line"><span class="keyword">select</span>  st_intersects(st_geomfromtext(<span class="string">&#x27;Point(1 1)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;MultiPoint(0 1,1 1)&#x27;</span>));// true</span><br></pre></td></tr></table></figure>

<h4 id="ST-Crosses-geometry-A-geometry-B"><a href="#ST-Crosses-geometry-A-geometry-B" class="headerlink" title="ST_Crosses(geometry A,geometry B)"></a>ST_Crosses(geometry A,geometry B)</h4><p> 对于multipoint/polygon、multipoint/linestring、linestring/linestring、linestring/polygon和linestring/multipolygon的比较，<strong>如果相交生成的几何图形的维度小于两个源几何图形的最大维度，且<u>相交集位于两个源几何图形的内部</u></strong>，则<strong>ST_Crosses(geometry A, geometry B)</strong>将返回TRUE</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 点集合与线串</span><br><span class="line">// 相交维度是点，且在线串内部</span><br><span class="line"><span class="keyword">select</span> ST_Crosses(st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 2)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;LINESTRING(0 0, 1 1,2 4)&#x27;</span>)); // true</span><br><span class="line">// 相交维度是点，但相交点在边界，不在线串内部</span><br><span class="line"><span class="keyword">select</span> ST_Crosses(st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 2)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;LINESTRING(2 2, 1 3,2 4)&#x27;</span>)); // false</span><br><span class="line">// 点集合与多边形</span><br><span class="line"><span class="keyword">select</span> ST_Crosses(st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 2)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;POLYGON((2 1,1 2, 2 3,3 3,2 1))&#x27;</span>)); // true</span><br><span class="line">// 2 1点仍在多边形的边界，则为false</span><br><span class="line"><span class="keyword">select</span> ST_Crosses(st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 1)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;POLYGON((2 1,1 2, 2 3,3 3,2 1))&#x27;</span>)); // false</span><br></pre></td></tr></table></figure>

<h4 id="ST-Overlaps-geometry-A-geometry-B"><a href="#ST-Overlaps-geometry-A-geometry-B" class="headerlink" title="ST_Overlaps(geometry A, geometry B)"></a>ST_Overlaps(geometry A, geometry B)</h4><p>比较两个相同维度的几何图形，如果<strong>它们的结果集与两个源几何图形都不同但具有相同维度</strong>，则返回TRUE。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 点与点相交不会提升或降低维度</span><br><span class="line">// 源集合图形相同则返回false</span><br><span class="line"><span class="keyword">select</span> ST_Overlaps(st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 1)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 1)&#x27;</span>)); // false</span><br><span class="line"><span class="keyword">select</span> ST_Overlaps(st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 1,2 2)&#x27;</span>), st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 1,3 3)&#x27;</span>));// true</span><br><span class="line">// 线与线相交</span><br><span class="line">// 相交图形维度是点，不具有相同维度</span><br><span class="line"><span class="keyword">select</span> ST_Overlaps(st_geomfromtext(<span class="string">&#x27;LINESTRING(1 1,2 2,3 3)&#x27;</span>), st_geomfromtext(<span class="string">&#x27;LINESTRING(0 3,2 2,3 0)&#x27;</span>)); // false</span><br><span class="line"><span class="keyword">select</span> ST_Overlaps(st_geomfromtext(<span class="string">&#x27;LINESTRING(1 1,2 2,3 3)&#x27;</span>), st_geomfromtext(<span class="string">&#x27;LINESTRING(0 3,2 2,3 3)&#x27;</span>)); // true</span><br></pre></td></tr></table></figure>

<h4 id="ST-Touches-geometry-A-geometry-B"><a href="#ST-Touches-geometry-A-geometry-B" class="headerlink" title="ST_Touches(geometry A, geometry B)"></a>ST_Touches(geometry A, geometry B)</h4><p>如果两个几何图形的<strong>边界相交</strong>，但不在内部相交，或者只有一个几何图形的内部与另一个几何图形的边界相交，则<strong>ST_Touches(geometry A, geometry B)</strong>将返回TRUE</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> st_touches(st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 2)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;LINESTRING(2 2, 1 3,2 4)&#x27;</span>)); // true</span><br><span class="line">// 交叉线串，认定为内部相交</span><br><span class="line"><span class="keyword">select</span> st_touches(st_geomfromtext(<span class="string">&#x27;LINESTRING(1 1,2 2,3 3)&#x27;</span>), st_geomfromtext(<span class="string">&#x27;LINESTRING(0 3,2 2,3 0)&#x27;</span>)); // false</span><br><span class="line">// 线串相交，在边界但内部也相交</span><br><span class="line"><span class="keyword">select</span> st_touches(st_geomfromtext(<span class="string">&#x27;LINESTRING(1 1,2 2,3 3)&#x27;</span>), st_geomfromtext(<span class="string">&#x27;LINESTRING(2 2,3 3,4 4)&#x27;</span>)); // false</span><br></pre></td></tr></table></figure>

<h4 id="ST-Within-ST-Contain"><a href="#ST-Within-ST-Contain" class="headerlink" title="ST_Within,ST_Contain"></a>ST_Within,ST_Contain</h4><p>如果第一个几何图形完全位于第二个几何图形内，则ST_Within(geometry A, geometry B)返回TRUE</p>
<p>如果第二个几何图形完全包含在第一个几何图形内，则ST_Contains(geometry A, geometry B)返回TRUE</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> st_contains(st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 1)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 1)&#x27;</span>)); // true</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> st_within(st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 1)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;LINESTRING(0 0,1 1,2 1,2 2)&#x27;</span>)); // true</span><br><span class="line"><span class="keyword">select</span> st_within(st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 1)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;LINESTRING(1 1,2 1)&#x27;</span>)); // false</span><br></pre></td></tr></table></figure>

<h4 id="ST-Distance-geometry-A-geometry-B"><a href="#ST-Distance-geometry-A-geometry-B" class="headerlink" title="ST_Distance(geometry A, geometry B)"></a>ST_Distance(geometry A, geometry B)</h4><p>计算两个几何图形之间的最短距离，并将其作为浮点数返回</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> st_distance(st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 1)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;LINESTRING(4 4,5 5)&#x27;</span>)); // 3.605551275463989</span><br><span class="line"><span class="keyword">select</span> st_distance(st_geomfromtext(<span class="string">&#x27;MultiPoint(1 1,2 1)&#x27;</span>),st_geomfromtext(<span class="string">&#x27;LINESTRING(1 1,2 1)&#x27;</span>)); // 0</span><br></pre></td></tr></table></figure>



<h2 id="空间表连接"><a href="#空间表连接" class="headerlink" title="空间表连接"></a>空间表连接</h2><h2 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">ON</span> tabl_name</span><br><span class="line"><span class="keyword">USING</span> GIST (column_name);</span><br></pre></td></tr></table></figure>

<p><strong>USING GIST</strong>子句告诉PostgreSQL在构建索引时使用generic index structure（<strong>GIST-通用索引结构</strong>）。创建索引时，如果收到类似错误：ERROR:index row requires 11340 bytes，maximum size is 8911，则可能是因为没有添加USING GIST子句</p>
<p> PostGIS和Oracle Spatial都具有相同的”R-Tree”空间索引结构。R-Tree将数据分解为<strong>矩形</strong>（rectangle）、<strong>子矩形</strong>（sub-rectangle）和<strong>子-子矩形</strong>（sub-sub rectangle）等。它是一种自调优（self-tuning）索引结构，可自动处理可变数据的密度和对象大小。</p>
<h3 id="纯索引查询"><a href="#纯索引查询" class="headerlink" title="纯索引查询"></a>纯索引查询</h3><p>使用”<strong>&amp;&amp;</strong>“运算符。对于几何图形，&amp;&amp;运算符表示”边界框重叠或接触”（纯索引查询），就像对于数字，”<strong><em>\</em>=**</strong>“运算符表示”值相同”</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>PostgreSQL查询规划器（query planner）智能地选择何时使用或不使用<strong>空间索引</strong>来计算查询</p>
<p>PostgreSQL保存每个索引列中数据分布的<strong>统计信息</strong>。默认情况下，PostgreSQL定期收集统计信息。但是，如果你在短时间内更改了表的构成，则统计数据将不会是最新的</p>
<p>为确保统计信息与表内容匹配，明智的做法是在表中加载和删除大容量数据后运行<strong>ANALYZE命令</strong>。这将强制统计系统收集所有索引列的统计信息。</p>
<p>ANALYZE命令要求PostgreSQL遍历该表并更新用于查询操作而估算的内部统计信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ANALYZE</span> table_name</span><br></pre></td></tr></table></figure>

<h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>仅仅创建<strong>空间索引</strong>不足以让PostgreSQL有效地使用它。每当创建新索引或对表大量更新、插入或删除后，都必须执行<strong>清理（VACUUMing）</strong>。<strong>VACUUM</strong>命令要求PostgreSQL回收表页面中因记录的更新或删除而留下的任何未使用的空间</p>
<p><strong>清理</strong>对于数据库的高效运行非常关键，因此，PostgreSQL提供了一个“<strong>自动清理</strong>（autovacuum）”选项。</p>
<p>默认情况下，<strong>自动清理机制</strong>会根据活动级别确定的合理时间间隔自动清理（恢复空间）和分析（更新统计信息）。虽然这对于高度事务性的数据库是必不可少的功能，但在添加索引或大容量数据之后等待自动清理运行是不明智的，如果执行大批量更新，则应该手动运行VACUUM命令。</p>
<p>根据需要，可以单独执行清理和分析。发出VACUUM命令不会更新数据库统计信息；同样，执行ANALYZE命令也不会清理未使用的表空间。这两个命令都可以针对整个数据库、单个表或单个列运行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">VACUUM <span class="keyword">ANALYZE</span> table_name;</span><br></pre></td></tr></table></figure>

<h2 id="投影数据"><a href="#投影数据" class="headerlink" title="投影数据"></a>投影数据</h2><p>地球不是平的，也没有简单的方法把它放在一张平面纸地图上（或电脑屏幕上），所以人们想出了各种巧妙的解决方案（<strong>投影</strong>）</p>
<p>每种投影方案都有优点和缺点，一些<strong>投影</strong>保留面积特征；一些<strong>投影</strong>保留角度特征，如<strong>墨卡托投影</strong>（Mercator）；一些<strong>投影</strong>试图找到一个很好的中间混合状态，在几个参数上只有很小的失真。所有<strong>投影</strong>的共同之处在于，它们将（地球）转换为<strong>平面笛卡尔坐标系</strong>，选择哪种投影取决于你将如何使用数据（需要哪些数据特征，面积？角度？或者其他）。</p>
<p>PostGIS包含更改数据投影（重投影）的功能，即使用<strong>ST_Transform(geometry, srid)</strong>函数就可以实现重投影</p>
<p>为了查看和设置几何图形的空间参照标识符，PostGIS提供了<strong>ST_SRID(geometry）</strong>和<strong>ST_SetSRID(geometry，SRID）</strong>函数</p>
<h3 id="比较数据"><a href="#比较数据" class="headerlink" title="比较数据"></a>比较数据</h3><p><u>坐标与SRID(空间参考系统)一起定义了地球上的一个位置</u>。“<strong>笛卡尔</strong>”坐标平面被定义为放置在地球表面的“平面”坐标系。由于PostGIS函数在这样的坐标系统上工作，因此关于两个几何图形的比较的操作都要基于同一SRID。</p>
<p>如果输入具有不同SRID的几何图形，则会得到错误：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ST_Equals(</span><br><span class="line">         ST_GeomFromText(<span class="string">&#x27;POINT(0 0)&#x27;</span>, <span class="number">4326</span>),</span><br><span class="line">         ST_GeomFromText(<span class="string">&#x27;POINT(0 0)&#x27;</span>, <span class="number">26918</span>)</span><br><span class="line">         );</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>空间索引</strong>是基于存储的几何图形的SRID构建的。如果在不同的SRID中进行比较，则通常不使用<strong>空间索引</strong>。最佳做法是为数据库中的所有表选择一个SRID。仅在向外部程序读取或写入数据时使用转换函数将数据转换为基于指定SRID的数据。</p>
</blockquote>
<h3 id="转换数据"><a href="#转换数据" class="headerlink" title="转换数据"></a>转换数据</h3><p>若要将数据从一种SRID转换为另一种SRID，必须首先验证几何图形是否具有有效的SRID。由于我们已经确认了当前数据中的SRID，所以接下来仅需要将<strong>投影坐标系统</strong>的SRID转换为<strong>地理坐标系统</strong>的SRID。</p>
<p>地理坐标最常见的SRID是4326（WGS84地理坐标系统），对应于”<strong>WGS84球体</strong>上的<strong>经度</strong>/<strong>纬度</strong>“</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ST_AsText(ST_Transform(geom,<span class="number">4326</span>))</span><br><span class="line"><span class="keyword">FROM</span> nyc_subway_stations</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">&#x27;Broad St&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="地理"><a href="#地理" class="headerlink" title="地理"></a>地理</h2><p>与Mercator（墨卡托）、UTM（通用横轴墨卡托）、Stateplane中的坐标不同，<strong>地理坐标</strong>不是笛卡尔平面坐标（Cartesian coordinates）。<strong>地理坐标</strong>并不表示平面上与原点的线性距离，相反，这些球坐标描述了地球上的角坐标。</p>
<p>可以将<strong>地理坐标</strong>看作近似的笛卡尔平面坐标，并继续进行空间计算，然而，关于距离、长度和面积的测量将会是毫无意义的。由于球坐标测量角度距离，因此单位以”<strong>度</strong>“表示</p>
<p>例如计算洛杉矶到巴黎的最近距离,4326声明了地理空间参考系统</p>
<ul>
<li>Los Angeles: <code>POINT(-118.4079 33.9434)</code></li>
<li>Paris: <code>POINT(2.3490 48.8533)</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ST_Distance(</span><br><span class="line">  ST_GeometryFromText(<span class="string">&#x27;POINT(-118.4079 33.9434)&#x27;</span>, <span class="number">4326</span>), <span class="comment">-- Los Angeles (LAX)</span></span><br><span class="line">  ST_GeometryFromText(<span class="string">&#x27;POINT(2.5559 49.0083)&#x27;</span>, <span class="number">4326</span>)     <span class="comment">-- Paris (CDG)</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>由geometry类型可以看到该单词为几何学的意思，对于点，线串，面而言，关于实际距离、长度、面积的测量都是不准确的。</p>
<p>为了计算出真实的距离，我们不能把<strong>地理坐标</strong>近似的看成笛卡尔平面坐标，而应该把它们看成是球坐标。我们必须把点之间的距离作为球面上的真实路径来测量——大圆的一部分。</p>
<p>使用geography类型来完成地理坐标的运算。使用ST_GeographyFromText函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT ST_Distance(</span><br><span class="line">  ST_GeographyFromText(&#39;POINT(-118.4079 33.9434)&#39;), -- Los Angeles (LAX)</span><br><span class="line">  ST_GeographyFromText(&#39;POINT(2.5559 49.0083)&#39;)     -- Paris (CDG)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<p>所有地理计算的返回值都以<strong>米</strong>为单位，所以我们的答案是9124km。</p>
<p>为了将geometry数据加载到geography表中，首先需要将geometry投影到EPSG:4326（经度-longitude/纬度-latitude），然后再将其转换为geography。<strong>ST_Transform(geometry, srid)</strong>函数能将坐标转换为地理坐标，<strong>Geography(geometry)</strong>函数能将geometry转换为geography</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> nyc_subway_stations_geog <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  Geography(ST_Transform(geom,<span class="number">4326</span>)) <span class="keyword">AS</span> geog,</span><br><span class="line">  <span class="keyword">name</span>,</span><br><span class="line">  routes</span><br><span class="line"><span class="keyword">FROM</span> nyc_subway_stations;</span><br></pre></td></tr></table></figure>



<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>对于geography类型，只有相关的少量空间函数：</p>
<ul>
<li><strong>ST_AsText(geography)</strong> returns <code>text</code></li>
<li><strong>ST_GeographyFromText(text)</strong> returns <code>geography</code></li>
<li><strong>ST_AsBinary(geography)</strong> returns <code>bytea</code></li>
<li><strong>ST_GeogFromWKB(bytea)</strong> returns <code>geography</code></li>
<li><strong>ST_AsSVG(geography)</strong> returns <code>text</code></li>
<li><strong>ST_AsGML(geography)</strong> returns <code>text</code></li>
<li><strong>ST_AsKML(geography)</strong> returns <code>text</code></li>
<li><strong>ST_AsGeoJson(geography)</strong> returns <code>text</code></li>
<li><strong>ST_Distance(geography, geography)</strong> returns <code>double</code></li>
<li><strong>ST_DWithin(geography, geography, float8)</strong> returns <code>boolean</code></li>
<li><strong>ST_Area(geography)</strong> returns <code>double</code></li>
<li><strong>ST_Length(geography)</strong> returns <code>double</code></li>
<li><strong>ST_Covers(geography, geography)</strong> returns <code>boolean</code></li>
<li><strong>ST_CoveredBy(geography, geography)</strong> returns <code>boolean</code></li>
<li><strong>ST_Intersects(geography, geography)</strong> returns <code>boolean</code></li>
<li><strong>ST_Buffer(geography, float8)</strong> returns <code>geography</code> <a href="https://postgis.net/workshops/postgis-intro/geography.html#casting-note">[1]</a></li>
<li><strong>ST_Intersection(geography, geography)</strong> returns <code>geography</code> <a href="https://postgis.net/workshops/postgis-intro/geography.html#casting-note">[1]</a></li>
</ul>
<h3 id="创建geograpgy"><a href="#创建geograpgy" class="headerlink" title="创建geograpgy"></a>创建geograpgy</h3><p>用于创建含有geography列的新表的SQL与用于创建geography表的SQL非常相似。但是，geography包含在表创建时直接指定表类型的功能</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> airports (</span><br><span class="line">  code <span class="built_in">VARCHAR</span>(<span class="number">3</span>),</span><br><span class="line">  geog GEOGRAPHY(Point)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> airports <span class="keyword">VALUES</span> (<span class="string">&#x27;LAX&#x27;</span>, <span class="string">&#x27;POINT(-118.4079 33.9434)&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> airports <span class="keyword">VALUES</span> (<span class="string">&#x27;CDG&#x27;</span>, <span class="string">&#x27;POINT(2.5559 49.0083)&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> airports <span class="keyword">VALUES</span> (<span class="string">&#x27;KEF&#x27;</span>, <span class="string">&#x27;POINT(-22.6056 63.9850)&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="转换为Geometry"><a href="#转换为Geometry" class="headerlink" title="转换为Geometry"></a>转换为Geometry</h3><p>虽然geography类型的空间函数已经可以处理许多问题，但有时你可能需要访问仅由geometry类型支持的其他空间函数。幸运的是，你可以将对象从geography转换为geometry。</p>
<p>在postgresql中直接使用::typename进行强制转换即可。可以将对象转换为SRID为4326的geometry。现在，我们就可以使用任何的geometry函数了。但是，请记住-现在我们的对象是geometry，坐标将被解释为<strong>笛卡尔平面坐标</strong>，而不是<strong>球体坐标</strong></p>
<p>直接支持geography类型的函数要少得多。其次，球体上的计算要比笛卡尔计算计算量大得多。例如，计算距离的笛卡尔坐标系的公式（Pythagoras)涉及一次对sqrt()的调用，计算距离的球体坐标的公式包含两次sqrt()调用、一次arctan()调用、四次sin()调用和两次cos()调用，三角函数的计算是非常耗费资源的。</p>
<blockquote>
<p><strong>如果你的数据在地理范围上是紧凑的（包含在州、县或市内），请使用基于笛卡尔坐标的geometry类型</strong></p>
<p><strong>如果你需要测量在地理范围上是分散的数据集（覆盖世界大部分地区）的距离，请使用geography类型</strong></p>
</blockquote>
<h3 id="坐标系和空间参考系统的关系"><a href="#坐标系和空间参考系统的关系" class="headerlink" title="坐标系和空间参考系统的关系"></a>坐标系和空间参考系统的关系</h3><h3 id="投影坐标系和地理坐标系的关系"><a href="#投影坐标系和地理坐标系的关系" class="headerlink" title="投影坐标系和地理坐标系的关系"></a>投影坐标系和地理坐标系的关系</h3><h4 id="地理坐标系"><a href="#地理坐标系" class="headerlink" title="地理坐标系"></a>地理坐标系</h4><p>Geographic coordinate system，球面坐标系统。</p>
<p>具有长半轴，短半轴，偏心率，还需要一个大地基准面(例如Datum: D_Beijing_1954)将这个椭球定位。</p>
<p>用经线（子午线）、纬线、经度、纬度表示地面点位的球面坐标。</p>
<p><strong>完整参数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alias:   </span><br><span class="line">Abbreviation:   </span><br><span class="line">Remarks:   </span><br><span class="line">Angular Unit: Degree (0.017453292519943299)   </span><br><span class="line">Prime Meridian（起始经度）: Greenwich (0.000000000000000000)   </span><br><span class="line">Datum（大地基准面）: D_Beijing_1954   </span><br><span class="line">Spheroid（参考椭球体）: Krasovsky_1940   </span><br><span class="line">Semimajor Axis: 6378245.000000000000000000   </span><br><span class="line">Semiminor Axis: 6356863.018773047300000000   </span><br><span class="line">Inverse Flattening: 298.300000000000010000 </span><br></pre></td></tr></table></figure>

<h4 id="投影坐标系"><a href="#投影坐标系" class="headerlink" title="投影坐标系"></a>投影坐标系</h4><p>投影坐标系统，实质上便是平面坐标系统，其地图单位通常为米。<u>每一个投影坐标系都必须有地理坐标系</u></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Projection: Gauss_Kruger   </span><br><span class="line">Parameters:   </span><br><span class="line">False_Easting: 500000.000000   </span><br><span class="line">False_Northing: 0.000000   </span><br><span class="line">Central_Meridian: 117.000000   </span><br><span class="line">Scale_Factor: 1.000000   </span><br><span class="line">Latitude_Of_Origin: 0.000000   </span><br><span class="line">Linear Unit: Meter (1.000000)   </span><br><span class="line">Geographic Coordinate System:   </span><br><span class="line">Name: GCS_Beijing_1954   </span><br><span class="line">Alias:   </span><br><span class="line">Abbreviation:   </span><br><span class="line">Remarks:   </span><br><span class="line">Angular Unit: Degree (0.017453292519943299)   </span><br><span class="line">Prime Meridian: Greenwich (0.000000000000000000)   </span><br><span class="line">Datum: D_Beijing_1954   </span><br><span class="line">Spheroid: Krasovsky_1940   </span><br><span class="line">Semimajor Axis: 6378245.000000000000000000   </span><br><span class="line">Semiminor Axis: 6356863.018773047300000000   </span><br><span class="line">Inverse Flattening: 298.300000000000010000</span><br></pre></td></tr></table></figure>

<p>为什么投影坐标系中存在地理坐标系的参数？将球面坐标转化为平面坐标的过程便称为投影。</p>
<p>投影的条件就出来了：</p>
<p>a、球面坐标</p>
<p>b、转化过程（也就是算法）</p>
<p>也就是说，要得到投影坐标就必须得有一个“拿来”投影的球面坐标，然后才能使用算法去投影！</p>
<p>即每一个投影坐标系统都必须要求有Geographic Coordinate System参数。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="在数据库多模式中使用PostGIS时，要查询的矢量数据在另一个模式business中，postgis拓展在check模式中。如果要使用函数的话就必须使用check-ST-AsGeoJSON函数"><a href="#在数据库多模式中使用PostGIS时，要查询的矢量数据在另一个模式business中，postgis拓展在check模式中。如果要使用函数的话就必须使用check-ST-AsGeoJSON函数" class="headerlink" title="在数据库多模式中使用PostGIS时，要查询的矢量数据在另一个模式business中，postgis拓展在check模式中。如果要使用函数的话就必须使用check.ST_AsGeoJSON函数?"></a>在数据库多模式中使用PostGIS时，要查询的矢量数据在另一个模式business中，postgis拓展在check模式中。如果要使用函数的话就必须使用check.ST_AsGeoJSON函数?</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter database postgres set search_path to public,xxhacheck,business;</span><br></pre></td></tr></table></figure>

<p>修改数据库默认的应用模式。一般情况下默认的是public，如果postgis没有注册在public，就会出现这种问题。</p>
]]></content>
      <categories>
        <category>PostGIS</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>GIS</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven中repository和mirror的使用</title>
    <url>/2021/02/24/Java/Maven%E4%B8%ADrepository%E5%92%8Cmirror%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>原文参考自: <a href="https://blog.csdn.net/sky_tree_delivery/article/details/105415048">https://blog.csdn.net/sky_tree_delivery/article/details/105415048</a></p>
<p>本文也是在使用到geotool工具时找到原文博客描述。在此记录一下非中央仓库引入jar包的问题。</p>
<p>repository称为仓库，是maven中储存jar包的站点，会提供pom文件、jar包等。为了使用户不配置任何仓库也可以加载资源，maven隐含地配置了maven的中央仓库（<code>name</code>属性为<code>central</code>），不论用户是否配置了自己的仓库。</p>
<p>repository仓库在项目pom中引入后可直接进行使用仓库下的jar依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>osgeo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSGeo Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.osgeo.org/repository/release/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.geotools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gt-referencing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>24.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但如果settings.xml文件中配置了,mirror标签，则mirror会对仓库进行拦截并代理下载。</p>
<p>mirror称为镜像，起拦截器的作用，本身不存储资源，而是指向一个资源地址（url）。镜像对项目中配置的仓库进行拦截，当一个镜像的<code>mirrodOf</code>参数匹配上了仓库的<code>name</code>参数，则进行资源映射，否则使用仓库中指定的url地址请求资源。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果mirrorOf设置了*，则所有的jar依赖 都匹配到从此url中获取jar依赖，但aliyun中只提供中央仓库central的jar，因此部分通过其他仓库引入的jar就回获取失败。</p>
<p>所以可以认定为mirror的优先级别大于repository，不在mirrorOf中使用*匹配。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>arcgis</tag>
      </tags>
  </entry>
  <entry>
    <title>Echarts相关属性设置</title>
    <url>/2021/02/22/Javascript/Echarts%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="通用设置"><a href="#通用设置" class="headerlink" title="通用设置"></a>通用设置</h3><h4 id="图表整体上下左右位置设置"><a href="#图表整体上下左右位置设置" class="headerlink" title="图表整体上下左右位置设置"></a>图表整体上下左右位置设置</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">grid: &#123;</span><br><span class="line">    top:20,</span><br><span class="line">    bottom: 20,</span><br><span class="line">    right:&#x27;15%&#x27;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>图表整体居上空白20，居下空白20，右侧空白百分之15%</p>
<h4 id="xy轴单位设置"><a href="#xy轴单位设置" class="headerlink" title="xy轴单位设置"></a>xy轴单位设置</h4><p>name属性则为单位</p>
<h4 id="tooltip悬浮信息自定义"><a href="#tooltip悬浮信息自定义" class="headerlink" title="tooltip悬浮信息自定义"></a>tooltip悬浮信息自定义</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">formatter: function (params) &#123;</span><br><span class="line">    return params.data.name + &quot;: &quot; + params.data.value + &quot; &quot; + res.data.body.unit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>params具有一些属性和值。</p>
<h3 id="坐标系图表"><a href="#坐标系图表" class="headerlink" title="坐标系图表"></a>坐标系图表</h3><h4 id="折线图x轴上的值没有与刻度线对齐"><a href="#折线图x轴上的值没有与刻度线对齐" class="headerlink" title="折线图x轴上的值没有与刻度线对齐"></a>折线图x轴上的值没有与刻度线对齐</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">xAxis:&#123;</span><br><span class="line">    boundaryGap: false, //值是否在刻度中间</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="折线图x轴的值没有显示全"><a href="#折线图x轴的值没有显示全" class="headerlink" title="折线图x轴的值没有显示全"></a>折线图x轴的值没有显示全</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">xAxis:&#123;</span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">        interval: 0,</span><br><span class="line">        rotate: 30</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>interval表示间隔多少个值才显示一个值，设为0则全部显示。</p>
<p>此时x轴密密麻麻，rotate属性设置值的倾斜角度，值越大倾斜越大</p>
]]></content>
      <categories>
        <category>echarts</category>
      </categories>
      <tags>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue相关操作</title>
    <url>/2021/02/17/Vue/Vue%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="for循环为指定元素设置事件"><a href="#for循环为指定元素设置事件" class="headerlink" title="for循环为指定元素设置事件"></a>for循环为指定元素设置事件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;i :class&#x3D;&quot;item.name&quot; class&#x3D;&quot;icon&quot; @dblclick&#x3D;&quot;chooseMethod(item.num)&quot; :style&#x3D;&quot;&#123;zIndex:item.zIndex&#125;&quot; v-for&#x3D;&quot;(item,i) in names&quot; :key&#x3D;&quot;i&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure>

<p>为当前循环的设置一个事件，以dblclick为例，向方法参数传递num，整个num是一个标识，是一个已经在methods中定义的方法的方法名。</p>
<p>例如我的names的数据为</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">		name: &#x27;el-icon-setting&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">		name: &#x27;el-icon-delete&#x27;,</span><br><span class="line">        num: &#x27;openClose&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在第二个元素中设置num标识位openClose，则通过一下方式会自动调用绑定的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chooseMethod(method)&#123;</span><br><span class="line">	if (method&#x3D;&#x3D;&#x3D; undefined || method&#x3D;&#x3D;&#x3D;&#39;&#39; || method&#x3D;&#x3D;&#x3D;null)&#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">	this[method]()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接会调用this[openClose]()这个方法。需要进行method判断，否则会发出异常。</p>
]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
  </entry>
  <entry>
    <title>Vue常见问题</title>
    <url>/2021/02/06/Vue/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="window定义的属性不能再vue渲染时引用"><a href="#window定义的属性不能再vue渲染时引用" class="headerlink" title="window定义的属性不能再vue渲染时引用"></a>window定义的属性不能再vue渲染时引用</h3><p>Property or method “window” is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: <a href="https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties">https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties</a>.</p>
<p>如果需要进行循环属性拼接，则在method中定义。</p>
<h3 id="JSONObject对象转换HashMap-lt-String-Bean-gt-类型"><a href="#JSONObject对象转换HashMap-lt-String-Bean-gt-类型" class="headerlink" title="JSONObject对象转换HashMap&lt;String,Bean&gt;类型"></a>JSONObject对象转换HashMap&lt;String,Bean&gt;类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置缓存</span><br><span class="line">redisUtil.set(Constants.PICTURE_CATEGORY_REFIX+userId,JSONObject.toJSONString(collect));</span><br><span class="line">&#x2F;&#x2F; json字符串转HashMap</span><br><span class="line">HashMap&lt;String, PictureCategory&gt; hashMap &#x3D; JSONObject.parseObject(o.toString(), new TypeReference&lt;HashMap&lt;String, PictureCategory&gt;&gt;() &#123;&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="Element-ui中el-dialog的destroy-on-close属性仅用于dialog内元素是组件的时候才可用-他销毁的是这个组件"><a href="#Element-ui中el-dialog的destroy-on-close属性仅用于dialog内元素是组件的时候才可用-他销毁的是这个组件" class="headerlink" title="Element-ui中el-dialog的destroy-on-close属性仅用于dialog内元素是组件的时候才可用,他销毁的是这个组件"></a>Element-ui中el-dialog的destroy-on-close属性仅用于dialog内元素是组件的时候才可用,他销毁的是这个组件</h3><p>参考: <a href="https://www.jianshu.com/p/77d1ba476a6d">https://www.jianshu.com/p/77d1ba476a6d</a></p>
<h3 id="在el-dialog使用-before-close属性时，绑定的回调方法中一定要在最后执行done-函数，否则无法关闭"><a href="#在el-dialog使用-before-close属性时，绑定的回调方法中一定要在最后执行done-函数，否则无法关闭" class="headerlink" title="在el-dialog使用:before-close属性时，绑定的回调方法中一定要在最后执行done()函数，否则无法关闭"></a>在el-dialog使用:before-close属性时，绑定的回调方法中一定要在最后执行done()函数，否则无法关闭</h3>]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>apache与nginx允许静态资源跨域访问</title>
    <url>/2021/01/26/Javascript/apache%E4%B8%8Enginx%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h3 id="Nginx静态资源跨域访问配置"><a href="#Nginx静态资源跨域访问配置" class="headerlink" title="Nginx静态资源跨域访问配置"></a>Nginx静态资源跨域访问配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;oss&#x2F; &#123;</span><br><span class="line">    add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;</span><br><span class="line">    add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET,POST,PUT,DELETE,OPTIONS&#39;;</span><br><span class="line">    if ($request_method &#x3D; OPTIONS ) &#123;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">        add_header Access-Control-Allow-Credentials true; </span><br><span class="line">        add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET,POST,PUT,DELETE,OPTIONS&#39;;</span><br><span class="line">        add_header Access-Control-Allow-Headers Origin,X-Requested-With,Content-Type,Accept,Authorization;</span><br><span class="line">        return 200;</span><br><span class="line">    &#125;</span><br><span class="line">    alias D:&#x2F;oss&#x2F;;</span><br><span class="line">    autoindex on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在nginx.conf中，改代码为静态资源映射，目标为D:/oss/目录，访问资源标识名为/oss/。</p>
<p>其中在Access-Control-Allow-Headers的配置中,可能会根据不同的请求头中的请求头名称而不同</p>
<p><code>nginx.exe -s reload</code>重启nginx</p>
<h3 id="Apache跨域访问"><a href="#Apache跨域访问" class="headerlink" title="Apache跨域访问"></a>Apache跨域访问</h3><p>修改conf/httpd.conf文件的<code>LoadModule headers_module modules/mod_headers.so</code>注释打开</p>
<p>修改conf/extra/httpd-vhosts.conf的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    #ServerAdmin localhost</span><br><span class="line">    DocumentRoot &quot;$&#123;SRVROOT&#125;&#x2F;htdocs&quot;</span><br><span class="line">    Header set Access-Control-Allow-Origin *</span><br><span class="line">    ServerName localhost</span><br><span class="line">    #ServerAlias www.dummy-host.example.com</span><br><span class="line">    #ErrorLog &quot;logs&#x2F;dummy-host.example.com-error.log&quot;</span><br><span class="line">    #CustomLog &quot;logs&#x2F;dummy-host.example.com-access.log&quot; common</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>在httpd.conf,找到<code>Include conf/extra/httpd-vhosts.conf</code>并解开注释</p>
<p>然后重新启动Apache服务</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>持久化存储nfs,pv和pvc</title>
    <url>/2021/01/20/k8s/%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8nfs,pv%E5%92%8Cpvc/</url>
    <content><![CDATA[<h3 id="持久化存储nfs"><a href="#持久化存储nfs" class="headerlink" title="持久化存储nfs"></a>持久化存储nfs</h3><h4 id="nfs操作"><a href="#nfs操作" class="headerlink" title="nfs操作"></a>nfs操作</h4><p>pod是临时的，销毁后数据不会被存储到本地磁盘上。</p>
<ol>
<li>找一台专门的服务器用于挂载nfs持久化。首先在新服务需要安装<code>nfs-utils</code>，node节点上也需要安装。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y nfs-utils</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>为nfs服务器设置挂载路径</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;exports</span><br><span class="line"></span><br><span class="line">&#x2F;data&#x2F;nfs *(rw,no_root_squash)</span><br></pre></td></tr></table></figure>

<p>指定nfs存在/data/nfs目录。*标识可访问所有目录文件，rw为可读写，</p>
<ul>
<li>no_root_squash：登入 NFS 主机使用分享目录的使用者，如果是 root 的话，那么对于这个分享的目录来说，他就具有 root 的权限！这个项目『极不安全』，不建议使用！</li>
<li>root_squash：在登入 NFS 主机使用分享之目录的使用者如果是 root 时，那么这个使用者的权限将被压缩成为匿名使用者，通常他的 UID 与 GID 都会变成 nobody 那个系统账号的身份。</li>
</ul>
<blockquote>
<p>nfs的存储位置一定要预先创建出来。</p>
</blockquote>
<ol start="3">
<li>nfs服务器启动nfs服务</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start nfs</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在k8s中使用nfs</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-dep1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wwwroot</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wwwroot</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.44</span><span class="number">.134</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/data/nfs</span></span><br></pre></td></tr></table></figure>

<p>deployment中使用了nfs，定义挂载nfs服务器地址和路径，绑定挂载数据卷，mountPath为容器内部挂载路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f nfs-nginx.yaml</span><br></pre></td></tr></table></figure>

<p>启动后使用<code>kubectl exec -it pod名称 bash</code>命令进入容器内。通过进入<code>/usr/share/nginx/html</code>目录查看，没有数据，在/data/nfs中创建一个文件，然后在容器内目录中就能看到文件</p>
<h3 id="PV和PVC"><a href="#PV和PVC" class="headerlink" title="PV和PVC"></a>PV和PVC</h3><p>因为直接配置nfs到deployment中可能不安全，因此，将nfs的配置放到PV中，也就是Kind为<code>PersistentVolume</code>的yaml。其中定义了PV的大小，读写权限，服务器和所在位置等。</p>
<p>PVC的Kind为<code>PersistentVolumeClaim</code>，其条件定义读写权限、存储大小等这些，用于匹配已经定义的PV。再将deployment与pvc进行关联。</p>
<p>由应用来配置pvc，pvc绑定pv。pv用来数据存储，pvc用来查找与调用。匹配方式为存储容量和匹配模式(读写)</p>
<ol>
<li>pv.yaml。定义模式为读写模式，大小为5G</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">5Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/data/nfs</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.38</span><span class="number">.131</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl get pv</span><br><span class="line">NAME    CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE</span><br><span class="line">my-pv   5Gi        RWX            Retain           Available                                   4s</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>pvc.yaml，其中包含了Deployment和PersistentVolumeClaim</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-dep1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wwwroot</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wwwroot</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">my-pvc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">5Gi</span></span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl get pv,pvc</span><br><span class="line">NAME                     CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM            STORAGECLASS   REASON   AGE</span><br><span class="line">persistentvolume&#x2F;my-pv   5Gi        RWX            Retain           Bound    default&#x2F;my-pvc                           16s</span><br><span class="line"></span><br><span class="line">NAME                           STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">persistentvolumeclaim&#x2F;my-pvc   Bound    my-pv    5Gi        RWX                           9s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>ajax post请求下载文件</title>
    <url>/2021/01/18/Javascript/ajax-post%E8%AF%B7%E6%B1%82%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>post请求携带字符串类型,list,map类型数据,后台使用<code>@RequestBody Map&lt;String,Object&gt;</code>进行接收</p>
<p>html参考</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/1.9.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url: <span class="string">&#x27;http://localhost:8080/download&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                method: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                data: <span class="built_in">JSON</span>.stringify(&#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;1231&quot;</span>, <span class="string">&quot;array&quot;</span>: [&#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;123&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">12</span> &#125;] &#125;),</span></span><br><span class="line"><span class="javascript">                contentType: <span class="string">&quot;application/json&quot;</span>, <span class="comment">//必须有</span></span></span><br><span class="line"><span class="javascript">                responseType: <span class="string">&#x27;blob&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                processData: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">async</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> url = <span class="built_in">window</span>.URL.createObjectURL(<span class="keyword">new</span> Blob([data]))</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                    link.style.display = <span class="string">&#x27;none&#x27;</span></span></span><br><span class="line">                    link.href = url</span><br><span class="line"><span class="javascript">                    link.setAttribute(<span class="string">&#x27;download&#x27;</span>, <span class="string">&#x27;asdasd.md&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.body.appendChild(link)</span></span><br><span class="line">                    link.click()</span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.body.removeChild(link); <span class="comment">//下载完成移除元素</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.URL.revokeObjectURL(url); <span class="comment">//释放掉blob对象</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用此方式是通过创建一个blob的对象来处理的，没办法得到后台设置的下载文件名，因此这块需要在前端来设置文件名。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>linux上仅编译redis-cli</title>
    <url>/2021/01/18/Linux/linux%E4%B8%8A%E4%BB%85%E7%BC%96%E8%AF%91redis-cli/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;download.redis.io&#x2F;redis-stable.tar.gz</span><br><span class="line">tar -xvzf redis-stable.tar.gz</span><br><span class="line">cd redis-stable</span><br><span class="line">make redis-cli</span><br><span class="line">sudo cp src&#x2F;redis-cli &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s helm</title>
    <url>/2021/01/15/k8s/k8s-helm/</url>
    <content><![CDATA[<h3 id="安装helm客户端"><a href="#安装helm客户端" class="headerlink" title="安装helm客户端"></a>安装helm客户端</h3><p>在<a href="https://github.com/helm/helm/releases">helm github发布页面</a>下载3.x版本的包，找到<code>Installation and Upgrading</code>标题下的包进行下载，Assets下的asc后缀文件是不对的。</p>
<p>将下载的包解压，将helm文件放到<code>/user/bin</code>下。</p>
<h3 id="heml操作命令"><a href="#heml操作命令" class="headerlink" title="heml操作命令"></a>heml操作命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看相关命令</span><br><span class="line">helm help</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个chart并制定&#x3D;&#x3D;指定名字</span><br><span class="line">helm craete</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 管理chart依赖</span><br><span class="line">helm dependency</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 下载一个release。可用子命令：all、hooks、manifest、notes、values</span><br><span class="line">helm get</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取release历史</span><br><span class="line">helm history</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装一个chart</span><br><span class="line">helm install</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 列出release</span><br><span class="line">helm list</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将chart目录打包到chart存档文件中</span><br><span class="line">helm package</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 从远程仓库中下载chart并解压到本地 helm pull stable&#x2F;mysql --untar</span><br><span class="line">helm pull</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加、列出、移除、更新和索引chart仓库。可用子命令：add、index、list、remove、update</span><br><span class="line">helm repo</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 回滚之前的版本</span><br><span class="line">helm rollback</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据关键字搜索chart。可用子命令：hub、repo</span><br><span class="line">helm search</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;根据关键字搜索chart。可用子命令：all、chart、readme、value</span><br><span class="line">helm show</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 显示已命名版本的状态</span><br><span class="line">helm status</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 本地呈现模板</span><br><span class="line">helm template</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 卸载一个release</span><br><span class="line">helm uninstall</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 更新一个release</span><br><span class="line">helm upgrade</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 查看helm客户端版本</span><br><span class="line">helm version</span><br></pre></td></tr></table></figure>



<h3 id="配置存储库"><a href="#配置存储库" class="headerlink" title="配置存储库"></a>配置存储库</h3><h4 id="添加存储库"><a href="#添加存储库" class="headerlink" title="添加存储库"></a>添加存储库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm repo add stable http:&#x2F;&#x2F;mirror.azure.cn&#x2F;kubernetes&#x2F;charts </span><br><span class="line">helm repo add aliyun https:&#x2F;&#x2F;kubernetes.oss-cn-hangzhou.aliyuncs.com&#x2F;charts </span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure>

<h4 id="查看配置的存储库"><a href="#查看配置的存储库" class="headerlink" title="查看配置的存储库"></a>查看配置的存储库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm repo list </span><br><span class="line">helm search repo stable</span><br></pre></td></tr></table></figure>

<h4 id="删除存储库"><a href="#删除存储库" class="headerlink" title="删除存储库"></a>删除存储库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm repo remove aliyun</span><br></pre></td></tr></table></figure>

<h3 id="部署一个应用"><a href="#部署一个应用" class="headerlink" title="部署一个应用"></a>部署一个应用</h3><h4 id="查找chart"><a href="#查找chart" class="headerlink" title="查找chart"></a>查找chart</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@k8smaster ~]# helm search repo weave</span><br><span class="line">NAME              	CHART VERSION	APP VERSION	DESCRIPTION                                       </span><br><span class="line">aliyun&#x2F;weave-cloud	0.1.2        	           	Weave Cloud is a add-on to Kubernetes which pro...</span><br><span class="line">aliyun&#x2F;weave-scope	0.9.2        	1.6.5      	A Helm chart for the Weave Scope cluster visual...</span><br><span class="line">stable&#x2F;weave-cloud	0.3.9        	1.4.0      	DEPRECATED - Weave Cloud is a add-on to Kuberne...</span><br><span class="line">stable&#x2F;weave-scope	1.1.12       	1.12.0     	DEPRECATED - A Helm chart for the Weave Scope c...</span><br></pre></td></tr></table></figure>

<h4 id="查看chart信息"><a href="#查看chart信息" class="headerlink" title="查看chart信息"></a>查看chart信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# helm show chart aliyun&#x2F;weave-scope</span><br><span class="line">apiVersion: v1</span><br><span class="line">appVersion: 1.6.5</span><br><span class="line">description: A Helm chart for the Weave Scope cluster visualizer.</span><br><span class="line">home: https:&#x2F;&#x2F;www.weave.works&#x2F;oss&#x2F;scope&#x2F;</span><br><span class="line">icon: https:&#x2F;&#x2F;avatars1.githubusercontent.com&#x2F;u&#x2F;9976052?s&#x3D;64</span><br><span class="line">keywords:</span><br><span class="line">- containers</span><br><span class="line">- dashboard</span><br><span class="line">- monitoring</span><br><span class="line">maintainers:</span><br><span class="line">- email: github@orion-com.com</span><br><span class="line">  name: omkensey</span><br><span class="line">name: weave-scope</span><br><span class="line">sources:</span><br><span class="line">- https:&#x2F;&#x2F;github.com&#x2F;weaveworks&#x2F;scope</span><br><span class="line">version: 0.9.2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="安装chart包"><a href="#安装chart包" class="headerlink" title="安装chart包"></a>安装chart包</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm install ui stable&#x2F;weave-scope</span><br></pre></td></tr></table></figure>

<p>ui为安装标识</p>
<h4 id="查看发布状态"><a href="#查看发布状态" class="headerlink" title="查看发布状态"></a>查看发布状态</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# helm list</span><br><span class="line">NAME	NAMESPACE	REVISION	UPDATED                                	STATUS  	CHART             	APP VERSION</span><br><span class="line">ui  	default  	1       	2021-01-15 12:57:08.439969032 +0800 CST	deployed	weave-scope-1.1.12	1.12.0     </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# helm status ui</span><br><span class="line">NAME: ui</span><br><span class="line">LAST DEPLOYED: Fri Jan 15 12:57:08 2021</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">NOTES:</span><br><span class="line">You should now be able to access the Scope frontend in your web browser, by</span><br><span class="line">using kubectl port-forward:</span><br><span class="line"></span><br><span class="line">kubectl -n default port-forward $(kubectl -n default get endpoints \</span><br><span class="line">ui-weave-scope -o jsonpath&#x3D;&#39;&#123;.subsets[0].addresses[0].targetRef.name&#125;&#39;) 8080:4040</span><br><span class="line"></span><br><span class="line">then browsing to http:&#x2F;&#x2F;localhost:8080&#x2F;.</span><br><span class="line">For more details on using Weave Scope, see the Weave Scope documentation:</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.weave.works&#x2F;docs&#x2F;scope&#x2F;latest&#x2F;introducing&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="更改svc外部暴露端口，供外部访问"><a href="#更改svc外部暴露端口，供外部访问" class="headerlink" title="更改svc外部暴露端口，供外部访问"></a>更改svc外部暴露端口，供外部访问</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl get svc</span><br><span class="line">NAME             TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes       ClusterIP   10.96.0.1        &lt;none&gt;        443&#x2F;TCP        7d22h</span><br><span class="line">ui-weave-scope   NodePort    10.103.9.139     &lt;none&gt;        80:31055&#x2F;TCP   10h</span><br></pre></td></tr></table></figure>

<p>以上默认是ClusterIP，没有31055端口，通过以下命令，可将type更改为NodePort</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl edit svc ui-weave-scope</span><br></pre></td></tr></table></figure>

<p>输入命令后会弹出类似vi的service的yaml，只需要修改type的值为NodePort后保存退出，service会自动更新</p>
<p>访问<code>http://192.168.38.131:31055/</code>即可看到ui界面</p>
<h3 id="自定义chart部署"><a href="#自定义chart部署" class="headerlink" title="自定义chart部署"></a>自定义chart部署</h3><h4 id="使用命令创建模板"><a href="#使用命令创建模板" class="headerlink" title="使用命令创建模板"></a>使用命令创建模板</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# helm create mychart</span><br><span class="line">Creating mychart</span><br><span class="line">[root@k8smaster mychart]# ls</span><br><span class="line">charts  Chart.yaml  templates  values.yaml</span><br></pre></td></tr></table></figure>

<p>该命令会创建一个对应<code>chart_name</code>的目录</p>
<ul>
<li>charts：chart安装后的目录</li>
<li>Charts.yaml：当前chart属性配置信息</li>
<li>templates：编写的yaml文件放到这个目录中，默认创建后会有一些模板文件</li>
<li>values.yaml：yaml文件可以使用全局变量</li>
</ul>
<h4 id="将deployment-yaml和service-yaml文件放到templates中"><a href="#将deployment-yaml和service-yaml文件放到templates中" class="headerlink" title="将deployment.yaml和service.yaml文件放到templates中"></a>将deployment.yaml和service.yaml文件放到templates中</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create deployment web --image&#x3D;nginx --dry-run -o yaml &gt; deployment.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl expose deployment web --port&#x3D;80 --target-port&#x3D;80 --type&#x3D;NodePort --dry-run -o yaml &gt; service.yaml</span><br></pre></td></tr></table></figure>

<p>因为deployment是尝试创建并转为yaml，所以pod中并不真实存在，因此在expose创建service时没有这个deployment，所以可能无法创建。因此先实际创建这个deployment，然后导出service，然后删除已经创建的deployment。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# helm install web1 mychart&#x2F;</span><br><span class="line">NAME: web1</span><br><span class="line">LAST DEPLOYED: Mon Jan 18 23:19:14 2021</span><br><span class="line">NAMESPACE: default</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">[root@k8smaster ~]# kubectl get pods</span><br><span class="line">NAME                                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">web-6799fc88d8-6vwpr                          1&#x2F;1     Running   0          49s</span><br><span class="line">weave-scope-agent-ui-97x28                      1&#x2F;1     Running   2          3d10h</span><br><span class="line">weave-scope-agent-ui-jfvjn                      1&#x2F;1     Running   2          3d10h</span><br><span class="line">weave-scope-agent-ui-x8hqh                      1&#x2F;1     Running   2          3d10h</span><br><span class="line">weave-scope-cluster-agent-ui-5cbc84db49-vbwt4   1&#x2F;1     Running   2          3d10h</span><br><span class="line">weave-scope-frontend-ui-6698fd5545-xg6kk        1&#x2F;1     Running   2          3d10h</span><br><span class="line">[root@k8smaster ~]# kubectl get svc</span><br><span class="line">NAME             TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes       ClusterIP   10.96.0.1        &lt;none&gt;        443&#x2F;TCP        10d</span><br><span class="line">ui-weave-scope   NodePort    10.103.9.139     &lt;none&gt;        80:31055&#x2F;TCP   3d10h</span><br><span class="line">web              NodePort    10.109.105.133   &lt;none&gt;        80:31881&#x2F;TCP   61s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="使用values-yaml文件作为全局变量"><a href="#使用values-yaml文件作为全局变量" class="headerlink" title="使用values.yaml文件作为全局变量"></a>使用values.yaml文件作为全局变量</h4><p>使用<code>&#123;&#123;.Values.变量名称&#125;&#125;</code>,如<code>&#123;&#123;Values.tag&#125;&#125;</code></p>
<p>内置变量:</p>
<ul>
<li>：release名字，该值会使名称不重复</li>
<li>：release命名空间</li>
<li>：release服务的名称</li>
<li>：release修订版本号



</li>
</ul>
<p>修改values.yaml，删除原有的数据，新增如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">tag:</span> <span class="number">1.16</span></span><br><span class="line"><span class="attr">label:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>在deployment.yaml修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> &#123;&#123;<span class="string">.Release.Name</span>&#125;&#125;<span class="string">-dp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> &#123;&#123; <span class="string">.Values.label</span> &#125;&#125;</span><br><span class="line">  <span class="attr">strategy:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> &#123;&#123; <span class="string">.Values.label</span> &#125;&#125;</span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> &#123;&#123; <span class="string">.Values.image</span> &#125;&#125;</span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line"><span class="attr">status:</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改service.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> &#123;&#123;<span class="string">.Release.Name</span>&#125;&#125;<span class="string">-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> &#123;&#123; <span class="string">.Values.port</span>&#125;&#125;</span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> &#123;&#123;<span class="string">.Values.label</span>&#125;&#125;</span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>使用尝试运行命令打印yaml查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm install --dry-run web2 mychart</span><br></pre></td></tr></table></figure>

<p>修改后安装web2为名称，mychart为chart模板</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm install web2 mychart</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>k8s</category>
      </categories>
  </entry>
  <entry>
    <title>deepin20创建桌面图标</title>
    <url>/2021/01/15/Linux/deepin20%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<p>将下载的idea.tar.gz解压到opt/apps/idea目录下</p>
<p>根据应用商店下载的微信，将微信发送到桌面，可以在桌面点击右击通过编辑器打开，看到文件名的格式是app-id.desktop</p>
<p>参照文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding&#x3D;UTF-8</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">X-Created-By&#x3D;IDEA</span><br><span class="line">Categories&#x3D;chat;</span><br><span class="line">Icon&#x3D;idea</span><br><span class="line">Exec&#x3D;&quot;&#x2F;opt&#x2F;apps&#x2F;idea&#x2F;bin&#x2F;idea.sh&quot;</span><br><span class="line">Name&#x3D;idea</span><br><span class="line">Name[zh_CN]&#x3D;IDEA</span><br><span class="line">Comment&#x3D;IDEA</span><br><span class="line">#StartupWMClass&#x3D;WeChat.exe</span><br><span class="line">MimeType&#x3D;</span><br><span class="line">X-Deepin-CreatedBy&#x3D;com.deepin.dde.daemon.Launcher</span><br><span class="line">X-Deepin-AppID&#x3D;com.idea</span><br></pre></td></tr></table></figure>

<p>X-Deepin-AppID是随意起的AppID标识不同应用，而最后保存的名称是com.idea.desktop。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>deepin v20版本安装docker</title>
    <url>/2021/01/14/Docker/deepin-v20%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85docker/</url>
    <content><![CDATA[<p>按照官方文档依次安装</p>
<ol>
<li><p>删除旧版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装依赖及密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line"></span><br><span class="line">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian&#x2F;gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装仓库</p>
<p>此处无法通过官方文档进行安装，但主要的命令是将仓库源添加到sources.list中</p>
<p><code>$(lsb_release -cs)</code>此处版本标识换为debian的发行版本代号。通过<code>cat /etc/debian_version</code>查看版本号，deepin20基于debian10，版本号为buster，debain9版本代号为stretch，debian8版本代号为jessie</p>
<p>如果使用官方命令执行add-apt-repository命令无法添加，报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;bin&#x2F;add-apt-repository&quot;, line 95, in &lt;module&gt;</span><br><span class="line">    sp &#x3D; SoftwareProperties(options&#x3D;options)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;softwareproperties&#x2F;SoftwareProperties.py&quot;, line 109, in __init__</span><br><span class="line">    self.reload_sourceslist()</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;softwareproperties&#x2F;SoftwareProperties.py&quot;, line 599, in reload_sourceslist</span><br><span class="line">    self.distro.get_sources(self.sourceslist)    </span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;aptsources&#x2F;distro.py&quot;, line 93, in get_sources</span><br><span class="line">    (self.id, self.codename))</span><br><span class="line">aptsources.distro.NoDistroTemplateException: Error: could not find a distribution template for Deepin&#x2F;n&#x2F;a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们需要直接将命令放到<code>/etc/apt/sources/list</code>中，使用<code>sudo dedit /etc/apt/sources.list</code>命令打开文本编辑器，sudo的作用是权限，如果没有则只打开为只读模式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian buster stable</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装docker engine</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置普通用户访问权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -a $USER docker</span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>监听程序及远程连接NETWORK配置</title>
    <url>/2021/01/14/Oracle/%E7%9B%91%E5%90%AC%E7%A8%8B%E5%BA%8F%E5%8F%8A%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5NETWORK%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>NETWORK/ADMIN/listener.ora</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># listener.ora Network Configuration File: D:\app\chen\product\11.2.0\dbhome_1\network\admin\listener.ora</span><br><span class="line"># Generated by Oracle configuration tools.</span><br><span class="line"></span><br><span class="line">SID_LIST_LISTENER &#x3D;</span><br><span class="line">  (SID_LIST &#x3D;</span><br><span class="line">    (SID_DESC &#x3D;</span><br><span class="line">      (SID_NAME &#x3D; CLRExtProc)</span><br><span class="line">      (ORACLE_HOME &#x3D; D:\app\chen\product\11.2.0\dbhome_1)</span><br><span class="line">      (PROGRAM &#x3D; extproc)</span><br><span class="line">      (ENVS &#x3D; &quot;EXTPROC_DLLS&#x3D;ONLY:D:\app\chen\product\11.2.0\dbhome_1\bin\oraclr11.dll&quot;)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">LISTENER &#x3D;</span><br><span class="line">  (DESCRIPTION_LIST &#x3D;</span><br><span class="line">    (DESCRIPTION &#x3D;</span><br><span class="line">      (ADDRESS &#x3D; (PROTOCOL &#x3D; IPC)(KEY &#x3D; EXTPROC1521))</span><br><span class="line">      (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; LAPTOP-2SMJEG8K)(PORT &#x3D; 1521))</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">ADR_BASE_LISTENER &#x3D; D:\app\chen</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>NETWORK/ADMIN/sqlnet.ora</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sqlnet.ora Network Configuration File: D:\app\chen\product\11.2.0\dbhome_1\network\admin\sqlnet.ora</span><br><span class="line"># Generated by Oracle configuration tools.</span><br><span class="line"></span><br><span class="line"># This file is actually generated by netca. But if customers choose to </span><br><span class="line"># install &quot;Software Only&quot;, this file wont exist and without the native </span><br><span class="line"># authentication, they will not be able to connect to the database on NT.</span><br><span class="line"></span><br><span class="line">#SQLNET.AUTHENTICATION_SERVICES&#x3D; (NONE)</span><br><span class="line"></span><br><span class="line">NAMES.DIRECTORY_PATH&#x3D; (TNSNAMES, EZCONNECT)</span><br><span class="line"></span><br><span class="line">ADR_BASE &#x3D; D:\app\chen\product\11.2.0\dbhome_1\log</span><br></pre></td></tr></table></figure>

<p>NETWORK/ADMIN/tnsnames.ora</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tnsnames.ora Network Configuration File: D:\app\chen\product\11.2.0\dbhome_1\network\admin\tnsnames.ora</span><br><span class="line"># Generated by Oracle configuration tools.</span><br><span class="line"></span><br><span class="line">HSBDC &#x3D;</span><br><span class="line">  (DESCRIPTION &#x3D;</span><br><span class="line">    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; LAPTOP-2SMJEG8K)(PORT &#x3D; 1521))</span><br><span class="line">    (CONNECT_DATA &#x3D;</span><br><span class="line">      (SERVER &#x3D; DEDICATED)</span><br><span class="line">      (SERVICE_NAME &#x3D; hsbdc)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">ORACLR_CONNECTION_DATA &#x3D;</span><br><span class="line">  (DESCRIPTION &#x3D;</span><br><span class="line">    (ADDRESS_LIST &#x3D;</span><br><span class="line">      (ADDRESS &#x3D; (PROTOCOL &#x3D; IPC)(KEY &#x3D; EXTPROC1521))</span><br><span class="line">    )</span><br><span class="line">    (CONNECT_DATA &#x3D;</span><br><span class="line">      (SID &#x3D; CLRExtProc)</span><br><span class="line">      (PRESENTATION &#x3D; RO)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">BTBDC &#x3D;</span><br><span class="line">  (DESCRIPTION &#x3D;</span><br><span class="line">    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; LAPTOP-2SMJEG8K)(PORT &#x3D; 1521))</span><br><span class="line">    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; localhost)(PORT &#x3D; 1521))</span><br><span class="line">    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 127.0.0.1)(PORT &#x3D; 1521))</span><br><span class="line">    (CONNECT_DATA &#x3D;</span><br><span class="line">      (SERVER &#x3D; DEDICATED)</span><br><span class="line">      (SERVICE_NAME &#x3D; btbdc)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">ORCL &#x3D;</span><br><span class="line">  (DESCRIPTION &#x3D;</span><br><span class="line">    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; LAPTOP-2SMJEG8K)(PORT &#x3D; 1521))</span><br><span class="line">    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; localhost)(PORT &#x3D; 1521))</span><br><span class="line">    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 127.0.0.1)(PORT &#x3D; 1521))</span><br><span class="line">    (CONNECT_DATA &#x3D;</span><br><span class="line">      (SERVER &#x3D; DEDICATED)</span><br><span class="line">      (SERVICE_NAME &#x3D; orcl)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
  </entry>
  <entry>
    <title>jasypt加密包引发的问题</title>
    <url>/2021/01/13/SpringBoot/jasypt%E5%8A%A0%E5%AF%86%E5%8C%85%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine</p>
<p>加密引发了异常。一个可能的原因是您使用的是强加密算法，并且您尚未在此Java虚拟机中安装Java Cryptography Extension（JCE）Unlimited Strength辖区策略文件</p>
<p>解决jasypt-spring-boot-starter引发的问题。</p>
<p>原文参考：<a href="https://my.oschina.net/aiilive/blog/507307">https://my.oschina.net/aiilive/blog/507307</a></p>
<p>下载<code>https://www.oracle.com/java/technologies/javase-jce8-downloads.html</code>,</p>
<p>将从此页面下载的压缩包，解压后放到<code>C:\Program Files\Java\jdk1.8.0_152\jre\lib\security\policy\limited</code>下，并备份原有的jar。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>k8s 安全管理</title>
    <url>/2021/01/07/k8s/k8s-%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h2><p>作用：加密数据存在etcd里面，让pod容器以挂载Volumn方式进行访问</p>
<p>场景：凭证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -n &#39;admin&#39; | base64</span><br></pre></td></tr></table></figure>



<p>首先需要创建一个secret，然后将secret以变量或Volumn方式引入Pod</p>
<h3 id="创建secret"><a href="#创建secret" class="headerlink" title="创建secret"></a>创建secret</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysecret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">YWRtaW4=</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MWYyZDFlMmU2N2Rm</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>kind为Secret，type为Opaque，data子属性中，有username和password属性，值都是base64加密的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl apply -f secret.yaml</span><br><span class="line">secret&#x2F;mysecret created</span><br><span class="line">[root@k8smaster ~]# kubectl get secret</span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">default-token-rhthb   kubernetes.io&#x2F;service-account-token   3      3d20h</span><br><span class="line">mysecret              Opaque                                2      30s</span><br></pre></td></tr></table></figure>



<h3 id="以环境变量的方式访问"><a href="#以环境变量的方式访问" class="headerlink" title="以环境变量的方式访问"></a>以环境变量的方式访问</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SECRET_USERNAME</span></span><br><span class="line">        <span class="attr">valueFrom:</span></span><br><span class="line">          <span class="attr">secretKeyRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mysecret</span></span><br><span class="line">            <span class="attr">key:</span> <span class="string">username</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SECRET_PASSWORD</span></span><br><span class="line">        <span class="attr">valueFrom:</span></span><br><span class="line">          <span class="attr">secretKeyRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mysecret</span></span><br><span class="line">            <span class="attr">key:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure>

<p>以上yaml标识kind为Pod创建，重点为env属性，放置一个列表，name属性为环境变量名称，valueFrom为固定属性，secretKeyRef标识secret引用，name为secret的名称，key为为环境变量设置的secret对应值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl get pods</span><br><span class="line">NAME                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">mypod                  1&#x2F;1     Running   0          51s</span><br><span class="line">web-5bb6fd4c98-2lhft   1&#x2F;1     Running   1          23h</span><br><span class="line">web-5bb6fd4c98-xkhbp   1&#x2F;1     Running   1          23h</span><br><span class="line">[root@k8smaster ~]# kubectl exec -it mypod bash</span><br><span class="line">kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.</span><br><span class="line">root@mypod:&#x2F;# echo $SECRET_USERNAME</span><br><span class="line">admin</span><br><span class="line">root@mypod:&#x2F;# echo $SECRET_PASSWORD</span><br><span class="line">1f2d1e2e67df</span><br></pre></td></tr></table></figure>

<h3 id="以Volumn挂载方式"><a href="#以Volumn挂载方式" class="headerlink" title="以Volumn挂载方式"></a>以Volumn挂载方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: mypod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: foo</span><br><span class="line">      mountPath: &quot;&#x2F;etc&#x2F;foo&quot;</span><br><span class="line">      readOnly: true</span><br><span class="line">  volumes:</span><br><span class="line">  - name: foo</span><br><span class="line">    secret:</span><br><span class="line">      secretName: mysecret</span><br></pre></td></tr></table></figure>

<p>在该Pod中，首先定义volumns属性，定义多个volumn，单个volumn的name是名称secret属性是固定值，secretName值就是要引用secret的名称。</p>
<p>volumeMounts为当前nginx镜像挂载数据卷，引用name，设置挂载路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl exec -it mypod bash</span><br><span class="line">kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.</span><br><span class="line">root@mypod:&#x2F;# ls &#x2F;etc&#x2F;foo</span><br><span class="line">password  username</span><br><span class="line">root@mypod:&#x2F;# cat &#x2F;etc&#x2F;foo&#x2F;username </span><br><span class="line">admin</span><br><span class="line">root@mypod:&#x2F;# cat &#x2F;etc&#x2F;foo&#x2F;password</span><br><span class="line">1f2d1e2e67df</span><br></pre></td></tr></table></figure>



<h2 id="configMap"><a href="#configMap" class="headerlink" title="configMap"></a>configMap</h2><p>作用：存储不加密数据到etcd，让Pod以变量或者Volumn挂载到容器</p>
<p>场景：配置文件</p>
<h3 id="以环境变量的方式"><a href="#以环境变量的方式" class="headerlink" title="以环境变量的方式"></a>以环境变量的方式</h3><p>创建ConfigMap</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: myconfig</span><br><span class="line">  namespace: default</span><br><span class="line">data:</span><br><span class="line">  special.level: info</span><br><span class="line">  special.type: hello</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl get configmap</span><br><span class="line">NAME       DATA   AGE</span><br><span class="line">myconfig   2      24s</span><br></pre></td></tr></table></figure>

<p>创建Pod并使用configmap</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo $(LEVEL) $(TYPE)&quot;</span> ]</span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">LEVEL</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">myconfig</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">special.level</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TYPE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">myconfig</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">special.type</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure>

<p>配置与secret基本一致，属性由<code>secretKeyRef</code>变为<code>configMapKeyRef</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl apply -f mapconfig-env-pod.yaml </span><br><span class="line">pod&#x2F;mypod created</span><br><span class="line">[root@k8smaster ~]# kubectl get pods</span><br><span class="line">NAME    READY   STATUS      RESTARTS   AGE</span><br><span class="line">mypod   0&#x2F;1     Completed   0          84s</span><br><span class="line">[root@k8smaster ~]# kubectl logs mypod</span><br><span class="line">info hello</span><br></pre></td></tr></table></figure>



<h3 id="以Volumn的方式"><a href="#以Volumn的方式" class="headerlink" title="以Volumn的方式"></a>以Volumn的方式</h3><p>创建一个文件，让configmap以本地file文件的方式创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl create configmap redis-config --from-file&#x3D;redis.properties</span><br><span class="line">configmap&#x2F;redis-config created</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;最终的文件输出是</span><br><span class="line">[root@k8smaster ~]# kubectl create configmap redis-config2 --from-file&#x3D;redis.properties --dry-run&#x3D;client -o yaml &gt; aaa.yaml</span><br><span class="line">[root@k8smaster ~]# cat aaa.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  redis.properties: |+</span><br><span class="line">    redis.host&#x3D;127.0.0.1</span><br><span class="line">    redis.port&#x3D;6379</span><br><span class="line">    redis.password&#x3D;123456</span><br><span class="line"></span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  name: redis-config2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建pod</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;cat /etc/config/redis.properties&quot;</span> ]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">redis-config</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure>

<p>在此处定义挂载configMap后，在绑定挂在中定义挂载路径，会将ConfigMap中的data后的<code>redis.properties</code>作为文件名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl get pods</span><br><span class="line">NAME    READY   STATUS      RESTARTS   AGE</span><br><span class="line">mypod   0&#x2F;1     Completed   0          49s</span><br><span class="line">[root@k8smaster ~]# kubectl logs mypod</span><br><span class="line">redis.host&#x3D;127.0.0.1</span><br><span class="line">redis.port&#x3D;6379</span><br><span class="line">redis.password&#x3D;123456</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因为该pod使用command属性，输出了命令，直接使用logs命令查看容器输出日志。</p>
<h2 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h2><p>RBAC机制，角色鉴权。</p>
<p>角色Role，集群角色ClusterRole，角色绑定RoleBinding，用户user，用户组group，服务账号ServiceAccount</p>
<p><strong>角色</strong></p>
<p>role：在特定命名空间的访问角色权限</p>
<p>ClusterRole：所有命名空间访问权限</p>
<p> <strong>角色绑定</strong></p>
<p>roleBinding：角色绑定到主体</p>
<p>clusterRoleBinding：集群角色绑定到主体</p>
<p><strong>主体</strong></p>
<p>user：用户</p>
<p>group：用户组</p>
<p>serviceAccount：服务账号</p>
<p>简而言之就是为某个用户赋予一个角色，该角色可为k8s中各种kind组件提供他们get,watch,delete,create等操作权限</p>
<h3 id="1-创建命名空间"><a href="#1-创建命名空间" class="headerlink" title="1. 创建命名空间"></a>1. 创建命名空间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl create ns roledemo</span><br><span class="line">namespace&#x2F;roledemo created</span><br><span class="line">[root@k8smaster ~]# kubectl get ns</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   5d20h</span><br><span class="line">kube-node-lease   Active   5d20h</span><br><span class="line">kube-public       Active   5d20h</span><br><span class="line">kube-system       Active   5d20h</span><br><span class="line">roledemo          Active   15m</span><br></pre></td></tr></table></figure>



<h3 id="2-在新命名空间创建pod"><a href="#2-在新命名空间创建pod" class="headerlink" title="2. 在新命名空间创建pod"></a>2. 在新命名空间创建pod</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl run nginx --image&#x3D;nginx -n roledemo</span><br><span class="line">pod&#x2F;nginx created</span><br><span class="line">[root@k8smaster ~]# kubectl get pods -n roledemo</span><br><span class="line">NAME    READY   STATUS              RESTARTS   AGE</span><br><span class="line">nginx   0&#x2F;1     ContainerCreating   0          11s</span><br></pre></td></tr></table></figure>



<h3 id="3-创建角色"><a href="#3-创建角色" class="headerlink" title="3.创建角色"></a>3.创建角色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  namespace: roledemo</span><br><span class="line">  name: pod-reader</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [&quot;&quot;] # &quot;&quot; indicates the core API group</span><br><span class="line">  resources: [&quot;pods&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]</span><br></pre></td></tr></table></figure>

<p>创建角色，定义规则，定义pod资源的get，watch，list的操作权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster rbac]# kubectl apply -f rbac-role.yaml </span><br><span class="line">role.rbac.authorization.k8s.io&#x2F;pod-reader created</span><br><span class="line">[root@k8smaster rbac]# kubectl get roles -n roledemo</span><br><span class="line">NAME         CREATED AT</span><br><span class="line">pod-reader   2021-01-09T16:20:31Z</span><br><span class="line">[root@k8smaster rbac]# </span><br></pre></td></tr></table></figure>



<h3 id="4-角色绑定主体"><a href="#4-角色绑定主体" class="headerlink" title="4. 角色绑定主体"></a>4. 角色绑定主体</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kind: RoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">metadata:</span><br><span class="line">  name: read-pods</span><br><span class="line">  namespace: roledemo</span><br><span class="line">subjects:</span><br><span class="line">- kind: User</span><br><span class="line">  name: mary # Name is case sensitive</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">roleRef:</span><br><span class="line">  kind: Role #this must be Role or ClusterRole</span><br><span class="line">  name: pod-reader # this must match the name of the Role or ClusterRole you wish to bind to</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure>

<p>创建RoleBinding，确定命名空间，绑定主体为用户lucy，组为<code>rbac.authorization.k8s.io</code>，引用角色。</p>
<h3 id="5-使用证书识别身份-二进制k8s证书"><a href="#5-使用证书识别身份-二进制k8s证书" class="headerlink" title="5. 使用证书识别身份(二进制k8s证书)"></a>5. 使用证书识别身份(二进制k8s证书)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; mary-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;mary&quot;,</span><br><span class="line">  &quot;hosts&quot;: [],</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;BeiJing&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;kubernetes mary-csr.json | cfssljson -bare mary </span><br><span class="line">kind: RoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">metadata:</span><br><span class="line">  name: read-pods</span><br><span class="line">  namespace: roledemo</span><br><span class="line">subjects:</span><br><span class="line">- kind: User</span><br><span class="line">  name: lucy # Name is case sensitive</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">roleRef:</span><br><span class="line">  kind: Role #this must be Role or ClusterRole</span><br><span class="line">  name: pod-reader # this must match the name of the Role or ClusterRole you wish to bind to</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line"></span><br><span class="line">kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority&#x3D;ca.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --server&#x3D;https:&#x2F;&#x2F;192.168.31.63:6443 \</span><br><span class="line">  --kubeconfig&#x3D;mary-kubeconfig</span><br><span class="line">  </span><br><span class="line">kubectl config set-credentials mary \</span><br><span class="line">  --client-key&#x3D;mary-key.pem \</span><br><span class="line">  --client-certificate&#x3D;mary.pem \</span><br><span class="line">  --embed-certs&#x3D;true \</span><br><span class="line">  --kubeconfig&#x3D;mary-kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config set-context default \</span><br><span class="line">  --cluster&#x3D;kubernetes \</span><br><span class="line">  --user&#x3D;mary \</span><br><span class="line">  --kubeconfig&#x3D;mary-kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config use-context default --kubeconfig&#x3D;mary-kubeconfig</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>该代码为<code>.sh</code>文件，当前目录下需要存在二进制安装k8s时的ca.pem文件。使用<code>bash rbac-user.sh</code>操作当前文件</p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
  </entry>
  <entry>
    <title>k8s 操作命令及问题</title>
    <url>/2021/01/07/k8s/k8s-%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="组件Kind"><a href="#组件Kind" class="headerlink" title="组件Kind"></a>组件Kind</h2><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 所有pod</span><br><span class="line">kubectl get pods</span><br><span class="line">&#x2F;&#x2F; 显示pod包含所在节点</span><br><span class="line">kubectl get pods -o wide</span><br></pre></td></tr></table></figure>



<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 对外暴露端口的pod</span><br><span class="line">kubectl get svc</span><br><span class="line">&#x2F;&#x2F; 更新svc，使用vi打开，可进行编辑并保存，自动更新</span><br><span class="line">kubectl edit svc &lt;svc_name&gt;</span><br></pre></td></tr></table></figure>





<h4 id="命名空间ns"><a href="#命名空间ns" class="headerlink" title="命名空间ns"></a>命名空间ns</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取命名空间</span><br><span class="line">kubectl get ns</span><br><span class="line">&#x2F;&#x2F; 创建命名空间</span><br><span class="line">kubectl create ns &lt;NS_NAME&gt;</span><br></pre></td></tr></table></figure>

<h4 id="角色role"><a href="#角色role" class="headerlink" title="角色role"></a>角色role</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get roles</span><br><span class="line">kubectl get roles -n roledemo</span><br></pre></td></tr></table></figure>

<h4 id="角色绑定rolebinding"><a href="#角色绑定rolebinding" class="headerlink" title="角色绑定rolebinding"></a>角色绑定rolebinding</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get roles</span><br><span class="line">kubectl get roles -n roledemo</span><br></pre></td></tr></table></figure>





<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;删除deployment</span><br><span class="line">kubectl delete deployment web1</span><br><span class="line">&#x2F;&#x2F; 删除svc service</span><br><span class="line">kubectl delete svc web1</span><br><span class="line">&#x2F;&#x2F; 删除所有无状态应用</span><br><span class="line">kubectl delete statefulset --all</span><br><span class="line">&#x2F;&#x2F;删除job一次性任务</span><br><span class="line">kubectl delete job [name]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过源yaml文件来删除pod</span><br><span class="line">kubectl delete -f xxx.yaml</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;查看pod的全部日志</span><br><span class="line">kubectl logs [pod_name]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl describe pod &lt;pod_name&gt;</span><br></pre></td></tr></table></figure>





<p>yaml属性解释说明</p>
<p>kind组件类型，第三方</p>
<p>pod与deployment的关系</p>
<p><code>--dry-run -o yaml</code>和<code>--dry-run=client -o yaml</code>的区别</p>
<p>什么事controller,service,pod，关系</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h4 id="k8s-node节点上无法使用kubectl命令"><a href="#k8s-node节点上无法使用kubectl命令" class="headerlink" title="k8s node节点上无法使用kubectl命令"></a>k8s node节点上无法使用kubectl命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8snode1 chen]# kubectl get pods</span><br><span class="line">The connection to the server localhost:8080 was refused - did you specify the right host or port?</span><br></pre></td></tr></table></figure>

<p>出现这个问题的原因是kubectl命令需要使用kubernetes-admin来运行，解决方法如下，将主节点中的<code>/etc/kubernetes/admin.conf</code>文件拷贝到从node节点相同目录下，然后配置环境变量：</p>
<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;master上</span><br><span class="line">scp &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf root@192.168.38.129:&#x2F;etc&#x2F;kubernetes</span><br><span class="line">&#x2F;&#x2F;node上</span><br><span class="line">echo &quot;export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf&quot; &gt;&gt; ~&#x2F;.bash_profile</span><br><span class="line">source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>K8S</category>
      </categories>
  </entry>
  <entry>
    <title>k8s controller</title>
    <url>/2021/01/04/k8s/controller/</url>
    <content><![CDATA[<h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><h3 id="什么是controller"><a href="#什么是controller" class="headerlink" title="什么是controller"></a>什么是controller</h3><p>在集群上管理和运行容器的对象</p>
<h3 id="controller和pod的关系"><a href="#controller和pod的关系" class="headerlink" title="controller和pod的关系"></a>controller和pod的关系</h3><p>Pod通过controller实现应用的运维，比如伸缩，滚动升级等</p>
<p>pod和controller之间通过label标签建立关系。controller中的标签与pod中定义的标签一致时建立关系</p>
<h3 id="deployment控制器应用场景"><a href="#deployment控制器应用场景" class="headerlink" title="deployment控制器应用场景"></a>deployment控制器应用场景</h3><p>部署无状态应用</p>
<p>管理pod和ReplicaSet</p>
<p>部署滚动升级等功能</p>
<p>应用场景，web服务，微服务</p>
<h3 id="yaml字段说明"><a href="#yaml字段说明" class="headerlink" title="yaml字段说明"></a>yaml字段说明</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create deployment web --image&#x3D;nginx --dry-run -o yaml &gt; web.yaml</span><br><span class="line">kubectl apply -f web.yaml</span><br><span class="line">kubectl expose deployment web --port&#x3D;80 --type&#x3D;NodePort --target-port&#x3D;80 --name&#x3D;web1 -o yaml &gt; web1.yaml</span><br><span class="line">kubectl apply -f web1.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pods,svc</span><br><span class="line"></span><br><span class="line">任意节点使用自己ip和端口访问。但是当前node访问其他node的ip+端口就无法访问</span><br></pre></td></tr></table></figure>

<h3 id="升级回滚"><a href="#升级回滚" class="headerlink" title="升级回滚"></a>升级回滚</h3><p><strong>升级</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster chen]# kubectl set image deployment web nginx&#x3D;nginx:1.15</span><br><span class="line">deployment.apps&#x2F;web image updated</span><br></pre></td></tr></table></figure>

<p>会先进行下载指定版本的容器，然后启动一个新版本，替换终止一个旧版本，升级前的旧版本依然提供服务。</p>
<p>查看升级状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster chen]# kubectl rollout status deployment web</span><br><span class="line">deployment &quot;web&quot; successfully rolled out</span><br></pre></td></tr></table></figure>



<p>查看升级的版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster chen]# kubectl rollout history deployment web</span><br><span class="line">deployment.apps&#x2F;web </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br><span class="line">2         &lt;none&gt;</span><br><span class="line">3         &lt;none&gt;</span><br></pre></td></tr></table></figure>



<p>还原到上一个版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster chen]# kubectl rollout undo deployment web</span><br><span class="line">deployment.apps&#x2F;web rolled back</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>回滚到指定版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster chen]# kubectl rollout undo deployment web --to-revision&#x3D;1</span><br><span class="line">deployment.apps&#x2F;web rolled back</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h3><p>弹性伸缩副本数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster chen]# kubectl scale deployment web --replicas&#x3D;10</span><br><span class="line">deployment.apps&#x2F;web scaled</span><br><span class="line">[root@k8smaster chen]# kubectl get pods</span><br><span class="line">NAME                     READY   STATUS              RESTARTS   AGE</span><br><span class="line">nginx-6799fc88d8-n9pxs   1&#x2F;1     Running             0          12h</span><br><span class="line">web-96d5df5c8-2n6qz      1&#x2F;1     Running             0          63s</span><br><span class="line">web-96d5df5c8-5jdvk      0&#x2F;1     ContainerCreating   0          6s</span><br><span class="line">web-96d5df5c8-5lt9p      0&#x2F;1     ContainerCreating   0          6s</span><br><span class="line">web-96d5df5c8-8p6ls      0&#x2F;1     ContainerCreating   0          6s</span><br><span class="line">web-96d5df5c8-dbpvr      0&#x2F;1     ContainerCreating   0          6s</span><br><span class="line">web-96d5df5c8-k5c7k      0&#x2F;1     ContainerCreating   0          6s</span><br><span class="line">web-96d5df5c8-sxhr7      0&#x2F;1     ContainerCreating   0          6s</span><br><span class="line">web-96d5df5c8-v4x4j      0&#x2F;1     ContainerCreating   0          6s</span><br><span class="line">web-96d5df5c8-z2hwt      1&#x2F;1     Running             0          81s</span><br><span class="line">web-96d5df5c8-ztfz9      0&#x2F;1     ContainerCreating   0          6s</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>定义一组网络向pod的访问规则</p>
<ol>
<li><p>防止pod失联(服务发现)</p>
<p>例如：前端3个pod与后台3个pod，前端要访问后端，是通过ip访问的，pod是无状态的。如果后台pod死了就无法访问。</p>
<p><strong>如何解决?</strong></p>
<p>将pod的ip注册到service中，类似nacos，eureka的服务发现,注册中心</p>
</li>
<li><p>定义一组关于pod的访问策略(负载均衡)</p>
</li>
</ol>
<h3 id="pod与service之间的关系"><a href="#pod与service之间的关系" class="headerlink" title="pod与service之间的关系"></a>pod与service之间的关系</h3><p>也是通过标签建立关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selector:</span><br><span class="line">  app:nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">label:</span><br><span class="line">  app:nginx</span><br></pre></td></tr></table></figure>



<p>虚拟ip做到负载均衡</p>
<h3 id="常用service类型"><a href="#常用service类型" class="headerlink" title="常用service类型"></a>常用service类型</h3><p>ClusterIp：集群内部使用</p>
<p>NodePort：对外访问应用使用</p>
<p>LoadBalancer：对外访问应用使用，公有云</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;删除deployment</span><br><span class="line">kubectl delete deployment web1</span><br><span class="line">&#x2F;&#x2F; 删除svc service</span><br><span class="line">kubectl delete svc web1</span><br></pre></td></tr></table></figure>



<h4 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h4><p>集群内部使用，没有开放外部端口，有专门的随机地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 集群内部使用,将命令导出成yaml</span><br><span class="line">kubectl expose deployment web --port&#x3D;80 --target-port&#x3D;80 --dry-run -o yaml &gt; service1.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  labels:</span><br><span class="line">    app: web</span><br><span class="line">  name: web</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: web</span><br><span class="line">status:</span><br><span class="line">  loadBalancer: &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 其实就是在selector后有一个type: ClusterIp属性</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用yaml</span><br><span class="line">kubectl apply -f service1.yaml</span><br><span class="line">&#x2F;&#x2F; 查看svc</span><br><span class="line">kubectl get svc</span><br><span class="line">[root@k8smaster chen]# kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1        &lt;none&gt;        443&#x2F;TCP        2d18h</span><br><span class="line">web          ClusterIP   10.100.135.142   &lt;none&gt;        80&#x2F;TCP         13m</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>访问的时候只能通过10.100.135.142这个ip进行访问</p>
<h4 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h4><p>对外访问端口，相当于docker的端口映射。</p>
<p>修改metadata.name为web1，增加selector后面属性<code>type: NodePort</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  labels:</span><br><span class="line">    app: web</span><br><span class="line">  name: web1</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: web</span><br><span class="line">  type: NodePort</span><br><span class="line">status:</span><br><span class="line">  loadBalancer: &#123;&#125;</span><br><span class="line"></span><br><span class="line">kubectl apply -f service1.yaml</span><br><span class="line"></span><br><span class="line">[root@k8smaster chen]# kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1        &lt;none&gt;        443&#x2F;TCP        2d18h</span><br><span class="line">web          ClusterIP   10.100.135.142   &lt;none&gt;        80&#x2F;TCP         13m</span><br><span class="line">web1         NodePort    10.109.1.81      &lt;none&gt;        80:31969&#x2F;TCP   56s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时svc就能看出来映射了端口，这个端口可以通过node节点的ip进行访问</p>
<p>而这个方式最开始的命令是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl expose deployment web --port&#x3D;80 --target-port&#x3D;80 --dry-run -o yaml &gt; service1.yaml</span><br></pre></td></tr></table></figure>

<p>去掉导出yaml的就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl expose deployment web --port&#x3D;80 --target-port&#x3D;80</span><br></pre></td></tr></table></figure>

<p>没有指定<code>--type=ClusterIP</code>,所以他是默认的，如果这现在的NodePort则就指定为<code>--type=NodePort</code>，以及name也可以通过<code>--name=web1</code>指定为<code>metadata.name</code>的值。</p>
<h3 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h3><p>一般情况下外网访问内网的k8s集群节点是需要通过一个可以外网访问的机器配置nginx反向代理，配置node节点的ip进行负载均衡。</p>
<p>目前可以使用公有云</p>
<h2 id="无状态与有状态"><a href="#无状态与有状态" class="headerlink" title="无状态与有状态"></a>无状态与有状态</h2><p><strong>无状态:</strong></p>
<ul>
<li>认为pod的多个负载副本都是一样的</li>
<li>没有顺序要求</li>
<li>不用考虑在哪个node上运行</li>
<li>随意进行伸缩和扩展</li>
</ul>
<p>depolyment都是无状态的。</p>
<p><strong>有状态：</strong></p>
<ul>
<li>以上因素都要考虑</li>
<li>每个pod独立，保持pod启动顺序和唯一性<ul>
<li>唯一的网络标识符，持久存储</li>
<li>有序，如mysql主从</li>
</ul>
</li>
</ul>
<h3 id="部署有状态应用"><a href="#部署有状态应用" class="headerlink" title="部署有状态应用"></a>部署有状态应用</h3><p>无头service: <code>clusterIP: None</code></p>
<p>StatefulSet部署</p>
<p>主要就是添加<code>clusterIP: None</code>属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    name: web</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-statefulset</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  serviceName: nginx</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:latest</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过<code>kubectl apply -f sts.yaml</code>创建后显示如下，依次创建0，1，2。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster chen]# kubectl get pods</span><br><span class="line">NAME                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-statefulset-0    1&#x2F;1     Running   0          79s</span><br><span class="line">nginx-statefulset-1    1&#x2F;1     Running   0          54s</span><br><span class="line">nginx-statefulset-2    1&#x2F;1     Running   0          36s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看svc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster chen]# kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1        &lt;none&gt;        443&#x2F;TCP        2d19h</span><br><span class="line">nginx        ClusterIP   None             &lt;none&gt;        80&#x2F;TCP         4m45s</span><br></pre></td></tr></table></figure>



<p>StatefulSet与depolyment区别：有身份唯一标识</p>
<p>根据主机名+按照一定规则的域名</p>
<p>每个pod都有唯一的主机名，也就是查看pod的name值。</p>
<p>唯一域名格式为<code>主机名称.service名称.名称空间.svc.cluster.local</code>，实际为<code>nginx-statefulset-0.nginx.default.svc.cluster.local</code></p>
<h2 id="部署守护进程DaemonSet-没懂"><a href="#部署守护进程DaemonSet-没懂" class="headerlink" title="部署守护进程DaemonSet 没懂"></a>部署守护进程DaemonSet 没懂</h2><p>在每个node上运行一个pod，新加入的node也同样运行一个pod</p>
<p>配置kind为DaemonSet</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: ds-test </span><br><span class="line">  labels:</span><br><span class="line">    app: filebeat</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: filebeat</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: filebeat</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: logs</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: varlog</span><br><span class="line">          mountPath: &#x2F;tmp&#x2F;log</span><br><span class="line">      volumes:</span><br><span class="line">      - name: varlog</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;var&#x2F;log</span><br></pre></td></tr></table></figure>



<h2 id="一次性任务job和日那个是任务cronjob"><a href="#一次性任务job和日那个是任务cronjob" class="headerlink" title="一次性任务job和日那个是任务cronjob"></a>一次性任务job和日那个是任务cronjob</h2><h3 id="一次性任务"><a href="#一次性任务" class="headerlink" title="一次性任务"></a>一次性任务</h3><p>使用kind为job的yaml文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: batch&#x2F;v1</span><br><span class="line">kind: Job</span><br><span class="line">metadata:</span><br><span class="line">  name: pi</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: pi</span><br><span class="line">        image: perl</span><br><span class="line">        command: [&quot;perl&quot;,  &quot;-Mbignum&#x3D;bpi&quot;, &quot;-wle&quot;, &quot;print bpi(2000)&quot;]</span><br><span class="line">      restartPolicy: Never</span><br><span class="line">  backoffLimit: 4</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster chen]# kubectl get pods</span><br><span class="line">NAME                   READY   STATUS      RESTARTS   AGE</span><br><span class="line">pi-7mb84               0&#x2F;1     Completed   0          40s</span><br><span class="line">web-5bb6fd4c98-2lhft   1&#x2F;1     Running     1          50m</span><br><span class="line">web-5bb6fd4c98-xkhbp   1&#x2F;1     Running     1          50m</span><br><span class="line">[root@k8smaster chen]# kubectl get jobs</span><br><span class="line">NAME   COMPLETIONS   DURATION   AGE</span><br><span class="line">pi     1&#x2F;1           11s        46s</span><br><span class="line">[root@k8smaster chen]# </span><br></pre></td></tr></table></figure>

<p>操作完成后期状态为Completed，在<code>kubectl get jobs</code>中可以看到信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 删除job</span><br><span class="line">kubectl delete job pi</span><br><span class="line">&#x2F;&#x2F; 通过文件删除</span><br><span class="line">kubectl delete -f job.yaml</span><br></pre></td></tr></table></figure>



<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>定时任务的kind为CronJob</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: batch&#x2F;v1beta1</span><br><span class="line">kind: CronJob</span><br><span class="line">metadata:</span><br><span class="line">  name: hello</span><br><span class="line">spec:</span><br><span class="line">  schedule: &quot;*&#x2F;1 * * * *&quot;</span><br><span class="line">  jobTemplate:</span><br><span class="line">    spec:</span><br><span class="line">      template:</span><br><span class="line">        spec:</span><br><span class="line">          containers:</span><br><span class="line">          - name: hello</span><br><span class="line">            image: busybox</span><br><span class="line">            args:</span><br><span class="line">            - &#x2F;bin&#x2F;sh</span><br><span class="line">            - -c</span><br><span class="line">            - date; echo Hello from the Kubernetes cluster</span><br><span class="line">          restartPolicy: OnFailure</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster chen]# kubectl get pods</span><br><span class="line">NAME                     READY   STATUS      RESTARTS   AGE</span><br><span class="line">hello-1609952760-bsqfd   0&#x2F;1     Completed   0          102s</span><br><span class="line">hello-1609952820-cc659   0&#x2F;1     Completed   0          42s</span><br><span class="line">web-5bb6fd4c98-2lhft     1&#x2F;1     Running     1          67m</span><br><span class="line">web-5bb6fd4c98-xkhbp     1&#x2F;1     Running     1          67m</span><br><span class="line">[root@k8smaster chen]# kubectl get cronjobs</span><br><span class="line">NAME    SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">hello   *&#x2F;1 * * * *   False     0        22s             32s</span><br><span class="line">[root@k8smaster chen]# kubectl logs hello-1609952820-cc659</span><br><span class="line">Wed Jan  6 17:07:09 UTC 2021</span><br><span class="line">Hello from the Kubernetes cluster</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>定时任务每次都执行一次，每次都是一个无状态的pod。</p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
  </entry>
  <entry>
    <title>k8s pod使用</title>
    <url>/2021/01/01/k8s/pod/</url>
    <content><![CDATA[<p>创建yaml模板</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create deployment web --image&#x3D;nginx -o yaml --dry-run &gt;my.yaml</span><br></pre></td></tr></table></figure>

<p>通过容器导出yaml模板</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get deploy nginx -o&#x3D;yaml --export &gt; my.yaml</span><br></pre></td></tr></table></figure>



<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li><p>最小部署单元</p>
</li>
<li><p>包含多个容器(一组容器集合)</p>
</li>
<li><p>一个pod中容器共享网络命名空间</p>
</li>
<li><p>pod是短暂的。（ip不唯一，重启就发生变化）</p>
</li>
</ul>
<h3 id="存在的意义"><a href="#存在的意义" class="headerlink" title="存在的意义"></a>存在的意义</h3><ul>
<li><p>创建容器使用docker，一个容器有进程，运行一个应用程序。一般情况下是一个，否则不方便管理。</p>
</li>
<li><p>pod是一个多进程的设计，运行多个应用程序</p>
</li>
<li><p>存在是为了亲密性应用</p>
<p>两个应用之间交互</p>
<p>网络之间的调用</p>
<p>两个应用需要频繁调用</p>
</li>
</ul>
<h2 id="如何共享交互"><a href="#如何共享交互" class="headerlink" title="如何共享交互"></a>如何共享交互</h2><h3 id="pod网络共享机制"><a href="#pod网络共享机制" class="headerlink" title="pod网络共享机制"></a>pod网络共享机制</h3><ul>
<li>首先创建个pause容器(根容器)，</li>
<li>然后创建业务容器。</li>
<li>把业务容器加入pause容器，共享同一个namespace命名空间</li>
<li>将业务容器放入其中，则会共享同一套ip,mac ，port</li>
</ul>
<h3 id="pod共享存储"><a href="#pod共享存储" class="headerlink" title="pod共享存储"></a>pod共享存储</h3><p>引入数据卷Volumn，使用数据卷进行持久化数据存储</p>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/QQ%E6%88%AA%E5%9B%BE20210103001156.png!sx" alt=""></p>
<h3 id="镜像拉取策略"><a href="#镜像拉取策略" class="headerlink" title="镜像拉取策略"></a>镜像拉取策略</h3><p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/QQ%E6%88%AA%E5%9B%BE20210103002826.png!sx" alt=""></p>
<ul>
<li>IfNotPresent：宿主机上不存在才拉取</li>
<li>Always：每次创建爱你pod都会重新拉取一次镜像</li>
<li>Never：pod永远不会主动拉取这个镜像</li>
</ul>
<h3 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h3><p>本身的限制是由docker限制的，而非是pod。</p>
<p>1cpu可以认为是1000m,所以500m认为是0.5个cpu</p>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/QQ%E6%88%AA%E5%9B%BE20210103003903.png!sx" alt=""></p>
<h3 id="重启机制"><a href="#重启机制" class="headerlink" title="重启机制"></a>重启机制</h3><p>restartPolicy属性</p>
<ul>
<li>Always：当容器终止退出后，总是重启容器，默认策略</li>
<li>OnFailure：当容器异常退出(退出状态码非0)时，才重启容器</li>
<li>Never：当容器终止退出，从不重启容器</li>
</ul>
<h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h3><p><code>kubectl get pods</code>获取pod信息，是否是running。但是部分情况下无法真正检测出是否可用。如java堆内存溢出。服务已经不可用，但状态还是running。</p>
<p>此时需要应用层面的检查</p>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/QQ%E6%88%AA%E5%9B%BE20210103005411.png!sx" alt=""></p>
<h2 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h2><p>怎么把某个pod分配到某个节点中?</p>
<h3 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h3><p>master</p>
<p>由用户发起create pod命令进入到api server中,会将相关信息写入到etcd中。</p>
<p>Scheduler会监听Api Server的创建pod操作，从etcd读取相关信息，通过调度的算法将pod调度到某个节点中</p>
<p>node</p>
<p>kubectl监听api server,读入etcd信息，拿到分配给当前节点的pod，通过docker创建容器，创建完成后更新pod状态，并返回给api server</p>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/QQ%E6%88%AA%E5%9B%BE20210103012929.png!sx" alt=""></p>
<h3 id="影响调度"><a href="#影响调度" class="headerlink" title="影响调度"></a>影响调度</h3><p>资源调度的影响</p>
<h4 id="资源限制-1"><a href="#资源限制-1" class="headerlink" title="资源限制"></a>资源限制</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">requests:</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="string">&quot;250m&quot;</span></span><br></pre></td></tr></table></figure>

<p>根据request找到足够node节点进行调度</p>
<h4 id="节点选择器标签影响pod调度"><a href="#节点选择器标签影响pod调度" class="headerlink" title="节点选择器标签影响pod调度"></a>节点选择器标签影响pod调度</h4><p>增加标签<code>nodeSelector.env_role: dev</code>。会根据设置的属性找到指定标签的节点进行选择。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">env_role:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.15</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置label</span><br><span class="line">kubectl label node k8snode1 env_role&#x3D;prod</span><br><span class="line">&#x2F;&#x2F; 查看</span><br><span class="line">kubectl get nodes k8snode1 --show-labels</span><br></pre></td></tr></table></figure>

<h4 id="节点亲和性"><a href="#节点亲和性" class="headerlink" title="节点亲和性"></a>节点亲和性</h4><p><code>nodeAffinity</code>，和<code>nodeSelector</code>基本相同。也是添加标签，根据节点上的标签约束来绝对Pod调度到那个节点上。</p>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/QQ%E6%88%AA%E5%9B%BE20210103015944.png!sx" alt=""></p>
<ol>
<li><p>硬亲和性<br>由子属性requiredDuringSchedulingIgnoreDuringExecution设置。硬亲和性的约束条件需要必须满足才能启动pod，否则会一直等待。</p>
<p>matchExpressions为表达式匹配。key就是label键，operator为操作符，values为key的值。图片中表示为env_role值为dev或test的。</p>
</li>
<li><p>软亲和性</p>
<p>尝试满足，没有的话也能用。其中weight表示权重，多个参考配置可以设多个权重。</p>
</li>
</ol>
<h4 id="污点和污点容忍"><a href="#污点和污点容忍" class="headerlink" title="污点和污点容忍"></a>污点和污点容忍</h4><p>不做普通的分配调度，是节点属性。在调度时实现</p>
<p><strong>场景</strong></p>
<ul>
<li>专用节点</li>
<li>配置特点硬件节点</li>
<li>基于Taint驱逐</li>
</ul>
<p>查看污点情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl describe node k8smaster | grep Taint</span><br><span class="line">Taints:								env_node&#x3D;yes:NoSchedule</span><br></pre></td></tr></table></figure>

<p>污点值：</p>
<ul>
<li>NoSchedule：一定不被调度</li>
<li>PreferNoSchedule：尽量不被调度</li>
<li>NoExecute：不会调度，并且会驱逐Node已有的Pod</li>
</ul>
<p>为节点设置一个污点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl taint node [node] key&#x3D;value:污点值</span><br><span class="line">&#x2F;&#x2F; 添加污点</span><br><span class="line">kubectl taint node k8snode1 env_role&#x3D;yes:NoSchedule</span><br><span class="line">&#x2F;&#x2F;删除污点</span><br><span class="line">kubectl taint node k8snode1 env_role:NoSchedule-</span><br></pre></td></tr></table></figure>

<p><strong>污点容忍</strong></p>
<p>尽管设置NoSchedule，但仍然可能呗调度到，或者也不被调度到</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tolerations:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;key&quot;</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">&quot;Equal&quot;</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;value&quot;</span></span><br><span class="line">    <span class="attr">effect:</span> <span class="string">&quot;NoSchedule&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>K8S</category>
      </categories>
  </entry>
  <entry>
    <title>原生js操作调用摄像头</title>
    <url>/2020/12/31/Javascript/%E5%8E%9F%E7%94%9Fjs%E6%93%8D%E4%BD%9C%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4/</url>
    <content><![CDATA[<h2 id="摄像头拍照到canvas"><a href="#摄像头拍照到canvas" class="headerlink" title="摄像头拍照到canvas"></a>摄像头拍照到canvas</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">width</span>=<span class="string">&quot;480&quot;</span> <span class="attr">height</span>=<span class="string">&quot;320&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;capture&quot;</span>&gt;</span>拍照<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;480&quot;</span> <span class="attr">height</span>=<span class="string">&quot;320&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//访问用户媒体设备的兼容方法</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getUserMedia</span>(<span class="params">constraints, success, error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (navigator.mediaDevices.getUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//最新的标准API</span></span></span><br><span class="line">            navigator.mediaDevices.getUserMedia(constraints).then(success).catch(error);</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.webkitGetUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//webkit核心浏览器</span></span></span><br><span class="line">            navigator.webkitGetUserMedia(constraints, success, error)</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.mozGetUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//firfox浏览器</span></span></span><br><span class="line">            navigator.mozGetUserMedia(constraints, success, error);</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//旧版API</span></span></span><br><span class="line">            navigator.getUserMedia(constraints, success, error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> video = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;video&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;canvas&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> context = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">stream</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//兼容webkit核心浏览器</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> CompatibleURL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//将视频流设置为video元素的源</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(stream);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//video.src = CompatibleURL.createObjectURL(stream);</span></span></span><br><span class="line">        video.srcObject = stream;</span><br><span class="line">        video.play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">`访问用户媒体设备失败<span class="subst">$&#123;error.name&#125;</span>, <span class="subst">$&#123;error.message&#125;</span>`</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//调用用户媒体设备, 访问摄像头</span></span></span><br><span class="line">        getUserMedia(&#123;</span><br><span class="line">            video: &#123;</span><br><span class="line">                width: 480,</span><br><span class="line">                height: 320</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, success, error);</span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;不支持访问用户媒体&#x27;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;capture&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        context.drawImage(video, 0, 0, 480, 320);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="摄像头拍摄并转换canvas转换file对象上传"><a href="#摄像头拍摄并转换canvas转换file对象上传" class="headerlink" title="摄像头拍摄并转换canvas转换file对象上传"></a>摄像头拍摄并转换canvas转换file对象上传</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  &lt;canvas id=&quot;canvas&quot; style=&quot;display: none&quot;&gt;&lt;/canvas&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//const width = 480;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//const height = 320;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> width = <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> height = <span class="number">800</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> video = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;video&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//访问摄像头</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//调用用户媒体设备, 访问摄像头</span></span></span><br><span class="line">            getUserMedia(&#123;video: &#123;width: width, height: height&#125;&#125;, success, error);</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&#x27;不支持访问用户媒体&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//访问用户媒体设备的兼容方法</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">getUserMedia</span>(<span class="params">constraints, success, error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (navigator.mediaDevices.getUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//最新的标准API</span></span></span><br><span class="line">                navigator.mediaDevices.getUserMedia(constraints).then(success).catch(error);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.webkitGetUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//webkit核心浏览器</span></span></span><br><span class="line">                navigator.webkitGetUserMedia(constraints, success, error)</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.mozGetUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//firfox浏览器</span></span></span><br><span class="line">                navigator.mozGetUserMedia(constraints, success, error);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//旧版API</span></span></span><br><span class="line">                navigator.getUserMedia(constraints, success, error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//成功回调</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">stream</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//兼容webkit核心浏览器</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// const CompatibleURL = window.URL || window.webkitURL;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//将视频流设置为video元素的源</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// video.src = CompatibleURL.createObjectURL(stream);</span></span></span><br><span class="line">            video.srcObject = stream;</span><br><span class="line">            video.play();</span><br><span class="line"><span class="javascript">            <span class="built_in">setInterval</span>(drawCanvasImage, <span class="number">0</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//失败回调</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;失败&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;访问用户媒体设备失败&quot;</span>, error);</span></span><br><span class="line">        &#125;</span><br><span class="line">        /**</span><br><span class="line">         * canvas转换成dataUrl base64内容</span><br><span class="line">         * 可通过按钮控制此方法或在success方法中进行控制,获取图片并通过文件上传的方式无感发送到后台</span><br><span class="line">         */</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">drawCanvasImage</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;canvas&#x27;</span>);</span></span><br><span class="line">            canvas.width = width;</span><br><span class="line">            canvas.height = height;</span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> context = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line">            context.drawImage(video, 0, 0, width, height, 0, 0, width, height);</span><br><span class="line"><span class="javascript">            <span class="comment">//获取图片，数据格式为base64</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> imageData = canvas.toDataURL(<span class="string">&quot;image/png&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(imageData)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//saveFile(imageData,&quot;a.png&quot;)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//dataURLtoFile(imageData,&#x27;a.png&#x27;);</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 转成file对象</span><br><span class="line">         */</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">dataURLtoFile</span>(<span class="params">dataurl, filename</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> arr = dataurl.split(<span class="string">&#x27;,&#x27;</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span></span><br><span class="line"><span class="javascript">                bstr = atob(arr[<span class="number">1</span>]), n = bstr.length, u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">while</span>(n--)&#123;</span></span><br><span class="line">                u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> file = <span class="keyword">new</span> File([u8arr], filename, &#123;<span class="attr">type</span>:mime&#125;);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(file);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> file;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 浏览器下载的方式</span><br><span class="line">         * @param data</span><br><span class="line">         * @param filename</span><br><span class="line">         */</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> saveFile = <span class="function"><span class="keyword">function</span>(<span class="params">data, filename</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> save_link = <span class="built_in">document</span>.createElementNS(<span class="string">&#x27;http://www.w3.org/1999/xhtml&#x27;</span>, <span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line">            save_link.href = data;</span><br><span class="line">            save_link.download = filename;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">&#x27;MouseEvents&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            event.initMouseEvent(<span class="string">&#x27;click&#x27;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="built_in">window</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="literal">null</span>);</span></span><br><span class="line">            save_link.dispatchEvent(event);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="摄像头，打开，录制，关闭，保存功能"><a href="#摄像头，打开，录制，关闭，保存功能" class="headerlink" title="摄像头，打开，录制，关闭，保存功能"></a>摄像头，打开，录制，关闭，保存功能</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>video recoder<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;fileSaver.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>:<span class="selector-id">#EFEDEF</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">style</span>=<span class="string">&quot;border:1px solid white;width:400px;height:400px;margin:0 auto;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;experiment&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:320px; height:240px;border:1px solid green; margin:50px auto;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;videos-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:320px; height:240px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;experiment&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;border:none; margin-top:20px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;openCamera&quot;</span>&gt;</span>打开摄像头<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;start-recording&quot;</span> <span class="attr">disabled</span>&gt;</span>开始录制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;save-recording&quot;</span> <span class="attr">disabled</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;send()&quot;&gt;发送&lt;/a&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mediaStream;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> recorderFile;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> stopRecordCallback;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> openBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;openCamera&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> startBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;start-recording&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> saveBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;save-recording&quot;</span>);</span></span><br><span class="line"><span class="javascript">    openBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.disabled = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        startBtn.disabled=<span class="literal">false</span>;</span></span><br><span class="line">        openCamera();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    startBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.disabled = <span class="literal">true</span>;</span></span><br><span class="line">        startRecord();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    saveBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        saver();</span><br><span class="line"><span class="javascript">        <span class="comment">// alert(&#x27;Drop WebM file on Chrome or Firefox. Both can play entire file. VLC player or other players may not work.&#x27;);</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mediaRecorder;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> videosContainer = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;videos-container&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">openCamera</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> len = videosContainer.childNodes.length;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span></span><br><span class="line">            videosContainer.removeChild(videosContainer.childNodes[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> video = <span class="built_in">document</span>.createElement(<span class="string">&#x27;video&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> videoWidth = <span class="number">320</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> videoHeight = <span class="number">240</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        video.controls = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        video.muted = <span class="literal">true</span>;</span></span><br><span class="line">        video.width = videoWidth;</span><br><span class="line">        video.height = videoHeight;</span><br><span class="line"><span class="javascript">        MediaUtils.getUserMedia(<span class="literal">true</span>, <span class="literal">false</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, stream</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (err) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">throw</span> err;</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 通过 MediaRecorder 记录获取到的媒体流</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log();</span></span><br><span class="line"><span class="javascript">                mediaRecorder = <span class="keyword">new</span> MediaRecorder(stream);</span></span><br><span class="line">                mediaStream = stream;</span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> chunks = [], startTime = <span class="number">0</span>;</span></span><br><span class="line">                video.srcObject = stream;</span><br><span class="line">                video.play();</span><br><span class="line"></span><br><span class="line">                videosContainer.appendChild(video);</span><br><span class="line"><span class="javascript">                mediaRecorder.ondataavailable = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">                    mediaRecorder.blobs.push(e.data);</span><br><span class="line">                    chunks.push(e.data);</span><br><span class="line">                &#125;;</span><br><span class="line">                mediaRecorder.blobs = [];</span><br><span class="line"></span><br><span class="line"><span class="javascript">                mediaRecorder.onstop = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    recorderFile = <span class="keyword">new</span> Blob(chunks, &#123; <span class="string">&#x27;type&#x27;</span> : mediaRecorder.mimeType &#125;);</span></span><br><span class="line">                    chunks = [];</span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="literal">null</span> != stopRecordCallback) &#123;</span></span><br><span class="line">                        stopRecordCallback();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 停止录制</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">stopRecord</span>(<span class="params">callback</span>) </span>&#123;</span></span><br><span class="line">        stopRecordCallback = callback;</span><br><span class="line"><span class="javascript">        <span class="comment">// 终止录制器</span></span></span><br><span class="line">        mediaRecorder.stop();</span><br><span class="line"><span class="javascript">        <span class="comment">// 关闭媒体流</span></span></span><br><span class="line">        MediaUtils.closeStream(mediaStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> MediaUtils = &#123;</span></span><br><span class="line">        /**</span><br><span class="line">         * 获取用户媒体设备(处理兼容的问题)</span><br><span class="line">         * @param videoEnable &#123;boolean&#125; - 是否启用摄像头</span><br><span class="line">         * @param audioEnable &#123;boolean&#125; - 是否启用麦克风</span><br><span class="line"><span class="javascript">         * @param callback &#123;<span class="built_in">Function</span>&#125; - 处理回调</span></span><br><span class="line">         */</span><br><span class="line"><span class="javascript">        getUserMedia: <span class="function"><span class="keyword">function</span> (<span class="params">videoEnable, audioEnable, callback</span>) </span>&#123;</span></span><br><span class="line">            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia</span><br><span class="line"><span class="javascript">                || navigator.msGetUserMedia || <span class="built_in">window</span>.getUserMedia;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> constraints = &#123;<span class="attr">video</span>: videoEnable, <span class="attr">audio</span>: audioEnable&#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">                navigator.mediaDevices.getUserMedia(constraints).then(<span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    callback(<span class="literal">false</span>, stream);</span></span><br><span class="line"><span class="javascript">                &#125;)[<span class="string">&#x27;catch&#x27;</span>](<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span></span><br><span class="line">                    callback(err);</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">                navigator.getUserMedia(constraints, <span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    callback(<span class="literal">false</span>, stream);</span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span><br><span class="line">                    callback(err);</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Not support userMedia&#x27;</span>));</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 关闭媒体流</span><br><span class="line">         * @param stream &#123;MediaStream&#125; - 需要关闭的流</span><br><span class="line">         */</span><br><span class="line"><span class="javascript">        closeStream: <span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="keyword">typeof</span> stream.stop === <span class="string">&#x27;function&#x27;</span>) &#123;</span></span><br><span class="line">                stream.stop();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> trackList = [stream.getAudioTracks(), stream.getVideoTracks()];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; trackList.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> tracks = trackList[i];</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (tracks &amp;&amp; tracks.length &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; tracks.length; j++) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">let</span> track = tracks[j];</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span> (<span class="keyword">typeof</span> track.stop === <span class="string">&#x27;function&#x27;</span>) &#123;</span></span><br><span class="line">                                track.stop();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">startRecord</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        mediaRecorder.start();</span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 结束</span></span></span><br><span class="line"><span class="javascript">            stopRecord(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;录制成功!&quot;</span>);</span></span><br><span class="line"><span class="javascript">                openBtn.disabled=<span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                saveBtn.disabled=<span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//send();</span></span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, 5000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">saver</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> file = <span class="keyword">new</span> File([recorderFile], <span class="string">&#x27;msr-&#x27;</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>).toISOString().replace(<span class="regexp">/:|\./g</span>, <span class="string">&#x27;-&#x27;</span>) + <span class="string">&#x27;.mp4&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">            type: <span class="string">&#x27;video/mp4&#x27;</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">        saveAs(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> file = <span class="keyword">new</span> File([recorderFile], <span class="string">&#x27;msr-&#x27;</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>).toISOString().replace(<span class="regexp">/:|\./g</span>, <span class="string">&#x27;-&#x27;</span>) + <span class="string">&#x27;.mp4&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">            type: <span class="string">&#x27;video/mp4&#x27;</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript">        data.append(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;test&quot;</span>);</span></span><br><span class="line"><span class="javascript">        data.append(<span class="string">&quot;userfile&quot;</span>, file);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">        req.open(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;com.spinsoft.bip.frame.utils.image.saveMp4.biz.ext&quot;</span>);</span></span><br><span class="line">        req.send(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* FileSaver.js</span></span><br><span class="line"><span class="comment"> * A saveAs() FileSaver implementation.</span></span><br><span class="line"><span class="comment"> * 1.3.2</span></span><br><span class="line"><span class="comment"> * 2016-06-16 18:25:19</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * By Eli Grey, http://eligrey.com</span></span><br><span class="line"><span class="comment"> * License: MIT</span></span><br><span class="line"><span class="comment"> *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*global self */</span></span><br><span class="line"><span class="comment">/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> saveAs = saveAs || (<span class="function"><span class="keyword">function</span>(<span class="params">view</span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="comment">// IE &lt;10 is explicitly unsupported</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> view === <span class="string">&quot;undefined&quot;</span> || <span class="keyword">typeof</span> navigator !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; <span class="regexp">/MSIE [1-9]\./</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span></span><br><span class="line">        doc = view.document</span><br><span class="line">        <span class="comment">// only get URL when necessary in case Blob.js hasn&#x27;t overridden it yet</span></span><br><span class="line">        , get_URL = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> view.URL || view.webkitURL || view;</span><br><span class="line">        &#125;</span><br><span class="line">        , save_link = doc.createElementNS(<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">        , can_use_save_link = <span class="string">&quot;download&quot;</span> <span class="keyword">in</span> save_link</span><br><span class="line">        , click = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> event = <span class="keyword">new</span> MouseEvent(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">            node.dispatchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        , is_safari = <span class="regexp">/constructor/i</span>.test(view.HTMLElement) || view.safari</span><br><span class="line">        , is_chrome_ios =<span class="regexp">/CriOS\/[\d]+/</span>.test(navigator.userAgent)</span><br><span class="line">        , throw_outside = <span class="function"><span class="keyword">function</span>(<span class="params">ex</span>) </span>&#123;</span><br><span class="line">            (view.setImmediate || view.setTimeout)(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        , force_saveable_type = <span class="string">&quot;application/octet-stream&quot;</span></span><br><span class="line">        <span class="comment">// the Blob API is fundamentally broken as there is no &quot;downloadfinished&quot; event to subscribe to</span></span><br><span class="line">        , arbitrary_revoke_timeout = <span class="number">1000</span> * <span class="number">40</span> <span class="comment">// in ms</span></span><br><span class="line">        , revoke = <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> revoker = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> file === <span class="string">&quot;string&quot;</span>) &#123; <span class="comment">// file is an object URL</span></span><br><span class="line">                    get_URL().revokeObjectURL(file);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// file is a File</span></span><br><span class="line">                    file.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">setTimeout</span>(revoker, arbitrary_revoke_timeout);</span><br><span class="line">        &#125;</span><br><span class="line">        , dispatch = <span class="function"><span class="keyword">function</span>(<span class="params">filesaver, event_types, event</span>) </span>&#123;</span><br><span class="line">            event_types = [].concat(event_types);</span><br><span class="line">            <span class="keyword">var</span> i = event_types.length;</span><br><span class="line">            <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">                <span class="keyword">var</span> listener = filesaver[<span class="string">&quot;on&quot;</span> + event_types[i]];</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> listener === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        listener.call(filesaver, event || filesaver);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">                        throw_outside(ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        , auto_bom = <span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// prepend BOM for UTF-8 XML and text/* types (including HTML)</span></span><br><span class="line">            <span class="comment">// note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i</span>.test(blob.type)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Blob([<span class="built_in">String</span>.fromCharCode(<span class="number">0xFEFF</span>), blob], &#123;<span class="attr">type</span>: blob.type&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> blob;</span><br><span class="line">        &#125;</span><br><span class="line">        , FileSaver = <span class="function"><span class="keyword">function</span>(<span class="params">blob, name, no_auto_bom</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!no_auto_bom) &#123;</span><br><span class="line">                blob = auto_bom(blob);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// First try a.download, then web filesystem, then object URLs</span></span><br><span class="line">            <span class="keyword">var</span></span><br><span class="line">                filesaver = <span class="built_in">this</span></span><br><span class="line">                , type = blob.type</span><br><span class="line">                , force = type === force_saveable_type</span><br><span class="line">                , object_url</span><br><span class="line">                , dispatch_all = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    dispatch(filesaver, <span class="string">&quot;writestart progress write writeend&quot;</span>.split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// on any filesys errors revert to saving with object URLs</span></span><br><span class="line">                , fs_error = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> ((is_chrome_ios || (force &amp;&amp; is_safari)) &amp;&amp; view.FileReader) &#123;</span><br><span class="line">                        <span class="comment">// Safari doesn&#x27;t allow downloading of blob urls</span></span><br><span class="line">                        <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">                        reader.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">var</span> url = is_chrome_ios ? reader.result : reader.result.replace(<span class="regexp">/^data:[^;]*;/</span>, <span class="string">&#x27;data:attachment/file;&#x27;</span>);</span><br><span class="line">                            <span class="keyword">var</span> popup = view.open(url, <span class="string">&#x27;_blank&#x27;</span>);</span><br><span class="line">                            <span class="keyword">if</span>(!popup) view.location.href = url;</span><br><span class="line">                            url=<span class="literal">undefined</span>; <span class="comment">// release reference before dispatching</span></span><br><span class="line">                            filesaver.readyState = filesaver.DONE;</span><br><span class="line">                            dispatch_all();</span><br><span class="line">                        &#125;;</span><br><span class="line">                        reader.readAsDataURL(blob);</span><br><span class="line">                        filesaver.readyState = filesaver.INIT;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// don&#x27;t create more object URLs than needed</span></span><br><span class="line">                    <span class="keyword">if</span> (!object_url) &#123;</span><br><span class="line">                        object_url = get_URL().createObjectURL(blob);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (force) &#123;</span><br><span class="line">                        view.location.href = object_url;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> opened = view.open(object_url, <span class="string">&quot;_blank&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (!opened) &#123;</span><br><span class="line">                            <span class="comment">// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html</span></span><br><span class="line">                            view.location.href = object_url;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    filesaver.readyState = filesaver.DONE;</span><br><span class="line">                    dispatch_all();</span><br><span class="line">                    revoke(object_url);</span><br><span class="line">                &#125;</span><br><span class="line">            ;</span><br><span class="line">            filesaver.readyState = filesaver.INIT;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (can_use_save_link) &#123;</span><br><span class="line">                object_url = get_URL().createObjectURL(blob);</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    save_link.href = object_url;</span><br><span class="line">                    save_link.download = name;</span><br><span class="line">                    click(save_link);</span><br><span class="line">                    dispatch_all();</span><br><span class="line">                    revoke(object_url);</span><br><span class="line">                    filesaver.readyState = filesaver.DONE;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fs_error();</span><br><span class="line">        &#125;</span><br><span class="line">        , FS_proto = FileSaver.prototype</span><br><span class="line">        , saveAs = <span class="function"><span class="keyword">function</span>(<span class="params">blob, name, no_auto_bom</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FileSaver(blob, name || blob.name || <span class="string">&quot;download&quot;</span>, no_auto_bom);</span><br><span class="line">        &#125;</span><br><span class="line">    ;</span><br><span class="line">    <span class="comment">// IE 10+ (native saveAs)</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> navigator !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; navigator.msSaveOrOpenBlob) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">blob, name, no_auto_bom</span>) </span>&#123;</span><br><span class="line">            name = name || blob.name || <span class="string">&quot;download&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!no_auto_bom) &#123;</span><br><span class="line">                blob = auto_bom(blob);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> navigator.msSaveOrOpenBlob(blob, name);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FS_proto.abort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    FS_proto.readyState = FS_proto.INIT = <span class="number">0</span>;</span><br><span class="line">    FS_proto.WRITING = <span class="number">1</span>;</span><br><span class="line">    FS_proto.DONE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    FS_proto.error =</span><br><span class="line">        FS_proto.onwritestart =</span><br><span class="line">            FS_proto.onprogress =</span><br><span class="line">                FS_proto.onwrite =</span><br><span class="line">                    FS_proto.onabort =</span><br><span class="line">                        FS_proto.onerror =</span><br><span class="line">                            FS_proto.onwriteend =</span><br><span class="line">                                <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> saveAs;</span><br><span class="line">&#125;(</span><br><span class="line">    <span class="keyword">typeof</span> self !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; self</span><br><span class="line">    || <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; <span class="built_in">window</span></span><br><span class="line">    || <span class="built_in">this</span>.content</span><br><span class="line">));</span><br><span class="line"><span class="comment">// `self` is undefined in Firefox for Android content script context</span></span><br><span class="line"><span class="comment">// while `this` is nsIContentFrameMessageManager</span></span><br><span class="line"><span class="comment">// with an attribute `content` that corresponds to the window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; <span class="built_in">module</span>.exports) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports.saveAs = saveAs;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">typeof</span> define !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; define !== <span class="literal">null</span>) &amp;&amp; (define.amd !== <span class="literal">null</span>)) &#123;</span><br><span class="line">    define(<span class="string">&quot;FileSaver.js&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> saveAs;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Java使用Javacv库操作摄像头</title>
    <url>/2020/12/30/Java/Java%E4%BD%BF%E7%94%A8Javacv%E5%BA%93%E6%93%8D%E4%BD%9C%E6%91%84%E5%83%8F%E5%A4%B4/</url>
    <content><![CDATA[<h2 id="依赖添加"><a href="#依赖添加" class="headerlink" title="依赖添加"></a>依赖添加</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bytedeco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javacpp-platform<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bytedeco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javacv-platform<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>该依赖直接使用aliyun仓库下载即可。不然会下载很慢。而且下载的东西很多，包括linux，mac,window各种平台的版本，他会讲一些ddl或其他附加文件以jar的方式打包处理，不需要再拷贝各种依赖文件到服务器的某些位置。</p>
<h2 id="调用摄像头在关闭的最后一帧保存图片"><a href="#调用摄像头在关闭的最后一帧保存图片" class="headerlink" title="调用摄像头在关闭的最后一帧保存图片"></a>调用摄像头在关闭的最后一帧保存图片</h2><p>doExecuteFrame方法用于抓取图片，如果放在循环里，则会循环抓取。我们可以在适当的时间进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cgq.opencv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.CanvasFrame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.Frame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.Java2DFrameConverter;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.OpenCVFrameGrabber;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        OpenCVFrameGrabber grabber = <span class="keyword">new</span> OpenCVFrameGrabber(<span class="number">0</span>);<span class="comment">//0表示本机摄像头  当然这里也可以换成网络摄像头地址</span></span><br><span class="line">        grabber.start();   <span class="comment">//开始获取摄像头数据</span></span><br><span class="line">        CanvasFrame canvas = <span class="keyword">new</span> CanvasFrame(<span class="string">&quot;摄像头&quot;</span>);<span class="comment">//新建一个窗口</span></span><br><span class="line">        canvas.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<span class="comment">//窗口关闭时程序运行结束</span></span><br><span class="line">        canvas.setSize(<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        canvas.setAlwaysOnTop(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                doExecuteFrame(grabber.grabFrame(),<span class="string">&quot;D:/new/&quot;</span>+<span class="number">1</span>+<span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">                String s = Base64.encodeBase64String(IOUtils.toByteArray(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:/new/1.jpg&quot;</span>)));</span><br><span class="line">                HttpClientUtil.test(<span class="string">&quot;http://localhost:8002/test/test&quot;</span>,s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!canvas.isDisplayable())&#123;<span class="comment">//窗口是否关闭</span></span><br><span class="line">                System.out.println(<span class="string">&quot;已关闭&quot;</span>);</span><br><span class="line">                grabber.stop();<span class="comment">//停止抓取</span></span><br><span class="line">                System.exit(<span class="number">2</span>);<span class="comment">//退出</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            canvas.showImage(grabber.grab());<span class="comment">//获取摄像头图像并放到窗口上显示， 这里的Frame frame=grabber.grab(); frame表示一帧视频图像</span></span><br><span class="line">            <span class="comment">//调用doExecuteFrame()方法，将截取的图片保存在本地</span></span><br><span class="line">            <span class="comment">//doExecuteFrame(grabber.grabFrame(),&quot;D:/new/&quot;+1+&quot;.jpg&quot;);</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);<span class="comment">//50毫秒刷新一次图像</span></span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> f 表示帧</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetFileName 存储路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doExecuteFrame</span><span class="params">(Frame f, String targetFileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> ==f ||<span class="keyword">null</span> ==f.image) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Java2DFrameConverter converter =<span class="keyword">new</span> Java2DFrameConverter();</span><br><span class="line">        BufferedImage bi =converter.getBufferedImage(f);</span><br><span class="line">        File output =<span class="keyword">new</span> File(targetFileName);</span><br><span class="line">        <span class="keyword">if</span> (!output.exists())&#123;</span><br><span class="line">            output.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ImageIO.write(bi,<span class="string">&quot;jpg&quot;</span>,output);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="调用摄像头进行拍摄视频并保存本地mp4"><a href="#调用摄像头进行拍摄视频并保存本地mp4" class="headerlink" title="调用摄像头进行拍摄视频并保存本地mp4"></a>调用摄像头进行拍摄视频并保存本地mp4</h2><p>从启动程序，调用摄像头开始到关闭程序，在关闭时将其转换为mp4存储到本地</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cgq.opencv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.CanvasFrame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.Frame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameGrabber;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameRecorder;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.OpenCVFrameConverter;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.ffmpeg.global.*;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.opencv.opencv_core.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 调用视频录制</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> chen</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020/12/26</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception, InterruptedException, org.bytedeco.javacv.FrameRecorder.Exception </span>&#123;</span><br><span class="line">        recordCamera(<span class="string">&quot;output.mp4&quot;</span>,<span class="number">25</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按帧录制本机摄像头视频（边预览边录制，停止预览即停止录制）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> eguid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile -录制的文件路径，也可以是rtsp或者rtmp等流媒体服务器发布地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> frameRate - 视频帧率</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> org.bytedeco.javacv.FrameRecorder.Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recordCamera</span><span class="params">(String outputFile, <span class="keyword">double</span> frameRate)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//另一种方式获取摄像头，opencv抓取器方式获取摄像头请参考第一章，FrameGrabber会自己去找可以打开的摄像头的抓取器。</span></span><br><span class="line">        FrameGrabber grabber = FrameGrabber.createDefault(<span class="number">0</span>);<span class="comment">//本机摄像头默认0</span></span><br><span class="line">        grabber.start();<span class="comment">//开启抓取器</span></span><br><span class="line"></span><br><span class="line">        OpenCVFrameConverter.ToIplImage converter = <span class="keyword">new</span> OpenCVFrameConverter.ToIplImage();<span class="comment">//转换器</span></span><br><span class="line">        IplImage grabbedImage = converter.convert(grabber.grab());<span class="comment">//抓取一帧视频并将其转换为图像，至于用这个图像用来做什么？加水印，人脸识别等等自行添加</span></span><br><span class="line">        <span class="keyword">int</span> width = grabbedImage.width();</span><br><span class="line">        <span class="keyword">int</span> height = grabbedImage.height();</span><br><span class="line"></span><br><span class="line">        FrameRecorder recorder = FrameRecorder.createDefault(outputFile, width, height);</span><br><span class="line">        recorder.setVideoCodec(avcodec.AV_CODEC_ID_H264); <span class="comment">// avcodec.AV_CODEC_ID_H264，编码</span></span><br><span class="line">        recorder.setFormat(<span class="string">&quot;flv&quot;</span>);<span class="comment">//封装格式，如果是推送到rtmp就必须是flv封装格式</span></span><br><span class="line">        recorder.setFrameRate(frameRate);</span><br><span class="line"></span><br><span class="line">        recorder.start();<span class="comment">//开启录制器</span></span><br><span class="line">        <span class="keyword">long</span> startTime=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> videoTS=<span class="number">0</span>;</span><br><span class="line">        CanvasFrame frame = <span class="keyword">new</span> CanvasFrame(<span class="string">&quot;camera&quot;</span>, CanvasFrame.getDefaultGamma() / grabber.getGamma());</span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        frame.setAlwaysOnTop(<span class="keyword">true</span>);</span><br><span class="line">        Frame rotatedFrame=converter.convert(grabbedImage);<span class="comment">//不知道为什么这里不做转换就不能推到rtmp</span></span><br><span class="line">        <span class="keyword">while</span> (frame.isVisible() &amp;&amp; (grabbedImage = converter.convert(grabber.grab())) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            rotatedFrame = converter.convert(grabbedImage);</span><br><span class="line">            frame.showImage(rotatedFrame);</span><br><span class="line">            <span class="keyword">if</span> (startTime == <span class="number">0</span>) &#123;</span><br><span class="line">                startTime = System.currentTimeMillis();</span><br><span class="line">            &#125;</span><br><span class="line">            videoTS = <span class="number">1000</span> * (System.currentTimeMillis() - startTime);</span><br><span class="line">            recorder.setTimestamp(videoTS);</span><br><span class="line">            recorder.record(rotatedFrame);</span><br><span class="line">            Thread.sleep(<span class="number">40</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        frame.dispose();<span class="comment">//关闭窗口</span></span><br><span class="line">        recorder.close();<span class="comment">//关闭推流录制器，close包含release和stop操作</span></span><br><span class="line">        grabber.close();<span class="comment">//关闭抓取器</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="直接调起摄像头不拍照"><a href="#直接调起摄像头不拍照" class="headerlink" title="直接调起摄像头不拍照"></a>直接调起摄像头不拍照</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cgq.opencv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.CanvasFrame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.FrameGrabber;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.OpenCVFrameGrabber;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 调用摄像头展示</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> chen</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020/12/26</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FrameGrabber.Exception, InterruptedException </span>&#123;</span><br><span class="line">        OpenCVFrameGrabber grabber = <span class="keyword">new</span> OpenCVFrameGrabber(<span class="number">0</span>);</span><br><span class="line">        grabber.start();</span><br><span class="line">        CanvasFrame canvas = <span class="keyword">new</span> CanvasFrame(<span class="string">&quot;摄像头&quot;</span>);<span class="comment">//新建一个窗口</span></span><br><span class="line">        canvas.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<span class="comment">//窗口关闭时程序运行结束</span></span><br><span class="line">        canvas.setAlwaysOnTop(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!canvas.isDisplayable())&#123;<span class="comment">//窗口是否关闭</span></span><br><span class="line">                System.out.println(<span class="string">&quot;已关闭&quot;</span>);</span><br><span class="line">                grabber.stop();<span class="comment">//停止抓取</span></span><br><span class="line">                System.exit(<span class="number">2</span>);<span class="comment">//退出</span></span><br><span class="line">            &#125;</span><br><span class="line">            canvas.showImage(grabber.grab());<span class="comment">//获取摄像头图像并放到窗口上显示， 这里的Frame         frame=grabber.grab(); frame是一帧视频图像</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);<span class="comment">//50毫秒刷新一次图像</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Hutool工具类使用</title>
    <url>/2020/12/25/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/Hutool%E5%B7%A5%E5%85%B7%E5%8C%85%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h2 id="TreeUtil使用"><a href="#TreeUtil使用" class="headerlink" title="TreeUtil使用"></a>TreeUtil使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;TreeNode&lt;String&gt;&gt; maps = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Map&lt;String,Object&gt; map1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map1.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;1000&quot;</span>);</span><br><span class="line">map1.put(<span class="string">&quot;parentId&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">map1.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;1号&quot;</span>);</span><br><span class="line">Map&lt;String,Object&gt; map11 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map11.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">map11.put(<span class="string">&quot;parentId&quot;</span>,<span class="string">&quot;1000&quot;</span>);</span><br><span class="line">map11.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;1001号&quot;</span>);</span><br><span class="line">Map&lt;String,Object&gt; map111 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map111.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;1011&quot;</span>);</span><br><span class="line">map111.put(<span class="string">&quot;parentId&quot;</span>,<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">map111.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;1011号&quot;</span>);</span><br><span class="line">Map&lt;String,Object&gt; map2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map2.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;2000&quot;</span>);</span><br><span class="line">map2.put(<span class="string">&quot;parentId&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">map2.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;2号&quot;</span>);</span><br><span class="line">Map&lt;String,Object&gt; map21 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map21.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;2001&quot;</span>);</span><br><span class="line">map21.put(<span class="string">&quot;parentId&quot;</span>,<span class="string">&quot;2000&quot;</span>);</span><br><span class="line">map21.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;2001号&quot;</span>);</span><br><span class="line">maps.add(BeanUtil.mapToBean(map1,TreeNode.class,<span class="keyword">false</span>, CopyOptions.create()));</span><br><span class="line">maps.add(BeanUtil.mapToBean(map2,TreeNode.class,<span class="keyword">false</span>, CopyOptions.create()));</span><br><span class="line">maps.add(BeanUtil.mapToBean(map11,TreeNode.class,<span class="keyword">false</span>, CopyOptions.create()));</span><br><span class="line">maps.add(BeanUtil.mapToBean(map111,TreeNode.class,<span class="keyword">false</span>, CopyOptions.create()));</span><br><span class="line">maps.add(BeanUtil.mapToBean(map21,TreeNode.class,<span class="keyword">false</span>, CopyOptions.create()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Tree&lt;String&gt;&gt; build = TreeUtil.build(maps, <span class="string">&quot;0&quot;</span>, <span class="keyword">new</span> DefaultNodeParser&lt;String&gt;());</span><br><span class="line">build.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;id=1000, parentId=0, weight=0, name=1号, children=[&#123;id=1001, parentId=1000, weight=0, name=1001号, children=[&#123;id=1011, parentId=1001, weight=0, name=1011号&#125;]&#125;]&#125;</span><br><span class="line">&#123;id=2000, parentId=0, weight=0, name=2号, children=[&#123;id=2001, parentId=2000, weight=0, name=2001号&#125;]&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ExcelUtil"><a href="#ExcelUtil" class="headerlink" title="ExcelUtil"></a>ExcelUtil</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Map&lt;String,String&gt; headMap &#x3D; new LinkedHashMap&lt;&gt;();</span><br><span class="line">headMap.put(&quot;num&quot;,&quot;序号&quot;);</span><br><span class="line">headMap.put(&quot;code&quot;,&quot;行政区代码&quot;);</span><br><span class="line">headMap.put(&quot;name&quot;,&quot;行政区名称&quot;);</span><br><span class="line">headMap.put(&quot;value&quot;,&quot;数值&quot;);</span><br><span class="line">headMap.put(&quot;unit&quot;,&quot;单位&quot;);</span><br><span class="line"></span><br><span class="line">ExcelWriter writer &#x3D; ExcelUtil.getWriter(true);</span><br><span class="line">writer.setHeaderAlias(headMap);</span><br><span class="line">writer.writeHeadRow(headMap.values());</span><br><span class="line">for (Map&lt;String, Object&gt; linkedHashMap : mapList) &#123;</span><br><span class="line">    writer.writeRow(linkedHashMap,false);</span><br><span class="line">&#125;</span><br><span class="line">for (int i &#x3D; 0; i &lt; headMap.keySet().size(); i++) &#123;</span><br><span class="line">    writer.setColumnWidth(i,20);</span><br><span class="line">&#125;</span><br><span class="line">String downloadFile &#x3D; new String((area.getName() + year + &quot;年空间规划&quot;+ item +&quot;统计表.xlsx&quot;).getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1);</span><br><span class="line">response.addHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;\&quot;&quot; + downloadFile + &quot;\&quot;&quot;);</span><br><span class="line">&#x2F;&#x2F; 二进制流</span><br><span class="line">response.setContentType(MediaType.APPLICATION_OCTET_STREAM.getType());</span><br><span class="line"></span><br><span class="line">writer.flush(response.getOutputStream(),true);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>国密SM2加密类</title>
    <url>/2020/12/10/Java/%E5%9B%BD%E5%AF%86SM2%E5%8A%A0%E5%AF%86%E7%B1%BB/</url>
    <content><![CDATA[<p>添加bcprov-jdk15on依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.65<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SM2Util类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxha.interfaces.one.toolkit.sm2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.crypto.DerivationFunction;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.crypto.digests.SHA256Digest;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.crypto.digests.ShortenedDigest;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.crypto.generators.KDF1BytesGenerator;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.crypto.params.ISO18033KDFParameters;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.math.ec.ECCurve;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.math.ec.ECPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 国密SM2加密解密工具类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> chen</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020/11/30</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SM2Util</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BigInteger n = <span class="keyword">new</span> BigInteger(</span><br><span class="line">            <span class="string">&quot;FFFFFFFE&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span> + <span class="string">&quot;7203DF6B&quot;</span> + <span class="string">&quot;21C6052B&quot;</span> + <span class="string">&quot;53BBF409&quot;</span> + <span class="string">&quot;39D54123&quot;</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BigInteger p = <span class="keyword">new</span> BigInteger(</span><br><span class="line">            <span class="string">&quot;FFFFFFFE&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span> + <span class="string">&quot;00000000&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BigInteger a = <span class="keyword">new</span> BigInteger(</span><br><span class="line">            <span class="string">&quot;FFFFFFFE&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span> + <span class="string">&quot;00000000&quot;</span> + <span class="string">&quot;FFFFFFFF&quot;</span> + <span class="string">&quot;FFFFFFFC&quot;</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BigInteger b = <span class="keyword">new</span> BigInteger(</span><br><span class="line">            <span class="string">&quot;28E9FA9E&quot;</span> + <span class="string">&quot;9D9F5E34&quot;</span> + <span class="string">&quot;4D5A9E4B&quot;</span> + <span class="string">&quot;CF6509A7&quot;</span> + <span class="string">&quot;F39789F5&quot;</span> + <span class="string">&quot;15AB8F92&quot;</span> + <span class="string">&quot;DDBCBD41&quot;</span> + <span class="string">&quot;4D940E93&quot;</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BigInteger gx = <span class="keyword">new</span> BigInteger(</span><br><span class="line">            <span class="string">&quot;32C4AE2C&quot;</span> + <span class="string">&quot;1F198119&quot;</span> + <span class="string">&quot;5F990446&quot;</span> + <span class="string">&quot;6A39C994&quot;</span> + <span class="string">&quot;8FE30BBF&quot;</span> + <span class="string">&quot;F2660BE1&quot;</span> + <span class="string">&quot;715A4589&quot;</span> + <span class="string">&quot;334C74C7&quot;</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BigInteger gy = <span class="keyword">new</span> BigInteger(</span><br><span class="line">            <span class="string">&quot;BC3736A2&quot;</span> + <span class="string">&quot;F4F6779C&quot;</span> + <span class="string">&quot;59BDCEE3&quot;</span> + <span class="string">&quot;6B692153&quot;</span> + <span class="string">&quot;D0A9877C&quot;</span> + <span class="string">&quot;C62A4740&quot;</span> + <span class="string">&quot;02DF32E5&quot;</span> + <span class="string">&quot;2139F0A0&quot;</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ECCurve.Fp curve;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ECPoint G;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ECPoint publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sm2Utils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        curve = <span class="keyword">new</span> ECCurve.Fp(p, a, b);</span><br><span class="line">        G = curve.createPoint(gx, gy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SM2Util</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        curve = <span class="keyword">new</span> ECCurve.Fp(p, a, b);</span><br><span class="line">        G = curve.createPoint(gx, gy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:             创建公钥私钥</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/24 17:17</span></span><br><span class="line"><span class="comment">     * return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">genKeyPair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; keyMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        SM2Util sm2 = <span class="keyword">new</span> SM2Util();</span><br><span class="line">        <span class="comment">// 生成私钥</span></span><br><span class="line">        BigInteger privateKey = sm2.setPrivateKey(SM2Util.n);</span><br><span class="line">        <span class="comment">// 生成公钥</span></span><br><span class="line">        ECPoint publicKey = sm2.setPublicKey(privateKey);</span><br><span class="line">        <span class="comment">// 将公钥和私钥保存到Map</span></span><br><span class="line">        keyMap.put(<span class="string">&quot;publicKey&quot;</span>, getPublickKeyStr(publicKey));  <span class="comment">//公钥</span></span><br><span class="line">        keyMap.put(<span class="string">&quot;privateKey&quot;</span>, privateKey.toString());  <span class="comment">//私钥</span></span><br><span class="line">        <span class="keyword">return</span> keyMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:             公钥转字符串</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/24 17:16</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey: return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getPublickKeyStr</span><span class="params">(ECPoint publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> buffer[] = publicKey.getEncoded(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> printHexString(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:             随机生成随机数</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/15 19:31</span></span><br><span class="line"><span class="comment">     * return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BigInteger <span class="title">random</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(<span class="number">2048</span>, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:             生成私钥</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/15 19:32</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n: return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BigInteger <span class="title">setPrivateKey</span><span class="params">(BigInteger n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> random();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:             生成公钥</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/15 19:32</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> d: return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ECPoint <span class="title">setPublicKey</span><span class="params">(BigInteger d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> G.multiply(d).normalize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:             保存私钥到本地文件</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/15 19:32</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey: 私钥对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path:       私钥保存路径</span></span><br><span class="line"><span class="comment">     *                    return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exportPrivateKey</span><span class="params">(BigInteger privateKey, String path)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">            oos.writeObject(privateKey);</span><br><span class="line">            oos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:                 导出公钥到本地</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/15 19:33</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey: 公钥对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path:      公钥存储路径</span></span><br><span class="line"><span class="comment">     *                   return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exportPublicKey</span><span class="params">(ECPoint publicKey, String path)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span> buffer[] = publicKey.getEncoded(<span class="keyword">false</span>);</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            fos.write(buffer);</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:             从本地导入私钥</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/15 19:34</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path: 从本地导入私钥</span></span><br><span class="line"><span class="comment">     *              return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BigInteger <span class="title">importPrivateKey</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">            BigInteger res = (BigInteger) (ois.readObject());</span><br><span class="line">            ois.close();</span><br><span class="line">            fis.close();</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:             从本地导入公钥</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/15 19:34</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path: 私钥路径</span></span><br><span class="line"><span class="comment">     *              return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ECPoint <span class="title">importPublicKey</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span> buffer[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">            <span class="keyword">int</span> size;</span><br><span class="line">            <span class="keyword">while</span> ((size = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, size);</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">            <span class="keyword">return</span> curve.decodePoint(baos.toByteArray());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:             使用公钥加密</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/15 19:34</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str:       待加密的字符串内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey: 公钥对象</span></span><br><span class="line"><span class="comment">     *                   return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">encrypt</span><span class="params">(String str, ECPoint publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (curve == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">new</span> SM2Util();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] inputBuffer = str.getBytes();</span><br><span class="line">        <span class="comment">// 1 产生随机数k，k属于[1, n-1]</span></span><br><span class="line">        BigInteger k = random();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 计算椭圆曲线点C1 = [k]G = (x1, y1)</span></span><br><span class="line">        ECPoint C1 = G.multiply(k);</span><br><span class="line">        <span class="keyword">byte</span>[] C1Buffer = C1.getEncoded(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3 计算 [k]PB = (x2, y2)</span></span><br><span class="line">        ECPoint kpb = publicKey.multiply(k).normalize();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4 计算 t = KDF(x2||y2, klen)</span></span><br><span class="line">        <span class="keyword">byte</span>[] kpbBytes = kpb.getEncoded(<span class="keyword">false</span>);</span><br><span class="line">        DerivationFunction kdf = <span class="keyword">new</span> KDF1BytesGenerator(<span class="keyword">new</span> ShortenedDigest(</span><br><span class="line">                <span class="keyword">new</span> SHA256Digest(), <span class="number">20</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] t = <span class="keyword">new</span> <span class="keyword">byte</span>[inputBuffer.length];</span><br><span class="line">        kdf.init(<span class="keyword">new</span> ISO18033KDFParameters(kpbBytes));</span><br><span class="line">        kdf.generateBytes(t, <span class="number">0</span>, t.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 5 计算C2=M^t */</span></span><br><span class="line">        <span class="keyword">byte</span>[] C2 = <span class="keyword">new</span> <span class="keyword">byte</span>[inputBuffer.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputBuffer.length; i++) &#123;</span><br><span class="line">            C2[i] = (<span class="keyword">byte</span>) (inputBuffer[i] ^ t[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 6 计算C3 = Hash(x2 || M || y2) */</span></span><br><span class="line">        <span class="keyword">byte</span>[] C3 = calculateHash(kpb.getXCoord().toBigInteger(), inputBuffer,</span><br><span class="line">                kpb.getYCoord().toBigInteger());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 7 输出密文 C=C1 || C2 || C3 */</span></span><br><span class="line">        <span class="keyword">byte</span>[] encryptResult = <span class="keyword">new</span> <span class="keyword">byte</span>[C1Buffer.length + C2.length + C3.length];</span><br><span class="line">        System.arraycopy(C1Buffer, <span class="number">0</span>, encryptResult, <span class="number">0</span>, C1Buffer.length);</span><br><span class="line">        System.arraycopy(C2, <span class="number">0</span>, encryptResult, C1Buffer.length, C2.length);</span><br><span class="line">        System.arraycopy(C3, <span class="number">0</span>, encryptResult, C1Buffer.length + C2.length,</span><br><span class="line">                C3.length);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//	        System.out.print(&quot;密文: &quot;);</span></span><br><span class="line">        <span class="keyword">return</span> printHexString(encryptResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:             使用私钥解密</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/16 8:55</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptStr: 待解密的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey: 私钥</span></span><br><span class="line"><span class="comment">     *                    return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String encryptStr, BigInteger privateKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (curve == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">new</span> SM2Util();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] encryptData = toByteArray(encryptStr);</span><br><span class="line"><span class="comment">//	        System.out.println(&quot;encryptData length: &quot; + encryptData.length);</span></span><br><span class="line">        <span class="keyword">byte</span>[] C1Byte = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">65</span>];</span><br><span class="line">        System.arraycopy(encryptData, <span class="number">0</span>, C1Byte, <span class="number">0</span>, C1Byte.length);</span><br><span class="line">        ECPoint C1 = curve.decodePoint(C1Byte).normalize();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 计算[dB]C1 = (x2, y2) */</span></span><br><span class="line">        ECPoint dBC1 = C1.multiply(privateKey).normalize();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 计算t = KDF(x2 || y2, klen) */</span></span><br><span class="line">        <span class="keyword">byte</span>[] dBC1Bytes = dBC1.getEncoded(<span class="keyword">false</span>);</span><br><span class="line">        DerivationFunction kdf = <span class="keyword">new</span> KDF1BytesGenerator(<span class="keyword">new</span> ShortenedDigest(</span><br><span class="line">                <span class="keyword">new</span> SHA256Digest(), <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> klen = encryptData.length - <span class="number">65</span> - <span class="number">20</span>;</span><br><span class="line"><span class="comment">//	        System.out.println(&quot;klen = &quot; + klen);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] t = <span class="keyword">new</span> <span class="keyword">byte</span>[klen];</span><br><span class="line">        kdf.init(<span class="keyword">new</span> ISO18033KDFParameters(dBC1Bytes));</span><br><span class="line">        kdf.generateBytes(t, <span class="number">0</span>, t.length);</span><br><span class="line">        <span class="comment">/* 5 计算M&#x27;=C2^t */</span></span><br><span class="line">        <span class="keyword">byte</span>[] M = <span class="keyword">new</span> <span class="keyword">byte</span>[klen];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.length; i++) &#123;</span><br><span class="line">            M[i] = (<span class="keyword">byte</span>) (encryptData[C1Byte.length + i] ^ t[i]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//	        printHexString(M);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 6 计算 u = Hash(x2 || M&#x27; || y2) 判断 u == C3是否成立 */</span></span><br><span class="line">        <span class="keyword">byte</span>[] C3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.arraycopy(encryptData, encryptData.length - <span class="number">20</span>, C3, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] u = calculateHash(dBC1.getXCoord().toBigInteger(), M, dBC1</span><br><span class="line">                .getYCoord().toBigInteger());</span><br><span class="line">        <span class="keyword">if</span> (Arrays.equals(u, C3)) &#123;</span><br><span class="line"><span class="comment">//	            System.out.println(&quot;解密成功&quot;);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;u = &quot;</span>);</span><br><span class="line">            printHexString(u);</span><br><span class="line">            System.out.print(<span class="string">&quot;C3 = &quot;</span>);</span><br><span class="line">            printHexString(C3);</span><br><span class="line">            System.err.println(<span class="string">&quot;解密验证失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(M);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:             使用私钥解密</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/16 8:55</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptStr: 待解密的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey: 私钥</span></span><br><span class="line"><span class="comment">     *                    return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String encryptStr, String privateKey)</span> </span>&#123;</span><br><span class="line">        BigInteger privateKeys = <span class="keyword">new</span> BigInteger(privateKey);</span><br><span class="line">        <span class="keyword">return</span> decrypt(encryptStr, privateKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:             以16进制打印字节数组</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/15 19:44</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b: return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">printHexString</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">        StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            String hex = Integer.toHexString(b[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">            <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                str.append(<span class="string">&#x27;0&#x27;</span> + hex);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str.append(hex);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//	            str.append(hex);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//	        System.out.println(str.toString());</span></span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] calculateHash(BigInteger x2, <span class="keyword">byte</span>[] M, BigInteger y2) &#123;</span><br><span class="line">        ShortenedDigest digest = <span class="keyword">new</span> ShortenedDigest(<span class="keyword">new</span> SHA256Digest(), <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buf = x2.toByteArray();</span><br><span class="line">        digest.update(buf, <span class="number">0</span>, buf.length);</span><br><span class="line">        digest.update(M, <span class="number">0</span>, M.length);</span><br><span class="line">        buf = y2.toByteArray();</span><br><span class="line">        digest.update(buf, <span class="number">0</span>, buf.length);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        digest.doFinal(buf, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> buf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description:                 16进制的字符串表示转成字节数组</span></span><br><span class="line"><span class="comment">     * author: wenchenhui</span></span><br><span class="line"><span class="comment">     * date: 2020/9/16 8:53</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hexString: 16进制格式的字符串</span></span><br><span class="line"><span class="comment">     *                   return:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toByteArray(String hexString) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hexString == <span class="keyword">null</span> || hexString.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;字符串为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        hexString = hexString.toLowerCase();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] byteArray = <span class="keyword">new</span> <span class="keyword">byte</span>[hexString.length() / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteArray.length; i++) &#123;<span class="comment">//因为是16进制，最多只会占用4位，转换成字节需要两个16进制的字符，高位在先</span></span><br><span class="line">            <span class="keyword">byte</span> high = (<span class="keyword">byte</span>) (Character.digit(hexString.charAt(k), <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="keyword">byte</span> low = (<span class="keyword">byte</span>) (Character.digit(hexString.charAt(k + <span class="number">1</span>), <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">            byteArray[i] = (<span class="keyword">byte</span>) (high &lt;&lt; <span class="number">4</span> | low);</span><br><span class="line">            k += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> byteArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] downloadPem(String publicKeyStr) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] publicKey = toByteArray(publicKeyStr);</span><br><span class="line">            <span class="keyword">return</span> publicKey;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPublicKey</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (curve == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">new</span> SM2Util();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span> buffer[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">            <span class="keyword">int</span> size;</span><br><span class="line">            <span class="keyword">while</span> ((size = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, size);</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">            publicKey = curve.decodePoint(baos.toByteArray());</span><br><span class="line">            System.err.println(<span class="string">&quot;初始化公钥成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.err.println(<span class="string">&quot;初始化公钥失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用公钥加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> encrypt(str, publicKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String path = SM2Util.class.getResource(<span class="string">&quot;/publicKey.pem&quot;</span>).getPath();</span><br><span class="line">        <span class="keyword">if</span> (path.startsWith(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">            path = path.substring(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        initPublicKey(path);</span><br><span class="line">        log.info(<span class="string">&quot;初始化国密SM2公钥&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>远程连接出现身份验证错误要求的函数不受支持可能是由于CredSSP加密数据库修正</title>
    <url>/2020/12/09/Windows/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%87%BA%E7%8E%B0%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E9%94%99%E8%AF%AF%E8%A6%81%E6%B1%82%E7%9A%84%E5%87%BD%E6%95%B0%E4%B8%8D%E5%8F%97%E6%94%AF%E6%8C%81%E5%8F%AF%E8%83%BD%E6%98%AF%E7%94%B1%E4%BA%8ECredSSP%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%AE%E6%AD%A3/</url>
    <content><![CDATA[<p>在注册表<code>regedit</code>找到如下位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\CredSSP\Parameters</span><br></pre></td></tr></table></figure>



<p>找到此文件夹项，如果System下没有CredSSP，则创建爱你CredSSP\Parameters目录项。并在Parameters中添加值AllowEncryptionOracle。</p>
<p>Parameters右击新建DWORD(32位)值。这是必须不能变。然后点击数据名修改值为2，十六进制。</p>
<p>如果还不行则找到Win+R 输入<code>gpedit.msc</code>进入本地策略组</p>
<p>计算机配置-管理模板-系统-凭据分配-加密Oracle修正，编辑策略为已启用，保护级别为易受攻击。重启再测试</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
  </entry>
  <entry>
    <title>K8S部署说明</title>
    <url>/2020/12/08/k8s/K8S%E9%83%A8%E7%BD%B2%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h3><ul>
<li><p>最小部署单位</p>
</li>
<li><p>pod里有多个容器</p>
</li>
<li><p>里面的容器共享网络</p>
</li>
<li><p>生命周期是短暂的，停止后就没了</p>
</li>
</ul>
<h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><ul>
<li><p>确保预期pod副本数量(内置)</p>
</li>
<li><p>无状态应用部署, 可以认为随便用</p>
</li>
<li><p>有状态应用部署 有限制</p>
</li>
<li><p>确保所有的node运行同一个pod</p>
</li>
<li><p>一次性任务和定时任务</p>
</li>
</ul>
<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><ul>
<li>定义一组pod的访问规则</li>
</ul>
<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h4 id="机器前置条件"><a href="#机器前置条件" class="headerlink" title="机器前置条件"></a>机器前置条件</h4><ul>
<li><p>虚拟机至少2G内存和2个cpu内核</p>
</li>
<li><p>Centos7</p>
</li>
<li><p>集群中所有机器之间网络互通</p>
</li>
<li><p>可以访问外网，需要拉取镜像</p>
</li>
<li><p>禁止 swap 分区</p>
</li>
</ul>
<p>集群的每台机器需满足以下条件</p>
<ol>
<li><p>关闭防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭selinux</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;enforcing&#x2F;disabled&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config # 永久</span><br><span class="line">setenforce 0 # 临时</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭swap</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">swapoff -a # 临时 </span><br><span class="line">vim &#x2F;etc&#x2F;fstab # 永久</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主机名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class="line">提前定义好机器名</span><br><span class="line">master k8smaster</span><br><span class="line">node1 k8snode1</span><br><span class="line">node2 k8snode2</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置/etc/hosts</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; &#x2F;etc&#x2F;hosts &lt;&lt; EOF</span><br><span class="line">192.168.38.131 k8smaster </span><br><span class="line">192.168.38.130 k8snode1 </span><br><span class="line">192.168.38.129 k8snode2</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 IPv4 流量传递到 iptables 的链</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl --system # 生效</span><br></pre></td></tr></table></figure>
</li>
<li><p>时间同步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ntpdate -y</span><br><span class="line">ntpdate time.windows.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>docker安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考docker doc官网文档安装即可</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置aliyun镜像源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt; EOF </span><br><span class="line">&#123; &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;b9pmyelo.mirror.aliyuncs.com&quot;] &#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加yum源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo &lt;&lt; EOF</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64 </span><br><span class="line">enabled&#x3D;1 </span><br><span class="line">gpgcheck&#x3D;0 </span><br><span class="line">repo_gpgcheck&#x3D;0 </span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
<p>以上操作每台机器都要操作一遍</p>
<h3 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h3><h4 id="单master集群-kubeadm快速部署"><a href="#单master集群-kubeadm快速部署" class="headerlink" title="单master集群(kubeadm快速部署)"></a>单master集群(kubeadm快速部署)</h4><p>1个master，管理多个node</p>
<ol>
<li><p>安装kubeadm,kubectl,kubelet。每台机器都安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet kubeadm kubectl</span><br><span class="line">systemctl enable kubelet</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署kubernates Master</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm init --apiserver-advertise-address&#x3D;192.168.38.131 --image-repository registry.aliyuncs.com&#x2F;google_containers --kubernetes-version v1.19.4 --service-cidr&#x3D;10.96.0.0&#x2F;12 --pod-network-cidr&#x3D;10.244.0.0&#x2F;16</span><br></pre></td></tr></table></figure>

<p><code>--apiserver-advertise-address=192.168.38.128</code>的ip地址为master的ip地址,</p>
<p><code>--service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16</code>的地址不用变，只要不跟本地的网络网段冲突即可</p>
<p>以上命令中kubernetes-version的版本可能会出现变动，如果你是docker1.19ce的可能版本需要1.19多，如果是1.18的可能需要1.18.0版本的k8s，如果版本不符会有提示，更改后重新执行即可。</p>
<p>此命令在master机器上执行即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster chen]# kubeadm init --apiserver-advertise-address&#x3D;172.20.10.12 --image-repository registry.aliyuncs.com&#x2F;google_containers --kubernetes-version v1.19.4 --service-cidr&#x3D;10.96.0.0&#x2F;12 --pod-network-cidr&#x3D;10.244.0.0&#x2F;16</span><br><span class="line">W1207 18:20:36.377050    9743 configset.go:348] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]</span><br><span class="line">[init] Using Kubernetes version: v1.19.4</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">	[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;cri&#x2F;</span><br><span class="line">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action in beforehand using &#39;kubeadm config images pull&#39;</span><br><span class="line">[certs] Using certificateDir folder &quot;&#x2F;etc&#x2F;kubernetes&#x2F;pki&quot;</span><br><span class="line">[certs] Generating &quot;ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver&quot; certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed for DNS names [k8smaster kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 172.20.10.12]</span><br><span class="line">[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd&#x2F;ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd&#x2F;server&quot; certificate and key</span><br><span class="line">[certs] etcd&#x2F;server serving cert is signed for DNS names [k8smaster localhost] and IPs [172.20.10.12 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd&#x2F;peer&quot; certificate and key</span><br><span class="line">[certs] etcd&#x2F;peer serving cert is signed for DNS names [k8smaster localhost] and IPs [172.20.10.12 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd&#x2F;healthcheck-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;sa&quot; key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder &quot;&#x2F;etc&#x2F;kubernetes&quot;</span><br><span class="line">[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml&quot;</span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[control-plane] Using manifest folder &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;</span><br><span class="line">[etcd] Creating static Pod manifest for local etcd in &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;</span><br><span class="line">[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 15.006504 seconds</span><br><span class="line">[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.19&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class="line">[upload-certs] Skipping phase. Please see --upload-certs</span><br><span class="line">[mark-control-plane] Marking the node k8smaster as control-plane by adding the label &quot;node-role.kubernetes.io&#x2F;master&#x3D;&#39;&#39;&quot;</span><br><span class="line">[mark-control-plane] Marking the node k8smaster as control-plane by adding the taints [node-role.kubernetes.io&#x2F;master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: p5r8fj.4crlieflsyjwo0a6</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class="line">[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class="line">[kubelet-finalize] Updating &quot;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet.conf&quot; to point to a rotatable kubelet client certificate and key</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME&#x2F;.kube</span><br><span class="line">  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 172.20.10.12:6443 --token p5r8fj.4crlieflsyjwo0a6 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:4cac266f5cd5334961006976c4c213a8fedbd6408742378b82a35b935af65bda </span><br></pre></td></tr></table></figure>
</li>
<li><p>在master中执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure>
</li>
<li><p>加入kubernetes Node</p>
<p>子节点机器上执行init后返回的信息命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm join 172.20.10.12:6443 --token p5r8fj.4crlieflsyjwo0a6 --discovery-token-ca-cert-hash sha256:4cac266f5cd5334961006976c4c213a8fedbd6408742378b82a35b935af65bda</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8snode1 chen]# kubeadm join 172.20.10.12:6443 --token p5r8fj.4crlieflsyjwo0a6 --discovery-token-ca-cert-hash sha256:4cac266f5cd5334961006976c4c213a8fedbd6408742378b82a35b935af65bda </span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">	[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;cri&#x2F;</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with &#39;kubectl -n kube-system get cm kubeadm-config -oyaml&#39;</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml&quot;</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run &#39;kubectl get nodes&#39; on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装flannel网络</p>
<p><code>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</code>无法安装,则将kube-flannel.yml保存下来上传到master上</p>
<p>参考文件kube-flannel.yml</p>
<p>执行<code>kubectl apply -f kube-flannel.yml</code>即可</p>
</li>
<li><p>在master上执行命令，如下状态为Ready则成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster chen]# kubectl get nodes</span><br><span class="line">NAME        STATUS   ROLES    AGE     VERSION</span><br><span class="line">k8smaster   Ready    master   4h40m   v1.19.4</span><br><span class="line">k8snode1    Ready    &lt;none&gt;   4h39m   v1.19.4</span><br><span class="line">k8snode2    Ready    &lt;none&gt;   4h39m   v1.19.4</span><br></pre></td></tr></table></figure>

<p>如果node为noReady则可能flannel网络有问题,或者原本三台机器网络就不通。还需要确定token是否过期，以及join是否正确</p>
</li>
<li><p>测试集群部署</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create deployment nginx --image&#x3D;nginx</span><br><span class="line">kubectl expose deployment nginx --port&#x3D;80 --type&#x3D;NodePort</span><br><span class="line">kubectl get pod,svc</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster chen]# kubectl create deployment nginx --image&#x3D;nginx</span><br><span class="line">deployment.apps&#x2F;nginx created</span><br><span class="line">[root@k8smaster chen]# kubectl expose deployment nginx --port&#x3D;80 --type&#x3D;NodePort</span><br><span class="line">service&#x2F;nginx exposed</span><br><span class="line">[root@k8smaster chen]# kubectl get pod,svc</span><br><span class="line">NAME                         READY   STATUS              RESTARTS   AGE</span><br><span class="line">pod&#x2F;nginx-6799fc88d8-g77s6   0&#x2F;1     ContainerCreating   0          53s</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">service&#x2F;kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443&#x2F;TCP        3h31m</span><br><span class="line">service&#x2F;nginx        NodePort    10.110.176.11   &lt;none&gt;        80:30377&#x2F;TCP   15s</span><br></pre></td></tr></table></figure>

<p>随后访问NodePort:Port即可访问。10.110.176.11:80。</p>
</li>
</ol>
<p><strong>经查询<code>kubectl get pod -o wide</code>部署在node1上只有node1节点可以访问</strong></p>
<h4 id="单master集群-二进制部署"><a href="#单master集群-二进制部署" class="headerlink" title="单master集群(二进制部署)"></a>单master集群(二进制部署)</h4><h5 id="服务器规划"><a href="#服务器规划" class="headerlink" title="服务器规划"></a>服务器规划</h5><table>
<thead>
<tr>
<th>角色</th>
<th>ip</th>
<th>组件</th>
</tr>
</thead>
<tbody><tr>
<td>k8s-master</td>
<td>192.168.37.137</td>
<td>kube-apiserver，kube-controller-manager，kube -scheduler，etcd</td>
</tr>
<tr>
<td>k8s-node1</td>
<td>192.168.37.138</td>
<td>kubelet，kube-proxy，docker etcd</td>
</tr>
<tr>
<td>k8s-node2</td>
<td>192.168.37.139</td>
<td>kubelet，kube-proxy，docker etcd</td>
</tr>
</tbody></table>
<h5 id="操作系统初始化"><a href="#操作系统初始化" class="headerlink" title="操作系统初始化"></a>操作系统初始化</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 关闭防火墙 </span><br><span class="line">systemctl stop firewalld </span><br><span class="line">systemctl disable firewalld </span><br><span class="line"></span><br><span class="line"># 关闭 selinux </span><br><span class="line">sed -i &#39;s&#x2F;enforcing&#x2F;disabled&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config # 永久 </span><br><span class="line">setenforce 0 # 临时 </span><br><span class="line"></span><br><span class="line"># 关闭 swap </span><br><span class="line">swapoff -a # 临时 </span><br><span class="line">sed -ri &#39;s&#x2F;.*swap.*&#x2F;#&amp;&#x2F;&#39; &#x2F;etc&#x2F;fstab # 永久 </span><br><span class="line"></span><br><span class="line"># 根据规划设置主机名 </span><br><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class="line"></span><br><span class="line"># 在 master 添加 hosts </span><br><span class="line">cat &gt;&gt; &#x2F;etc&#x2F;hosts &lt;&lt; EOF </span><br><span class="line">192.168.44.147 m1 </span><br><span class="line">192.168.44.148 n1 </span><br><span class="line">EOF </span><br><span class="line"></span><br><span class="line"># 将桥接的 IPv4 流量传递到 iptables 的链 </span><br><span class="line">cat &gt; &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf &lt;&lt; EOF </span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1 </span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1 </span><br><span class="line">EOF </span><br><span class="line">sysctl --system # 生效 </span><br><span class="line"></span><br><span class="line"># 时间同步 </span><br><span class="line">yum install ntpdate -y </span><br><span class="line">ntpdate time.windows.com</span><br></pre></td></tr></table></figure>



<h5 id="准备cfssl证书生成工具"><a href="#准备cfssl证书生成工具" class="headerlink" title="准备cfssl证书生成工具"></a>准备cfssl证书生成工具</h5><p>cfssl 是一个开源的证书管理工具，使用 json 文件生成证书，相比 openssl 更方便使用。 找任意一台服务器操作，这里用 Master 节点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;pkg.cfssl.org&#x2F;R1.2&#x2F;cfssl_linux-amd64 </span><br><span class="line">wget https:&#x2F;&#x2F;pkg.cfssl.org&#x2F;R1.2&#x2F;cfssljson_linux-amd64 </span><br><span class="line">wget https:&#x2F;&#x2F;pkg.cfssl.org&#x2F;R1.2&#x2F;cfssl-certinfo_linux-amd64 </span><br><span class="line">chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64 </span><br><span class="line">mv cfssl_linux-amd64 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cfssl </span><br><span class="line">mv cfssljson_linux-amd64 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cfssljson </span><br><span class="line">mv cfssl-certinfo_linux-amd64 &#x2F;usr&#x2F;bin&#x2F;cfssl-certinfo</span><br></pre></td></tr></table></figure>

<p> <a href="cfssl_linux-amd64">cfssl_linux-amd64</a> </p>
<p> <a href="cfssl-certinfo_linux-amd64">cfssl-certinfo_linux-amd64</a> </p>
<p> <a href="cfssljson_linux-amd64">cfssljson_linux-amd64</a> </p>
<h5 id="生成etcd证书"><a href="#生成etcd证书" class="headerlink" title="生成etcd证书"></a>生成etcd证书</h5><ol>
<li><p>自签证书颁发机构（CA）</p>
<p>创建工作目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p ~&#x2F;TLS&#x2F;&#123;etcd,k8s&#125; </span><br><span class="line">cd TLS&#x2F;etcd</span><br></pre></td></tr></table></figure>

<p>自签 CA</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; ca-config.json&lt;&lt; EOF </span><br><span class="line">&#123; </span><br><span class="line">	&quot;signing&quot;: &#123; </span><br><span class="line">		&quot;default&quot;: &#123; </span><br><span class="line">			&quot;expiry&quot;: &quot;87600h&quot; </span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;profiles&quot;: &#123; </span><br><span class="line">			&quot;www&quot;: &#123; </span><br><span class="line">				&quot;expiry&quot;: &quot;87600h&quot;, </span><br><span class="line">				&quot;usages&quot;: [ &quot;signing&quot;,&quot;key encipherment&quot;, &quot;server auth&quot;, &quot;client auth&quot; ] </span><br><span class="line">			&#125; </span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; ca-csr.json&lt;&lt; EOF </span><br><span class="line">&#123; </span><br><span class="line">	&quot;CN&quot;: &quot;etcd CA&quot;, </span><br><span class="line">	&quot;key&quot;: &#123; &quot;algo&quot;: &quot;rsa&quot;, &quot;size&quot;: 2048 &#125;,</span><br><span class="line">	&quot;names&quot;: [ </span><br><span class="line">		&#123; </span><br><span class="line">			&quot;C&quot;: &quot;CN&quot;, </span><br><span class="line">			&quot;L&quot;: &quot;Beijing&quot;, </span><br><span class="line">			&quot;ST&quot;: &quot;Beijing&quot; </span><br><span class="line">		&#125; </span><br><span class="line">	] </span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>生成证书</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class="line">&#x2F;&#x2F;生成 两个pem</span><br><span class="line">ls *pem </span><br><span class="line">ca-key.pem ca.pem</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用自签 CA 签发 Etcd HTTPS 证书 </p>
<p>创建证书申请文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; server-csr.json&lt;&lt; EOF</span><br><span class="line">&#123; </span><br><span class="line">	&quot;CN&quot;: &quot;etcd&quot;, </span><br><span class="line">	&quot;hosts&quot;: [ </span><br><span class="line">		&quot;192.168.38.137&quot;, </span><br><span class="line">		&quot;192.168.38.138&quot;, </span><br><span class="line">		&quot;192.168.38.139&quot; </span><br><span class="line">	],</span><br><span class="line">	&quot;key&quot;: &#123; </span><br><span class="line">		&quot;algo&quot;: &quot;rsa&quot;, </span><br><span class="line">		&quot;size&quot;: 2048 </span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;names&quot;: [ </span><br><span class="line">		&#123; </span><br><span class="line">			&quot;C&quot;: &quot;CN&quot;, </span><br><span class="line">			&quot;L&quot;: &quot;BeiJing&quot;, </span><br><span class="line">			&quot;ST&quot;: &quot;BeiJing&quot; </span><br><span class="line">		&#125; </span><br><span class="line">	] </span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>注：上述文件 hosts 字段中 IP 为所有 etcd 节点的集群内部通信 IP，一个都不能少！为了 方便后期扩容可以多写几个预留的 IP。</p>
<p>生成证书</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;www server-csr.json | cfssljson -bare server</span><br><span class="line">&#x2F;&#x2F; 生成两个pem</span><br><span class="line">ls server*pem </span><br><span class="line">server-key.pem server.pem</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="部署etcd集群"><a href="#部署etcd集群" class="headerlink" title="部署etcd集群"></a>部署etcd集群</h5><p>下载etcd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd&#x2F;releases&#x2F;download&#x2F;v3.4.9&#x2F;etcd-v3.4.9- linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>

<p> <a href="etcd-v3.4.11-linux-amd64.tar.gz">etcd-v3.4.11-linux-amd64.tar.gz</a> </p>
<p>以下在节点 1 上操作，为简化操作，待会将节点 1 生成的所有文件拷贝到节点 2 和节点 3。</p>
<ol>
<li><p>创建工作目录并解压二进制包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;opt&#x2F;etcd&#x2F;&#123;bin,cfg,ssl&#125; –p </span><br><span class="line">tar zxvf etcd-v3.4.9-linux-amd64.tar.gz </span><br><span class="line">mv etcd-v3.4.9-linux-amd64&#x2F;&#123;etcd,etcdctl&#125; &#x2F;opt&#x2F;etcd&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 etcd 配置文件 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; &#x2F;opt&#x2F;etcd&#x2F;cfg&#x2F;etcd.conf &lt;&lt; EOF </span><br><span class="line">#[Member] </span><br><span class="line">ETCD_NAME&#x3D;&quot;etcd-1&quot; </span><br><span class="line">ETCD_DATA_DIR&#x3D;&quot;&#x2F;var&#x2F;lib&#x2F;etcd&#x2F;default.etcd&quot; </span><br><span class="line">ETCD_LISTEN_PEER_URLS&#x3D;&quot;https:&#x2F;&#x2F;192.168.38.137:2380&quot; </span><br><span class="line">ETCD_LISTEN_CLIENT_URLS&#x3D;&quot;https:&#x2F;&#x2F;192.168.38.137:2379&quot;</span><br><span class="line">#[Clustering] </span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS&#x3D;&quot;https:&#x2F;&#x2F;192.168.38.137:2380&quot;</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS&#x3D;&quot;https:&#x2F;&#x2F;192.168.38.137:2379&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER&#x3D;&quot;etcd-1&#x3D;https:&#x2F;&#x2F;192.168.38.137:2380,etcd-2&#x3D;https:&#x2F;&#x2F;192.168.38.138:2380&quot;</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN&#x3D;&quot;etcd-cluster&quot; </span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE&#x3D;&quot;new&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>ETCD_NAME：节点名称，集群中唯一 </p>
<p>ETCD_DATA_DIR：数据目录 </p>
<p>ETCD_LISTEN_PEER_URLS：集群通信监听地址 </p>
<p>ETCD_LISTEN_CLIENT_URLS：客户端访问监听地址 </p>
<p>ETCD_INITIAL_ADVERTISE_PEER_URLS：集群通告地址 </p>
<p>ETCD_ADVERTISE_CLIENT_URLS：客户端通告地址 </p>
<p>ETCD_INITIAL_CLUSTER：集群节点地址 </p>
<p>ETCD_INITIAL_CLUSTER_TOKEN：集群 Token </p>
<p>ETCD_INITIAL_CLUSTER_STATE：加入集群的当前状态，new 是新集群，existing 表示加入 已有集群 </p>
</li>
<li><p>systemd 管理 etcd,创建etcd.service服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;etcd.service &lt;&lt; EOF </span><br><span class="line">[Unit] </span><br><span class="line">Description&#x3D;Etcd Server </span><br><span class="line">After&#x3D;network.target </span><br><span class="line">After&#x3D;network-online.target </span><br><span class="line">Wants&#x3D;network-online.target </span><br><span class="line">[Service] </span><br><span class="line">Type&#x3D;notify </span><br><span class="line">EnvironmentFile&#x3D;&#x2F;opt&#x2F;etcd&#x2F;cfg&#x2F;etcd.conf </span><br><span class="line">ExecStart&#x3D;&#x2F;opt&#x2F;etcd&#x2F;bin&#x2F;etcd --cert-file&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server.pem --key-file&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server-key.pem --peer-cert-file&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server.pem --peer-key-file&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server-key.pem --trusted-ca-file&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;ca.pem --peer-trusted-ca-file&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;ca.pem --logger&#x3D;zap </span><br><span class="line">Restart&#x3D;on-failure </span><br><span class="line">LimitNOFILE&#x3D;65536 	</span><br><span class="line">[Install] </span><br><span class="line">WantedBy&#x3D;multi-user.target </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
</li>
<li><p>拷贝刚才生成的证书</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp ~&#x2F;TLS&#x2F;etcd&#x2F;ca*pem ~&#x2F;TLS&#x2F;etcd&#x2F;server*pem &#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将上面节点 1 所有生成的文件拷贝到节点 2 和节点 3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r &#x2F;opt&#x2F;etcd&#x2F; root@192.168.38.138:&#x2F;opt&#x2F; </span><br><span class="line">scp &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;etcd.service root@192.168.38.138:&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F; </span><br><span class="line">scp -r &#x2F;opt&#x2F;etcd&#x2F; root@192.168.38.139:&#x2F;opt&#x2F; </span><br><span class="line">scp &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;etcd.service root@192.168.38.139:&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在节点 2 和节点 3 分别修改 etcd.conf 配置文件中的节点名称和当前服务器 IP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;opt&#x2F;etcd&#x2F;cfg&#x2F;etcd.conf </span><br><span class="line">#[Member] </span><br><span class="line">ETCD_NAME&#x3D;&quot;etcd-1&quot; # 修改此处，节点 2 改为 etcd-2，节点 3 改为 etcd-3</span><br><span class="line">ETCD_DATA_DIR&#x3D;&quot;&#x2F;var&#x2F;lib&#x2F;etcd&#x2F;default.etcd&quot; </span><br><span class="line">ETCD_LISTEN_PEER_URLS&#x3D;&quot;https:&#x2F;&#x2F;192.168.31.71:2380&quot; # 修改此处为当前服务器 IP </span><br><span class="line">ETCD_LISTEN_CLIENT_URLS&#x3D;&quot;https:&#x2F;&#x2F;192.168.31.71:2379&quot; # 修改此处为当前服务器 IP </span><br><span class="line">#[Clustering] </span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS&#x3D;&quot;https:&#x2F;&#x2F;192.168.31.71:2380&quot; # 修改此处为当前 服务器 IP </span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS&#x3D;&quot;https:&#x2F;&#x2F;192.168.31.71:2379&quot; # 修改此处为当前服务器 IP</span><br><span class="line">ETCD_INITIAL_CLUSTER&#x3D;&quot;etcd-1&#x3D;https:&#x2F;&#x2F;192.168.31.71:2380,etcd-2&#x3D;https:&#x2F;&#x2F;192.168.31.72:2380,etcd-3&#x3D;https:&#x2F;&#x2F;192.168.31.73:2380&quot; ETCD_INITIAL_CLUSTER_TOKEN&#x3D;&quot;etcd-cluster&quot; </span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE&#x3D;&quot;new&quot;</span><br></pre></td></tr></table></figure>

<p>ETCD_INITIAL_CLUSTER的地址一定要对应名称和地址，且一定得是匹配对的，有3个就写3个</p>
</li>
<li><p>同时启动多台服务器</p>
<p>首先各个都使用<code>systemctl daemon-reload</code>命令重载服务</p>
<p>然后使用<code>systemctl start etcd</code>命令启动服务，注意需要同时启动这几台服务器，启动master后会有等待的。</p>
<p>都启动完成后使用<code>systemctl enable etcd</code>命令设置开机启动服务</p>
</li>
<li><p>验证服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ETCDCTL_API&#x3D;3 &#x2F;opt&#x2F;etcd&#x2F;bin&#x2F;etcdctl --cacert&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;ca.pem --cert&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server.pem --key&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server-key.pem --endpoints&#x3D;&quot;https:&#x2F;&#x2F;192.168.38.137:2379,https:&#x2F;&#x2F;192.168.38.138:2379&quot; endpoint health</span><br></pre></td></tr></table></figure>

<p>endpoints地址进行修改ip，几个ip就修改几个。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster1 etcd]# ETCDCTL_API&#x3D;3 &#x2F;opt&#x2F;etcd&#x2F;bin&#x2F;etcdctl --cacert&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;ca.pem --cert&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server.pem --key&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server-key.pem --endpoints&#x3D;&quot;https:&#x2F;&#x2F;192.168.38.137:2379,https:&#x2F;&#x2F;192.168.38.138:2379&quot; endpoint health</span><br><span class="line">https:&#x2F;&#x2F;192.168.38.137:2379 is healthy: successfully committed proposal: took &#x3D; 26.394808ms</span><br><span class="line">https:&#x2F;&#x2F;192.168.38.138:2379 is healthy: successfully committed proposal: took &#x3D; 29.625316ms</span><br></pre></td></tr></table></figure>

<p>如果显示is unhealthy则要检查了</p>
</li>
</ol>
<h5 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h5><p>采用yum安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum -y install docker-ce-19.03.9 docker-ce-cli-19.03.9 containerd.io</span><br><span class="line"></span><br><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;b9pmyelo.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="部署master-Node"><a href="#部署master-Node" class="headerlink" title="部署master Node"></a>部署master Node</h5><ol>
<li><p>生成kube-apiserver证书</p>
<ol>
<li><p>自签证书颁发机构CA</p>
<p>cd ~/TLS/k8s</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; ca-config.json&lt;&lt; EOF </span><br><span class="line">&#123;</span><br><span class="line">    &quot;signing&quot;: &#123;</span><br><span class="line">        &quot;default&quot;: &#123;</span><br><span class="line">            &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;profiles&quot;: &#123;</span><br><span class="line">            &quot;kubernetes&quot;: &#123;</span><br><span class="line">                &quot;expiry&quot;: &quot;87600h&quot;,</span><br><span class="line">                &quot;usages&quot;: [</span><br><span class="line">                    &quot;signing&quot;,</span><br><span class="line">                    &quot;key encipherment&quot;,</span><br><span class="line">                    &quot;server auth&quot;,</span><br><span class="line">                    &quot;client auth&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; ca-csr.json&lt;&lt; EOF </span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;kubernetes&quot;,</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;Beijing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;k8s&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成证书</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用自签 CA 签发 kube-apiserver HTTPS 证书。创建证书申请文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; server-csr.json&lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;kubernetes&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">        &quot;10.0.0.1&quot;,</span><br><span class="line">        &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;192.168.38.137&quot;,</span><br><span class="line">        &quot;192.168.38.138&quot;,</span><br><span class="line">        &quot;192.168.38.139&quot;,</span><br><span class="line">        &quot;192.168.38.140&quot;,</span><br><span class="line">        &quot;192.168.38.141&quot;,</span><br><span class="line">        &quot;kubernetes&quot;,</span><br><span class="line">        &quot;kubernetes.default&quot;,</span><br><span class="line">        &quot;kubernetes.default.svc&quot;,</span><br><span class="line">        &quot;kubernetes.default.svc.cluster&quot;,</span><br><span class="line">        &quot;kubernetes.default.svc.cluster.local&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;k8s&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成证书</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cfssl gencert -ca&#x3D;ca.pem -ca-key&#x3D;ca-key.pem -config&#x3D;ca-config.json -profile&#x3D;kubernetes server-csr.json | cfssljson -bare server</span><br><span class="line"></span><br><span class="line">ls server*pem</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>下载kubernetes api包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github下载页面https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;kubernetes&#x2F;blob&#x2F;master&#x2F;CHANGELOG&#x2F;CHANGELOG-1.18.md#downloads-for-v11813</span><br><span class="line">下载地址:https:&#x2F;&#x2F;dl.k8s.io&#x2F;v1.18.13&#x2F;kubernetes-server-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;opt&#x2F;kubernetes&#x2F;&#123;bin,cfg,ssl,logs&#125; </span><br><span class="line">tar zxvf kubernetes-server-linux-amd64.tar.gz </span><br><span class="line">cd kubernetes&#x2F;server&#x2F;bin </span><br><span class="line">cp kube-apiserver kube-scheduler kube-controller-manager &#x2F;opt&#x2F;kubernetes&#x2F;bin </span><br><span class="line">cp kubectl &#x2F;usr&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署kube-apiserver</p>
<ol>
<li><p>创建配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; &#x2F;opt&#x2F;kubernetes&#x2F;cfg&#x2F;kube-apiserver.conf &lt;&lt; EOF</span><br><span class="line">KUBE_APISERVER_OPTS&#x3D;&quot;--logtostderr&#x3D;false \\ </span><br><span class="line">--v&#x3D;2 \\ </span><br><span class="line">--log-dir&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;logs \\ </span><br><span class="line">--etcd-servers&#x3D;https:&#x2F;&#x2F;192.168.38.137:2379,https:&#x2F;&#x2F;192.168.38.138:2379 \\ </span><br><span class="line">--bind-address&#x3D;192.168.38.137 \\ </span><br><span class="line">--secure-port&#x3D;6443 \\ </span><br><span class="line">--advertise-address&#x3D;192.168.38.137 \\ </span><br><span class="line">--allow-privileged&#x3D;true \\ </span><br><span class="line">--service-cluster-ip-range&#x3D;10.0.0.0&#x2F;24 \\ </span><br><span class="line">--enable-admission-plugins&#x3D;NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestric tion \\ </span><br><span class="line">--authorization-mode&#x3D;RBAC,Node \\ </span><br><span class="line">--enable-bootstrap-token-auth&#x3D;true \\ </span><br><span class="line">--token-auth-file&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;cfg&#x2F;token.csv \\ </span><br><span class="line">--service-node-port-range&#x3D;30000-32767 \\ </span><br><span class="line">--kubelet-client-certificate&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;ssl&#x2F;server.pem \\ </span><br><span class="line">--kubelet-client-key&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;ssl&#x2F;server-key.pem \\ </span><br><span class="line">--tls-cert-file&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;ssl&#x2F;server.pem \\ </span><br><span class="line">--tls-private-key-file&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;ssl&#x2F;server-key.pem \\ </span><br><span class="line">--client-ca-file&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;ssl&#x2F;ca.pem \\ </span><br><span class="line">--service-account-key-file&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;ssl&#x2F;ca-key.pem \\ </span><br><span class="line">--etcd-cafile&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;ca.pem \\ </span><br><span class="line">--etcd-certfile&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server.pem \\ </span><br><span class="line">--etcd-keyfile&#x3D;&#x2F;opt&#x2F;etcd&#x2F;ssl&#x2F;server-key.pem \\ </span><br><span class="line">--audit-log-maxage&#x3D;30 \\ </span><br><span class="line">--audit-log-maxbackup&#x3D;3 \\ </span><br><span class="line">--audit-log-maxsize&#x3D;100 \\ </span><br><span class="line">--audit-log-path&#x3D;&#x2F;opt&#x2F;kubernetes&#x2F;logs&#x2F;k8s-audit.log&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>注：上面两个\ 第一个是转义符，第二个是换行符，使用转义符是为了使用 EOF 保留换 行符。<br>-–logtostderr：启用日志<br>–v：日志等级<br>–-log-dir：日志目录<br>-–etcd-servers：etcd 集群地址<br>-–bind-address：监听地址<br>-–secure-port：https 安全端口<br>-–advertise-address：集群通告地址<br>-–allow-privileged：启用授权<br>-–service-cluster-ip-range：Service 虚拟 IP 地址段<br>-–enable-admission-plugins：准入控制模块<br>-–authorization-mode：认证授权，启用 RBAC 授权和节点自管理<br>–-enable-bootstrap-token-auth：启用 TLS bootstrap 机制<br>-–token-auth-file：bootstrap token 文件<br>-–service-node-port-range：Service nodeport 类型默认分配端口范围<br>-–kubelet-client-xxx：apiserver 访问 kubelet 客户端证书<br>-–tls-xxx-file：apiserver https 证书<br>-–etcd-xxxfile：连接 Etcd 集群证书<br>-–audit-log-xxx：审计日志</p>
</li>
</ol>
</li>
</ol>
<h4 id="多master集群"><a href="#多master集群" class="headerlink" title="多master集群"></a>多master集群</h4><p>多个master和多个node，master和node之间通过类似负载均衡的角色在中间处理</p>
<h3 id="搭建问题目录"><a href="#搭建问题目录" class="headerlink" title="搭建问题目录"></a>搭建问题目录</h3><h4 id="kubeadm出现的问题"><a href="#kubeadm出现的问题" class="headerlink" title="kubeadm出现的问题"></a>kubeadm出现的问题</h4><h4 id="Unable-to-connect-to-the-server-x509-certificate-signed-by-unknown-authority"><a href="#Unable-to-connect-to-the-server-x509-certificate-signed-by-unknown-authority" class="headerlink" title="Unable to connect to the server: x509: certificate signed by unknown authority"></a><a href="https://blog.csdn.net/woay2008/article/details/93250137">Unable to connect to the server: x509: certificate signed by unknown authority</a></h4><p>如果要重置部署状态，在master使用<code>kubeadm reset</code>命令即可，但需要删除<code>$HOME/.kube</code>目录才行，否则就会出现这个错误。</p>
<h4 id="kubeadm-报错-error-execution-phase-preflight-couldn’t-validate-the-identity-of-the-API-Server-abort-connecting-to-API-servers-after-timeout-of-5m0s"><a href="#kubeadm-报错-error-execution-phase-preflight-couldn’t-validate-the-identity-of-the-API-Server-abort-connecting-to-API-servers-after-timeout-of-5m0s" class="headerlink" title="kubeadm 报错 error execution phase preflight: couldn’t validate the identity of the API Server: abort connecting to API servers after timeout of 5m0s"></a><a href="https://www.cnblogs.com/winstom/p/11684921.html">kubeadm 报错 error execution phase preflight: couldn’t validate the identity of the API Server: abort connecting to API servers after timeout of 5m0s</a></h4><p>master节点token过期。默认24小时。<code>kubeadm token create</code>重新生成，然后node节点使用kubeadm join命令重新加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;1&quot; &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</span><br></pre></td></tr></table></figure>





<h4 id="二进制安装的问题"><a href="#二进制安装的问题" class="headerlink" title="二进制安装的问题"></a>二进制安装的问题</h4><p>服务启动失败，首要排查配置。然后查看日志<code>/var/log/messages</code>。确定异常类型和问题</p>
<ol>
<li>网络是否互通</li>
<li>ca认证各台机器是否都一致</li>
<li>各台机器的/opt/etcd/cfg/etcd.conf是否修改正确</li>
</ol>
<p>重新部署操作，步骤一致，都会覆盖。删除<code>/var/lib/etcd/default.etcd/</code>目录后再启动服务</p>
<h3 id="request-sent-was-ignored-cluster-ID-mismatch-peer-c39bdec535db1fd5-cdf818194e3a8c"><a href="#request-sent-was-ignored-cluster-ID-mismatch-peer-c39bdec535db1fd5-cdf818194e3a8c" class="headerlink" title="request sent was ignored (cluster ID mismatch: peer[c39bdec535db1fd5]=cdf818194e3a8c"></a>request sent was ignored (cluster ID mismatch: peer[c39bdec535db1fd5]=cdf818194e3a8c</h3><p>尝试解决方案：删除<code>/var/lib/etcd/default.etcd/</code>目录</p>
<p><strong>经测试，http地址是https协议的也没有问题，有的可能如果etcd是3.x的需要标注etcd api的环境变量为3,这个也不一定需要</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;profile</span><br><span class="line">export ETCDCTL_API&#x3D;3</span><br></pre></td></tr></table></figure>



<p>查看pod日志问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;查看当前pod的输出信息</span><br><span class="line">kubectl describe pod nginx-6799fc88d8-n9pxs</span><br><span class="line">&#x2F;&#x2F;查看所有命名空间为kube-system的pod信息</span><br><span class="line">kubectl get pod  --namespace&#x3D;kube-system -o wide</span><br><span class="line">&#x2F;&#x2F; 查看当前pod信息</span><br><span class="line">kubectl logs -n kube-system kube-proxy-5js4q</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>K8S</category>
      </categories>
  </entry>
  <entry>
    <title>Java深入问题</title>
    <url>/2020/11/18/Java/Java%E6%B7%B1%E5%85%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>不可变性,不可变对象</p>
<p>对象共享问题</p>
<p>ThreadLocal不是用来解决对象共享访问问题的，而主要是提供了保持对象的方法和避免参数传递的方便的对象访问方式</p>
<p><a href="https://blog.csdn.net/gufuguang/article/details/11920487?utm_source=blogxgwz5">https://blog.csdn.net/gufuguang/article/details/11920487?utm_source=blogxgwz5</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Windows10家庭版添加本地策略组</title>
    <url>/2020/11/11/Windows/Windows10%E5%AE%B6%E5%BA%AD%E7%89%88%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E7%AD%96%E7%95%A5%E7%BB%84/</url>
    <content><![CDATA[<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">dir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;List.txt</span><br><span class="line"></span><br><span class="line">dir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;List.txt</span><br><span class="line"></span><br><span class="line">for /f %%i in (&#x27;findstr /i . List.txt 2^&gt;nul&#x27;) do dism /online /norestart /add-package:&quot;C:\Windows\servicing\Packages\%%i&quot;</span><br></pre></td></tr></table></figure>



<p>将此代码存为后缀为cmd的文件，并使用管理员身份运行，等待窗口下载完毕。在Win+R运行窗口输入命令gpedit.msc打开本地策略组</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
  </entry>
  <entry>
    <title>相关问题</title>
    <url>/2020/11/04/MyBatis/%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="myabtis-foreach循环规定要用在in之后，否则需要将-item-改为’-item-’"><a href="#myabtis-foreach循环规定要用在in之后，否则需要将-item-改为’-item-’" class="headerlink" title="myabtis foreach循环规定要用在in之后，否则需要将#{item}改为’${item}’"></a>myabtis foreach循环规定要用在in之后，否则需要将#{item}改为’${item}’</h2>]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/04/Javascript/FullCalendar%E6%97%A5%E5%8E%86%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Spring WebFlux</title>
    <url>/2020/11/04/Spring/Spring%20WebFlux/</url>
    <content><![CDATA[<h2 id="什么是WebFlux"><a href="#什么是WebFlux" class="headerlink" title="什么是WebFlux"></a>什么是WebFlux</h2><p>Spring WebFlux是一个响应式异步非阻塞的Web框架，并可以在Netty、Undertow和Servlet 3.1+容器上运行，核心是Reactive Streams的相关API实现。</p>
<p>而异步非阻塞是再Servlet3.1才有。</p>
<p>Spring Mvc和SpringWebFlux可以共存。</p>
<h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><ul>
<li>选择使用JDK8 lambdas或Kotlin的轻量级的web框架，或者需求不是很复杂的小型应用程序或微服务</li>
</ul>
<p><strong>Servers</strong></p>
<ul>
<li><p>Spring WebFlux没有内置的启动或停止服务器的支持。但是，从Spring配置或WebFlux配置中可以进行操作。</p>
</li>
<li><p>Tomcat和Jetty可以与Spring MVC和WebFlux一起使用。但是请记住，它们的使用方式是非常不同的。Spring MVC依赖于Servlet阻塞I/O，并允许应用程序在需要时直接使用Servlet API。Spring WebFlux依赖于Servlet 3.1非阻塞I/O，并使用底层适配器背后的Servlet API。它不能暴露在外面直接使用</p>
</li>
<li><p>Spring WebFlux直接使用Undertow API而不使用Servlet API</p>
</li>
<li><p>能够以较小的、固定数量的线程和更少的内存进行扩展</p>
</li>
</ul>
<h3 id="响应式编程由来"><a href="#响应式编程由来" class="headerlink" title="响应式编程由来"></a>响应式编程由来</h3><p>响应式编程是一种面向数据流和<strong>变化传播</strong>的编程范式。这意味着可以在编程语言中很方便地<strong>表达静态或动态的数据</strong>流，而相关的计算模型会<strong>自动将变化的值通过数据流进行传播</strong></p>
<p>普通的代码编写，b的值不会随着a的值的改变而改变，那么就需要花额外的精力去构建和维护a和b之间的关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b=a+<span class="number">1</span>;</span><br><span class="line">System.out.print(“b=”+b)    <span class="comment">//  b=2</span></span><br><span class="line">a=<span class="number">10</span>;</span><br><span class="line">System.out.print(“b=”+b)    <span class="comment">//  b=2</span></span><br></pre></td></tr></table></figure>

<p>而电子表格中A1=B1+C1的计算公式。A1的单元格值会随着B1和C1的值而进行变动。这也就说明了变化传播和动态数据传播。因此为了满足这种模式或构建关系出现了响应式思想。</p>
<p>响应式编程在Java8及以前提供观察者模式的ObServer和ObServable类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Observable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebFluxDemo</span> <span class="keyword">extends</span> <span class="title">Observable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WebFluxDemo obServer = <span class="keyword">new</span> WebFluxDemo();</span><br><span class="line">        obServer.addObserver((o,arg)-&gt;&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">            System.out.println(arg);</span><br><span class="line">        &#125;);</span><br><span class="line">        obServer.setChanged();</span><br><span class="line">        obServer.notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring WbFlux</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7相关操作</title>
    <url>/2020/11/04/Linux/Centos7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="防火墙操作"><a href="#防火墙操作" class="headerlink" title="防火墙操作"></a>防火墙操作</h2><h3 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=8080/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新加载立即生效</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="查看防火墙所有开放端口"><a href="#查看防火墙所有开放端口" class="headerlink" title="查看防火墙所有开放端口"></a>查看防火墙所有开放端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>

<h3 id="防火墙开启关闭状态"><a href="#防火墙开启关闭状态" class="headerlink" title="防火墙开启关闭状态"></a>防火墙开启关闭状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>



<h2 id="端口进程"><a href="#端口进程" class="headerlink" title="端口进程"></a>端口进程</h2><h3 id="查看监听的端口"><a href="#查看监听的端口" class="headerlink" title="查看监听的端口"></a>查看监听的端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -lnpt</span><br></pre></td></tr></table></figure>

<h3 id="查看端口是否监听"><a href="#查看端口是否监听" class="headerlink" title="查看端口是否监听"></a>查看端口是否监听</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -ano|grep 8080</span><br></pre></td></tr></table></figure>



<h3 id="替换yum源为aliyun-yum源"><a href="#替换yum源为aliyun-yum源" class="headerlink" title="替换yum源为aliyun yum源"></a>替换yum源为aliyun yum源</h3><p>如果yum install xx报错<code>Cannot find a valid baseurl for repo: base/7/x86_6</code>也可以用以下方式解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.backup</span><br><span class="line">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>相关问题</title>
    <url>/2020/10/29/Docker/%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="java-net-NoRouteToHostException-No-route-to-host-Host-unreachable"><a href="#java-net-NoRouteToHostException-No-route-to-host-Host-unreachable" class="headerlink" title="java.net.NoRouteToHostException: No route to host (Host unreachable)"></a>java.net.NoRouteToHostException: No route to host (Host unreachable)</h2><p>docker中程序容器调用redis时出现的问题，提示无法访问到主机。</p>
<p>解决方法为：首先判断redis饰扣正常可用(如果不可用会报连接失败而不是这个)，开放宿主机对应的端口，程序容器和redis容器端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>



<h2 id="docker-java服务注册到nacos后是docker内网访问"><a href="#docker-java服务注册到nacos后是docker内网访问" class="headerlink" title="docker java服务注册到nacos后是docker内网访问"></a>docker java服务注册到nacos后是docker内网访问</h2><p>解决方法: 使用当前服务宿主机的host信息。</p>
<ol>
<li>在docker run 命令时添加<code>--network=host</code>参数，此时-p参数将无效，容器内部的端口将直接作用到宿主机，而容器内部的host信息，网络信息都与宿主机相同。</li>
<li>在bootstrap.yml文件中配置spring.cloud.nacos.discovery.ip可以指定为宿主机的ip，port属性可以指定为当前服务的port。此时注册到nacos上时，服务列表详情显示的某个实例的ip地址就是宿主机的ip地址。</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Java常用代码</title>
    <url>/2020/10/23/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/Java%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<ol>
<li><p>线程池设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor executor = ThreadPoolBuilder.queuableCachedPool().setThreadNamePrefix(<span class="string">&quot;kjgh&quot;</span>).setMinSize(<span class="number">80</span>).setMaxSize(<span class="number">800</span>).setDaemon(<span class="keyword">false</span>).setQueueSize(<span class="number">200</span>).build();</span><br></pre></td></tr></table></figure>
</li>
<li><p>guava本地缓存设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Cache&lt;String,String&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">            .initialCapacity(<span class="number">10</span>) <span class="comment">//初始化30个缓存大小</span></span><br><span class="line">            .maximumSize(<span class="number">100</span>)  <span class="comment">//最大100个</span></span><br><span class="line">            .concurrencyLevel(<span class="number">10</span>) <span class="comment">//同一时间最多只能有10个线程往cache执行写入操作</span></span><br><span class="line">            .expireAfterAccess(<span class="number">1</span>, TimeUnit.HOURS) <span class="comment">//一小时内没有读取则回收</span></span><br><span class="line">            .removalListener(notification -&gt; &#123; <span class="comment">//删除key监听</span></span><br><span class="line">                Object key = notification.getKey();</span><br><span class="line">                <span class="comment">// 表示由入库gdb生成的zip压缩包</span></span><br><span class="line">                <span class="keyword">if</span> (key!=<span class="keyword">null</span> &amp;&amp; key.toString().contains(<span class="string">&quot;gdbzip&quot;</span>))&#123;</span><br><span class="line">                    Object value = notification.getValue();</span><br><span class="line">                    <span class="keyword">if</span> (value!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        logger.warn(<span class="string">&quot;gdbzip压缩包路径缓存已超时,清除并删除压缩文件&quot;</span>);</span><br><span class="line">                        FileUtils.deleteFile(value.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).build();</span><br></pre></td></tr></table></figure>

<p>此缓存的删除并不是时间到了一定删除，而是到数量快满的时候。除非使用提供直接删除的方法进行删除。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>常用代码</category>
      </categories>
  </entry>
  <entry>
    <title>执行子查询字段更新语句时更新到数据库无效</title>
    <url>/2020/10/19/MyBatis/%E6%89%A7%E8%A1%8C%E5%AD%90%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E6%97%B6%E6%9B%B4%E6%96%B0%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A0%E6%95%88/</url>
    <content><![CDATA[<p>案例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> baowen.bizmsg</span><br><span class="line"><span class="keyword">set</span> (responsecode,responseinfo)=(<span class="keyword">select</span> responsecode,responseinfo <span class="keyword">from</span> repmsg <span class="keyword">where</span> bizmsgid=<span class="comment">#&#123;bizmsgId&#125;)</span></span><br><span class="line"><span class="keyword">WHERE</span> bizmsgid = <span class="comment">#&#123;bizmsgId&#125;</span></span><br></pre></td></tr></table></figure>

<p>该更新语句是通过子查询查询数据再进行更新的。返回update:1,但是数据库没有更新。</p>
<p>更换成set 属性单个值就可以更新成功。</p>
<p>目前还不知道为什么。</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot子线程共享主线程HttpServletRequest问题</title>
    <url>/2020/10/13/SpringBoot/SpringBoot%E5%AD%90%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E4%B8%BB%E7%BA%BF%E7%A8%8BHttpServletRequest%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>文章参考：<a href="https://blog.csdn.net/CNAHYZ/article/details/103322444">https://blog.csdn.net/CNAHYZ/article/details/103322444</a></p>
<p>而且博文<a href="https://www.cnblogs.com/liuqingsha3/p/9144122.html中提到的确实很有道理的样子">https://www.cnblogs.com/liuqingsha3/p/9144122.html中提到的确实很有道理的样子</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletRequestAttributes attributes = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes();</span><br><span class="line">RequestContextHolder.setRequestAttributes(attributes,<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<p>其实这样确实可以满足子线程获取用户线程的request，但是就如上面所说当用户线程返回时，会把request里的信息clear掉，但并不会使request置空。因此我这里也会出现偶尔子线程里有request的属性，有时候请求没有。</p>
<p>而博客中引用的<a href="https://www.jb51.net/article/158192.htm详细说明了示例的问题。">https://www.jb51.net/article/158192.htm详细说明了示例的问题。</a></p>
<p>因此还是最好把request里的东西取出来或者博客里说的定义一个线程安全的公共对象进行传输request。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK8 函数式接口说明解析</title>
    <url>/2020/09/17/Java/JDK8-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>函数式接口都存在java.util.function包下。</p>
<p>函数时接口的声明：</p>
<p>标注@FunctionInterface注解的接口，且该接口只有一个抽象方法，默认方法和已实现的静态方法不算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Applies this function to the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the function argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the function result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed function that first applies the &#123;<span class="doctag">@code</span> before&#125;</span></span><br><span class="line"><span class="comment">     * function to its input, and then applies this function to the result.</span></span><br><span class="line"><span class="comment">     * If evaluation of either function throws an exception, it is relayed to</span></span><br><span class="line"><span class="comment">     * the caller of the composed function.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; the type of input to the &#123;<span class="doctag">@code</span> before&#125; function, and to the</span></span><br><span class="line"><span class="comment">     *           composed function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> before the function to apply before this function is applied</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed function that first applies the &#123;<span class="doctag">@code</span> before&#125;</span></span><br><span class="line"><span class="comment">     * function and then applies this function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if before is null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #andThen(Function)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a composed function that first applies this function to</span></span><br><span class="line"><span class="comment">     * its input, and then applies the &#123;<span class="doctag">@code</span> after&#125; function to the result.</span></span><br><span class="line"><span class="comment">     * If evaluation of either function throws an exception, it is relayed to</span></span><br><span class="line"><span class="comment">     * the caller of the composed function.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; the type of output of the &#123;<span class="doctag">@code</span> after&#125; function, and of the</span></span><br><span class="line"><span class="comment">     *           composed function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> after the function to apply after this function is applied</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a composed function that first applies this function and then</span></span><br><span class="line"><span class="comment">     * applies the &#123;<span class="doctag">@code</span> after&#125; function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if after is null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #compose(Function)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a function that always returns its input argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; the type of the input and output objects to the function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a function that always returns its input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Function&lt;T, T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们看到Function&lt;T, R&gt;接口的<code>R apply(T t);</code>抽象方法，可以知道，该类定义的是传入一个T参数并返回一个R类型，一个传入一个传出的接口方法。</p>
<p>在学习函数时编程的写法时，类似<code>s-&gt;&#123;&#125;,(a,b)-&gt;&#123;&#125;</code>的方式。</p>
<p>一般某些方法的参数需要是一个函数式接口类型，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> &lt;R&gt; <span class="function">Mono&lt;R&gt; <span class="title">flatMap</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends Mono&lt;? extends R&gt;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">                                 transformer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> onAssembly(<span class="keyword">new</span> MonoFlatMap&lt;&gt;(<span class="keyword">this</span>, transformer));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而我们调用时是这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">studentMono.flatMap((person)-&gt;ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(fromValue(person)))</span><br></pre></td></tr></table></figure>

<p>才学没多久的肯定会忘记是为什么这么写。</p>
<p>首先书写方式就是上面的尖括号大括号的方式。然后看一下简单的实例化这个Function接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;String , Integer&gt; getLength = s -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> s.length();</span><br><span class="line">&#125;;</span><br><span class="line">Function&lt;String , Integer&gt; getLength = (s) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> s.length();</span><br><span class="line">&#125;;</span><br><span class="line">Integer apply = getLength.apply(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">System.out.println(apply);</span><br></pre></td></tr></table></figure>

<p>上面的一个是加括号，一个不加。</p>
<p>首先要知道s在这个方括号里的参数，这个参数变量叫s,a,b,c都无所谓，但是顺序是一定有的。可以认为它是一个实参。</p>
<p>而括号里的是具体实现，会返回一个数值，这也是Function接口特定要求的，而且已经声明了Integer所以要返回一个Integer类型。</p>
<p>然后再调用Function的方法apply，可见传递个参数123相当于s这个变量参数，然后返回值就是return的返回值。</p>
<p>而箭头函数最终其实就是一个匿名类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;String , Integer&gt; getLength2 = <span class="keyword">new</span> Function&lt;String, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>再看上面的flatMap方法需要一个Function接口，那么其<code>(person)-&gt;ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(fromValue(person))</code>就相当于<code>(s) -&gt;&#123;    return s.length();&#125;;</code>。<strong>因此flatMap方法的Function接口的T入参是什么类型person就是什么类型，R返回值是什么类型，则大括号里点到最后的body方法的返回值就一定是R类型或R类型的子类。</strong></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ffmpeg转码m3u8并播放</title>
    <url>/2020/09/06/other/%E4%BD%BF%E7%94%A8ffmpeg%E8%BD%AC%E7%A0%81m3u8%E5%B9%B6%E6%92%AD%E6%94%BE/</url>
    <content><![CDATA[<p>ffmgeg.exe可可以将多种格式相互转换。<br>使用方法可以到网上搜。<br>这里提供MP4转ts，到m3u8的方法</p>
<p><strong>将MP4转换为ts文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -y -i 本地视频.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 转换视频.ts</span><br></pre></td></tr></table></figure>

<p><strong>将ts文件分割成多个ts文件和一个m3u8索引文件。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i 本地视频.ts -c copy -map 0 -f segment -segment_list 视频索引.m3u8 -segment_time 5 前缀-%03d.ts</span><br></pre></td></tr></table></figure>

<p>其中segment 就是切片，-segment_time表示隔几秒进行切一个文件，上面命令是隔5s，你也可以调整成更大的参数</p>
<p><strong>使用hls.js可以直接播放</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (suf.indexOf(a)&gt;-<span class="number">1</span>) &#123;</span><br><span class="line">    layer.open(&#123;</span><br><span class="line">        type: <span class="number">1</span>,</span><br><span class="line">        area: [<span class="string">&#x27;700px&#x27;</span>, <span class="string">&#x27;500px&#x27;</span>],</span><br><span class="line">        content: <span class="string">&#x27;&lt;video id=&quot;video&quot; autobuffer autoloop loop controls height=&quot;100%&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;&#x27;</span></span><br><span class="line">        <span class="comment">//content: &#x27;&lt;div id=&quot;mp4&quot; style=&quot;width:100%;height:100%&quot;&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (Hls.isSupported()) &#123;</span><br><span class="line">        <span class="keyword">var</span> video = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> hls = <span class="keyword">new</span> Hls();</span><br><span class="line">        hls.loadSource(<span class="string">&#x27;/video&#x27;</span> + path);</span><br><span class="line">        hls.attachMedia(video);</span><br><span class="line">        hls.on(Hls.Events.MANIFEST_PARSED, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                video.play();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (video.canPlayType(<span class="string">&#x27;application/vnd.apple.mpegurl&#x27;</span>)) &#123;</span><br><span class="line">        video.src = <span class="string">&#x27;/video&#x27;</span> + pa;</span><br><span class="line">        video.addEventListener(<span class="string">&#x27;loadedmetadata&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            video.play();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    layer.open(&#123;</span><br><span class="line">        title:<span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">        content:<span class="string">&#x27;是否下载&#x27;</span>,</span><br><span class="line">        resize:<span class="literal">false</span>,</span><br><span class="line">        btn:[<span class="string">&#x27;下载&#x27;</span>,<span class="string">&#x27;取消&#x27;</span>],</span><br><span class="line">        yes:<span class="function"><span class="keyword">function</span> (<span class="params">index,layero</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> at = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            at.setAttribute(<span class="string">&#x27;href&#x27;</span>,<span class="string">&#x27;/video/&#x27;</span>+path);</span><br><span class="line">            at.click();</span><br><span class="line">            layer.close(index);</span><br><span class="line">        &#125;,</span><br><span class="line">        btn2:<span class="function"><span class="keyword">function</span> (<span class="params">index,layero</span>) </span>&#123;</span><br><span class="line">            layer.close(index);</span><br><span class="line">        &#125;,</span><br><span class="line">        cancel:<span class="function"><span class="keyword">function</span> (<span class="params">index,layero</span>) </span>&#123;</span><br><span class="line">            layer.close(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>avi转mp4</strong> 占用cpu100%不可取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg.exe ‐i test.avi ‐c:v libx264 ‐s 1280x720 ‐pix_fmt yuv420p ‐b:a 63k ‐b:v 753k ‐r 18 .\test.mp4</span><br></pre></td></tr></table></figure>

<p>-c:v 视频编码为x264 ，x264编码是H264的一种开源编码格式。</p>
<p>-s 设置分辨率</p>
<p>-pix_fmt yuv420p：设置像素采样方式，</p>
<p>-b 设置码率，-b:a和-b:v分别表示音频的码率和视频的码率，-b表示音频加视频的总码率。码率对一个视频质量有很大的作用，</p>
<p>-r：帧率，表示每秒更新图像画面的次数，通常大于24肉眼就没有连贯与停顿的感觉了。</p>
<p><strong>avi转ts</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.avi -b:v 640k output.ts</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署http SSL应用</title>
    <url>/2020/08/30/Docker/docker%E9%83%A8%E7%BD%B2http-SSL%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p>首先安装Docker，申请证书即可</p>
<h2 id="Httpd配置文件获取"><a href="#Httpd配置文件获取" class="headerlink" title="Httpd配置文件获取"></a>Httpd配置文件获取</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull httpd:2.4</span><br></pre></td></tr></table></figure>

<p>获取容器内配置文件到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --rm httpd:2.4 cat &#x2F;usr&#x2F;local&#x2F;apache2&#x2F;conf&#x2F;httpd.conf &gt; my-httpd.conf</span><br><span class="line">docker run --rm httpd:2.4 cat &#x2F;usr&#x2F;local&#x2F;apache2&#x2F;conf&#x2F;extra&#x2F;httpd-ssl.conf &gt; httpd-ssl.conf</span><br></pre></td></tr></table></figure>







<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><h3 id="修改httpd-conf-解开以下注释"><a href="#修改httpd-conf-解开以下注释" class="headerlink" title="修改httpd.conf,解开以下注释"></a>修改httpd.conf,解开以下注释</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">#LoadModule socache_shmcb_module modules&#x2F;mod_socache_shmcb.so</span><br><span class="line">...</span><br><span class="line">#LoadModule ssl_module modules&#x2F;mod_ssl.so</span><br><span class="line">...</span><br><span class="line">#Include conf&#x2F;extra&#x2F;httpd-ssl.conf</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="修改httpd-ssl-conf"><a href="#修改httpd-ssl-conf" class="headerlink" title="修改httpd-ssl.conf"></a>修改httpd-ssl.conf</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">找到&lt;VirtualHost _default_:443&gt;标签，修改一下内容</span><br><span class="line"></span><br><span class="line">ServerName   #修改为申请证书时绑定的域名www.YourDomainName1.com。                    </span><br><span class="line">DocumentRoot  &#x2F;data&#x2F;www&#x2F;hbappserver&#x2F;public #实际存储位置htdocs，一般默认不需要改</span><br><span class="line">SSLEngine on   </span><br><span class="line">SSLProtocol all -SSLv2 -SSLv3 # 添加SSL协议支持协议，去掉不安全的协议。</span><br><span class="line">SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM   # 修改加密套件。</span><br><span class="line">SSLHonorCipherOrder on</span><br><span class="line"># 将domain name1_public.crt替换成您证书文件名。默认位置不需要改，只需构建镜像时COPY即可</span><br><span class="line">SSLCertificateFile cert&#x2F;domain name1_public.crt</span><br><span class="line"># 将domain name1.key替换成您证书的密钥文件名。默认位置不需要改，只需构建镜像时COPY即可</span><br><span class="line">SSLCertificateKeyFile cert&#x2F;domain name1.key  </span><br><span class="line"># 将domain name1_chain.crt替换成您证书的密钥文件名；证书链开头如果有#字符，请删除。</span><br><span class="line"># 默认位置不需要改,只需构建镜像时COPY即可</span><br><span class="line">SSLCertificateChainFile cert&#x2F;domain name1_chain.crt  </span><br></pre></td></tr></table></figure>



<h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> httpd:<span class="number">2.4</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./my-httpd.conf /usr/<span class="built_in">local</span>/apache2/conf/httpd.conf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./httpd-ssl.conf /usr/<span class="built_in">local</span>/apache2/conf/extra/httpd-ssl.conf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./server.crt /usr/<span class="built_in">local</span>/apache2/conf/server.crt</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./server.key /usr/<span class="built_in">local</span>/apache2/conf/server.key</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./server-ca.crt /usr/<span class="built_in">local</span>/apache2/conf/server-ca.crt</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t chen/httpd:2.4 .</span><br></pre></td></tr></table></figure>



<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>创建htdocs目录存放项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -dit --name my-apache-app -p 80:80 -p 443:443 -v &#x2F;root&#x2F;httpd&#x2F;htdocs&#x2F;:&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs&#x2F;  chen&#x2F;httpd:2.4</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Java操作解压ZIP,RAR,7Z文件</title>
    <url>/2020/08/28/Java/Java%E6%93%8D%E4%BD%9C%E8%A7%A3%E5%8E%8BZIP,RAR,7Z%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.jeeplus.modules.kjgh.plan.util;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.github.junrar.Archive;</span><br><span class="line">import com.github.junrar.rarfile.FileHeader;</span><br><span class="line">import com.google.common.collect.Lists;</span><br><span class="line">import com.google.common.collect.Maps;</span><br><span class="line">import com.jeeplus.common.config.Global;</span><br><span class="line">import com.jeeplus.common.utils.StringUtils;</span><br><span class="line">import com.jeeplus.modules.kjgh.plan.Constant;</span><br><span class="line">import fr.opensagres.xdocreport.document.odt.images.ODTImageRegistry;</span><br><span class="line">import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;</span><br><span class="line">import org.apache.commons.compress.archivers.sevenz.SevenZFile;</span><br><span class="line">import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;</span><br><span class="line">import org.apache.commons.compress.archivers.zip.ZipFile;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.text.CollationKey;</span><br><span class="line">import java.text.Collator;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Locale;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.TreeMap;</span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 该Utils类仅包含压缩文件解压方法和对应json树方法。rar5解压和json树由Rar5UnUtil和DirectoryTreeUtil提供&lt;br&#x2F;&gt;</span><br><span class="line"> * 解压时，不管系统内有没有根目录都传建一个以文件名的根目录(由各压缩类型方法内定义)&lt;br&#x2F;&gt;</span><br><span class="line"> * 注:其他工具类方法 @see KjghUtil</span><br><span class="line"> *    该类可解压并生成json树的文件格式有: zip,rar4,rar5,7z</span><br><span class="line"> *    成果包下的所有浏览器可访问的静态文件，设置的uri都是静态访问 &#x2F;userfiles&#x2F;开头，docx不解析。</span><br><span class="line"> * @author cgq_r</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Utils &#123;</span><br><span class="line"></span><br><span class="line">    private Logger logger &#x3D; LoggerFactory.getLogger(Utils.class);</span><br><span class="line"></span><br><span class="line">    static Pattern pattern &#x3D; Pattern.compile(&quot;^\\d+&quot;);</span><br><span class="line"></span><br><span class="line">    private static final int BUFFER_SIZE &#x3D; 2048;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 先解压压缩包到目录，然后通过解压包读取包结构，生成树&lt;br&#x2F;&gt;</span><br><span class="line">     * 当前支持zip,rar4,rar5,7z</span><br><span class="line">     *</span><br><span class="line">     * @param removeOtherShp 独立质检需要删除矢量数据目录中非shp后缀的文件</span><br><span class="line">     * @param unPageFilePath 解压文件目录,不包含文件名一级</span><br><span class="line">     * @param planResultFile 解压包文件对象</span><br><span class="line">     * @return 相关数据结果, 包括:</span><br><span class="line">     * 1. jsonStr: 返回包结构json字符串&lt;br&#x2F;&gt;</span><br><span class="line">     * 2. planResultPath: 解压包文件路径&lt;br&#x2F;&gt;</span><br><span class="line">     * 3. planResultUNPath: 解压文件解压目录(非根)&lt;br&#x2F;&gt;</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Map&lt;String, String&gt; parseArchivePackage(boolean removeOtherShp,String unPageFilePath, File planResultFile) &#123;</span><br><span class="line">        removeOtherShp &#x3D; true;</span><br><span class="line">        if (planResultFile !&#x3D; null) &#123;</span><br><span class="line">            String fileName &#x3D; planResultFile.getName();</span><br><span class="line">            String subffix &#x3D; fileName.substring(fileName.lastIndexOf(&quot;.&quot;) + 1);</span><br><span class="line">            Map&lt;String, String&gt; resultMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">            &#x2F;&#x2F;解压包路径</span><br><span class="line">            String unpackageBase &#x3D; unPageFilePath + File.separator + planResultFile.getName().substring(0, planResultFile.getName().indexOf(&quot;.&quot;));</span><br><span class="line">            if (subffix.contains(&quot;zip&quot;) || subffix.contains(&quot;ZIP&quot;)) &#123;</span><br><span class="line">                String result &#x3D; &quot;&quot;;</span><br><span class="line">                String resultPath &#x3D; &quot;&quot;;</span><br><span class="line">                try &#123;</span><br><span class="line">                    String charset &#x3D; isOtherCodeWithZip(planResultFile);</span><br><span class="line">                    if (charset!&#x3D;null)&#123;</span><br><span class="line">                        resultPath &#x3D; parseArchiveZip(planResultFile, unPageFilePath, charset);</span><br><span class="line">                        result &#x3D; parseArchiveZipWith(&quot;&quot;,planResultFile, unpackageBase,charset,removeOtherShp);</span><br><span class="line">                        resultMap.put(&quot;charset&quot;,charset);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;catch (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    logger.error(planResultFile.getName() + &quot;解压失败,可能无法判定解压字符编码&quot;);</span><br><span class="line">                    logger.error(e.getMessage());</span><br><span class="line">                    resultMap.put(&quot;error&quot;,&quot;压缩包压缩文件编码出现问题,建议客户更换压缩工具。&quot;);</span><br><span class="line">                    return resultMap;</span><br><span class="line">                &#125;</span><br><span class="line">                resultMap.put(&quot;jsonStr&quot;, result);</span><br><span class="line">                resultMap.put(&quot;planResultPath&quot;, planResultFile.getAbsolutePath());</span><br><span class="line">                resultMap.put(&quot;planResultUNPath&quot;, resultPath);</span><br><span class="line">                return resultMap;</span><br><span class="line">            &#125; else if (subffix.contains(&quot;rar&quot;) || subffix.contains(&quot;RAR&quot;)) &#123;</span><br><span class="line">                String resultPath &#x3D; parseArchiveRAR(planResultFile, unPageFilePath);</span><br><span class="line">                if (StringUtils.isBlank(resultPath)) &#123;</span><br><span class="line">                    &#x2F;&#x2F; rar5 解压，生成json树</span><br><span class="line">                    boolean a &#x3D; Rar5UnUtil.rar(planResultFile.getAbsolutePath(),unpackageBase);</span><br><span class="line">                    if (!a)&#123;</span><br><span class="line">                        resultMap.put(&quot;error&quot;,&quot;RAR5格式文件解压异常,请更换ZIP或RAR4格式&quot;);</span><br><span class="line">                        return resultMap;</span><br><span class="line">                    &#125;</span><br><span class="line">                    unpackageBase &#x3D; KjghUtil.slash(unpackageBase);</span><br><span class="line">                    String result &#x3D; DirectoryTreeUtil.dir2json(null,unpackageBase,&quot;&quot;,removeOtherShp);</span><br><span class="line"></span><br><span class="line">                    resultMap.put(&quot;jsonStr&quot;, result);</span><br><span class="line">                    resultMap.put(&quot;planResultPath&quot;, planResultFile.getAbsolutePath());</span><br><span class="line">                    resultMap.put(&quot;planResultUNPath&quot;, unpackageBase);</span><br><span class="line">                    resultMap.put(&quot;rar5&quot;,&quot;上传完成,解压时间过长,不建议使用RAR5压缩方式&quot;);</span><br><span class="line">                    return resultMap;</span><br><span class="line">                &#125;</span><br><span class="line">                String result &#x3D; parseArchiveRAR(&quot;&quot;,planResultFile, unpackageBase,removeOtherShp);</span><br><span class="line"></span><br><span class="line">                resultMap.put(&quot;jsonStr&quot;, result);</span><br><span class="line">                resultMap.put(&quot;planResultPath&quot;, planResultFile.getAbsolutePath());</span><br><span class="line">                resultMap.put(&quot;planResultUNPath&quot;, resultPath);</span><br><span class="line">                return resultMap;</span><br><span class="line">            &#125; else if (subffix.contains(&quot;7z&quot;) || subffix.contains(&quot;7Z&quot;)) &#123;</span><br><span class="line">                String resultPath &#x3D; parseArchive7Z(planResultFile, unPageFilePath);</span><br><span class="line">                String result &#x3D; parseArchive7ZWith(&quot;&quot;,planResultFile, unpackageBase,removeOtherShp);</span><br><span class="line">                resultMap.put(&quot;jsonStr&quot;, result);</span><br><span class="line">                resultMap.put(&quot;planResultPath&quot;, planResultFile.getAbsolutePath());</span><br><span class="line">                resultMap.put(&quot;planResultUNPath&quot;, resultPath);</span><br><span class="line">                return resultMap;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 通过文件系统获取rar5文件列表</span><br><span class="line">     * @param root 上传解压目录根目录</span><br><span class="line">     * @param unPageFilePath 解压文件的目录,这个目录包含 根解压文件名</span><br><span class="line">     * @param rar5Files 存储对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Deprecated</span><br><span class="line">    private void getRar5File(String root,String unPageFilePath, List&lt;CustomRAR5File&gt; rar5Files) &#123;</span><br><span class="line">        unPageFilePath &#x3D; unPageFilePath.replace(&quot;\\&quot;,&quot;&#x2F;&quot;);</span><br><span class="line">        File file &#x3D; new File(unPageFilePath);</span><br><span class="line">        File[] list &#x3D; file.listFiles();</span><br><span class="line">        for (File item : list) &#123;</span><br><span class="line">            String fileName &#x3D; item.getAbsolutePath().replace(&quot;\\&quot;,&quot;&#x2F;&quot;).replace(root,&quot;&quot;);</span><br><span class="line">            if (item.isDirectory())&#123;</span><br><span class="line">                CustomRAR5File rar5File &#x3D; new CustomRAR5File();</span><br><span class="line">                rar5File.setName(fileName);</span><br><span class="line">                rar5File.setAbs(item.getAbsolutePath().replace(&quot;\\&quot;,&quot;&#x2F;&quot;));</span><br><span class="line">                rar5File.setDirectory(true);</span><br><span class="line">                rar5File.setParentName(item.getParent().replace(&quot;\\&quot;,&quot;&#x2F;&quot;).replace(root,&quot;&quot;));</span><br><span class="line">                rar5Files.add(rar5File);</span><br><span class="line">                getRar5File(root,item.getAbsolutePath(),rar5Files);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                CustomRAR5File rar5File &#x3D; new CustomRAR5File();</span><br><span class="line">                rar5File.setName(fileName);</span><br><span class="line">                rar5File.setAbs(item.getAbsolutePath().replace(&quot;\\&quot;,&quot;&#x2F;&quot;));</span><br><span class="line">                rar5File.setDirectory(false);</span><br><span class="line">                rar5File.setParentName(item.getParent().replace(&quot;\\&quot;,&quot;&#x2F;&quot;).replace(root,&quot;&quot;));</span><br><span class="line">                rar5Files.add(rar5File);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解析rar5树</span><br><span class="line">     * @param id 规划id</span><br><span class="line">     * @param planResultFile</span><br><span class="line">     * @param rar5Files</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Deprecated</span><br><span class="line">    private String parseArchiveRAR5(String id,File planResultFile, String unPageFilePath,List&lt;CustomRAR5File&gt; rar5Files) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String archiveFileName &#x3D; planResultFile.getName();</span><br><span class="line">            Map&lt;String, FileNode&gt; appender &#x3D; Maps.newHashMap();</span><br><span class="line">            for (CustomRAR5File rar5File : rar5Files) &#123;</span><br><span class="line">                String fullName &#x3D; rar5File.getName();</span><br><span class="line">                String originName &#x3D; getLastFileName(fullName, Constant.SEP);</span><br><span class="line">                int level &#x3D; fullName.split(Constant.SEP).length;</span><br><span class="line">                String childName &#x3D; level + &quot;_&quot; + originName;</span><br><span class="line">                boolean directory &#x3D; rar5File.isDirectory();</span><br><span class="line">                if (!directory) &#123;</span><br><span class="line">                    childName &#x3D; archiveFileName + &quot;_&quot; + originName;</span><br><span class="line">                    &#x2F;&#x2F;entriesToBeExtracted.add(Collections.singletonMap(childName, zipEntry));</span><br><span class="line">                &#125;</span><br><span class="line">                String parentName &#x3D; getLast2FileName(fullName, Constant.SEP, planResultFile.getName());</span><br><span class="line">                parentName &#x3D; (level - 1) + &quot;_&quot; + parentName;</span><br><span class="line">                String fileKey &#x3D; unPageFilePath.replace(Constant.USER_FILE_BASE_DIR, &quot;&quot;) + File.separator + rar5File.getName();</span><br><span class="line">                fileKey &#x3D; fileKey.replace(&quot;\\&quot;, &quot;&#x2F;&quot;).replace(&quot;&#x2F;&#x2F;&quot;, &quot;&#x2F;&quot;);</span><br><span class="line">                FileNode node &#x3D; new FileNode(id,originName, childName, parentName, new ArrayList&lt;&gt;(), directory, fileKey);</span><br><span class="line">                if (level&lt;&#x3D;2)&#123;</span><br><span class="line">                    node.setOpen(true);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    node.setOpen(false);</span><br><span class="line">                &#125;</span><br><span class="line">                addNodes(appender, parentName, node);</span><br><span class="line">                appender.put(childName, node);</span><br><span class="line">            &#125;</span><br><span class="line">            FileNode root &#x3D; appender.get(&quot;&quot;);</span><br><span class="line">            root.setLabel(root.getLabel().substring(root.getLabel().indexOf(&quot;_&quot;)+1));</span><br><span class="line">            return new ObjectMapper().writeValueAsString(appender.get(&quot;&quot;));</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解析7Z文件结构字符串</span><br><span class="line">     *</span><br><span class="line">     * @param id 规划id</span><br><span class="line">     * @param file           压缩包对象</span><br><span class="line">     * @param unPageFilePath 解压包路径</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String parseArchive7ZWith(String id,File file, String unPageFilePath,boolean removeOtherShp) &#123;</span><br><span class="line">        String archiveSeparator &#x3D; &quot;&#x2F;&quot;;</span><br><span class="line">        Map&lt;String, FileNode&gt; appender &#x3D; Maps.newHashMap();</span><br><span class="line">        SevenZFile zipFile &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            String archiveFileName &#x3D; file.getName();</span><br><span class="line">            zipFile &#x3D; new SevenZFile(file);</span><br><span class="line">            Iterable&lt;SevenZArchiveEntry&gt; entries &#x3D; zipFile.getEntries();</span><br><span class="line">            &#x2F;&#x2F; 排序</span><br><span class="line">            Enumeration&lt;SevenZArchiveEntry&gt; newEntries &#x3D; sortSevenZEntries(entries);</span><br><span class="line">            List&lt;Map&lt;String, SevenZArchiveEntry&gt;&gt; entriesToBeExtracted &#x3D; Lists.newArrayList();</span><br><span class="line">            while (newEntries.hasMoreElements()) &#123;</span><br><span class="line">                SevenZArchiveEntry entry &#x3D; newEntries.nextElement();</span><br><span class="line">                String fullName &#x3D; entry.getName();</span><br><span class="line">                int level &#x3D; fullName.split(archiveSeparator).length;</span><br><span class="line">                &#x2F;&#x2F; 展示名</span><br><span class="line">                String originName &#x3D; getLastFileName(fullName, archiveSeparator);</span><br><span class="line">                String childName &#x3D; level + &quot;_&quot; + originName;</span><br><span class="line">                boolean directory &#x3D; entry.isDirectory();</span><br><span class="line">                if (!directory) &#123;</span><br><span class="line">                    childName &#x3D; archiveFileName + &quot;_&quot; + originName;</span><br><span class="line">                    entriesToBeExtracted.add(Collections.singletonMap(childName, entry));</span><br><span class="line">                &#125;</span><br><span class="line">                String parentName &#x3D; getLast2FileName(fullName, archiveSeparator, archiveFileName);</span><br><span class="line">                parentName &#x3D; (level - 1) + &quot;_&quot; + parentName;</span><br><span class="line">                String uri &#x3D; unPageFilePath.substring(unPageFilePath.indexOf(Global.USERFILES_BASE_URL)) + File.separator + fullName;</span><br><span class="line">                uri &#x3D; KjghUtil.slash(uri);</span><br><span class="line">                FileNode node &#x3D; new FileNode(id,originName, childName, parentName, new ArrayList&lt;&gt;(), directory, uri);</span><br><span class="line">                if (level&lt;&#x3D;2)&#123;</span><br><span class="line">                    node.setOpen(true);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    node.setOpen(false);</span><br><span class="line">                &#125;</span><br><span class="line">                addNodes(appender, parentName, node);</span><br><span class="line">                appender.put(childName, node);</span><br><span class="line">            &#125;</span><br><span class="line">            if (removeOtherShp)&#123;</span><br><span class="line">                removeOtherShp(appender);</span><br><span class="line">            &#125;</span><br><span class="line">            return removeSurplusDir(appender);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                zipFile.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解压7Z压缩包</span><br><span class="line">     *</span><br><span class="line">     * @param zFile   解压包文件对象</span><br><span class="line">     * @param tarpath 解压目标目录</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String parseArchive7Z(File zFile, String tarpath) &#123;</span><br><span class="line">        &#x2F;&#x2F;参数的解压目录为直接unpackage根，需要创建为当前文件的解压包路径</span><br><span class="line">        String resultPath &#x3D; tarpath + File.separator + zFile.getName().substring(0, zFile.getName().indexOf(&quot;.&quot;));&#x2F;&#x2F;解压包路径</span><br><span class="line">        SevenZFile sevenZFile &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            sevenZFile &#x3D; new SevenZFile(zFile);</span><br><span class="line">            SevenZArchiveEntry entry &#x3D; sevenZFile.getNextEntry();</span><br><span class="line">            while (entry !&#x3D; null) &#123;</span><br><span class="line">                if (entry.isDirectory()) &#123;</span><br><span class="line"></span><br><span class="line">                    new File(resultPath + File.separator + entry.getName()).mkdirs();</span><br><span class="line">                    entry &#x3D; sevenZFile.getNextEntry();</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                String targetFileName &#x3D; resultPath + File.separator + entry.getName();</span><br><span class="line"></span><br><span class="line">                FileOutputStream out &#x3D; new FileOutputStream(targetFileName);</span><br><span class="line">                byte[] content &#x3D; new byte[(int) entry.getSize()];</span><br><span class="line">                sevenZFile.read(content, 0, content.length);</span><br><span class="line">                out.write(content);</span><br><span class="line">                out.close();</span><br><span class="line">                entry &#x3D; sevenZFile.getNextEntry();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (sevenZFile!&#x3D;null) &#123;</span><br><span class="line">                    sevenZFile.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return resultPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解压rar文件</span><br><span class="line">     *</span><br><span class="line">     * @param file          文件对象</span><br><span class="line">     * @param uploadFileDir 文件根目录</span><br><span class="line">     * @return 返回解压包路径</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String parseArchiveRAR(File file, String uploadFileDir) &#123;</span><br><span class="line">        Archive archive &#x3D; null;</span><br><span class="line">        String begin &#x3D; System.currentTimeMillis() + &quot;&quot;;</span><br><span class="line">        String resultPath &#x3D; uploadFileDir + File.separator + file.getName().substring(0, file.getName().indexOf(&quot;.&quot;));&#x2F;&#x2F;解压包路径</span><br><span class="line">        try &#123;</span><br><span class="line">            archive &#x3D; new Archive(new FileInputStream(file));</span><br><span class="line">            FileHeader fileHeader &#x3D; archive.nextFileHeader();</span><br><span class="line">            while (fileHeader !&#x3D; null) &#123;</span><br><span class="line">                if (fileHeader.isDirectory()) &#123;</span><br><span class="line">                    fileHeader &#x3D; archive.nextFileHeader();</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; 防止乱码,getFileNameString可能乱码</span><br><span class="line">                String fileName &#x3D; fileHeader.getFileNameW().isEmpty() ? fileHeader</span><br><span class="line">                        .getFileNameString() : fileHeader.getFileNameW();</span><br><span class="line">                File out &#x3D; new File(resultPath + File.separator + fileName);</span><br><span class="line">                if (!out.exists()) &#123;</span><br><span class="line">                    if (!out.getParentFile().exists()) &#123;</span><br><span class="line">                        out.getParentFile().mkdirs();</span><br><span class="line">                    &#125;</span><br><span class="line">                    out.createNewFile();</span><br><span class="line">                &#125;</span><br><span class="line">                FileOutputStream os &#x3D; new FileOutputStream(out);</span><br><span class="line">                archive.extractFile(fileHeader, os);</span><br><span class="line">                os.close();</span><br><span class="line">                fileHeader &#x3D; archive.nextFileHeader();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(&quot;不支持的RAR5格式解析，已使用RAR5方式，请忽略此消息&quot;);</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (archive!&#x3D;null) &#123;</span><br><span class="line">                    archive.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return resultPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解析RAR压缩包，返回jsonStr包结构</span><br><span class="line">     *</span><br><span class="line">     * @param id 规划id</span><br><span class="line">     * @param file 解压包文件对象</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String parseArchiveRAR(String id,File file, String unPageFilePath,boolean removeOtherShp) &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, FileNode&gt; appender &#x3D; Maps.newHashMap();</span><br><span class="line">        Archive archive &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            archive &#x3D; new Archive(new FileInputStream(file));</span><br><span class="line">            List&lt;FileHeader&gt; headers &#x3D; archive.getFileHeaders();</span><br><span class="line">            headers &#x3D; sortedHeaders(headers);</span><br><span class="line">            String archiveFileName &#x3D; file.getName();</span><br><span class="line">            List&lt;Map&lt;String, FileHeader&gt;&gt; headersToBeExtracted &#x3D; Lists.newArrayList();</span><br><span class="line">            for (FileHeader header : headers) &#123;</span><br><span class="line">                String fullName;</span><br><span class="line">                if (header.isUnicode()) &#123;</span><br><span class="line">                    fullName &#x3D; header.getFileNameW();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    fullName &#x3D; header.getFileNameString();</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; 展示名</span><br><span class="line">                String originName &#x3D; getLastFileName(fullName, &quot;\\&quot;);</span><br><span class="line">                int level &#x3D; fullName.split(Constant.SEP).length;</span><br><span class="line">                String childName &#x3D; originName;</span><br><span class="line">                boolean directory &#x3D; header.isDirectory();</span><br><span class="line">                if (!directory) &#123;</span><br><span class="line">                    childName &#x3D; archiveFileName + &quot;_&quot; + originName;</span><br><span class="line">                    headersToBeExtracted.add(Collections.singletonMap(childName, header));</span><br><span class="line">                &#125;</span><br><span class="line">                String parentName &#x3D; getLast2FileName(fullName, &quot;\\&quot;, archiveFileName);</span><br><span class="line">                String uri &#x3D; unPageFilePath.substring(unPageFilePath.indexOf(Global.USERFILES_BASE_URL)) + File.separator + fullName;</span><br><span class="line">                uri &#x3D; KjghUtil.slash(uri);</span><br><span class="line">                FileNode node &#x3D; new FileNode(id,originName, childName, parentName, new ArrayList&lt;&gt;(), directory, uri);</span><br><span class="line">                if (level&lt;&#x3D;2)&#123;</span><br><span class="line">                    node.setOpen(true);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    node.setOpen(false);</span><br><span class="line">                &#125;</span><br><span class="line">                addNodes(appender, parentName, node);</span><br><span class="line">                appender.put(childName, node);</span><br><span class="line">            &#125;</span><br><span class="line">            if (removeOtherShp)&#123;</span><br><span class="line">                removeOtherShp(appender);</span><br><span class="line">            &#125;</span><br><span class="line">            return removeSurplusDir(appender);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                archive.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解压ZIP文件包</span><br><span class="line">     * 说明:</span><br><span class="line">     *      1. 本方法自建一级目录(文件名目录)</span><br><span class="line">     * @param file          文件对象</span><br><span class="line">     * @param uploadFileDir 存储解压文件路径(根路径)</span><br><span class="line">     * @param charset 字符编码，默认应设置为UTF8,存在可能是其他压缩工具造成的GBK压缩导致的。</span><br><span class="line">     * @return 返回解压包路径</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String parseArchiveZip(File file, String uploadFileDir,String charset) throws Exception &#123;</span><br><span class="line">        String resultPath &#x3D; uploadFileDir + Constant.SEP + file.getName().substring(0, file.getName().indexOf(&quot;.&quot;));</span><br><span class="line">        ZipFile zipFile &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            zipFile &#x3D; new ZipFile(file,charset);</span><br><span class="line">            Enumeration&lt;ZipArchiveEntry&gt; enumeration &#x3D; zipFile.getEntries();</span><br><span class="line">            enumeration &#x3D; sortZipEntries(enumeration);</span><br><span class="line">            while (enumeration.hasMoreElements()) &#123;</span><br><span class="line">                ZipArchiveEntry zipEntry &#x3D; enumeration.nextElement();</span><br><span class="line"></span><br><span class="line">                if (zipEntry.isDirectory()) &#123;</span><br><span class="line">                    &#x2F;&#x2F;创建解压目录</span><br><span class="line">                    String dirPath &#x3D; resultPath + Constant.SEP + zipEntry.getName();</span><br><span class="line">                    File dir &#x3D; new File(dirPath);</span><br><span class="line">                    dir.mkdirs();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    File targetFile &#x3D; new File(resultPath + Constant.SEP + zipEntry.getName());</span><br><span class="line">                    &#x2F;&#x2F; 保证这个文件的父文件夹必须要存在</span><br><span class="line">                    if (!targetFile.getParentFile().exists()) &#123;</span><br><span class="line">                        targetFile.getParentFile().mkdirs();</span><br><span class="line">                    &#125;</span><br><span class="line">                    InputStream is &#x3D; null;</span><br><span class="line">                    FileOutputStream fos &#x3D; null;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        targetFile.createNewFile();</span><br><span class="line"></span><br><span class="line">                        is &#x3D; zipFile.getInputStream(zipEntry);</span><br><span class="line">                        fos &#x3D; new FileOutputStream(targetFile);</span><br><span class="line">                        int len;</span><br><span class="line">                        byte[] buf &#x3D; new byte[BUFFER_SIZE];</span><br><span class="line">                        while ((len &#x3D; is.read(buf)) !&#x3D; -1) &#123;</span><br><span class="line">                            fos.write(buf, 0, len);</span><br><span class="line">                            fos.flush();</span><br><span class="line">                        &#125;</span><br><span class="line">                        fos.close();</span><br><span class="line">                        is.close();</span><br><span class="line">                    &#125;catch (Exception e)&#123;</span><br><span class="line">                        logger.error(e.getMessage() + &quot; 解压文件异常,编码格式不符&quot;);</span><br><span class="line">                        logger.error(&quot;解压内部文件为&#123;&#125;&quot;,targetFile.getAbsolutePath());</span><br><span class="line">                        if (fos!&#x3D;null)&#123;</span><br><span class="line">                            fos.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (is!&#x3D;null)&#123;</span><br><span class="line">                            is.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (zipFile!&#x3D;null) &#123;</span><br><span class="line">                            zipFile.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                        throw new Exception(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage() + &quot; 解压文件异常,编码格式不符&quot;);</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            if (zipFile!&#x3D;null) &#123;</span><br><span class="line">                zipFile.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return resultPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 判断是否是GBK?乱码。0x3f表示?</span><br><span class="line">     * @param file zip文件</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String isOtherCodeWithZip(File file) &#123;</span><br><span class="line">        int count &#x3D; 0;</span><br><span class="line">        ZipFile zipFile &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            zipFile &#x3D; new ZipFile(file, &quot;UTF8&quot;);</span><br><span class="line">            Enumeration&lt;ZipArchiveEntry&gt; enumeration &#x3D; zipFile.getEntries();</span><br><span class="line">            while (enumeration.hasMoreElements())&#123;</span><br><span class="line">                count+&#x3D;1;</span><br><span class="line">                if (count&gt;&#x3D;3)&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (count&lt;3)&#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            count &#x3D; 0;</span><br><span class="line">            if (enumeration.hasMoreElements())&#123;</span><br><span class="line">                ZipArchiveEntry zipArchiveEntry &#x3D; enumeration.nextElement();</span><br><span class="line"></span><br><span class="line">                    String name &#x3D; zipArchiveEntry.getName() + enumeration.nextElement().getName();</span><br><span class="line">                    char[] chars &#x3D; name.toCharArray();</span><br><span class="line">                    for (char c : chars) &#123;</span><br><span class="line">                        if ((int) c &#x3D;&#x3D; 0x3f) &#123;</span><br><span class="line">                            count +&#x3D; 1;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (count &gt; 1) &#123;</span><br><span class="line">                            return &quot;GBK&quot;;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return &quot;UTF8&quot;;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            if(zipFile!&#x3D;null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    zipFile.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解析zip为json格式数据</span><br><span class="line">     *</span><br><span class="line">     * @param id 规划成果id</span><br><span class="line">     * @param file           zip文件</span><br><span class="line">     * @param unPageFilePath 解压包解压路径</span><br><span class="line">     * @param charset 字符编码，默认应设置为UTF8,存在可能是其他压缩工具造成的GBK压缩导致的。</span><br><span class="line">     * @param removeOtherShp</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String parseArchiveZipWith(String id,File file, String unPageFilePath,String charset,boolean removeOtherShp) &#123;</span><br><span class="line">        String archiveFileName &#x3D; file.getName();</span><br><span class="line">        Map&lt;String, FileNode&gt; appender &#x3D; Maps.newHashMap();</span><br><span class="line">        String archiveSeparator &#x3D; &quot;&#x2F;&quot;;</span><br><span class="line">        ZipFile zipFile &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            zipFile &#x3D; new ZipFile(file, charset);</span><br><span class="line">            Enumeration&lt;ZipArchiveEntry&gt; enumeration &#x3D; zipFile.getEntries();</span><br><span class="line">            enumeration &#x3D; sortZipEntries(enumeration);</span><br><span class="line">            List&lt;Map&lt;String, ZipArchiveEntry&gt;&gt; entriesToBeExtracted &#x3D; Lists.newArrayList();</span><br><span class="line">            while (enumeration.hasMoreElements()) &#123;</span><br><span class="line">                ZipArchiveEntry zipEntry &#x3D; enumeration.nextElement();</span><br><span class="line">                String fullName &#x3D; zipEntry.getName();</span><br><span class="line">                String originName &#x3D; getLastFileName(fullName, archiveSeparator);</span><br><span class="line">                int level &#x3D; fullName.split(archiveSeparator).length;</span><br><span class="line">                String childName &#x3D; level + &quot;_&quot; + originName;</span><br><span class="line">                boolean directory &#x3D; zipEntry.isDirectory();</span><br><span class="line">                if (!directory) &#123;</span><br><span class="line">                    childName &#x3D; archiveFileName + &quot;_&quot; + originName;</span><br><span class="line">                    entriesToBeExtracted.add(Collections.singletonMap(childName, zipEntry));</span><br><span class="line">                &#125;</span><br><span class="line">                String parentName &#x3D; getLast2FileName(fullName, archiveSeparator, file.getName());</span><br><span class="line">                parentName &#x3D; (level - 1) + &quot;_&quot; + parentName;</span><br><span class="line"></span><br><span class="line">                String uri &#x3D; unPageFilePath.substring(unPageFilePath.indexOf(Global.USERFILES_BASE_URL)) + File.separator + zipEntry.getName();</span><br><span class="line">                uri &#x3D; KjghUtil.slash(uri);</span><br><span class="line">                FileNode node &#x3D; new FileNode(id,originName, childName, parentName, new ArrayList&lt;&gt;(), directory, uri);</span><br><span class="line">                if (level&lt;&#x3D;2)&#123;</span><br><span class="line">                    node.setOpen(true);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    node.setOpen(false);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                addNodes(appender, parentName, node);</span><br><span class="line">                appender.put(childName, node);</span><br><span class="line">            &#125;</span><br><span class="line">            if (removeOtherShp) &#123;</span><br><span class="line">                removeOtherShp(appender);</span><br><span class="line">            &#125;</span><br><span class="line">            return removeSurplusDir(appender);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                zipFile.close();</span><br><span class="line">            &#125; catch (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除除shp文件外的其他文件</span><br><span class="line">     * @param appender</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void removeOtherShp(Map&lt;String, FileNode&gt; appender) &#123;</span><br><span class="line">        String parentName &#x3D; &quot;&quot;;</span><br><span class="line">        for (String key : appender.keySet()) &#123;</span><br><span class="line">            if (key.contains(&quot;.shp&quot;))&#123;</span><br><span class="line">                parentName &#x3D; appender.get(key).getParentName();</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!&quot;&quot;.equals(parentName)) &#123;</span><br><span class="line">            Iterator&lt;FileNode&gt; iterator &#x3D; appender.get(parentName).getChildren().iterator();</span><br><span class="line">            while (iterator.hasNext()) &#123;</span><br><span class="line">                FileNode next &#x3D; iterator.next();</span><br><span class="line">                if (!next.getLabel().contains(&quot;.shp&quot;) || next.getLabel().contains(&quot;.shp.xml&quot;)) &#123;</span><br><span class="line">                    iterator.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除多余的一级目录&lt;br&#x2F;&gt;</span><br><span class="line">     * 因为文件解压时都要包裹一层自身文件名的目录，但是显示时会多一层。</span><br><span class="line">     * @param appender</span><br><span class="line">     * @return json文件</span><br><span class="line">     * @throws JsonProcessingException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String removeSurplusDir(Map&lt;String, FileNode&gt; appender) throws JsonProcessingException &#123;</span><br><span class="line">        List&lt;FileNode&gt; fileNodes &#x3D; appender.get(&quot;&quot;).getChildren();</span><br><span class="line">        if (fileNodes!&#x3D;null &amp;&amp; fileNodes.size()&#x3D;&#x3D;1)&#123;</span><br><span class="line">            return new ObjectMapper().writeValueAsString(appender.get(&quot;&quot;).getChildren().get(0));</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            return new ObjectMapper().writeValueAsString(appender.get(&quot;&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 检查文件是否是office文件，如果是，依据实现类进行转换</span><br><span class="line">     *</span><br><span class="line">     * @param startFileName 文件名称</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static void checkOfficeChangePdf(String startFileName) &#123;</span><br><span class="line">        if (startFileName.contains(&quot;.docx&quot;)) &#123;&#x2F;&#x2F;判断是否是docx文件,如果是则进行转换</span><br><span class="line">            new OfficeConverterUtils().WordToPDF(startFileName, startFileName.replace(&quot;.docx&quot;, &quot;.pdf&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;* &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;解压缩工具操作方法&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 排序zipEntries(对原来列表倒序)</span><br><span class="line">     *</span><br><span class="line">     * @param entries</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static Enumeration&lt;ZipArchiveEntry&gt; sortZipEntries(Enumeration&lt;ZipArchiveEntry&gt; entries) &#123;</span><br><span class="line">        List&lt;ZipArchiveEntry&gt; sortedEntries &#x3D; Lists.newArrayList();</span><br><span class="line">        while (entries.hasMoreElements()) &#123;</span><br><span class="line">            sortedEntries.add(entries.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(sortedEntries, Comparator.comparingInt(o -&gt; o.getName().length()));</span><br><span class="line">        return Collections.enumeration(sortedEntries);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取FileNode对象的有参构造实例</span><br><span class="line">     * @param id 对应一条实体数据</span><br><span class="line">     * @param label 标签名</span><br><span class="line">     * @param fileName 文件名</span><br><span class="line">     * @param parenName 父目录名</span><br><span class="line">     * @param directory 是否目录</span><br><span class="line">     * @param uri 实际路径</span><br><span class="line">     * @param children 子节点</span><br><span class="line">     * @return 对象实例</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public FileNode getFileNodeInstance(String id, String label, String fileName, String parenName,boolean directory,String uri,List&lt;FileNode&gt; children)&#123;</span><br><span class="line">        return new FileNode(id,label,fileName,parenName,children,directory,uri);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class FileNode &#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 标识对应一条实体数据，每个节点的值都是一样的</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private String id;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 文件名</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private String label;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 结构层次的文件名</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private String fileName;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 是否是目录</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private boolean directory;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 父文件名</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private String parentName;</span><br><span class="line">        private boolean open&#x3D;true;&#x2F;&#x2F;默认展示级别</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 作为静态路径文件的访问,同时为唯一节点</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private String uri;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        private List&lt;FileNode&gt; children;</span><br><span class="line"></span><br><span class="line">        public FileNode() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public FileNode(String label, String fileName, String parentName, List&lt;FileNode&gt; children, boolean directory) &#123;</span><br><span class="line">            this.label &#x3D; label;</span><br><span class="line">            this.fileName &#x3D; fileName;</span><br><span class="line">            this.parentName &#x3D; parentName;</span><br><span class="line">            this.children &#x3D; children;</span><br><span class="line">            this.directory &#x3D; directory;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public FileNode(String id,String label, String fileName, String parentName, List&lt;FileNode&gt; children, boolean directory, String uri) &#123;</span><br><span class="line">            this.id &#x3D; id;</span><br><span class="line">            this.label &#x3D; label;</span><br><span class="line">            this.fileName &#x3D; fileName;</span><br><span class="line">            this.parentName &#x3D; parentName;</span><br><span class="line">            this.children &#x3D; children;</span><br><span class="line">            this.directory &#x3D; directory;</span><br><span class="line">            this.uri &#x3D; uri;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getId() &#123;</span><br><span class="line">            return id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setId(String id) &#123;</span><br><span class="line">            this.id &#x3D; id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public String getParentName() &#123;</span><br><span class="line">            return parentName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setParentName(String parentName) &#123;</span><br><span class="line">            this.parentName &#x3D; parentName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public String getFileName() &#123;</span><br><span class="line">            return fileName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setFileName(String fileName) &#123;</span><br><span class="line">            this.fileName &#x3D; fileName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getLabel() &#123;</span><br><span class="line">            return label;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setLabel(String label) &#123;</span><br><span class="line">            this.label &#x3D; label;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public boolean isOpen() &#123;</span><br><span class="line">            return open;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setOpen(boolean open) &#123;</span><br><span class="line">            this.open &#x3D; open;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getUri() &#123;</span><br><span class="line">            return uri;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setUri(String uri) &#123;</span><br><span class="line">            this.uri &#x3D; uri;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                return new ObjectMapper().writeValueAsString(this);</span><br><span class="line">            &#125; catch (JsonProcessingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                return &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;FileNode&gt; getChildren() &#123;</span><br><span class="line">            return children;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setChildren(List&lt;FileNode&gt; children) &#123;</span><br><span class="line">            this.children &#x3D; children;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public boolean isDirectory() &#123;</span><br><span class="line">            return directory;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setDirectory(boolean directory) &#123;</span><br><span class="line">            this.directory &#x3D; directory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取最后一个文件(夹)的名字</span><br><span class="line">     *</span><br><span class="line">     * @param fullName</span><br><span class="line">     * @param seperator 压缩文件解压后，不同的压缩格式分隔符不一样zip是&#x2F;，而rar是\</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static String getLastFileName(String fullName, String seperator) &#123;</span><br><span class="line">        if (fullName.endsWith(seperator)) &#123;</span><br><span class="line">            fullName &#x3D; fullName.substring(0, fullName.length() - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        String newName &#x3D; fullName;</span><br><span class="line">        if (null !&#x3D; fullName &amp;&amp; fullName.contains(seperator)) &#123;</span><br><span class="line">            newName &#x3D; fullName.substring(fullName.lastIndexOf(seperator) + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        return newName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取倒数第二个文件(夹)名</span><br><span class="line">     *</span><br><span class="line">     * @param fullName</span><br><span class="line">     * @param seperator 压缩文件解压后，不同的压缩格式分隔符不一样zip是&#x2F;，而rar是\</span><br><span class="line">     * @param rootName  根目录名:如果倒数第二个路径为空，那么赋值为rootName</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static String getLast2FileName(String fullName, String seperator, String rootName) &#123;</span><br><span class="line">        if (fullName.endsWith(seperator)) &#123;</span><br><span class="line">            fullName &#x3D; fullName.substring(0, fullName.length() - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 1.获取剩余部分</span><br><span class="line">        int endIndex &#x3D; fullName.lastIndexOf(seperator);</span><br><span class="line">        String leftPath &#x3D; fullName.substring(0, endIndex &#x3D;&#x3D; -1 ? 0 : endIndex);</span><br><span class="line">        if (null !&#x3D; leftPath &amp;&amp; leftPath.length() &gt; 1) &#123;</span><br><span class="line">            &#x2F;&#x2F; 2.获取倒数第二个</span><br><span class="line">            return getLastFileName(leftPath, seperator);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return rootName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void addNodes(Map&lt;String, FileNode&gt; appender, String parentName, FileNode node) &#123;</span><br><span class="line">        if (appender.containsKey(parentName)) &#123;</span><br><span class="line">            appender.get(parentName).getChildren().add(node);</span><br><span class="line">            Collections.sort(appender.get(parentName).getChildren(), sortComparator);</span><br><span class="line">&#x2F;&#x2F;            appender.get(parentName).getChildList().sort((final FileNode h1, final FileNode h2) -&gt; h1.getOriginName().compareTo(h2.getOriginName()));&#x2F;&#x2F;排序</span><br><span class="line">        &#125; else &#123; &#x2F;&#x2F; 根节点</span><br><span class="line">            String label &#x3D; parentName.substring(2,parentName.lastIndexOf(&quot;.&quot;));</span><br><span class="line">            FileNode nodeRoot &#x3D; new FileNode(label, parentName, &quot;&quot;, new ArrayList&lt;&gt;(), true);</span><br><span class="line">            nodeRoot.getChildren().add(node);</span><br><span class="line">            appender.put(&quot;&quot;, nodeRoot);</span><br><span class="line">            appender.put(parentName, nodeRoot);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Comparator&lt;FileNode&gt; sortComparator &#x3D; new Comparator&lt;FileNode&gt;() &#123;</span><br><span class="line">        Collator cmp &#x3D; Collator.getInstance(Locale.US);</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int compare(FileNode o1, FileNode o2) &#123;</span><br><span class="line">            &#x2F;&#x2F; 判断两个对比对象是否是开头包含数字，如果包含数字则获取数字并按数字真正大小进行排序</span><br><span class="line">            BigDecimal num1, num2;</span><br><span class="line">            if (null !&#x3D; (num1 &#x3D; isStartNumber(o1))</span><br><span class="line">                    &amp;&amp; null !&#x3D; (num2 &#x3D; isStartNumber(o2))) &#123;</span><br><span class="line">                return num1.subtract(num2).intValue();</span><br><span class="line">            &#125;</span><br><span class="line">            CollationKey c1 &#x3D; cmp.getCollationKey(o1.getLabel());</span><br><span class="line">            CollationKey c2 &#x3D; cmp.getCollationKey(o2.getLabel());</span><br><span class="line">            return cmp.compare(c1.getSourceString(), c2.getSourceString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    private static BigDecimal isStartNumber(FileNode src) &#123;</span><br><span class="line">        Matcher matcher &#x3D; pattern.matcher(src.getLabel());</span><br><span class="line">        if (matcher.find()) &#123;</span><br><span class="line">            return new BigDecimal(matcher.group());</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static List&lt;FileHeader&gt; sortedHeaders(List&lt;FileHeader&gt; headers) &#123;</span><br><span class="line">        List&lt;FileHeader&gt; sortedHeaders &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        Map&lt;Integer, FileHeader&gt; mapHeaders &#x3D; new TreeMap&lt;&gt;();</span><br><span class="line">        headers.forEach(header -&gt; mapHeaders.put(new Integer(0).equals(header.getFileNameW().length()) ? header.getFileNameString().length() : header.getFileNameW().length(), header));</span><br><span class="line">        for (Map.Entry&lt;Integer, FileHeader&gt; entry : mapHeaders.entrySet()) &#123;</span><br><span class="line">            for (FileHeader header : headers) &#123;</span><br><span class="line">                if (entry.getKey().equals(new Integer(0).equals(header.getFileNameW().length()) ? header.getFileNameString().length() : header.getFileNameW().length())) &#123;</span><br><span class="line">                    sortedHeaders.add(header);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sortedHeaders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 排序7ZEntries(对原来列表倒序)</span><br><span class="line">     *</span><br><span class="line">     * @param entries</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Enumeration&lt;SevenZArchiveEntry&gt; sortSevenZEntries(Iterable&lt;SevenZArchiveEntry&gt; entries) &#123;</span><br><span class="line">        List&lt;SevenZArchiveEntry&gt; sortedEntries &#x3D; Lists.newArrayList();</span><br><span class="line">        Iterator&lt;SevenZArchiveEntry&gt; iterator &#x3D; entries.iterator();</span><br><span class="line">        while (iterator.hasNext()) &#123;</span><br><span class="line">            sortedEntries.add(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">&#x2F;&#x2F;        Collections.sort(sortedEntries, Comparator.comparingInt(o -&gt; o.getName().length()));</span><br><span class="line">        return Collections.enumeration(sortedEntries);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;* &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;解压缩工具操作方法&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.jeeplus.modules.kjgh.plan.util;</span><br><span class="line"></span><br><span class="line">import com.jeeplus.core.web.Servlets;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.UnsupportedEncodingException;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* RAR5解压工具</span><br><span class="line">* @author cgq_r</span><br><span class="line">* @date 2020&#x2F;4&#x2F;18</span><br><span class="line">*&#x2F;</span><br><span class="line">public class Rar5UnUtil &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] s) &#123;</span><br><span class="line"></span><br><span class="line">        String rarFile &#x3D; &quot;C:\\Users\\cgq_r\\Desktop\\GTKJGH-ETL2019120401.rar&quot;;</span><br><span class="line">        String outDir &#x3D; &quot;C:\\Users\\cgq_r\\Desktop\\GTKJGH-ETL2019120401&quot;;</span><br><span class="line">        boolean b &#x3D; false;</span><br><span class="line"></span><br><span class="line">        b &#x3D; Rar5UnUtil.rar(rarFile, outDir);</span><br><span class="line"></span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解压时，如果有根目录则不会添加根目录，否则将自身文件名作为根目录</span><br><span class="line">     * @param rarFile</span><br><span class="line">     * @param outDir</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static boolean rar(String rarFile, String outDir) &#123;</span><br><span class="line"></span><br><span class="line">        String exe &#x3D; &quot;&quot;;</span><br><span class="line">        String appPath &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        boolean rv &#x3D; false;</span><br><span class="line"></span><br><span class="line">        appPath &#x3D; Servlets.getRequest().getServletContext().getRealPath(&quot;&#x2F;WEB-INF&#x2F;classes&#x2F;freemarker&#x2F;rar5&#x2F;&quot;);</span><br><span class="line"></span><br><span class="line">        String osarch &#x3D; getExeOSARCH();</span><br><span class="line">        exe &#x3D; appPath + &quot;arc_&quot; + osarch;</span><br><span class="line"></span><br><span class="line">        if (osarch.contains(&quot;darwin&quot;) || osarch.contains(&quot;linux&quot;)) &#123;</span><br><span class="line">            setExe(exe);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] cmd &#x3D; new String[4];</span><br><span class="line">        cmd[0] &#x3D; exe;</span><br><span class="line">        cmd[1] &#x3D; &quot;unarchive&quot;;</span><br><span class="line">        cmd[2] &#x3D; rarFile;</span><br><span class="line">        cmd[3] &#x3D; outDir;</span><br><span class="line">        rv &#x3D; exec(cmd, null);</span><br><span class="line"></span><br><span class="line">        return rv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static boolean setExe(String filename) &#123;</span><br><span class="line"></span><br><span class="line">        boolean rv &#x3D; false;</span><br><span class="line"></span><br><span class="line">        String[] cmd &#x3D; new String[3];</span><br><span class="line">        cmd[0] &#x3D; &quot;chmod&quot;;</span><br><span class="line">        cmd[1] &#x3D; &quot;+x&quot;;</span><br><span class="line">        cmd[2] &#x3D; filename;</span><br><span class="line">        rv &#x3D; exec(cmd, null);</span><br><span class="line"></span><br><span class="line">        return rv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取部署的平台</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static String getExeOSARCH() &#123;</span><br><span class="line"></span><br><span class="line">        String s &#x3D; &quot;darwin_amd64&quot;;</span><br><span class="line"></span><br><span class="line">        Properties props &#x3D; System.getProperties(); &#x2F;&#x2F; 获得系统属性集</span><br><span class="line">        String osName &#x3D; props.getProperty(&quot;os.name&quot;); &#x2F;&#x2F; 操作系统名称</span><br><span class="line">        String osArch &#x3D; props.getProperty(&quot;os.arch&quot;); &#x2F;&#x2F; 操作系统构架</span><br><span class="line"></span><br><span class="line">        osName &#x3D; osName.toUpperCase();</span><br><span class="line">        osArch &#x3D; osArch.toUpperCase();</span><br><span class="line"></span><br><span class="line">        String endflag &#x3D; &quot;&quot;;</span><br><span class="line">        if (osName.contains(&quot;MAC&quot;)) &#123;</span><br><span class="line">            osName &#x3D; &quot;darwin&quot;;</span><br><span class="line">        &#125; else if (osName.contains(&quot;WIN&quot;)) &#123;</span><br><span class="line">            osName &#x3D; &quot;windows&quot;;</span><br><span class="line">            endflag &#x3D; &quot;.exe&quot;;</span><br><span class="line">        &#125; else if (osName.contains(&quot;LINUX&quot;)) &#123;</span><br><span class="line">            osName &#x3D; &quot;linux&quot;;</span><br><span class="line">        &#125; else if (osName.contains(&quot;FREEBSD&quot;)) &#123;</span><br><span class="line">            osName &#x3D; &quot;freebsd&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (osArch.contains(&quot;64&quot;)) &#123;</span><br><span class="line">            osArch &#x3D; &quot;amd64&quot;;</span><br><span class="line">        &#125; else if (osArch.contains(&quot;386&quot;)) &#123;</span><br><span class="line">            osArch &#x3D; &quot;386&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s &#x3D; osName + &quot;_&quot; + osArch + endflag;</span><br><span class="line"></span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 默认编码转为UTF-8</span><br><span class="line">     *</span><br><span class="line">     * @param src</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static String default2utf_8(String src) &#123;</span><br><span class="line"></span><br><span class="line">        byte[] sorData &#x3D; null;</span><br><span class="line"></span><br><span class="line">        sorData &#x3D; src.getBytes();</span><br><span class="line"></span><br><span class="line">        String str &#x3D; &quot;&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            str &#x3D; new String(sorData, &quot;UTF-8&quot;);</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 执行命令</span><br><span class="line">     *</span><br><span class="line">     * @param cmdargs  命令数组</span><br><span class="line">     * @param listjson 数据</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static boolean exec(String[] cmdargs, String listjson) &#123;</span><br><span class="line"></span><br><span class="line">        boolean b &#x3D; false;</span><br><span class="line">        StringBuffer sb &#x3D; new StringBuffer();</span><br><span class="line"></span><br><span class="line">        StringBuffer sberr &#x3D; new StringBuffer();</span><br><span class="line">        Process pro &#x3D; null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            pro &#x3D; Runtime.getRuntime().exec(cmdargs);</span><br><span class="line">            pro.waitFor();</span><br><span class="line">            return true;</span><br><span class="line">        &#125; catch (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return false;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (pro !&#x3D; null) &#123;</span><br><span class="line">                pro.destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端分离后台Gateway使用https</title>
    <url>/2020/08/17/SpringCloud/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%90%8E%E5%8F%B0Gateway%E4%BD%BF%E7%94%A8https/</url>
    <content><![CDATA[<h2 id="SpringCloud-GateWay实现Https协议访问"><a href="#SpringCloud-GateWay实现Https协议访问" class="headerlink" title="SpringCloud GateWay实现Https协议访问"></a>SpringCloud GateWay实现Https协议访问</h2><p>与SpringBoot的tomcat所依赖的web项目配置一样。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">ssl:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">key-store:</span> <span class="string">classpath:3636833_www.chenguangqi.com.pfx</span></span><br><span class="line">        <span class="attr">key-store-password:</span> <span class="string">7FOwAhG2</span></span><br><span class="line">        <span class="attr">key-store-type:</span> <span class="string">PKCS12</span></span><br></pre></td></tr></table></figure>

<p>将<code>3636833_www.chenguangqi.com.pfx</code>文件放在resources下</p>
<p>配置HttpsConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.HttpHandler;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HttpHandler httpHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startRedirectServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NettyReactiveWebServerFactory factory = <span class="keyword">new</span> NettyReactiveWebServerFactory(<span class="number">82</span>);</span><br><span class="line">        factory.getWebServer(</span><br><span class="line">                (request, response) -&gt; &#123;</span><br><span class="line">                    URI uri = request.getURI();</span><br><span class="line">                    URI httpsUri;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isNeedRedirect(uri.getPath())) &#123;</span><br><span class="line">                            httpsUri = <span class="keyword">new</span> URI(<span class="string">&quot;https&quot;</span>,</span><br><span class="line">                                    uri.getUserInfo(),</span><br><span class="line">                                    uri.getHost(),</span><br><span class="line">                                    <span class="number">443</span>,</span><br><span class="line">                                    uri.getPath(),</span><br><span class="line">                                    uri.getQuery(),</span><br><span class="line">                                    uri.getFragment());</span><br><span class="line">                            response.setStatusCode(HttpStatus.MOVED_PERMANENTLY);</span><br><span class="line">                            response.getHeaders().setLocation(httpsUri);</span><br><span class="line">                            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> httpHandler.handle(request, response);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Mono.error(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        ).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNeedRedirect</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !path.startsWith(<span class="string">&quot;/actuator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>一般情况下这一样就好了。否则你就要检查一下配置的域名是否指定到你的项目了。另外端口也必须是443。默认情况下路由转发是会将https转发的各服务的，所以不需要其他配置。如果不行的话可以参考<a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.4.RELEASE/reference/html/#tls-and-ssl">SpringCloud官网</a>的配置。</p>
<p>一开始测试也是不行，后来第二个星期又重新测了一下。发现可以了。如果没有使用443端口，使用https访问的话，会报错io.netty的问题not SSL xxxx。</p>
<p><strong>测试环境:</strong></p>
<p>可以使用natapp内网映射，但是需要花10块一个月。前提是你有一个已经备案过的域名。如果选阿里主机的购买配置则需要在阿里备过案，买香港的配置的话，随便一个申请ssl证书的就可以了。</p>
<p>买nataap的时候要看是否支持https再买。配置的时候勾选https，会自动转发到本地的443端口，配置的web端口是http的端口。</p>
<p><strong>前后端分离后台是否需要https访问问题</strong></p>
<p>按思否上某文章的评论说从nginx的前端代理服务器到后端服务器不需要https，担心安全的话可以使用全段到后端走内网的方式，或者只对个别ip开启部分端口访问。</p>
<h2 id="Nginx配置https"><a href="#Nginx配置https" class="headerlink" title="Nginx配置https"></a>Nginx配置https</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># HTTPS server</span><br><span class="line">#</span><br><span class="line"># 以下属性中以ssl开头的属性代表与证书配置有关，其他属性请根据自己的需要进行配置。</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;   #SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。</span><br><span class="line">    server_name chenguangqi.com;  #将localhost修改为您证书绑定的域名，例如：www.example.com。</span><br><span class="line">    root D:&#x2F;softwase&#x2F;vue-check;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    ssl_certificate cert&#x2F;3636833_www.chenguangqi.com.pem;   #将domain name.pem替换成您证书的文件名。</span><br><span class="line">    ssl_certificate_key cert&#x2F;3636833_www.chenguangqi.com.key;   #将domain name.key替换成您证书的密钥文件名。</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  #使用此加密套件。</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   #使用该协议进行配置。</span><br><span class="line">    ssl_prefer_server_ciphers on;   </span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">        root D:&#x2F;softwase&#x2F;vue-check;   #站点目录。</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name chenguangqi.com;   #将localhost修改为您证书绑定的域名，例如：www.example.com。</span><br><span class="line">    rewrite ^(.*)$ https:&#x2F;&#x2F;$host$1 permanent;   #将所有http请求通过rewrite重定向到https。</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">    	index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上参考阿里SSL证书配置。</p>
<p>ssl_certificate和ssl_certificate_key直接将证书放在指定位置即可</p>
<p><code>location / &#123;&#125;</code>中添加try_files，使用vue history的方式</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>SSL</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>window下apache的安装配置操作</title>
    <url>/2020/08/14/Javascript/window%E4%B8%8Bapache%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>去提供window支持的官网下载apache包<a href="https://www.apachehaus.com/cgi-bin/download.plx">Apache Haus网站</a>     <a href="https://www.apachehaus.com/cgi-bin/download.plx?dli=XRlWWd1UNVjT6p0KWNjTwBlVOpkVFVFdOhkWDJVQ">64位下载地址</a></p>
<p>解压后，进入conf修改httpd.conf，修改这几处</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Listen 80 &#x2F;&#x2F;端口修改</span><br><span class="line">ServerName localhost:8080 &#x2F;&#x2F;ip:端口修改</span><br><span class="line">Define SRVROOT &quot;window apache安装目录&quot; &#x2F;&#x2F;到Apache24即可</span><br><span class="line">LoadModule rewrite_module modules&#x2F;mod_rewrite.so &#x2F;&#x2F;vue hisotry路径重写需要打开</span><br></pre></td></tr></table></figure>

<p>安装Apache24到window services中</p>
<p>cmd管理员，到bin目录下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">httpd.exe -k install -n &quot;Apache24&quot;</span><br></pre></td></tr></table></figure>

<p>如果提示 <strong>无法启动此程序因为计算机中丢失vcruntime140</strong>。则需要下载安装<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=48145">VC2015</a></p>
<p>如果提示什么套接字，可能不是安装失败问题。可以先看一下services安装上没，如果有了那就是安装上了，因为端口占用的原因出的这个错。如果没安装上，根据报错信息找一下httpd.conf是不是有属性配置错了。</p>
<h2 id="Vue部署时history模式部署-单页面路径404"><a href="#Vue部署时history模式部署-单页面路径404" class="headerlink" title="Vue部署时history模式部署,单页面路径404"></a>Vue部署时history模式部署,单页面路径404</h2><p>以前端项目作为htdocs根应用。</p>
<p>单页面，只有一个根路径，任何路径都会跳到/，这个许多history问题的博客都有解释。</p>
<h4 id="1-修改httpd-conf，将-lt-Directory-“-SRVROOT-htdocs”-gt-下的AllowOverride-None修改为AllowOverride-All-大约在278行左右"><a href="#1-修改httpd-conf，将-lt-Directory-“-SRVROOT-htdocs”-gt-下的AllowOverride-None修改为AllowOverride-All-大约在278行左右" class="headerlink" title="1. 修改httpd.conf，将&lt;Directory “${SRVROOT}/htdocs”&gt;下的AllowOverride None修改为AllowOverride All,大约在278行左右"></a>1. 修改httpd.conf，将&lt;Directory “${SRVROOT}/htdocs”&gt;下的<code>AllowOverride None</code>修改为<code>AllowOverride All</code>,大约在278行左右</h4><h4 id="2-在htdocs根路径下，添加-htaccess文件"><a href="#2-在htdocs根路径下，添加-htaccess文件" class="headerlink" title="2.在htdocs根路径下，添加.htaccess文件"></a>2.在htdocs根路径下，添加<code>.htaccess</code>文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  RewriteEngine On</span><br><span class="line">  RewriteRule ^index\.html$ - [L]</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteRule . &#x2F;index.html [L]</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure>

<p>并在httpd.conf中开启<code>LoadModule rewrite_module modules/mod_rewrite.so</code>模块</p>
<p> 前端项目的router不设置base属性，则默认是/，即部署容器的根路径。</p>
<h4 id="3-如果重写完成后刷新页面出现空白，看console出现-static-js下的三个js文件解析失败的，可以看到，没有找到这三个文件，导致重写到index-html。因此js文件变成了首页的index-html内容，所以会出现-lt-解析失败的报错。"><a href="#3-如果重写完成后刷新页面出现空白，看console出现-static-js下的三个js文件解析失败的，可以看到，没有找到这三个文件，导致重写到index-html。因此js文件变成了首页的index-html内容，所以会出现-lt-解析失败的报错。" class="headerlink" title="3. 如果重写完成后刷新页面出现空白，看console出现,static/js下的三个js文件解析失败的，可以看到，没有找到这三个文件，导致重写到index.html。因此js文件变成了首页的index.html内容，所以会出现&lt;解析失败的报错。"></a>3. 如果重写完成后刷新页面出现空白，看console出现,static/js下的三个js文件解析失败的，可以看到，没有找到这三个文件，导致重写到index.html。因此js文件变成了首页的index.html内容，所以会出现<code>&lt;</code>解析失败的报错。</h4><p>查看index.html，发现script引入的js是以<code>./static</code>开头的，需要改成<code>/static</code>才行。因此更改conf/index.js处</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">* 将.&#x2F;更改为&#x2F;</span><br><span class="line">*&#x2F;</span><br><span class="line">assetsPublicPath: &#39;&#x2F;&#39;, </span><br></pre></td></tr></table></figure>

<h4 id="4-Avoided-redundant-navigation-to-current-location-“-layout-task”。"><a href="#4-Avoided-redundant-navigation-to-current-location-“-layout-task”。" class="headerlink" title="4. Avoided redundant navigation to current location: “/layout/task”。"></a>4. Avoided redundant navigation to current location: “/layout/task”。</h4><p>在router的index.js中<code>Vue.use(Router)</code>以上增加如下代码，保证不会出现菜单重复问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 检查结果子界面</span><br><span class="line">const originalPush &#x3D; Router.prototype.push</span><br><span class="line">Router.prototype.push &#x3D; function push(location) &#123;</span><br><span class="line">  return originalPush.call(this, location).catch(err &#x3D;&gt; err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考<a href="https://www.cnblogs.com/litings/p/10802972.html">https://www.cnblogs.com/litings/p/10802972.html</a></p>
<p>Vue-Router官网对history描述和参考<a href="[https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90](https://router.vuejs.org/zh/guide/essentials/history-mode.html#后端配置例子)">配置</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Nacos动态推送持久化配置到Sentinel</title>
    <url>/2020/08/13/SpringCloud/Nacos%E5%8A%A8%E6%80%81%E6%8E%A8%E9%80%81%E6%8C%81%E4%B9%85%E5%8C%96%E9%85%8D%E7%BD%AE%E5%AF%BCSentinel/</url>
    <content><![CDATA[<h2 id="nacos作为数据源向sentinel动态推送配置"><a href="#nacos作为数据源向sentinel动态推送配置" class="headerlink" title="nacos作为数据源向sentinel动态推送配置"></a>nacos作为数据源向sentinel动态推送配置</h2><p>首先nacos和sentinel的服务端都启动好。</p>
<p>在需要使用sentinel服务的应用服务里添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>版本可以通过spring-cloud-alibaba-dependencies自动依赖。</p>
<p>他的版本应该是基于sentinel服务端的发布版本。</p>
<p>然后再yml里配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">sentinel:</span></span><br><span class="line">          <span class="attr">transport:</span></span><br><span class="line">            <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">            <span class="attr">heartbeat-interval-ms:</span> <span class="number">200</span> <span class="comment"># 发送sentinel心跳间隔</span></span><br><span class="line">          <span class="attr">datasource:</span> <span class="comment"># 本地化配置限流规则等，避免配置丢失</span></span><br><span class="line">            <span class="attr">ds1:</span></span><br><span class="line">              <span class="attr">nacos:</span></span><br><span class="line">                <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">                <span class="attr">dataId:</span> <span class="string">$&#123;spring.application.name&#125;-sentinel</span></span><br><span class="line">                <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">                <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">                <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line">          <span class="attr">eager:</span> <span class="literal">true</span> <span class="comment">#取消控制台懒加载</span></span><br></pre></td></tr></table></figure>

<p>nacos的配置在bootstrap中配置。sentinel配置和sentinel-database在application.yml中配置</p>
<h3 id="服务限流配置"><a href="#服务限流配置" class="headerlink" title="服务限流配置"></a>服务限流配置</h3><p>其中</p>
<ul>
<li>datasource属性是固定写法</li>
<li>ds1为唯一的一个命名</li>
<li>nacos为配置类型，nacos,file,zookeeper,apollo,redis,consul几种方式,在SentinelProperties中的DataSource中,需要一个map集合，值就是DataSourcePropertiesConfiguration，它会自动将你写的几类配置封装到其各自对应属性中，并加入到map集合。</li>
<li>nacos属性中,上三个有NacosDataSourceProperties配置，后两个属性在父类AbstractDataSourceProperties的中，默认data-type为json，rule-type为规则类型，在RuleType枚举类中有定义</li>
</ul>
<p>此处定义的nacos配置文件为<code>$&#123;spring.application.name&#125;-sentinel</code>,然后进行创建</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;resource&quot;</span>: <span class="string">&quot;/rateLimit/byUrl&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;limitApp&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;grade&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;count&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;strategy&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;controlBehavior&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;clusterMode&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>resource表示资源名称，如果是以路径的方式则返回的限流都是默认的，如果是自定义的则使用自定义的blockHandler和fallback</li>
<li>limitApp:访问来源，默认default，不分来源</li>
<li>grade:限流阙值类型,QPS或线程数,默认QPS。0表示线程数，1表示QPS；</li>
<li>strategy:控流模式，0直接，1关联，2链路</li>
<li>controlBehavior:控流类型，0快速失败，1WramUp，2排队等待</li>
<li>clusterMode:是否集群</li>
</ul>
<h3 id="服务降级配置"><a href="#服务降级配置" class="headerlink" title="服务降级配置"></a>服务降级配置</h3><p>rule-type值为degrade</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">&quot;resource&quot;</span>: <span class="string">&quot;test1&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;grade&quot;</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="attr">&quot;count&quot;</span>: <span class="number">20</span>,</span><br><span class="line">		<span class="attr">&quot;timeWindow&quot;</span>: <span class="number">60</span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>resource：资源名称</li>
<li>grade：降级策略 0 RT平均响应时间,1异常比例,2异常数</li>
<li>count: 单位数，由grade决定，分别为平均响应毫秒数，异常比例数，异常数</li>
<li>timeWindow：时间窗口，降级时间间隔</li>
</ul>
<p><strong>降级策略</strong></p>
<ul>
<li><p>平均响应时间 (DEGRADE_GRADE_RT)：当 1s 内持续进入 5 个请求，对应时刻的平均响应时间（秒级）均超过阈值（count，以 ms 为单位），那么在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地熔断（抛出 DegradeException）。注意 Sentinel 默认统计的 RT 上限是 4900 ms，超出此阈值的都会算作 4900 ms，若需要变更此上限可以通过启动配置项 -Dcsp.sentinel.statistic.max.rt=xxx 来配置</p>
</li>
<li><p>异常比例 (DEGRADE_GRADE_EXCEPTION_RATIO)：当资源的每秒请求量 &gt;= 5，并且每秒异常总数占通过量的比值超过阈值（DegradeRule 中的 count）之后，资源进入降级状态，即在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%</p>
</li>
<li><p>异常数 (DEGRADE_GRADE_EXCEPTION_COUNT)：当资源近 1 分钟的异常数目超过阈值之后会进行熔断。注意由于统计时间窗口是分钟级别的，若 timeWindow 小于 60s，则结束熔断状态后仍可能再进入熔断状态</p>
</li>
</ul>
<h2 id="sentinel相关使用"><a href="#sentinel相关使用" class="headerlink" title="sentinel相关使用"></a>sentinel相关使用</h2><p>@SenintelReSource注解</p>
<ul>
<li>value:表示资源名</li>
<li>blockHandler:限流处理方法，需在本类定义一个同方法名的方法</li>
<li>blockHandlerClass:指定限流处理类</li>
<li>fallback:服务熔断，异常返回函数，需在本类定义一个同方法名的方法</li>
<li>fallbackClass:同样</li>
</ul>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>nacos</tag>
        <tag>sentinel</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring JMS ActiveMQ断线重连问题</title>
    <url>/2020/08/12/Java/Spring%20JMS%20ActiveMQ%E6%96%AD%E7%BA%BF%E9%87%8D%E8%BF%9E%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>连接activemq出现超时，连接失败问题，默认重试3次，服务器在这段时间断掉了。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">2020-08-12 05:11:43.294  INFO 59992 --- [ActiveMQ Connection Executor: tcp:///192.168.0.37:61616@51414] o.s.j.c.CachingConnectionFactory         : Encountered a JMSException - resetting the underlying JMS Connection</span><br><span class="line"></span><br><span class="line">javax.jms.JMSException: Connection reset</span><br><span class="line">	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:54) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.ActiveMQConnection.onAsyncException(ActiveMQConnection.java:1960) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.ActiveMQConnection.onException(ActiveMQConnection.java:1979) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:114) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.ResponseCorrelator.onException(ResponseCorrelator.java:126) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:114) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:114) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.WireFormatNegotiator.onException(WireFormatNegotiator.java:173) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.AbstractInactivityMonitor.onException(AbstractInactivityMonitor.java:345) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.TransportSupport.onException(TransportSupport.java:96) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:219) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_101]</span><br><span class="line">Caused by: java.net.SocketException: Connection reset</span><br><span class="line">	at java.net.SocketInputStream.read(SocketInputStream.java:209) ~[na:1.8.0_101]</span><br><span class="line">	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[na:1.8.0_101]</span><br><span class="line">	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.fill(TcpBufferedInputStream.java:50) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.tcp.TcpTransport$2.fill(TcpTransport.java:634) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.tcp.TcpBufferedInputStream.read(TcpBufferedInputStream.java:59) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.tcp.TcpTransport$2.read(TcpTransport.java:619) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at java.io.DataInputStream.readInt(DataInputStream.java:387) ~[na:1.8.0_101]</span><br><span class="line">	at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:268) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:240) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:232) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215) ~[activemq-client-5.15.12.jar!/:5.15.12]</span><br><span class="line">	... 1 common frames omitted</span><br></pre></td></tr></table></figure>

<p>原因，可能是网络，或者客户端很久没有接受消息断开了。</p>
<p>解决:</p>
<p>断线重连，使用failover机制<code>failover:(tcp://localhost:61616)</code>进行断开自动连接</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>activemq</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro集成JWT前端登录</title>
    <url>/2020/08/03/Spring/Shiro%E9%9B%86%E6%88%90JWT%E5%89%8D%E7%AB%AF%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h2 id="Shiro配置"><a href="#Shiro配置" class="headerlink" title="Shiro配置"></a>Shiro配置</h2><h3 id="依赖添加"><a href="#依赖添加" class="headerlink" title="依赖添加"></a>依赖添加</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   jwt--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建JWTFilter"><a href="#创建JWTFilter" class="headerlink" title="创建JWTFilter"></a>创建JWTFilter</h3><p>此filter继承BasicHttpAuthenticationFilter类，该类继承AuthenticatingFilter，专门用于认证操作的过滤器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtFilter</span> <span class="keyword">extends</span> <span class="title">BasicHttpAuthenticationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断请求的请求头是否带上 &quot;token&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (isLoginAttempt(request, response)) &#123;</span><br><span class="line">            <span class="comment">//如果存在，则进入 executeLogin 方法执行登入，检查 token 是否正确</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                executeLogin(request, response);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(e.getMessage());s</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            JSONObject res = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            res.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;没有token权限令牌,请先登录&quot;</span>);</span><br><span class="line">            res.put(<span class="string">&quot;code&quot;</span>, JwtCodeEnum.TOKEN_NOT_FOUND.getCode());</span><br><span class="line">            HttpServletResponse httpServletResponse = (HttpServletResponse) response;</span><br><span class="line">            httpServletResponse.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            httpServletResponse.setStatus(HttpStatus.OK.value());</span><br><span class="line">            httpServletResponse.getWriter().write(res.toJSONString());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断用户是否想要登入。</span></span><br><span class="line"><span class="comment">     * 检测 header 里面是否包含 Token 字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isLoginAttempt</span><span class="params">(ServletRequest request, ServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        String token = req.getHeader(Constants.TOKEN_HEADER);</span><br><span class="line">        <span class="keyword">return</span> token != <span class="keyword">null</span> &amp;&amp; token.startsWith(Constants.TOKEN_BEARER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行登陆操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">executeLogin</span><span class="params">(ServletRequest request, ServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        String token = httpServletRequest.getHeader(Constants.TOKEN_HEADER);</span><br><span class="line">        JwtToken jwtToken = <span class="keyword">new</span> JwtToken(token);</span><br><span class="line">        <span class="comment">// 提交给realm进行登入，如果错误他会抛出异常并被捕获</span></span><br><span class="line">        getSubject(request, response).login(jwtToken);</span><br><span class="line">        <span class="comment">// 如果没有抛出异常则代表登入成功，返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对跨域提供支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse httpServletResponse = (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跨域时会首先发送一个option请求，这里我们给option请求直接返回正常状态</span></span><br><span class="line">        <span class="keyword">if</span> (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())) &#123;</span><br><span class="line">            httpServletResponse.setStatus(HttpStatus.OK.value());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="preHandle方法"><a href="#preHandle方法" class="headerlink" title="preHandle方法"></a>preHandle方法</h4><p>该方法类似Interceptor的前置方法。在这里如果没有在SpringCloud中在网关中对跨域的处理，那么就可以在此处设置处理。否则这里不应该添加允许跨域操作，会导致多个跨域。</p>
<p>此处进设置的对POST、PUT、DELETE等请求发出的前置OPTION请求，我们将给其返回正常的响应，跳过其验证。</p>
<h4 id="isLoginAttempt方法"><a href="#isLoginAttempt方法" class="headerlink" title="isLoginAttempt方法"></a>isLoginAttempt方法</h4><p>该方法判断请求是否需要认证，如果为true则执行isAccessAllowed方法，此处判断了请求头有token且以某常量开头的token请求头</p>
<h4 id="isAccessAllowed方法"><a href="#isAccessAllowed方法" class="headerlink" title="isAccessAllowed方法"></a>isAccessAllowed方法</h4><p>该方法是登录的前置判断，表示是否允许访问，在此方法里调用的<code>getSubject(request, response).login(jwtToken);</code>会进行真正的身份认证，将直接进入我们定义的AuthorizingRealm进行认证与授权。</p>
<h3 id="JWTRealm"><a href="#JWTRealm" class="headerlink" title="JWTRealm"></a>JWTRealm</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(AuthenticationToken token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token <span class="keyword">instanceof</span> JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Object primaryPrincipal = principalCollection.getPrimaryPrincipal();</span></span><br><span class="line"><span class="comment">//        User user = iUserFeign.getUserByUserName(primaryPrincipal.toString());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; permissions = new ArrayList&lt;String&gt;();</span></span><br><span class="line"><span class="comment">//        permissions.add(&quot;user:create&quot;);</span></span><br><span class="line"><span class="comment">//        permissions.add(&quot;items:add&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //查到权限数据，返回授权信息(要包括上边的permissions)</span></span><br><span class="line"><span class="comment">//        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();</span></span><br><span class="line"><span class="comment">//        //将上边查询到授权信息填充到simpleAuthorizationInfo对象中</span></span><br><span class="line"><span class="comment">//        simpleAuthorizationInfo.addStringPermissions(permissions);</span></span><br><span class="line"><span class="comment">//        return simpleAuthorizationInfo;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 身份认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String token = (String) authenticationToken.getCredentials();</span><br><span class="line">        <span class="comment">// 解密获得username，用于和数据库进行对比</span></span><br><span class="line">        String username = JwtTokenUtil.getUsernameFromToken(token);</span><br><span class="line">        <span class="keyword">byte</span>[] objUser = redisUtil.getByteArray(<span class="string">&quot;user-token&quot;</span> + username);</span><br><span class="line">        Object objToken = redisUtil.get(<span class="string">&quot;token&quot;</span> + username);</span><br><span class="line">        <span class="keyword">if</span> (token==<span class="keyword">null</span> || objToken==<span class="keyword">null</span> || !objToken.toString().equals(token))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">&quot;token令牌失效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span> || !JwtTokenUtil.validateToken(token, username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">&quot;token认证失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        User user = JSONObject.parseObject(objUser,User.class);</span><br><span class="line">        redisUtil.set(<span class="string">&quot;token&quot;</span> + username,token,Constants.TOKEN_EXPIRE);</span><br><span class="line">        redisUtil.setByteArray(<span class="string">&quot;user-token&quot;</span> + username,JSONObject.toJSONBytes(user),Constants.TOKEN_EXPIRE);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, token, getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该类继承了AuthorizingRealm，在doGetAuthenticationInfo方法中进行身份认证。在此处，通过获取redis中的token并进行对比，通过SimpleAuthenticationInfo类返回用户实例。</p>
<h3 id="JwtToken"><a href="#JwtToken" class="headerlink" title="JwtToken"></a>JwtToken</h3><p>shiro提供的基于token的认证对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtToken</span> <span class="keyword">implements</span> <span class="title">AuthenticationToken</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.token = token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JwtTokenUtil"><a href="#JwtTokenUtil" class="headerlink" title="JwtTokenUtil"></a>JwtTokenUtil</h3><p>该类是Jwt的相关操作，生成，验证token</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenUtil</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2641563440774620849L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String secret = <span class="string">&quot;MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAKo++i9J9dzAFtbxwowKDCo2mxi7MXxE8A8VvssaydWjjgmEz/HHMPLOhi1182a1si4pWL0/MizKnquD7T2Bu4jpQbAFnkNYEMEyq/kw904Xl0JCQHYFuvnI99RE8Q3KlTP6kEUGDjV34EL6vBGJcQvArLtj1xoP8y0nIfJ2Pw5TAgMBAAECgYAGGB8IllMwxceLhjf6n1l0IWRH7FuHIUieoZ6k0p6rASHSgWiYNRMxfecbtX8zDAoG0QAWNi7rn40ygpR5gS1fWDAKhmnhKgQIT6wW0VmD4hraaeyP78iy8BLhlvblri2nCPIhDH5+l96v7D47ZZi3ZSOzcj89s1eS/k7/N4peEQJBAPEtGGJY+lBoCxQMhGyzuzDmgcS1Un1ZE2pt+XNCVl2b+T8fxWJH3tRRR8wOY5uvtPiK1HM/IjT0T5qwQeH8Yk0CQQC0tcv3d/bDb7bOe9QzUFDQkUSpTdPWAgMX2OVPxjdq3Sls9oA5+fGNYEy0OgyqTjde0b4iRzlD1O0OhLqPSUMfAkEAh5FIvqezdRU2/PsYSR4yoAdCdLdT+h/jGRVefhqQ/6eYUJJkWp15tTFHQX3pIe9/s6IeT/XyHYAjaxmevxAmlQJBAKSdhvQjf9KAjZKDEsa7vyJ/coCXuQUWSCMNHbcR5aGfXgE4e45UtUoIE1eKGcd6AM6LWhx3rR6xdFDpb9je8BkCQB0SpevGfOQkMk5i8xkEt9eeYP0fi8nv6eOUcK96EXbzs4jV2SAoQJ9oJegPtPROHbhIvVUmNQTbuP10Yjg59+8=&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateToken</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.create().withSubject(username).withClaim(<span class="string">&quot;username&quot;</span>, username)</span><br><span class="line">                .withExpiresAt(<span class="keyword">new</span> Date(System.currentTimeMillis() + Constants.TOKEN_EXPIRE * <span class="number">1000</span>)).sign(getAlgorithm());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过token获取用户名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUsernameFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(token==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (token.startsWith(Constants.TOKEN_BEARER))&#123;</span><br><span class="line">            token = token.substring(Constants.TOKEN_BEARER.length());</span><br><span class="line">        &#125;</span><br><span class="line">        String username = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DecodedJWT jwtDecode = getJwtDecode(token);</span><br><span class="line">            Claim claim = jwtDecode.getClaim(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            username = claim.asString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            username = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token是否过期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Relic</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@title</span> isTokenExpired</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019/6/26 19:47</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isTokenExpired</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DecodedJWT jwtDecode = getJwtDecode(token);</span><br><span class="line">            Date expiration = jwtDecode.getExpiresAt();</span><br><span class="line">            <span class="keyword">return</span> expiration.before(<span class="keyword">new</span> Date());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在token中查询所需要查询的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   需要查询的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Relic</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@title</span> getClaimFromToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019/6/26 19:45</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getClaimFromToken</span><span class="params">(String token, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (token.startsWith(Constants.TOKEN_BEARER)) &#123;</span><br><span class="line">            token = token.substring(Constants.TOKEN_BEARER.length());</span><br><span class="line">        &#125;</span><br><span class="line">        DecodedJWT jwtDecode = getJwtDecode(token);</span><br><span class="line">        Map&lt;String, Claim&gt; claims = jwtDecode.getClaims();</span><br><span class="line">        Date expiration = jwtDecode.getExpiresAt();</span><br><span class="line">        <span class="keyword">if</span> (expiration.before(<span class="keyword">new</span> Date())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> claims.get(key).asString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Relic</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@title</span> refreshToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019/6/26 19:46</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">refreshToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        String refreshToken;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DecodedJWT jwtDecode = getJwtDecode(token);</span><br><span class="line">            Map&lt;String, Claim&gt; claims = jwtDecode.getClaims();</span><br><span class="line">            JWTCreator.Builder builder = JWT.create();</span><br><span class="line">            claims.forEach((key, value) -&gt; &#123;</span><br><span class="line">                builder.withClaim(key, value.asString());</span><br><span class="line">            &#125;);</span><br><span class="line">            refreshToken = builder.sign(getAlgorithm());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            refreshToken = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> refreshToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token与用户信息作比较 返回校验结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token       传递的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean 校验结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Relic</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@title</span> validateToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019/6/26 19:07</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateToken</span><span class="params">(String token, String username)</span> </span>&#123;</span><br><span class="line">        Algorithm algorithm = getAlgorithm();</span><br><span class="line">        JWTVerifier verifier = JWT.require(algorithm).withSubject(username).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (token.startsWith(Constants.TOKEN_BEARER))&#123;</span><br><span class="line">                token = token.substring(Constants.TOKEN_BEARER.length());</span><br><span class="line">            &#125;</span><br><span class="line">            verifier.verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DecodedJWT <span class="title">getJwtDecode</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Verification require = JWT.require(getAlgorithm());</span><br><span class="line">        <span class="keyword">return</span> require.build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Algorithm <span class="title">getAlgorithm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Algorithm.HMAC256(secret.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ShiroConfiguration"><a href="#ShiroConfiguration" class="headerlink" title="ShiroConfiguration"></a>ShiroConfiguration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomRealm <span class="title">customRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入 securityManager</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the security manager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">// 设置自定义 realm.</span></span><br><span class="line">        securityManager.setRealm(customRealm());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 关闭shiro自带的session，详情见文档</span></span><br><span class="line"><span class="comment">         * http://shiro.apache.org/session-management.html#SessionManagement-StatelessApplications%28Sessionless%29</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DefaultSubjectDAO subjectDAO = <span class="keyword">new</span> DefaultSubjectDAO();</span><br><span class="line">        DefaultSessionStorageEvaluator defaultSessionStorageEvaluator = <span class="keyword">new</span> DefaultSessionStorageEvaluator();</span><br><span class="line">        defaultSessionStorageEvaluator.setSessionStorageEnabled(<span class="keyword">false</span>);</span><br><span class="line">        subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator);</span><br><span class="line">        securityManager.setSubjectDAO(subjectDAO);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">factory</span><span class="params">(DefaultWebSecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean factoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        Map&lt;String, Filter&gt; filterMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置我们自定义的JWT过滤器</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;jwt&quot;</span>, <span class="keyword">new</span> JwtFilter());</span><br><span class="line">        factoryBean.setFilters(filterMap);</span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">// 设置无权限时跳转的 url;</span></span><br><span class="line">        <span class="comment">// factoryBean.setUnauthorizedUrl(&quot;/unauthorized/无权限&quot;);</span></span><br><span class="line">        LinkedHashMap&lt;String, String&gt; filterRuleMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//访问/login和/unauthorized 不需要经过过滤器</span></span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/login/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/sys/dict/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        <span class="comment">//filterRuleMap.put(&quot;/verification&quot;, &quot;anon&quot;);</span></span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/logout&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/register&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/unauthorized/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/swagger-ui.html&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/swagger-ui.html/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/webjars/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/v2/api-docs/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/swagger-resources&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/swagger-resources/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/configuration/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/check/task/file&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/ws/**&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有请求通过我们自己的JWT Filter</span></span><br><span class="line">        filterRuleMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;jwt&quot;</span>);</span><br><span class="line">        <span class="comment">// 访问 /unauthorized/** 不通过JWTFilter</span></span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(filterRuleMap);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DefaultWebSecurityManager中定义了自定义的CustomRealm用于认证，关闭shiro的session</p>
<p>ShiroFilterFactoryBean里添加了自定义的JwtFilter拦截器，并将需要拦截和放行的uri进行配置。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>shiro</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud项目相关问题</title>
    <url>/2020/07/31/SpringCloud/SpringCloud%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><h3 id="更新发布nacos配置文件时-项目提示找不到-project-version-的报错信息"><a href="#更新发布nacos配置文件时-项目提示找不到-project-version-的报错信息" class="headerlink" title="更新发布nacos配置文件时,项目提示找不到${project.version}的报错信息"></a>更新发布nacos配置文件时,项目提示找不到${project.version}的报错信息</h3><p>更新配置后，nacos会检索刷新，但并不会直接映射到注入的属性上，必须要@RefreshScope。</p>
<p>出现这个问题原因可能是<strong>jasypt</strong>加密原因<code>jasypt-spring-boot-starter</code>的2.1版本会造成此问题。3.0版本已经修复。且3.0版本和2.0版本的默认算法有变更。因此替换3.0版本后，需要把加密文本替换到配置文件中，否则使用2.1的加密值，无法启动项目。</p>
<h3 id="控制台一直刷新c-a-n-client-config-impl-ClientWorker-get-changedGroupKeys"><a href="#控制台一直刷新c-a-n-client-config-impl-ClientWorker-get-changedGroupKeys" class="headerlink" title="控制台一直刷新c.a.n.client.config.impl.ClientWorker    : get changedGroupKeys:[]"></a>控制台一直刷新<code>c.a.n.client.config.impl.ClientWorker    : get changedGroupKeys:[]</code></h3><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><h3 id="子线程中调用feign失败问题"><a href="#子线程中调用feign失败问题" class="headerlink" title="子线程中调用feign失败问题"></a>子线程中调用feign失败问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RequestContextHolder.setRequestAttributes(attributes,<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<p>在主线程中重设RequestAttributes，并由true参数，表示共享给子线程</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>项目问题</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Gateway整合WebSocket</title>
    <url>/2020/07/24/SpringCloud/SpringCloud%20Gateway%E6%95%B4%E5%90%88WebSocket/</url>
    <content><![CDATA[<p>本文解决方案参考<a href="http://springcloud.cn/view/36">SpringCloud.cn</a></p>
<h3 id="添加Maven配置"><a href="#添加Maven配置" class="headerlink" title="添加Maven配置"></a>添加Maven配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Maven依赖的添加，网关的依赖放网关pom里，websocket的依赖对应服务里，两者不会在同一服务中。</p>
<h3 id="网关路由配置"><a href="#网关路由配置" class="headerlink" title="网关路由配置"></a>网关路由配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xxha-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      	<span class="bullet">-</span> <span class="attr">id:</span> <span class="string">check-ws</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb:ws://xxha-check</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/ws/**</span></span><br></pre></td></tr></table></figure>

<p>uri的配置与http服务不同，<code>lb:ws://</code>的格式，专门用来转发websocket服务。其中Path<code>/ws/**</code>表示websocket的端点匹配</p>
<h3 id="websocket服务配置"><a href="#websocket服务配置" class="headerlink" title="websocket服务配置"></a>websocket服务配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxha.check.websocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnClose;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnError;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnMessage;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnOpen;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * webSocket 服务端类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cgq_r</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/ws/check/&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">&quot;WebSocket:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储连接数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger onlineNum = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储socket连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, Session&gt; users = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Session&gt;(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session, <span class="meta">@PathParam(&quot;userId&quot;)</span> String userId)</span> </span>&#123;</span><br><span class="line">        log.info(PREFIX + userId + <span class="string">&quot; 连接通讯&quot;</span>);</span><br><span class="line">        users.put(userId, session);</span><br><span class="line">        <span class="keyword">int</span> i = onlineNum.incrementAndGet();</span><br><span class="line">        log.info(PREFIX + <span class="string">&quot;当前连接数&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(Session session, <span class="meta">@PathParam(&quot;userId&quot;)</span> String userId)</span> </span>&#123;</span><br><span class="line">        users.remove(userId);</span><br><span class="line">        <span class="keyword">int</span> i = onlineNum.decrementAndGet();</span><br><span class="line">        log.info(PREFIX + <span class="string">&quot;目标 &quot;</span> + userId + <span class="string">&quot; 关闭连接,现连接数:&quot;</span> + i);</span><br><span class="line">        <span class="comment">/*Set&lt;Map.Entry&lt;String, Session&gt;&gt; entries = users.entrySet();</span></span><br><span class="line"><span class="comment">        Iterator&lt;Map.Entry&lt;String, Session&gt;&gt; iterator = entries.iterator();</span></span><br><span class="line"><span class="comment">        while (iterator.hasNext()) &#123;</span></span><br><span class="line"><span class="comment">            Map.Entry&lt;String, Session&gt; next = iterator.next();</span></span><br><span class="line"><span class="comment">            Session temp = next.getValue();</span></span><br><span class="line"><span class="comment">            if (!temp.isOpen()) &#123;</span></span><br><span class="line"><span class="comment">                iterator.remove();</span></span><br><span class="line"><span class="comment">                log.info(&quot;webSocket &quot; + next.getKey() + &quot; 断开连接,移除通信用户队列&quot;);</span></span><br><span class="line"><span class="comment">                onlineNum.decrementAndGet();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Session session, String message, <span class="meta">@PathParam(&quot;userId&quot;)</span> String userId)</span> </span>&#123;</span><br><span class="line">        log.info(PREFIX + <span class="string">&quot;接收到 &quot;</span> + userId + <span class="string">&quot;的会话,sessionId为&quot;</span> + session.getId() + <span class="string">&quot;消息:&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常情况</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">oneError</span><span class="params">(Throwable throwable, <span class="meta">@PathParam(&quot;userId&quot;)</span> String userId)</span> </span>&#123;</span><br><span class="line">        log.error(PREFIX + userId + <span class="string">&quot; 发生错误，连接异常或中断&quot;</span>);</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息给用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskId  用户在socket标识，该值为成果包id，作为唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 发送的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否发送成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageToUser</span><span class="params">(String taskId, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (users.get(taskId) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Session session = users.get(taskId);</span><br><span class="line">        log.info(PREFIX + <span class="string">&quot;向 &quot;</span> + taskId + <span class="string">&quot; 发送消息,消息id为:&quot;</span> + session.getId());</span><br><span class="line">        <span class="keyword">if</span> (!session.isOpen()) &#123;</span><br><span class="line">            log.error(PREFIX + <span class="string">&quot;消息发送时,&quot;</span> + taskId + <span class="string">&quot; 已关闭连接&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.getAsyncRemote().sendText(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(PREFIX + <span class="string">&quot;发送消息到目标 &quot;</span> + taskId + <span class="string">&quot; 出现异常&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息到所有连接用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageToAll</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (users != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (String s : users.keySet()) &#123;</span><br><span class="line">                    Session session = users.get(s);</span><br><span class="line">                    session.getAsyncRemote().sendText(message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                log.error(PREFIX + <span class="string">&quot;发送消息到出现异常:MessageAll&quot;</span>);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxha.check.websocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* websocket配置</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> cgq_r</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020/7/6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfiguration</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addEndpoint(<span class="string">&quot;/ws&quot;</span>)</span><br><span class="line">                .setAllowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在WebSocketConfiguration的修改中，追加了实现WebSocketMessageBrokerConfigurer类，并实现了registerStompEndpoints的方法。其他的时之前加的。</p>
<p>包括路径的新增也是之前没有的，所有会通过网关访问不了。</p>
<p><strong>另外,shiro的拦截也会将websocket进行拦截。因此需要按需进行放行。</strong></p>
<p>重要的是路由配置和这个WebSocketConfiguration配置，以及拦截配置。</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud整合Swagger2</title>
    <url>/2020/07/18/SpringCloud/SpringCloud%E6%95%B4%E5%90%88Swagger2/</url>
    <content><![CDATA[<p>整合测试采用Spring Gateway和其他两个微服务。通过网关访问各服务的swagger接口页面。可在swagger-ui.html的右上角选择要展示的微服务的接口。</p>
<p>服务均注册nacos</p>
<h3 id="网关操作"><a href="#网关操作" class="headerlink" title="网关操作"></a>网关操作</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">swagger2.version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">swagger2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- swagger2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">basic:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/swagger-ui.html</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="number">123</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://test</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/test/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/test/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">autoconfig</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://autoconfig</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/auto/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/autoconfig/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure>

<p>bootstrap.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="attr">refresh-enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">heart-beat-timeout:</span> <span class="number">500</span></span><br></pre></td></tr></table></figure>

<p>SwaggerConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.gateway.swagger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.config.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ParameterBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.schema.ModelRef;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Parameter;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.chen&quot;</span>))</span><br><span class="line">                .build()</span><br><span class="line">                .globalOperationParameters(getParameterList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * api接口作者相关信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;新兴华安-研发中心-MIS部&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;xxha@xxha.com.cn&quot;</span>);</span><br><span class="line">        ApiInfo apiInfo = <span class="keyword">new</span> ApiInfoBuilder().license(<span class="string">&quot;GPL&quot;</span>).title(<span class="string">&quot;微服务基础平台&quot;</span>).description(<span class="string">&quot;接口文档&quot;</span>).contact(contact).version(<span class="string">&quot;2.0&quot;</span>).build();</span><br><span class="line">        <span class="keyword">return</span> apiInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置全局参数</span></span><br><span class="line"><span class="comment">     * 添加token header</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Parameter&gt; <span class="title">getParameterList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ParameterBuilder tokenPar = <span class="keyword">new</span> ParameterBuilder() ;</span><br><span class="line">        List&lt;Parameter&gt; parameters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tokenPar.name(<span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;Token令牌&quot;</span>)</span><br><span class="line">                .modelRef(<span class="keyword">new</span> ModelRef(<span class="string">&quot;string&quot;</span>))</span><br><span class="line">                .parameterType(<span class="string">&quot;header&quot;</span>)</span><br><span class="line">                .required(<span class="keyword">false</span>)</span><br><span class="line">                .build();</span><br><span class="line">        parameters.add(tokenPar.build());</span><br><span class="line">        <span class="keyword">return</span> parameters;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>MySwaggerResourcesProvider.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.gateway.swagger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResource;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResourcesProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySwaggerResourcesProvider</span> <span class="keyword">implements</span> <span class="title">SwaggerResourcesProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * swagger2默认的url后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SWAGGER2URL = <span class="string">&quot;/v2/api-docs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网关路由</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RouteLocator routeLocator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网关应用名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String self;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySwaggerResourcesProvider</span><span class="params">(RouteLocator routeLocator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.routeLocator = routeLocator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SwaggerResource&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;SwaggerResource&gt; resources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; routeHosts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取所有可用的host：serviceId</span></span><br><span class="line">        routeLocator.getRoutes().filter(route -&gt; route.getUri().getHost() != <span class="keyword">null</span>)</span><br><span class="line">                .filter(route -&gt; !self.equals(route.getUri().getHost()))</span><br><span class="line">                .subscribe(route -&gt; routeHosts.add(route.getUri().getHost()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录已经添加过的server，存在同一个应用注册了多个服务在eureka上</span></span><br><span class="line">        Set&lt;String&gt; dealed = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        routeHosts.forEach(instance -&gt; &#123;</span><br><span class="line">            <span class="comment">// 拼接url</span></span><br><span class="line">            String url = <span class="string">&quot;/&quot;</span> + instance.toLowerCase() + SWAGGER2URL;</span><br><span class="line">            <span class="keyword">if</span> (!dealed.contains(url)) &#123;</span><br><span class="line">                dealed.add(url);</span><br><span class="line">                SwaggerResource swaggerResource = <span class="keyword">new</span> SwaggerResource();</span><br><span class="line">                swaggerResource.setUrl(url);</span><br><span class="line">                swaggerResource.setName(instance);</span><br><span class="line">                resources.add(swaggerResource);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> resources;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>SwaggerResourceController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.gateway.swagger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SecurityConfiguration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SecurityConfigurationBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResource;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.UiConfiguration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.UiConfigurationBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * swagger聚合接口，三个接口都是 doc.html需要访问的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/swagger-resources&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerResourceController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MySwaggerResourcesProvider swaggerResourceProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwaggerResourceController</span><span class="params">(MySwaggerResourcesProvider swaggerResourceProvider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.swaggerResourceProvider = swaggerResourceProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/configuration/security&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;SecurityConfiguration&gt; <span class="title">securityConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(SecurityConfigurationBuilder.builder().build(), HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/configuration/ui&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;UiConfiguration&gt; <span class="title">uiConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(UiConfigurationBuilder.builder().build(), HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;SwaggerResource&gt;&gt; swaggerResources() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(swaggerResourceProvider.get(), HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GateWayApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上gateway服务包括两个yml文件和3个java类。</p>
<p>三个java类分别是swagger的配置类，配置swagger的资源提供类，swagger的资源类。MySwaggerResourcesProvider类配置配置了，从路由中获取各个服务，将服务的信息添加到SwaggerResource中，并返回。</p>
<p><strong>另外在网关中不使用EnableSwaggger2注解</strong>，且不能依赖springboot web模块，因为网关默认依赖的是webflux</p>
<h3 id="业务微服务"><a href="#业务微服务" class="headerlink" title="业务微服务"></a>业务微服务</h3><p>其他两个业务微服务，只需要引入swagger的依赖，并使用其提供的注解。然后再启动上标注@EnableSwagger2的注解，而不是由网关里标注。</p>
<p>此外需要注意的是。路由是通过注册中心找的，因此配置了路由，swaggerResource就会从路由配置中拿也就是<code>uri: lb://test</code>,中的test。但如果没有被注册到注册中心就会访问失败。因此业务微服务和网关服务不要忘了加<code>@EnableDiscoveryClient</code>注解</p>
<h3 id="swagger-ui-html页面加密访问"><a href="#swagger-ui-html页面加密访问" class="headerlink" title="swagger-ui.html页面加密访问"></a>swagger-ui.html页面加密访问</h3><p>添加spring security依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并在yml上配置路径和用户名密码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">basic:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/swagger-ui.html</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="number">123</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>Arthas操作指南</title>
    <url>/2020/06/12/Java/Arthas%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="docker安装arthas"><a href="#docker安装arthas" class="headerlink" title="docker安装arthas"></a>docker安装arthas</h2><p>自定义dockerfile，将arthas添加到镜像中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line"></span><br><span class="line">ADD &#x2F;target&#x2F;ha-cloud-system-server.jar &#x2F;</span><br><span class="line"></span><br><span class="line">COPY --from&#x3D;hengyunabc&#x2F;arthas:latest &#x2F;opt&#x2F;arthas &#x2F;opt&#x2F;arthas</span><br><span class="line"></span><br><span class="line">EXPOSE 8003</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;&#x2F;ha-cloud-system-server.jar&quot;]</span><br></pre></td></tr></table></figure>

<p>创建容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name kjgh --init -e register_url&#x3D;192.168.0.182 -e profile&#x3D;test -p 8003:8003 kjgh-server:1.0</span><br></pre></td></tr></table></figure>

<p>启动容器内的arthas程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it 88a7180edbf5 &#x2F;bin&#x2F;sh -c &quot;java -jar &#x2F;opt&#x2F;arthas&#x2F;arthas-boot.jar&quot;</span><br></pre></td></tr></table></figure>

<h3 id="错误问题"><a href="#错误问题" class="headerlink" title="错误问题"></a>错误问题</h3><p><strong>com.sun.tools.attach.AttachNotSupportedException: Unable to get pid of LinuxThreads manager thread Attach docker 里 pid 1的进程报错?</strong></p>
<p>使用 –init命令可以解决此问题，参考<a href="https://github.com/alibaba/arthas/issues/362">https://github.com/alibaba/arthas/issues/362</a></p>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><h3 id="dashboard"><a href="#dashboard" class="headerlink" title="dashboard"></a>dashboard</h3><p>显示当前进程信息</p>
<h3 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h3><p>打印线程栈。<code>thread 1 | grep &#39;main(&#39;</code></p>
<h3 id="jad"><a href="#jad" class="headerlink" title="jad"></a>jad</h3><p>反编译class。<code>jad demo.MathGame</code></p>
<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>打印函数返回值，会一直等待输出。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">watch demo.MathGame primeFactors returnObj</span><br></pre></td></tr></table></figure>

<p>其中<code>demo.MathGame</code>为全类名，<code>primeFactors</code>为方法名，<code>returnObj</code>表示要查看返回值</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC+Maven构建profile环境</title>
    <url>/2020/05/30/Java/SpringMVC+Maven%E6%9E%84%E5%BB%BAprofile%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>maven提供了profiles元素标签来配置多个profile</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profile.env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/dev<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/other<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.env</span>&gt;</span>test<span class="tag">&lt;/<span class="name">profile.env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/test<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/other<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.env</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">profile.env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/prod<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/other<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>每一个profile作为一个环境，id标识了环境的名称是唯一的。properties可以定义一些属性，以便可以引用。resources为构建时资源的引入，包括引入了java下的可能存在的xml，有些xml不放在resources中就得这么做。</p>
<p>以prod为例：resource引入了<code>src/main/resources/prod</code>和src/main/resources/other，表示分别引入prod下和other下的文件，注意构建后classes下面不包含prod和other目录，只有其子数据。</p>
<p>对于springmvc而言，resources下有很多xml和其他配置文件，而在mvc.xml里有些properties是按/到文件引入的。因此对于文件的位置问题需要注意。因此prod、test、dev是相同的级别，里面的配置是不同的。而other是公用的东西，不必要重复防止在三个环境里。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA+Linux+Tomcat/jar远程调试</title>
    <url>/2020/05/29/Java/IDEA+Linux+Tomcat%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h2 id="更改bin-catalina-sh文件配置"><a href="#更改bin-catalina-sh文件配置" class="headerlink" title="更改bin/catalina.sh文件配置"></a>更改bin/catalina.sh文件配置</h2><p>在catalina.sh，开头大注释后的增加CATALINA_OPTS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CATALINA_OPTS&#x3D;&quot;$CATALINA_OPTS -Dcom.sun.management.jmxremote</span><br><span class="line">-Dcom.sun.management.jmxremote.port&#x3D;1099</span><br><span class="line">-Dcom.sun.management.jmxremote.ssl&#x3D;false</span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate&#x3D;false&quot;</span><br></pre></td></tr></table></figure>

<p>增加或修改JAVA_OPTS配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_OPTS&#x3D;&quot;$JAVA_OPTS -Dcom.sun.management.jmxremote</span><br><span class="line">-Dcom.sun.management.jmxremote.port&#x3D;1099</span><br><span class="line">-Dcom.sun.management.jmxremote.ssl&#x3D;false</span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate&#x3D;false&quot;</span><br></pre></td></tr></table></figure>

<p>找到<code>JPDA_ADDRESS=&quot;localhost:8000&quot;</code>将其修改为<code>JPDA_ADDRESS=&quot;0.0.0.0:8000</code></p>
<p><code>./catalina.sh jpda run</code>启动</p>
<h2 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h2><p>在Run Configuration添加Remote</p>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/TIM%E6%88%AA%E5%9B%BE20200529162037.png" alt=""></p>
<h2 id="Jar文件远程调试"><a href="#Jar文件远程调试" class="headerlink" title="Jar文件远程调试"></a>Jar文件远程调试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -Xdebug -Xrunjdwp:transport&#x3D;dt_socket,address&#x3D;5005,server&#x3D;y,suspend&#x3D;y -jar xxha.jar</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN+Docker+Jenkins提交自动部署war</title>
    <url>/2020/05/29/Jenkins/SVN+Docker+Jenkins%E6%8F%90%E4%BA%A4%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h2><p>使用docker的方式安装</p>
<p>下载官方jenkins，不给过版本可能会老一些。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name myjenkins -p 8081:8080 -p 50000:50000 -v /usr/local/kjgh/jenkins/home:/var/jenkins_home -u 0 jenkins</span><br></pre></td></tr></table></figure>

<p><code>-u 0</code>指定了当前容器执行的用户为uid为0，root。jenkins在构建容时，使用的是jenkins用户，也是新建的一个1000的用户。因此使用root会造成没有权限。</p>
<p>容器在启动后，因为版本较老，可能出现一些问题或下载错误，因此要重新上传一个新的war包更新，或者自己使用dockerfile构建自己想要的版本。</p>
<p>先选择推荐下载插件，下载不下来可以更改一下镜像，看看能不能下载，不行的话就重启一下jenkins服务，再次重新下载应该就可以了。</p>
<p>下载镜像的修改访问<code>http://localhost:8080/pluginManager/advanced</code>,最下面的Update Site,更改地址<code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</code></p>
<h3 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h3><p>首先确保是否有SSH plugin，但是此文章不一定需要。</p>
<p>然后下载官方提供的中文插件<code>Localization: Chinese (Simplified)</code>，和<code>Deploy to container Plugin</code>插件，该插件是将打包的war部署到tomcat或jboos的。</p>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>【系统管理】 - 【全局工具配置】</p>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/TIM%E6%88%AA%E5%9B%BE20200529093637.png" alt=""></p>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/TIM%E6%88%AA%E5%9B%BE20200529093846.png" alt=""></p>
<h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/TIM%E6%88%AA%E5%9B%BE20200529090518.png" alt=""></p>
<p><strong>配置基础信息</strong></p>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/TIM%E6%88%AA%E5%9B%BE20200529091242.png" alt=""></p>
<p><strong>配置svn</strong></p>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/TIM%E6%88%AA%E5%9B%BE20200529091617.png" alt=""></p>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/TIM%E6%88%AA%E5%9B%BE20200529091749.png" alt=""></p>
<p>构建环境可以不选择</p>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/TIM%E6%88%AA%E5%9B%BE20200529091954.png" alt=""></p>
<p>选择部署容器</p>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/TIM%E6%88%AA%E5%9B%BE20200529092245.png" alt=""></p>
<p>此处的手动构建即是，先不配置湖这个构建操作，手动构建一次，看看在哪。其实都不用的，直接这个即可。不给过war包名字是要改的根据你pom定义的项目名。</p>
<h2 id="svn仓库post-commit修改"><a href="#svn仓库post-commit修改" class="headerlink" title="svn仓库post-commit修改"></a>svn仓库post-commit修改</h2><p>不管是linux安装的visualSVN还是window上安装的，post-commit的命令是一样的。文件的位置是在仓库的hooks目录下，下面是所有的钩子命令(生命周期或执行过程)文件。</p>
<p>在linux上无后缀，但需要给出可执行权限。windows下为bat脚本。linux需要/bin/bash开头。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br></pre></td></tr></table></figure>

<p>命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar D:&#x2F;software&#x2F;svnRepositories&#x2F;jenkins-cli.jar -s http:&#x2F;&#x2F;192.168.0.165:8081 -auth push:push build test</span><br></pre></td></tr></table></figure>

<p>其中jenkins-cli.jar为从jenkins服务器下下来的文件，此处官方已说明，不同版本之间会有所差异和兼容性。下载路径为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;jenkins服务器地址:端口&#x2F;jnlpJars&#x2F;jenkins-cli.jar</span><br></pre></td></tr></table></figure>

<ul>
<li>-s后的路径为jenkins服务器地址</li>
<li>-auth push:push表示认证用户名密码为push和push</li>
<li>build test 表示构建job名为 test的任务</li>
</ul>
<p>用户的创建可以在【系统管理】- 【用户管理】 - 【新建用户】 添加用户。</p>
<p>在【系统管理】 - 【全局安全配置】中，选择授权策略，单选登录用户可以做任何事。</p>
<p>肯定是需要安全策略才能确保对jenkins的操作。</p>
<p>另外，在windows上时，拷贝post-commit.tmpl，重命名为bat时，模板文件默认都为linux上的执行文件，因此需要去掉#注释和其他代码，避免执行失败。</p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins安装问题</title>
    <url>/2020/05/25/Jenkins/Jenkins%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="更改下载镜像"><a href="#更改下载镜像" class="headerlink" title="更改下载镜像"></a>更改下载镜像</h2><p>访问<code>http://localhost:8080/pluginManager/advanced</code>,最下面的Update Site,更改地址<code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</code></p>
<p>安装中文插件,localiza。。。chinese 官方提供</p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Java操作MDB入库</title>
    <url>/2020/05/24/Java/Java%E6%93%8D%E4%BD%9CMDB%E5%85%A5%E5%BA%93/</url>
    <content><![CDATA[<h2 id="依赖添加"><a href="#依赖添加" class="headerlink" title="依赖添加"></a>依赖添加</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.healthmarketscience.jackcess<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackcess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hsqldb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hsqldb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ucanaccess<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ucanaccess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;lib.path&#125;/ucanaccess-5.0.0.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://chen-sys.oss-cn-beijing.aliyuncs.com/package/ucanaccess-5.0.0.jar">ucanaccess.jar</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msAccessMdb</span><span class="params">(String filePath,String ywh)</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String conStr = <span class="string">&quot;jdbc:ucanaccess:///&quot;</span> + filePath;</span><br><span class="line">        DbUtils.loadDriver(<span class="string">&quot;net.ucanaccess.jdbc.UcanaccessDriver&quot;</span>);</span><br><span class="line">        conn = DriverManager.getConnection(conStr);</span><br><span class="line">        stmt = conn.createStatement();</span><br><span class="line">        String sql = <span class="string">&quot;select * from GHZBB&quot;</span>;</span><br><span class="line"></span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">        List&lt;KjghPlanQuotaDto&gt; list = (List&lt;KjghPlanQuotaDto&gt;) queryRunner.query(conn,sql,<span class="keyword">new</span> BeanListHandler(KjghPlanQuotaDto.class));</span><br><span class="line">        <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span> &amp;&amp; StringUtils.isNotBlank(list.get(<span class="number">0</span>).getXZQDM())) &#123;</span><br><span class="line">            list.forEach(item -&gt; &#123;</span><br><span class="line">                item.setYwh(ywh);</span><br><span class="line">                item.setID(IdGen.uuid());</span><br><span class="line">            &#125;);</span><br><span class="line">            planQuotaService.saveList(list);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            logger.error(<span class="string">&quot;&#123;&#125;在指标表mdb中未查询到指标数据&quot;</span>,ywh);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;保存mdb规划指标表失败,&#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        DbUtils.closeQuietly(stmt);</span><br><span class="line">        DbUtils.closeQuietly(conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>commons-dbutils是一个方便jdbc访问的工具类，有他可是操作查询更方便。</p>
<p>filePath参数，mdb文件路径，全路径即可。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Window共享目录访问</title>
    <url>/2020/05/24/Java/Window%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E7%9A%84%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.samba.jcifs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcifs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;lib.path&#125;/jcifs-1.3.19.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://chen-sys.oss-cn-beijing.aliyuncs.com/package/jcifs-1.3.19.jar">jcifs.jar</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url = <span class="string">&quot;smb://192.168.6.44/d/空间规划数据库电子成果数据/&quot;</span>;</span><br><span class="line">NtlmPasswordAuthentication authentication = <span class="keyword">new</span> NtlmPasswordAuthentication(<span class="keyword">null</span>, <span class="string">&quot;administrator&quot;</span>, <span class="string">&quot;XXHA5367fkm@&quot;</span>);</span><br><span class="line">SmbFile file = <span class="keyword">new</span> SmbFile(url, authentication);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">    SmbFile[] smbFiles = file.listFiles();</span><br><span class="line">    <span class="keyword">for</span> (SmbFile smbFile : smbFiles) &#123;</span><br><span class="line">        downloadShare(smbFile,local);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downloadShare</span><span class="params">(SmbFile smbFile, String local)</span> <span class="keyword">throws</span> SmbException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (smbFile.isDirectory())&#123;</span><br><span class="line">        String aName = smbFile.getName();</span><br><span class="line">        String aDir = local + <span class="string">&quot;/&quot;</span> + aName;</span><br><span class="line">        createDirectory(aDir);</span><br><span class="line">        SmbFile[] smbFiles = smbFile.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (SmbFile file : smbFiles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory())&#123;</span><br><span class="line">                downloadShare(file,aDir);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                downShareIO(file,aDir + <span class="string">&quot;/&quot;</span> + file.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        downShareIO(smbFile,local + <span class="string">&quot;/&quot;</span> + smbFile.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downShareIO</span><span class="params">(SmbFile file, String local)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> SmbFileInputStream(file));</span><br><span class="line">         OutputStream out = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(local)));) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(buffer, <span class="number">0</span>, buffer.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            out.flush(); <span class="comment">//刷新缓冲的输出流</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql批量执行sql</title>
    <url>/2020/05/24/PostgreSQL/Postgresql%E6%89%B9%E9%87%8F%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p>批量执行sql需要使用到pg的psql命令。该命令在安装目录的bin下。可以添加bin到环境变量。</p>
<p>另外就是连接数据库的情况，有的数据库不设密码，有的设置，而密码有加密类型，在data/pg_hba.conf中，这个表的配置可以到网上搜，最低级别的不需要密码即可登录。然后一般MD5加密的需要密码。</p>
<p>对于数据库字符编码和客户端字符编码的问题。使用<code>\encoding</code>命令可以查看编码，一般为GBK编码，那么导入的sql必须为ASNI字符编码的sql文本，也就是默认window创建的txt的类型。否则如果是UFT-8的sql文件，在导入时会乱码出错。如果服务器是UTF-8的话就可以使用utf8的文本文件。</p>
<ol>
<li><p>首先有一个批量脚本文件，用此文件来执行，其他sql从batch脚本文件中引用。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\cd C:/Users/cgq_r/Desktop</span><br><span class="line"></span><br><span class="line">\i ./sql/cms_business.sql;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">\i ./sql/cms_face.sql;</span><br></pre></td></tr></table></figure>

<p>此batch.sql脚本文件中,<code>\cd</code>声明了执行该文件时，要进入的目录，而<code>\i</code>表示从文件中执行命令，这个命令在psql登录后，可以使用<code>help \?</code>查看所有命令。</p>
<p>此时batch.sql文件与cms_business.sql文件的关系是在Desktop下有batch.sql文件，Desktop下的sql目录下有cms_business.sql文件</p>
</li>
<li><p>连接psql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">psql -h ip -d 数据库名 -U 用户名</span><br><span class="line">例:psql -h localhost -d postgres -U postgres</span><br></pre></td></tr></table></figure>

<p>然后输入密码，注意，如果是本机登录，可以不使用-h参数，但如果当前postgresql没有设置密码，就是pg_hba.conf中的加密方式不是md5，可能需要执行-h参数，然后无需密码直接就连接上了。</p>
</li>
<li><p>验证客户端编码格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\encoding</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set schema &#39;public&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行导入命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">\i C:/Users/cgq_r/Desktop/batch.sql</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti并行节点跳转回退示例V5.21</title>
    <url>/2020/05/23/Activiti/Activiti%E5%B9%B6%E8%A1%8C%E8%8A%82%E7%82%B9%E8%B7%B3%E8%BD%AC%E5%9B%9E%E9%80%80%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="节点跳转方法"><a href="#节点跳转方法" class="headerlink" title="节点跳转方法"></a>节点跳转方法</h2><p>可以试用cmd的方式进行操作，毕竟activiti提供的service，很多方法都是执行的command</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDJumpTaskCmd</span> <span class="keyword">implements</span> <span class="title">Command</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;TaskEntity&gt; taskEntities;</span><br><span class="line">    <span class="keyword">protected</span> ActivityImpl desActivity;</span><br><span class="line">    <span class="keyword">protected</span> Map&lt;String, Object&gt; paramvar;</span><br><span class="line">    <span class="keyword">protected</span> ActivityImpl currentActivity;</span><br><span class="line">    <span class="keyword">protected</span> String taskId;</span><br><span class="line">    <span class="keyword">protected</span> String procInsId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskEntities 可能存在并行任务，多个任务节点同时进行，因此需要全部删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desActivity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramvar</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentActivity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JDJumpTaskCmd</span><span class="params">(List&lt;TaskEntity&gt; taskEntities, ActivityImpl desActivity,</span></span></span><br><span class="line"><span class="function"><span class="params">                         Map&lt;String, Object&gt; paramvar, ActivityImpl currentActivity,String procInsId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.taskEntities = taskEntities;</span><br><span class="line">        <span class="keyword">this</span>.desActivity = desActivity;</span><br><span class="line">        <span class="keyword">this</span>.paramvar = paramvar;</span><br><span class="line">        <span class="keyword">this</span>.currentActivity = currentActivity;</span><br><span class="line">        <span class="keyword">this</span>.procInsId = procInsId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskEntities 可能存在并行任务，多个任务节点同时进行，因此需要全部删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desActivity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramvar</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentActivity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> procInsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskId 当前任务需要手动complete状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JDJumpTaskCmd</span><span class="params">(List&lt;TaskEntity&gt; taskEntities, ActivityImpl desActivity,</span></span></span><br><span class="line"><span class="function"><span class="params">                         Map&lt;String, Object&gt; paramvar, ActivityImpl currentActivity,String procInsId,String taskId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.taskEntities = taskEntities;</span><br><span class="line">        <span class="keyword">this</span>.desActivity = desActivity;</span><br><span class="line">        <span class="keyword">this</span>.paramvar = paramvar;</span><br><span class="line">        <span class="keyword">this</span>.currentActivity = currentActivity;</span><br><span class="line">        <span class="keyword">this</span>.procInsId = procInsId;</span><br><span class="line">        <span class="keyword">this</span>.taskId = taskId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">execute</span><span class="params">(CommandContext commandContext)</span> </span>&#123;</span><br><span class="line">        ExecutionEntityManager executionEntityManager = Context.getCommandContext().getExecutionEntityManager();</span><br><span class="line">        <span class="comment">// 获取当前流程的executionId，因为在并发的情况下executionId是唯一的。</span></span><br><span class="line">        String executionId = taskEntities.size() == <span class="number">0</span> ? procInsId : taskEntities.get(taskEntities.size() - <span class="number">1</span>).getExecutionId();</span><br><span class="line">        ExecutionEntity executionEntity = executionEntityManager.findExecutionById(executionId);</span><br><span class="line">        executionEntity.setVariables(paramvar);</span><br><span class="line">        executionEntity.setEventSource(<span class="keyword">this</span>.currentActivity);</span><br><span class="line">        executionEntity.setActivity(<span class="keyword">this</span>.currentActivity);</span><br><span class="line"></span><br><span class="line">        TaskEntity afterDel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (taskId==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (TaskEntity taskEntity : taskEntities) &#123;</span><br><span class="line">                taskEntity.fireEvent(<span class="string">&quot;complete&quot;</span>);</span><br><span class="line">                logger.warn(<span class="string">&quot;并行取回操作:===删除任务&quot;</span> + taskEntity.getName());</span><br><span class="line">                System.out.println(<span class="string">&quot;=============&quot;</span> + taskEntity.getName());</span><br><span class="line">                Context.getCommandContext().getTaskEntityManager().deleteTask(taskEntity, <span class="string">&quot;jump&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (TaskEntity taskEntity : taskEntities) &#123;</span><br><span class="line">                taskEntity.fireEvent(<span class="string">&quot;complete&quot;</span>);</span><br><span class="line">                logger.warn(<span class="string">&quot;并行回退操作:===删除任务&quot;</span> + taskEntity.getName());</span><br><span class="line">                System.out.println(<span class="string">&quot;=============&quot;</span> + taskEntity.getName());</span><br><span class="line">                <span class="keyword">if</span> (!taskEntity.getId().equals(taskId))&#123;</span><br><span class="line">                    Context.getCommandContext().getTaskEntityManager().deleteTask(taskEntity, <span class="string">&quot;jump&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    afterDel = taskEntity;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executionEntity.executeActivity(<span class="keyword">this</span>.desActivity);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(taskId) &amp;&amp; afterDel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Context.getCommandContext().getTaskEntityManager().deleteTask(afterDel, TaskEntity.DELETE_REASON_COMPLETED, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上方法可能过于项目化。实际上跳转所表达的是，定义开始节点，执行目标节点，就是从当前要跳转的节点跳转到定义的目标activityId位置。中间的判断和删除，就是删除当前未办完的任务，因为当前节点要跳转了，所以不走taskService.complete了，因此在此处要完成这个任务(设置事件名称)，然后删除这个任务。此时循环删除完执行跳转。</p>
<p>但是要注意的是taskService.deleteTask和TaskEntityManager.deleteTask这两个删除时有区别的。<strong>taskService是不允许删除正在运行的流程的</strong>，他会判断当前task的executionId是否为空。而TaskEntityManager可以删除当前正在运行的这个主流程。</p>
<p>EntityTask实现的是Task接口，两者是父子关系。另外还有一个model包的Task，而现在的是与流程引擎相关的engine包里的。</p>
<blockquote>
<p>任务监听器中有任务事件，create,assignment,complete,delete。</p>
</blockquote>
<h2 id="并行节点的执行情况"><a href="#并行节点的执行情况" class="headerlink" title="并行节点的执行情况"></a>并行节点的执行情况</h2><p>并行节点的执行</p>
<p>首先，并行开始网关前的一个用户任务完成任务后，在act_ru_execution中便会出现n+1个execution，以简单的并行阶段为例，n表示并行网关内的并行用户任务数量，加入n为3，则在这三条execution中，execution_id与proc_inst_id_值是不一致的，它表示为并行节点下的每个任务一个独立的子流程，而另一个1则为并行网关的主流程，他的execution_id与proc_inst_id_是一致的。而act_ru_task里则依然是n个用户任务。</p>
<p>并行节点每完成一个任务，对应的execution便少一条。而在act_hi_actinst中，便会多出一个结束网关的act。直到最后一个并行节点任务执行完，execution中便为并行阶段后下一个用户任务。</p>
<p>以上是用户任务在act_ru_execution中出现的情况。还有必要了解到act_ru_task,act_hi_taskinst,act_hi_actinst表的数据。</p>
<p>一般对于只存在排他网关和用户任务的简单流程，不含并行的。execution表和task表都只有一条数据，且流程id和执行id是一样的。使用节点跳转的时候可以直接进行跳转。</p>
<p>而并行使用此方式跳转，而不加改造的话，可能回到导致，跳转之后，完成这个任务，流程就异常结束了。或者跳转后多了一个重复任务(没删任务的情况)。</p>
<p>对于流程异常结束的情况，认为往往在，主流程execution出现异常。而如果execution中不存在一条主流程，那么流程查询会出现问题，报错说没有这个execution执行。还有就是execution执行后没有下一个execution了。</p>
<h2 id="并行跳转的补充"><a href="#并行跳转的补充" class="headerlink" title="并行跳转的补充"></a>并行跳转的补充</h2><p>并行方面，在做项目时，可以取回和回退。而且要做这两个功能，在并行操作是，还要顾及到并行前的节点和并行后的节点，对于并行取回和回退所出现的问题。比如回退后，任务没了、任务重复了等等。</p>
<p>另外，对于并行取回和回退的处理，需要手动对act表做更改,比如删除execution，而非仅使用api调用。</p>
<p>首先说一下条件，</p>
<ul>
<li>并行节点的取回，在并行阶段后的任务没有签收时，可以且仅取回自己的任务</li>
<li>并行节点回退，所有其他并行节点同时回退，回退到并行阶段的上一个用户任务。</li>
<li>任意一个并行节点意见为不通过，等并行结束后回到并行阶段前的上一个用户节点</li>
<li>并行阶段后的用户任务，回退或不通过回到并行阶段</li>
<li>取回并行阶段前的用户任务。(此处代办已经在并行阶段了)</li>
</ul>
<h3 id="并行阶段前的用户任务取回"><a href="#并行阶段前的用户任务取回" class="headerlink" title="并行阶段前的用户任务取回"></a>并行阶段前的用户任务取回</h3><p>取回肯定是当前任务没有被签收。</p>
<p>此时代办在三个并行任务处了。</p>
<p><strong>要想取回可以直接使用跳转的方式，并删除三个代办的并行任务，执行跳转</strong>，可以直接将主流程做变更。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ActivityImpl destinationActivity = (ActivityImpl) processDefinitionEntity.findActivity(historicTaskInstance.getTaskDefinitionKey());</span><br><span class="line">ActivityImpl currentActivity = (ActivityImpl) processDefinitionEntity.findActivity(current);</span><br><span class="line">managementService.executeCommand(<span class="keyword">new</span> JDJumpTaskCmd(taskEntitys,destinationActivity, vars, currentActivity,procInsId));</span><br></pre></td></tr></table></figure>



<h3 id="并行节点的取回"><a href="#并行节点的取回" class="headerlink" title="并行节点的取回"></a>并行节点的取回</h3><p>第一个并行节点取回，第一个并行节点取回时，其他并行没有办理，仅当前第一个并行在取回后要重新办理。因此可以直接删除所有所有代办的业务，然后自动签收要取回的业务，替换原要取回的关联业务数据变更为跳转后的taskId。而跳转的目标是哪里，已办可以想到的是开始并行网关，因此将其目标设为并行开始网关，也就是要取回的节点的上一个节点。</p>
<p>第二个节点或第三个节点的取回，此时并行阶段中均有已办的并行节点。此时如果仅仅直接跳到并行开始网关已经不行了。但是依然是主流程要停留在并行阶段的。首先数据要替换，已办的要完成任务。然后由于其他原因必须要跳到并行前的排他网关处。</p>
]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti并行节点流程图高亮V5.21</title>
    <url>/2020/05/22/Activiti/Activiti%E5%B9%B6%E8%A1%8C%E8%8A%82%E7%82%B9%E6%B5%81%E7%A8%8B%E5%9B%BE%E9%AB%98%E4%BA%AE/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">tracecPhotoContainParallelGateway</span><span class="params">(String processDefinitionId, String procInsId)</span></span>&#123;</span><br><span class="line">	BpmnModel bpmnModel = repositoryService.getBpmnModel(processDefinitionId);</span><br><span class="line">	List&lt;HistoricActivityInstance&gt; historicActivityInstances= Lists.newArrayList();</span><br><span class="line">	List&lt;String&gt; executedActivityIdList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">	List&lt;HistoricActivityInstance&gt; tempHistoricActivityInstance = historyService</span><br><span class="line">			.createHistoricActivityInstanceQuery().processInstanceId(procInsId).orderByHistoricActivityInstanceStartTime().asc().orderByHistoricActivityInstanceEndTime().asc().list();</span><br><span class="line">	<span class="keyword">for</span>(HistoricActivityInstance historicActivityInstance:tempHistoricActivityInstance)&#123;</span><br><span class="line">		<span class="keyword">if</span>(historicActivityInstance.getEndTime() != <span class="keyword">null</span>)&#123;</span><br><span class="line">			historicActivityInstances.add(historicActivityInstance);</span><br><span class="line">			executedActivityIdList.add(historicActivityInstance.getActivityId());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 流转线ID集合</span></span><br><span class="line">	List&lt;String&gt; flowIdList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">	<span class="comment">// 全部活动实例</span></span><br><span class="line">	List&lt;FlowNode&gt; historicFlowNodeList = <span class="keyword">new</span> LinkedList&lt;FlowNode&gt;();</span><br><span class="line">	<span class="comment">// 已完成的历史活动节点</span></span><br><span class="line">	List&lt;HistoricActivityInstance&gt; finishedActivityInstanceList = <span class="keyword">new</span> LinkedList&lt;HistoricActivityInstance&gt;();</span><br><span class="line">	<span class="keyword">for</span> (HistoricActivityInstance historicActivityInstance : historicActivityInstances) &#123;</span><br><span class="line">		historicFlowNodeList.add((FlowNode) bpmnModel.getMainProcess().getFlowElement(historicActivityInstance.getActivityId()));</span><br><span class="line">		<span class="keyword">if</span> (historicActivityInstance.getEndTime() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			finishedActivityInstanceList.add(historicActivityInstance);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 遍历已完成的活动实例，从每个实例的outgoingFlows中找到已执行的</span></span><br><span class="line">	<span class="comment">// 注: 主要操作</span></span><br><span class="line">	FlowNode currentFlowNode = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">for</span> (HistoricActivityInstance currentActivityInstance : finishedActivityInstanceList) &#123;</span><br><span class="line">		<span class="comment">// 获得当前活动对应的节点信息及outgoingFlows信息</span></span><br><span class="line">		currentFlowNode = (FlowNode) bpmnModel.getMainProcess().getFlowElement(currentActivityInstance.getActivityId());</span><br><span class="line">		List&lt;SequenceFlow&gt; sequenceFlowList = currentFlowNode.getOutgoingFlows();</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 遍历outgoingFlows并找到已已流转的</span></span><br><span class="line"><span class="comment">		 * 满足如下条件认为已已流转：</span></span><br><span class="line"><span class="comment">		 * 1.当前节点是并行网关或包含网关，则通过outgoingFlows能够在历史活动中找到的全部节点均为已流转</span></span><br><span class="line"><span class="comment">		 * 2.当前节点是以上两种类型之外的，通过outgoingFlows查找到的时间最近的流转节点视为有效流转</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		FlowNode targetFlowNode = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">&quot;parallelGateway&quot;</span>.equals(currentActivityInstance.getActivityType())) &#123;</span><br><span class="line">			<span class="comment">// 遍历历史活动节点，找到匹配Flow目标节点的</span></span><br><span class="line">			<span class="keyword">for</span> (SequenceFlow sequenceFlow : sequenceFlowList) &#123;</span><br><span class="line">				targetFlowNode = (FlowNode) bpmnModel.getMainProcess().getFlowElement(sequenceFlow.getTargetRef());</span><br><span class="line">				<span class="keyword">if</span> (historicFlowNodeList.contains(targetFlowNode)) &#123;</span><br><span class="line">					flowIdList.add(sequenceFlow.getId());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;exclusiveGateway&quot;</span>.equals(currentActivityInstance.getActivityType()))&#123;</span><br><span class="line">			String nextActivityId = getHistoryActivityIdWithNext(executedActivityIdList, currentActivityInstance.getActivityId());</span><br><span class="line">			<span class="keyword">for</span> (SequenceFlow sequenceFlow : sequenceFlowList) &#123;</span><br><span class="line">				<span class="comment">// targetFlowNode = (FlowNode) bpmnModel.getMainProcess().getFlowElement(sequenceFlow.getTargetRef());</span></span><br><span class="line">				<span class="keyword">if</span> (nextActivityId.equals(sequenceFlow.getTargetRef()))&#123;</span><br><span class="line">					flowIdList.add(sequenceFlow.getId());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			List&lt;Map&lt;String, String&gt;&gt; tempMapList = <span class="keyword">new</span> LinkedList&lt;Map&lt;String,String&gt;&gt;();</span><br><span class="line">			<span class="comment">// 遍历历史活动节点，找到匹配Flow目标节点的</span></span><br><span class="line">			<span class="keyword">for</span> (SequenceFlow sequenceFlow : sequenceFlowList) &#123;</span><br><span class="line">				<span class="keyword">for</span> (HistoricActivityInstance historicActivityInstance : historicActivityInstances) &#123;</span><br><span class="line">					<span class="keyword">if</span> (historicActivityInstance.getActivityId().equals(sequenceFlow.getTargetRef())) &#123;</span><br><span class="line">					<span class="comment">/*Map&lt;String,String&gt; te = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">						te.put(&quot;flowId&quot;,sequenceFlow.getId());</span></span><br><span class="line"><span class="comment">						te.put(&quot;activityStartTime&quot;,String.valueOf(historicActivityInstance.getStartTime().getTime()));</span></span><br><span class="line"><span class="comment">						tempMapList.add(te);</span></span><br><span class="line"><span class="comment">						*/</span></span><br><span class="line">						<span class="comment">// 不显示jump的线</span></span><br><span class="line">						String taskId = historicActivityInstance.getTaskId();</span><br><span class="line">						<span class="comment">// Object variable = runtimeService.getVariable(procInsId, &quot;jump&quot; + taskId);</span></span><br><span class="line">						HistoricVariableInstanceQuery hisJumpVar = historyService.createHistoricVariableInstanceQuery().processInstanceId(procInsId).variableName(<span class="string">&quot;jump&quot;</span> + taskId);</span><br><span class="line">						<span class="keyword">if</span> (hisJumpVar != <span class="keyword">null</span>) &#123;</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">							flowIdList.add(sequenceFlow.getId());</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*// 遍历匹配的集合，取得开始时间最早的一个</span></span><br><span class="line"><span class="comment">			long earliestStamp = 0L;</span></span><br><span class="line"><span class="comment">			String flowId = null;</span></span><br><span class="line"><span class="comment">			for (Map&lt;String, String&gt; map : tempMapList) &#123;</span></span><br><span class="line"><span class="comment">				long activityStartTime = Long.valueOf(map.get(&quot;activityStartTime&quot;));</span></span><br><span class="line"><span class="comment">				if (earliestStamp == 0 || earliestStamp &gt;= activityStartTime) &#123;</span></span><br><span class="line"><span class="comment">					earliestStamp = activityStartTime;</span></span><br><span class="line"><span class="comment">					flowId = map.get(&quot;flowId&quot;);</span></span><br><span class="line"><span class="comment">				&#125;</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">			flowIdList.add(flowId);*/</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	List&lt;String&gt; highLightedActivities = Lists.newArrayList();</span><br><span class="line">	Context.setProcessEngineConfiguration(processEngine.getProcessEngineConfiguration());</span><br><span class="line"></span><br><span class="line">	DefaultProcessDiagramGenerator processDiagramGeneratornew = <span class="keyword">new</span> DefaultProcessDiagramGenerator();</span><br><span class="line">	<span class="keyword">return</span> processDiagramGeneratornew.generateDiagram(bpmnModel, <span class="string">&quot;png&quot;</span>,</span><br><span class="line">			executedActivityIdList, flowIdList,</span><br><span class="line">			processEngine.getProcessEngineConfiguration().getActivityFontName(),</span><br><span class="line">			processEngine.getProcessEngineConfiguration().getLabelFontName(),</span><br><span class="line">			procInsId, processEngine.getProcessEngineConfiguration().getClassLoader(), <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码解析说明："><a href="#代码解析说明：" class="headerlink" title="代码解析说明："></a>代码解析说明：</h2><h3 id="第一段代码"><a href="#第一段代码" class="headerlink" title="第一段代码"></a>第一段代码</h3><p>读取当前流程的历史活动对象<code>HistoricActivityInstance</code>和<code>FlowNode</code>节点流向，两个集合分别为历史活动实例和actId</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;HistoricActivityInstance&gt; historicActivityInstances= Lists.newArrayList();</span><br><span class="line">List&lt;FlowNode&gt; historicFlowNodeList = <span class="keyword">new</span> LinkedList&lt;FlowNode&gt;();</span><br><span class="line">List&lt;String&gt; executedActivityIdList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">List&lt;HistoricActivityInstance&gt; tempHistoricActivityInstance = historyService</span><br><span class="line">		.createHistoricActivityInstanceQuery().processInstanceId(procInsId).orderByHistoricActivityInstanceStartTime().asc().orderByHistoricActivityInstanceEndTime().asc().list();</span><br><span class="line"><span class="keyword">for</span>(HistoricActivityInstance historicActivityInstance:tempHistoricActivityInstance)&#123;</span><br><span class="line">	<span class="keyword">if</span>(historicActivityInstance.getEndTime() != <span class="keyword">null</span>)&#123;</span><br><span class="line">        historicFlowNodeList.add((FlowNode) bpmnModel.getMainProcess().getFlowElement(historicActivityInstance.getActivityId()));</span><br><span class="line">		historicActivityInstances.add(historicActivityInstance);</span><br><span class="line">		executedActivityIdList.add(historicActivityInstance.getActivityId());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二段代码"><a href="#第二段代码" class="headerlink" title="第二段代码"></a>第二段代码</h3><p><strong>主要任务是从历史活动实例中获取流程线id，此线为高亮线。</strong></p>
<p>通过以下代码可以获取当前Activity的流程流向</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">currentFlowNode = (FlowNode) bpmnModel.getMainProcess().getFlowElement(currentActivityInstance.getActivityId());</span><br><span class="line">List&lt;SequenceFlow&gt; sequenceFlowList = currentFlowNode.getOutgoingFlows();</span><br></pre></td></tr></table></figure>

<p>sequenceFlowList即表示当前activity在流程图上流出的SequenceFlow。</p>
<p>我们只需要循环所有的历史活动实例即可，从历史活动实例中获取FlowNode,再获取SequenceFlow</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FlowNode targetFlowNode = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;parallelGateway&quot;</span>.equals(currentActivityInstance.getActivityType())) &#123;</span><br><span class="line">	<span class="comment">// 遍历历史活动节点，找到匹配Flow目标节点的</span></span><br><span class="line">	<span class="keyword">for</span> (SequenceFlow sequenceFlow : sequenceFlowList) &#123;</span><br><span class="line">		targetFlowNode = (FlowNode) bpmnModel.getMainProcess().getFlowElement(sequenceFlow.getTargetRef());</span><br><span class="line">		<span class="keyword">if</span> (historicFlowNodeList.contains(targetFlowNode)) &#123;</span><br><span class="line">			flowIdList.add(sequenceFlow.getId());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们只选择并行的，以并行为例。既然要活的高亮线，也就是sequenceFlow的id，那既然高亮必须是已经执行过的历史活动，在act_hi_actinst中，存在所有的历史活动执行，包括用户任务，排他、并行网关等活动信息。</p>
<p>因此我们循环当前历史activity的流出线,如果当前的流程节点在历史FlowNode<code>historicFlowNodeList</code>中找到(第一段代码)，那么么可以认为当前流出线是高亮的。为何要比较FlowNode，因为首先当前act是并行网关，注意并行开始节点后的一般都为任务，此处获得的targetFlowNode也就是并行阶段的并行节点。因此，如果target节点已经在历史了，那么从开始并行网关到并行节点的线是可以画的。否则并行节点没有执行，线就不会画出来。</p>
<p>如果是排他网关或用户任务，一般下一个节点就是用户任务节点或排他网关。而排他网关和用户任务在历史执行中，只会出现一次(回退驳回除外)。而并行节点，每执行完成一个并行节点就会多出一个当前并行节点的结束并行网关。对于一般情况，我们直接通过循环getTargetRef所指向的目标actId与当前<code>currentActivityInstance</code>的下一个actId是不是相等的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String nextActivityId = getHistoryActivityIdWithNext(executedActivityIdList, currentActivityInstance.getActivityId());</span><br></pre></td></tr></table></figure>

<p>该代码就是获取下一个actId，如果当前循环的currentActivityInstance的下一个actId在流出线targetRef目标所指向的任意一个actId，那么这个sequenceFlow线即可被高亮。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getHistoryActivityIdWithNext</span><span class="params">(List&lt;String&gt; historyActivityIds,String activityId)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; historyActivityIds.size(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (historyActivityIds.get(i).equals(activityId))&#123;</span><br><span class="line">				<span class="keyword">if</span> (historyActivityIds.size()-<span class="number">1</span>==i)&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> historyActivityIds.get(i+<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti自定义流程设计器用户简单属性V5.21</title>
    <url>/2020/05/22/Activiti/Activiti%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B5%81%E7%A8%8B%E8%AE%BE%E8%AE%A1%E5%99%A8%E7%AE%80%E5%8D%95%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h2 id="编辑stencilset-json文件"><a href="#编辑stencilset-json文件" class="headerlink" title="编辑stencilset.json文件"></a>编辑stencilset.json文件</h2><p>在集成activiti的流程会绘制工具后，在resource下会有stencilset.json文件，该文件为BPMN的流程编辑器配置。用于完善和布局整个流程设计器。</p>
<p>以增加一个简单的字符串属性和布尔的勾选属性为例。</p>
<p>已办配置的属性都在用户任务的右侧属性，包括执行人/角色、事件监听器、任务监听器等。我们只需要在文件中所搜索。其格式为一个json字符串</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">,&#123;</span><br><span class="line">    &quot;name&quot; : &quot;tasklistenerspackage&quot;,</span><br><span class="line">    &quot;properties&quot; : [ &#123;</span><br><span class="line">      &quot;id&quot; : &quot;tasklisteners&quot;,</span><br><span class="line">      &quot;type&quot; : &quot;multiplecomplex&quot;,</span><br><span class="line">      &quot;title&quot; : &quot;任务监听器&quot;,</span><br><span class="line">      &quot;value&quot; : &quot;&quot;,</span><br><span class="line">      &quot;description&quot; : &quot;Listeners for a user task&quot;,</span><br><span class="line">      &quot;popular&quot; : true</span><br><span class="line">    &#125; ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>在后面增加如下配置:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;nodewarndaypackage&quot;</span>,</span><br><span class="line"><span class="attr">&quot;properties&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;nodewarnday&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;String&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;警告天数&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;当前任务节点剩余天数警告阙值&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;popular&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;isreplypackage&quot;</span>,</span><br><span class="line"><span class="attr">&quot;properties&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;isreply&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Boolean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;批复文件&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;value&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;是否需要上传批复文件&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;popular&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上配置中,name只在stencilset.json文件中使用，</p>
<ul>
<li>id属性为表示属性，部署时解析值需要用到 json转BpmnModel</li>
<li>type为值类型，String或Boolean</li>
<li>value为默认值</li>
<li>description为默认描述</li>
<li>popular是否显示使用</li>
</ul>
<p>配置完基础属性后，找到UserTask，在UserTask里加入这两个配置。</p>
<p>搜索<code>&quot;title&quot; : &quot;用户活动&quot;,</code>找到<code>propertyPackages</code>属性,在数组后面合适的位置，把两个name值放进去。</p>
<p>重启项目可以看到这两个在用户任务右边显示了。</p>
<p>自定义属性在部署模型的属性需要自己解析，导出bpmn20.xml、流程定义转模型的时候也需要把自定义属性转json或转BpmnModel。因此需要自定义UserTaskJsonConverter类继承UserTaskJsonConverter类</p>
<h2 id="解析自定义用户属性"><a href="#解析自定义用户属性" class="headerlink" title="解析自定义用户属性"></a>解析自定义用户属性</h2><p>创建类继承UserTaskJsonConverter并实现StencilConstants接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CustomUserTaskJsonConverter extends UserTaskJsonConverter implements StencilConstants</span><br></pre></td></tr></table></figure>

<h3 id="重写UserTaskJsonConverter类的实现方法"><a href="#重写UserTaskJsonConverter类的实现方法" class="headerlink" title="重写UserTaskJsonConverter类的实现方法"></a>重写UserTaskJsonConverter类的实现方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillTypes</span><span class="params">(Map&lt;String, Class&lt;? extends BaseBpmnJsonConverter&gt;&gt; convertersToBpmnMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Map&lt;Class&lt;? extends BaseElement&gt;, Class&lt;? extends BaseBpmnJsonConverter&gt;&gt; convertersToJsonMap)</span> </span>&#123;</span><br><span class="line">    fillJsonTypes(convertersToBpmnMap);</span><br><span class="line">    fillBpmnTypes(convertersToJsonMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillJsonTypes</span><span class="params">(Map&lt;String, Class&lt;? extends BaseBpmnJsonConverter&gt;&gt; convertersToBpmnMap)</span> </span>&#123;</span><br><span class="line">    convertersToBpmnMap.put(STENCIL_TASK_USER, CustomUserTaskJsonConverter.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillBpmnTypes</span><span class="params">(Map&lt;Class&lt;? extends BaseElement&gt;, Class&lt;? extends BaseBpmnJsonConverter&gt;&gt; convertersToJsonMap)</span> </span>&#123;</span><br><span class="line">    convertersToJsonMap.put(UserTask.class, CustomUserTaskJsonConverter.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重写convertJsonToElement方法"><a href="#重写convertJsonToElement方法" class="headerlink" title="重写convertJsonToElement方法"></a>重写convertJsonToElement方法</h3><p>该方法是把流程设计器编辑完成后模型json结果文件转为BpmnModel</p>
<p>也就是说，把json中自定义的属性转换完成后，就可以通过在部署的时候，获取模型BpmnModel的FlowElements，获取自己的属性，插入到自己定义的表中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//预警天数</span></span><br><span class="line">String nodeWarnDay = <span class="keyword">this</span>.getProperty(<span class="string">&quot;nodewarnday&quot;</span>, elementNode).toString();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(nodeWarnDay)) &#123;</span><br><span class="line">    CustomProperty nodeWarnProperty = <span class="keyword">new</span> CustomProperty();</span><br><span class="line">    nodeWarnProperty.setName(<span class="string">&quot;nodeWarnDay&quot;</span>);</span><br><span class="line">    nodeWarnProperty.setSimpleValue(nodeWarnDay.replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    userTask.getCustomProperties().add(nodeWarnProperty);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isReply = <span class="keyword">this</span>.getProperty(<span class="string">&quot;isreply&quot;</span>, elementNode).asBoolean(<span class="keyword">false</span>);</span><br><span class="line">CustomProperty replyProperty = <span class="keyword">new</span> CustomProperty();</span><br><span class="line">replyProperty.setName(<span class="string">&quot;isReply&quot;</span>);</span><br><span class="line">replyProperty.setSimpleValue(isReply ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>);</span><br><span class="line">userTask.getCustomProperties().add(replyProperty);</span><br></pre></td></tr></table></figure>

<p>此处的获取直接获取的就是id值nodewarnday，而第五行的设置名称就是等到FlowElements循环时获取的属性名。</p>
<h3 id="重写convertElementToJson方法"><a href="#重写convertElementToJson方法" class="headerlink" title="重写convertElementToJson方法"></a>重写convertElementToJson方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">convertElementToJson</span><span class="params">(ObjectNode propertiesNode, BaseElement baseElement)</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>该方法是BpmnModel的FlowElements转为json时的转换方法。其实这两个方法在继承的<code>UserTaskJsonConverter</code>类里就有UserTask自己定义的实现，可以进行参考。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserTask userTask = (UserTask) baseElement;</span><br><span class="line">Map&lt;String, List&lt;ExtensionElement&gt;&gt; extensionElements = userTask.getExtensionElements();</span><br><span class="line"></span><br><span class="line">List&lt;ExtensionElement&gt; nodeWarnDay = extensionElements.get(<span class="string">&quot;nodeWarnDay&quot;</span>);</span><br><span class="line">propertiesNode.put(<span class="string">&quot;nodewarnday&quot;</span>, nodeWarnDay.get(<span class="number">0</span>).getElementText());</span><br><span class="line"></span><br><span class="line">List&lt;ExtensionElement&gt; isreply = extensionElements.get(<span class="string">&quot;isReply&quot;</span>);</span><br><span class="line">propertiesNode.put(<span class="string">&quot;isreply&quot;</span>, isreply.get(<span class="number">0</span>).getElementText());</span><br></pre></td></tr></table></figure>

<p>getExtensionElements();就是获取拓展属性。在你导出为bpmn20.xml的时候就会有UserTask的子元素extensionElements，这个元素里面的子元素就是自己定义的属性。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sjghk&quot;</span> <span class="attr">name</span>=<span class="string">&quot;初审&quot;</span> <span class="attr">activiti:candidateGroups</span>=<span class="string">&quot;sjghk&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">documentation</span>&gt;</span>初审<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activiti:nodetask</span>&gt;</span>&lt;![CDATA[&#123;&quot;node&quot;:&#123;&quot;tasks&quot;:[&#123;&quot;value&quot;:&quot;收件表&quot;,&quot;readOnly&quot;:&quot;2&quot;,&quot;id&quot;:&quot;3d0a167ae1534fb387425a35611ca284&quot;,&quot;$$hashKey&quot;:&quot;0NH&quot;,&quot;mode&quot;:&quot;read&quot;&#125;,&#123;&quot;value&quot;:&quot;审核表&quot;,&quot;readOnly&quot;:&quot;1&quot;,&quot;id&quot;:&quot;913ba193d6dc4d08be168c2c2c22ae9f&quot;,&quot;$$hashKey&quot;:&quot;0NK&quot;,&quot;mode&quot;:&quot;read&quot;&#125;]&#125;&#125;]]&gt;<span class="tag">&lt;/<span class="name">activiti:nodetask</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activiti:nodeDay</span>&gt;</span>&lt;![CDATA[2]]&gt;<span class="tag">&lt;/<span class="name">activiti:nodeDay</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activiti:nodeWarnDay</span>&gt;</span>&lt;![CDATA[1]]&gt;<span class="tag">&lt;/<span class="name">activiti:nodeWarnDay</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activiti:isReply</span>&gt;</span>&lt;![CDATA[0]]&gt;<span class="tag">&lt;/<span class="name">activiti:isReply</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>从xml里可以看到，一般定义的简单属性只有通过CDATA括起来的数组，因此简单的属性,String类型直接就get(0)即可获得到文本<code>nodeWarnDay.get(0).getElementText()</code>，对于nodetask的复杂对象，在jackson2.8.6版本里，可以直接通过<code>objectMapper.readTree(elementText);</code>来读取成JsonNode的,然后把jsonNode放入propertiesNode中,但是在2.8里就已经被标注未来弃用了。这个方法可以再后来的版本找可以替换的方法。</p>
<h2 id="读取保存的属性"><a href="#读取保存的属性" class="headerlink" title="读取保存的属性"></a>读取保存的属性</h2><h3 id="引入转换器"><a href="#引入转换器" class="headerlink" title="引入转换器"></a>引入转换器</h3><p>在使用BpmnJsonConverter对象，转换成BpmnModel前添加引入转换器map的代码，也就是咱们自定义的用户任务转换器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CustomBpmnJsonConverter.getConvertersToBpmnMap().put(<span class="string">&quot;UserTask&quot;</span>, CustomUserTaskJsonConverter.class);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomBpmnJsonConverter</span> <span class="keyword">extends</span> <span class="title">BpmnJsonConverter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过继承开放convertersToJsonMap的访问</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Class&lt;? extends BaseElement&gt;, Class&lt;? extends BaseBpmnJsonConverter&gt;&gt; getConvertersToJsonMap()&#123;</span><br><span class="line">        <span class="keyword">return</span> convertersToJsonMap;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//通过继承开放convertersToJsonMap的访问</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Class&lt;? extends BaseBpmnJsonConverter&gt;&gt; getConvertersToBpmnMap()&#123;</span><br><span class="line">        <span class="keyword">return</span> convertersToBpmnMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该类有两个方法，获取bpmn转json的转换器map，和json转bpmn的转换器map。在这里只需要获取转bpmn的map，并将定义的自定义转换器put进去。如果要是用转josn的就使用此方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CustomBpmnJsonConverter.getConvertersToJsonMap().put(UserTask.class, CustomUserTaskJsonConverter.class);</span><br></pre></td></tr></table></figure>

<p>如果不清楚该方法需要那种转换器，可以将两行代码都放过去。</p>
<h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><p>在部署完流程之后，process类的getFlowElements方法可以获取所有元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BpmnModel model = repositoryService.getBpmnModel(processDefinition.getId());</span><br><span class="line">Collection&lt;FlowElement&gt; flowElements = model.getMainProcess().getFlowElements();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(FlowElement e : flowElements) &#123;</span><br><span class="line">	<span class="keyword">if</span>(e <span class="keyword">instanceof</span> UserTask) &#123;</span><br><span class="line">		UserTask userTask = (UserTask)e;</span><br><span class="line">		Map&lt;String, List&lt;ExtensionElement&gt;&gt; extensionElements = userTask.getExtensionElements();</span><br><span class="line">		<span class="keyword">for</span>(String key : extensionElements.keySet()) &#123;</span><br><span class="line">			List&lt;ExtensionElement&gt; list2 = extensionElements.get(key);</span><br><span class="line">			<span class="keyword">for</span> (ExtensionElement et : list2) &#123;</span><br><span class="line">				String node = et.getElementText();</span><br><span class="line">				<span class="keyword">if</span> (<span class="string">&quot;nodeWarnDay&quot;</span>.equals(key))&#123;</span><br><span class="line">					<span class="keyword">if</span> (StringUtils.isBlank(node))&#123;</span><br><span class="line">						node = taskProperty.getNodeTime();</span><br><span class="line">					&#125;</span><br><span class="line">					taskProperty.setWarnTime(node);</span><br><span class="line">					<span class="keyword">if</span> (Long.parseLong(taskProperty.getWarnTime())&gt;Long.parseLong(taskProperty.getNodeTime()))&#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;预警天数不能大于节点天数&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在如上代码中，首先判断flowElements是否是UserTask，如果看bpmn20.xml可以完全的看出来</p>
<img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/TIM%E6%88%AA%E5%9B%BE20200523170140.png" style="zoom:70%;" />

]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti获取当前节点的上下并行网关V5.21</title>
    <url>/2020/05/22/Activiti/Activiti%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%8A%E4%B8%8B%E5%B9%B6%E8%A1%8C%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<p>并行网关的获取，不光是并行网关，包括其他网关和用户任务。向上获取、向下获取从流程定义中获取。</p>
<p>流程定义有activities方法，包含了所有的activity活动,每个活动都有一组<code>PvmTransition</code>实例，getDestination方法可表示其流向的目的地<code>PvmActivity</code>，他是activityImpl的实现接口。pvm好像在后续版本没有了，但是获取所有的activites和流向对象一定有其他类和方法代替。</p>
<p>以一个简单的并行阶段为例，上下均为开始结束并行网关，中间为3个并行节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProcessDefinitionEntity definitionEntity = (ProcessDefinitionEntity) ((RepositoryServiceImpl) repositoryService)</span><br><span class="line">				.getDeployedProcessDefinition(processInstance.getProcessDefinitionId());</span><br><span class="line">List&lt;ActivityImpl&gt; activitiList = definitionEntity.getActivities();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; activitiList.size(); i++) &#123;</span><br><span class="line">	ActivityImpl activity = activitiList.get(i);</span><br><span class="line"></span><br><span class="line">	List&lt;PvmTransition&gt; outgoingTransitions = activity.getOutgoingTransitions();</span><br><span class="line">	<span class="keyword">if</span> (outgoingTransitions.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		Object type = activity.getProperty(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (type!=<span class="keyword">null</span> &amp;&amp; <span class="string">&quot;parallelGateway&quot;</span>.equals(type.toString())) &#123;</span><br><span class="line">			<span class="keyword">for</span> (PvmTransition outgoingTransition : outgoingTransitions) &#123;</span><br><span class="line">				String id = outgoingTransition.getDestination().getId();</span><br><span class="line">				<span class="keyword">if</span> (id.equals(activityId) &amp;&amp; PARALLE.equals(type.toString())) &#123;</span><br><span class="line">					<span class="keyword">return</span> activity.getId();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>getActivities获取当前流程定义的所有活动，获取当前activityImpl的PvmTransition,它可以得到目标activity，如果某个PvmTransition的目标是要找的东西，那么当前循环的activity就是要找的了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (ActivityImpl activity : activitiList) &#123;</span><br><span class="line">	<span class="keyword">if</span> (activity.getId().equals(activityId))&#123;</span><br><span class="line">		List&lt;PvmTransition&gt; outgoingTransitions = activity.getOutgoingTransitions();</span><br><span class="line">		<span class="keyword">if</span> (outgoingTransitions.size()==<span class="number">1</span>)&#123;</span><br><span class="line">			PvmActivity destination = outgoingTransitions.get(<span class="number">0</span>).getDestination();</span><br><span class="line">			Object type = destination.getProperty(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (type!=<span class="keyword">null</span> &amp;&amp; <span class="string">&quot;parallelGateway&quot;</span>.equals(type.toString()))&#123;</span><br><span class="line">				<span class="keyword">return</span> destination.getId();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而向下找，那就是destination目标activity与期望的一样，即获得其id。</p>
<p>虽然描述不太明确。但主要的方式就是<code>getOutgoingTransitions</code>和<code>getDestination</code>。</p>
<p>向上和向下，一个获取当前循环的对象id，一个获取当前循环的某个pvm流出目标destination的id</p>
]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Go基础</title>
    <url>/2020/04/19/Go/Go%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> <span class="comment">//声明变量a</span></span><br><span class="line">a = <span class="number">10</span><span class="comment">//变量a赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">10</span><span class="comment">//定义并初始化赋值</span></span><br><span class="line"></span><br><span class="line">a := <span class="number">10</span>	<span class="comment">//无var声明直接赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n1, n2, n3 <span class="keyword">int</span> <span class="comment">//声明多个变量int类型</span></span><br><span class="line"><span class="keyword">var</span> n1, name, n2 = <span class="number">100</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">888</span> <span class="comment">//多个初始化并按顺序赋值</span></span><br><span class="line">n1, name, n2 := <span class="number">100</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">888</span> <span class="comment">//无声明初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量声明</span></span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">    n1 = <span class="number">100</span></span><br><span class="line">    n2 = <span class="string">&quot;name&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>基本数据类型</strong></p>
<ul>
<li>数值型<ul>
<li>(有符号)int、int8、int16、int32、int64、(无符号,范围大)uint、uint8、uint16、uint32、uint64、byte</li>
<li>float32、float64</li>
</ul>
</li>
<li>字符型: byte保存单个字母字符。没有明确的类型</li>
<li>布尔类型: bool</li>
<li>字符串类型: string, (基本数据类型)</li>
</ul>
<h3 id="有符号int-类型"><a href="#有符号int-类型" class="headerlink" title="有符号int 类型"></a>有符号int 类型</h3><table>
<thead>
<tr>
<th>int8</th>
<th>$- 2^7$ ~ $2^7-1$</th>
</tr>
</thead>
<tbody><tr>
<td>int16</td>
<td>$-2^{15}$ ~ $2^{15}-1$</td>
</tr>
<tr>
<td>int32</td>
<td>$-2^{31}$~ $2^{31}-1$</td>
</tr>
<tr>
<td>int64</td>
<td>$-2^{63}$~ $2^{63}-1$</td>
</tr>
</tbody></table>
<h3 id="无符号unit类型"><a href="#无符号unit类型" class="headerlink" title="无符号unit类型"></a>无符号unit类型</h3><table>
<thead>
<tr>
<th>uint8</th>
<th>0 ~ $2^8$</th>
</tr>
</thead>
<tbody><tr>
<td>uint16</td>
<td>0 ~ $2^{16}$</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<p><strong>派生类型/复杂类型</strong></p>
<ul>
<li>指针 pointer</li>
<li>数组</li>
<li>结构体 struct</li>
<li>管道 Channel</li>
<li>函数</li>
<li>切片 slice</li>
<li>接口 interface</li>
<li>map</li>
</ul>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装常用镜像操作</title>
    <url>/2020/04/12/Docker/Docker%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="创建虚拟网卡"><a href="#创建虚拟网卡" class="headerlink" title="创建虚拟网卡"></a>创建虚拟网卡</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker network create 网卡别名 --subnet 192.168.137.0&#x2F;24</span><br></pre></td></tr></table></figure>

<p>设置网卡别名，<code>--subnet</code>后为网段，例如192.168.0.0/24</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure>

<h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><ol>
<li><p>pull最新镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis --restart always -p 6379:6379 -v /home/centos/spring/redis/config:/etc/redis -v /home/centos/spring/redis/data:/data --net docker-nat --ip 192.168.0.63 redis redis-server /etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure>

<ul>
<li>–restart always 表示启动失败，总是重新尝试</li>
<li>-p 表示映射端口</li>
<li>-v 表示将/etc/redis映射到本机的/home/centos/spring/redis/config,以及数据data映射到本地</li>
<li>–net docker-nat –ip 192.168.0.63 表示为容器指定网卡并赋予ip，此处可以不需要</li>
<li>redis 表示是当前镜像名称，没有版本号</li>
<li>redis-server /etc/redis/redis.conf 表示以指定配置文件方式启动redis-server</li>
<li>–appendonly yes 表示开启持久化</li>
</ul>
</li>
<li><p>查看日志，可能会出现没有找到redis.conf的问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker logs contains_id</span><br></pre></td></tr></table></figure>

<p>从官网下载一个<a href="http://download.redis.io/redis-stable/redis.conf">标准配置文件</a>,将配置文件放到指定的/home/centos/spring/redis/config下。并修改配置文件:</p>
<ul>
<li>修改bind为0.0.0.0</li>
<li>修改protected-mode 为 no</li>
<li>修改 daemonize 为 no 关闭守护进程方式启动,改为yes时以外部文件启动方式会失效</li>
</ul>
</li>
<li><p>因为配置过restart always,所以配置正确好，自动重启就启动成功了。通过<code>docker inspect container_id</code>查看容器信息。</p>
</li>
</ol>
<p><strong>如果出现<code>FATAL CONFIG FILE ERROR ：Bad directive or wrong number of arguments</code>的报错信息？</strong></p>
<p>请检查当前提示的配置项是否有尾行注释。否则确认当前镜像版本与redis.conf配置文件的版本是否匹配，出现高版本新增属性或已删除属性等。</p>
<h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><ol>
<li><p>拉取镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">--net docker-nat --ip 192.168.0.33 \</span><br><span class="line">--restart always \</span><br><span class="line">-v &#x2F;home&#x2F;centos&#x2F;spring&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql \</span><br><span class="line">-v &#x2F;home&#x2F;centos&#x2F;spring&#x2F;mysql&#x2F;logs:&#x2F;var&#x2F;log&#x2F;mysql \</span><br><span class="line">-v &#x2F;home&#x2F;centos&#x2F;spring&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>
</li>
<li><p>无法访问mysql的问题，可访问此站点<a href="https://www.cnblogs.com/sablier/p/11605606.html">查看</a></p>
</li>
</ol>
<h2 id="安装postgres"><a href="#安装postgres" class="headerlink" title="安装postgres"></a>安装postgres</h2><ol>
<li><p>拉取镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull postgres:11</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name some-postgres \</span><br><span class="line">-v /usr/local/kjgh/postgres/data:/var/lib/postgresql/data \</span><br><span class="line">-p 5432:5432 \</span><br><span class="line">--shm-size=256MB \</span><br><span class="line">-e POSTGRES_PASSWORD=postgres -d postgres:11.8 \</span><br><span class="line">-c &#x27;max_connections=10000&#x27;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="安装nacos"><a href="#安装nacos" class="headerlink" title="安装nacos"></a>安装nacos</h2><ol>
<li><p>拉取镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入nacos-mysql.sql表文件 <code>https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> nacos;</span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`config_info`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  <span class="string">`data_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  <span class="string">`group_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`content`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  <span class="string">`md5`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  <span class="string">`gmt_create`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="string">`gmt_modified`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="string">`src_user`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  <span class="string">`src_ip`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="string">`app_name`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`tenant_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="string">`c_desc`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`c_use`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`effect`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`type`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`c_schema`</span> <span class="built_in">text</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`uk_configinfo_datagrouptenant`</span> (<span class="string">`data_id`</span>,<span class="string">`group_id`</span>,<span class="string">`tenant_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin <span class="keyword">COMMENT</span>=<span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`config_info_aggr`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  <span class="string">`data_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  <span class="string">`group_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  <span class="string">`datum_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  <span class="string">`content`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  <span class="string">`gmt_modified`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="string">`app_name`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`tenant_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`uk_configinfoaggr_datagrouptenantdatum`</span> (<span class="string">`data_id`</span>,<span class="string">`group_id`</span>,<span class="string">`tenant_id`</span>,<span class="string">`datum_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin <span class="keyword">COMMENT</span>=<span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`config_info_beta`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  <span class="string">`data_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  <span class="string">`group_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  <span class="string">`app_name`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  <span class="string">`content`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  <span class="string">`beta_ips`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  <span class="string">`md5`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  <span class="string">`gmt_create`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="string">`gmt_modified`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="string">`src_user`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  <span class="string">`src_ip`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="string">`tenant_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`uk_configinfobeta_datagrouptenant`</span> (<span class="string">`data_id`</span>,<span class="string">`group_id`</span>,<span class="string">`tenant_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin <span class="keyword">COMMENT</span>=<span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`config_info_tag`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  <span class="string">`data_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  <span class="string">`group_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  <span class="string">`tenant_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  <span class="string">`tag_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  <span class="string">`app_name`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  <span class="string">`content`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  <span class="string">`md5`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  <span class="string">`gmt_create`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="string">`gmt_modified`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="string">`src_user`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  <span class="string">`src_ip`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`uk_configinfotag_datagrouptenanttag`</span> (<span class="string">`data_id`</span>,<span class="string">`group_id`</span>,<span class="string">`tenant_id`</span>,<span class="string">`tag_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin <span class="keyword">COMMENT</span>=<span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`config_tags_relation`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  <span class="string">`tag_name`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  <span class="string">`tag_type`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  <span class="string">`data_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  <span class="string">`group_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  <span class="string">`tenant_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  <span class="string">`nid`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`nid`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`uk_configtagrelation_configidtag`</span> (<span class="string">`id`</span>,<span class="string">`tag_name`</span>,<span class="string">`tag_type`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_tenant_id`</span> (<span class="string">`tenant_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin <span class="keyword">COMMENT</span>=<span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`group_capacity`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  <span class="string">`group_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  <span class="string">`quota`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  <span class="string">`usage`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  <span class="string">`max_size`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  <span class="string">`max_aggr_count`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  <span class="string">`max_aggr_size`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  <span class="string">`max_history_count`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  <span class="string">`gmt_create`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="string">`gmt_modified`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`uk_group_id`</span> (<span class="string">`group_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin <span class="keyword">COMMENT</span>=<span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`his_config_info`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">64</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`nid`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`data_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`group_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`app_name`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  <span class="string">`content`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`md5`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`gmt_create`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`gmt_modified`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`src_user`</span> <span class="built_in">text</span>,</span><br><span class="line">  <span class="string">`src_ip`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`op_type`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`tenant_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`nid`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_gmt_create`</span> (<span class="string">`gmt_create`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_gmt_modified`</span> (<span class="string">`gmt_modified`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_did`</span> (<span class="string">`data_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin <span class="keyword">COMMENT</span>=<span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tenant_capacity`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  <span class="string">`tenant_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  <span class="string">`quota`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  <span class="string">`usage`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  <span class="string">`max_size`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  <span class="string">`max_aggr_count`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  <span class="string">`max_aggr_size`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  <span class="string">`max_history_count`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  <span class="string">`gmt_create`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="string">`gmt_modified`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`uk_tenant_id`</span> (<span class="string">`tenant_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin <span class="keyword">COMMENT</span>=<span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tenant_info`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  <span class="string">`kp`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  <span class="string">`tenant_id`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  <span class="string">`tenant_name`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  <span class="string">`tenant_desc`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  <span class="string">`create_source`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  <span class="string">`gmt_create`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="string">`gmt_modified`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`uk_tenant_info_kptenantid`</span> (<span class="string">`kp`</span>,<span class="string">`tenant_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_tenant_id`</span> (<span class="string">`tenant_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin <span class="keyword">COMMENT</span>=<span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line">	<span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">	<span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	<span class="string">`enabled`</span> <span class="built_in">boolean</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`roles`</span> (</span><br><span class="line">	<span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	<span class="string">`role`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	<span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`idx_user_role`</span> (<span class="string">`username`</span> <span class="keyword">ASC</span>, <span class="string">`role`</span> <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`permissions`</span> (</span><br><span class="line">    <span class="string">`role`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`resource`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`action`</span> <span class="built_in">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`uk_role_permission`</span> (<span class="string">`role`</span>,<span class="string">`resource`</span>,<span class="string">`action`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (username, <span class="keyword">password</span>, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">roles</span> (username, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>使用mysql持久化 单击部署nacos</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name nacos \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=192.168.124.13 \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=root \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d nacos/nacos-server:1.3.0</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="Gitea开源git安装"><a href="#Gitea开源git安装" class="headerlink" title="Gitea开源git安装"></a>Gitea开源git安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --privileged&#x3D;true --restart&#x3D;always --name&#x3D;gitea -p 10022:22 -p 10080:3000 -v &#x2F;home&#x2F;chen&#x2F;docker&#x2F;data&#x2F;gitea&#x2F;data:&#x2F;data gitea&#x2F;gitea:latest</span><br></pre></td></tr></table></figure>

<h2 id="activemq安装"><a href="#activemq安装" class="headerlink" title="activemq安装"></a>activemq安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull rmohr/activemq:5.15.9-alpine</span><br></pre></td></tr></table></figure>

<p>将容器内的conf和data中的目录初始化到宿主机，以便更改，且容器启动后直接读取。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --user root --rm -ti \</span><br><span class="line">  -v /your/persistent/dir/conf:/mnt/conf \</span><br><span class="line">  -v /your/persistent/dir/data:/mnt/data \</span><br><span class="line">  rmohr/activemq:5.15.9-alpine /bin/sh</span><br></pre></td></tr></table></figure>

<p><code>/your/persistent/dir</code>改成自己的activemq数据存储目录</p>
<p>执行此命令后会进入容器内，执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown activemq:activemq /mnt/conf</span><br><span class="line">chown activemq:activemq /mnt/data</span><br><span class="line">cp -a /opt/activemq/conf/* /mnt/conf/</span><br><span class="line">cp -a /opt/activemq/data/* /mnt/data/</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>exit会退出容器。随后在指定的目录下就会有conf和data目录数据。</p>
<p>挂载配置目录启动容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name activemq \</span><br><span class="line">--restart=always \</span><br><span class="line">-p 8161:8161 \</span><br><span class="line">-p 61616:61616 \</span><br><span class="line">-p 1093:1093 \</span><br><span class="line">-v /data/activemq/data:/opt/activemq/data \</span><br><span class="line">-v /data/activemq/conf:/opt/activemq/conf \</span><br><span class="line">rmohr/activemq:5.15.9-alpine</span><br></pre></td></tr></table></figure>

<h2 id="openoffice安装"><a href="#openoffice安装" class="headerlink" title="openoffice安装"></a>openoffice安装</h2><h2 id="JDK基础镜像构建"><a href="#JDK基础镜像构建" class="headerlink" title="JDK基础镜像构建"></a>JDK基础镜像构建</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="comment"># 替换清华alpine源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> -e <span class="string">&quot;https://mirror.tuna.tsinghua.edu.cn/alpine/v3.9/main\nhttps://mirror.tuna.tsinghua.edu.cn/alpine/v3.9/community&quot;</span> &gt; /etc/apk/repositories</span></span><br><span class="line"><span class="comment"># 安装tini</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add tini --no-cache</span></span><br><span class="line"><span class="comment"># 安装字体库资源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --update ttf-dejavu fontconfig &amp;&amp; rm -rf /var/cache/apk/*</span></span><br><span class="line"><span class="comment"># 设置时区时间</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add tzdata &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp;  <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; apk del tzdata</span></span><br><span class="line"><span class="comment"># 拷贝arthas</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=hengyunabc/arthas:latest /opt/arthas /opt/arthas</span></span><br><span class="line"><span class="comment"># 添加宋体字体</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./SIMSUN.TTC /usr/share/fonts/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/sbin/tini&quot;</span>, <span class="string">&quot;--&quot;</span>]</span></span><br></pre></td></tr></table></figure>





<h2 id="防火墙开放端口"><a href="#防火墙开放端口" class="headerlink" title="防火墙开放端口"></a>防火墙开放端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">centos7</span></span><br><span class="line">firewall-cmd --zone=public --add-port=5432/tcp --permanent</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>谷粒商城项目基础部分说明</title>
    <url>/2020/04/12/SpringCloud/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h2 id="Docker安装redis和mysql操作"><a href="#Docker安装redis和mysql操作" class="headerlink" title="Docker安装redis和mysql操作"></a>Docker安装redis和mysql操作</h2><p>略</p>
<h2 id="项目搭建初始化"><a href="#项目搭建初始化" class="headerlink" title="项目搭建初始化"></a>项目搭建初始化</h2><h3 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h3><p>将资料里的数据库脚本拷贝到sqlyog里，执行。确实是得拷贝过去，拖过去确实有问题。</p>
<p>数据库的5个库依次创建到docker mysql中即可。</p>
<h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><p>按照视频说明，在码云创建仓库，通过idea clone下来，然后创建子模块</p>
<ul>
<li>gulimall-product：商品服务</li>
<li>gulimall-coupon：优惠券</li>
<li>gulimall-order：订单</li>
<li>gulimall-ware：仓储</li>
<li>gulimall-member：会员</li>
</ul>
<p>创建模块时使用spring Initializr,使用spring的创建路径，不建议使用<a href="https://start.aliyun.com/">aliyun</a>的，如果你访问不了是spring的话就用这个吧。在创建coupon这个模块时会创建失败，只出现unknow文件，淘宝网的html页面。</p>
<p>在创建时选择spring web和openfeign两个依赖即可。</p>
<p>RunDashboard在最新版IDEA中已经改为services了。可以再workspacec.xml中添加组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;RunDashboard&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;configurationTypes&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;SpringBootApplicationConfigurationType&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者在Run configuration运行配置界面，复制一个启动类项，保存，右下角会出现提示RunDashboard，点击显示就好。</p>
<h4 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h4><p>在码云的人人开源下载<a href="https://gitee.com/renrenio/renren-fast">基础项目</a>和<a href="https://gitee.com/renrenio/renren-generator">代码生成项目</a></p>
<p>将基础项目和代码生成项目都整合到系统中，使用module作为子模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;gulimall-product&lt;&#x2F;module&gt;</span><br><span class="line">    &lt;module&gt;gulimall-ware&lt;&#x2F;module&gt;</span><br><span class="line">    &lt;module&gt;gulimall-coupon&lt;&#x2F;module&gt;</span><br><span class="line">    &lt;module&gt;gulimall-member&lt;&#x2F;module&gt;</span><br><span class="line">    &lt;module&gt;gulimall-order&lt;&#x2F;module&gt;</span><br><span class="line">    &lt;module&gt;gulimall-common&lt;&#x2F;module&gt;</span><br><span class="line">    &lt;module&gt;renren-fast&lt;&#x2F;module&gt;</span><br><span class="line">    &lt;module&gt;renren-generator&lt;&#x2F;module&gt;</span><br><span class="line">&lt;&#x2F;modules&gt;</span><br></pre></td></tr></table></figure>

<p>使用代码生成系统生成各个模块的代码。主要修改<strong>yml文件的数据库连接</strong>，然后到generator.properties中修改如下信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mainPath</span>=<span class="string">com.chen.gulimall</span></span><br><span class="line"><span class="comment">#包名</span></span><br><span class="line"><span class="attr">package</span>=<span class="string">com.chen.gulimall</span></span><br><span class="line"><span class="attr">moduleName</span>=<span class="string">member</span></span><br><span class="line"><span class="comment">#作者</span></span><br><span class="line"><span class="attr">author</span>=<span class="string">xxx</span></span><br><span class="line"><span class="comment">#Email</span></span><br><span class="line"><span class="attr">email</span>=<span class="string">xxx</span></span><br><span class="line"><span class="comment">#表前缀(类名不会包含表前缀)</span></span><br><span class="line"><span class="attr">tablePrefix</span>=<span class="string">ums_</span></span><br></pre></td></tr></table></figure>

<p>mainPath建议写全和包名是一样的，不能少gulimall，否则生成代码要依赖common的时候没有gulimall就跟当前模块规则不符了。</p>
<p>将生成的包解压，把main放入对应的src里就好了。删除vue的目录，现在还不需要。</p>
<p>因为需要common的util的相关类，因此要创建gulimall-common模块。把对应需要的类从renren-fast中拷贝到common中。不要多拷，会造成web的依赖的。缺哪个拷哪个。这个是引入的依赖，不多不少即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chen.gulimall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chen.gulimall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>gulimall-common<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>通用模块<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所有代码生成后，解决完了依赖后。可以配置application.yml并进行简单的list测试，一共5个模块，分别加上配置，7000,7100,7200…</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.0.88:3306/gulimall-sms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.chen.gulimall.*.entity</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>



<h3 id="前端初始化"><a href="#前端初始化" class="headerlink" title="前端初始化"></a>前端初始化</h3><p>下载人人开源的开源项目，拷贝到项目下，通过<code>module</code>标签作为子模块。修改数据库连接，启动服务</p>
<p>下载人人开元vue前端项目。尝试启动。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>在安装时可可能出现一下问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Module build failed: Error: ENOENT: no such file or directory, scandir &#39;G:\vscode_test\renren-fast-vue\node_modules\node-sass\vendor&#39;</span><br></pre></td></tr></table></figure>

<p>此时需要到node_module文件夹下执行命令即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm rebuild node-sass</span><br></pre></td></tr></table></figure>

<h2 id="SpringCloud-Alibaba配置"><a href="#SpringCloud-Alibaba配置" class="headerlink" title="SpringCloud Alibaba配置"></a>SpringCloud Alibaba配置</h2><h3 id="配置配置中心和注册中心"><a href="#配置配置中心和注册中心" class="headerlink" title="配置配置中心和注册中心"></a>配置配置中心和注册中心</h3><p>首先在common中添加对alibaba的依赖管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="openfeign的说明"><a href="#openfeign的说明" class="headerlink" title="openfeign的说明"></a>openfeign的说明</h3><p>openfeign在项目初始化时，每个模块都添加了依赖，现在可以他放到common中，也可以不放。视频教程中演示，<u>在member模块(会员)中添加couponService Feign，然后添加FeignClient注解，并添加扫描注解</u>。其实一般有的视频在项目搭建有两种方式，一个是把api提取出来，就是把公用实体类和feignAPI放一块成为某个独立的api模块。不过其使用的原理一样，同样是把客户端注解放在接口上，把扫描注解放到调用者上，只不过是通过外部引入api依赖扫描而已。这样会让模块里看起来不会出现其他模块的接口名称。</p>
<h3 id="nacos注册与配置管理"><a href="#nacos注册与配置管理" class="headerlink" title="nacos注册与配置管理"></a>nacos注册与配置管理</h3><p>注册中心与配置中心分为两个依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册发现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置中心--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为所有模块都会用到，所以就放到了common模块里。</p>
<p>此处可分别看到<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config">Nacos-config的配置</a>和<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-discovery">Nacos-discovery的配置</a></p>
<p>不过，这个nacos很坑的是，要配置配置中心和注册中心，就一定要有bootstrap.yml来配置才行。对于discovery的情况，如果不使用bootstrap配置，则访问的就是localhost的，尽管配置server-addr也不行。所有的模块可能都需要注册活配置，也不能每个里面都有bootstrap啊，<strong>不过可以把nacos配置放到common的bootstrap里。这样别的模块就不用了定义了。可以自己配置自己的属性了</strong></p>
<p>例如：在common下创建bootstrap.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.199</span><span class="number">.220</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure>

<p>然后再renren-fast引入common的依赖，然后在自己的application.yml中配置它自己的信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">renren-fast</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">nacos:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">namespace:</span> <span class="string">b80c6dc3-5104-4f69-be53-8c17b14c53ed</span></span><br></pre></td></tr></table></figure>

<p>因为它配的默认环境是dev，所以我们就在namespace命名空间下，创建名为renren-fast-dev.yml配置即可，然后把原来application-dev.yml的配置放到dataId为renren-fast-dev.yml的下面即可。</p>
<p>另外nacos的config和discovery刚开始也没搞明白，配置也差不多。config配置中心就是说把服务的配置交到nacos的配置管理页面进行管理。读取配置会通过config配置的namespace、group、{prefix}-{profile}.{file-extension}来确定某个配置文件，包括使用<code>extension-configs</code>的拓展配置，可进行分框架的配置。</p>
<h3 id="gateway网关"><a href="#gateway网关" class="headerlink" title="gateway网关"></a>gateway网关</h3><p>网关使用，鉴权，限流，路由等等。网关就是所有服务的入口，由网关的route来根据一系列条件判定走那个route。路由到哪个服务。</p>
<p>网关路由的匹配规则是将匹配的路由服务名加上请求的路径。</p>
<p>在举的baidu的例子中，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">baidu</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/hello</span></span><br></pre></td></tr></table></figure>

<p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/#gateway-request-predicates-factories">predicate</a>属性表示断言，当匹配的路径包含/hello路径时，将会路由到uri的路径，然后将/hello拼接到uri后面，因此会说找不到页面。</p>
<p>而·到后面对于renren-fast前端请求api的方式。因为同样会吧api后的路径拼接到<code>uri:lb://renren-fast</code>后面，但因为没有api这一层路径，所以使用<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/#gatewayfilter-factories">filter</a>的方式进行过滤方法是有多种，这个配置是重写路径:RewritePath，相当于路径按表达式替换了。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">baidu</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/hello</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">default</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://renren-fast</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\&#123;segment&#125;</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gulimall-gateway</span></span><br></pre></td></tr></table></figure>

<p>当把默认api请求完成后,请求登录会出现跨域的情况。这里也说明了。只需要如下配置即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuliCorsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsWebFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        CorsConfiguration configuration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        configuration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        configuration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        configuration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        configuration.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/api/**&quot;</span>,configuration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后因为renren-fast已经有配置cors了，所以把CorsConfig里的方法注释掉即可。</p>
<h2 id="商品服务"><a href="#商品服务" class="headerlink" title="商品服务"></a>商品服务</h2><h3 id="商品分类"><a href="#商品分类" class="headerlink" title="商品分类"></a>商品分类</h3><p>商品分类接口</p>
<h2 id="Mybatis-plus"><a href="#Mybatis-plus" class="headerlink" title="Mybatis-plus"></a>Mybatis-plus</h2><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a><a href="https://mp.baomidou.com/guide/logic-delete.html">逻辑删除</a></h3><p>yml配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">flag</span>  <span class="comment">#全局逻辑删除字段值 3.3.0开始支持，详情看下面。</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>

<p>然后再实体类字段上添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic(delval = &quot;0&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer showStatus;</span><br></pre></td></tr></table></figure>

<p>默认注解 大于 全局逻辑删除字段和删除值配置。</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="VSCode用户代码片段"><a href="#VSCode用户代码片段" class="headerlink" title="VSCode用户代码片段"></a>VSCode用户代码片段</h3><p>文件-首选项-用户代码片段</p>
<p>可为当前项目、全局、编程语言新建片段文件。添加后，可进行快捷键提示。</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>通过VMWare制作linux启动U盘</title>
    <url>/2020/04/03/Linux/%E9%80%9A%E8%BF%87VM%20ware%E5%88%B6%E4%BD%9Clinux%E5%90%AF%E5%8A%A8U%E7%9B%98/</url>
    <content><![CDATA[<p><strong>以下方法并不能做启动盘，但做移动系统还是可以的</strong></p>
<h3 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h3><p>本文主要描述的是制作linux自启动u盘，即没有图形页面，直接通过ssh远程操作机器了。因此首先U盘是引导安装或者这个U盘就是一个简易的Linux系统。我们要使用他只需要将u盘插上主板，并将远程ssh将硬盘挂载上即可。</p>
<p>这是第一个方式，第二种就是引导安装，批量自动安装系统。这个实现起来可能会比较复杂，甚至我也没弄好。</p>
<p>对于没有GVA,HDMI等图形输出接口的设备而适用。但首先你确保你的主板是可以直接U盘启动的。理论上是可以的，不过在启动前你需要把硬盘都拔掉。因为没有硬盘设备，只有U盘输入设备，因此应该是直接从U盘启动的。然后再次插上硬盘，顺序应该就没问题了。不过这个U盘不能拔。</p>
<p>材料:</p>
<ul>
<li>16/32GU盘</li>
<li>安装VMWare 软件的笔记本或家用电脑,我用的时15版本，不过配置变更不是太大</li>
<li>linux的ISO镜像文件</li>
</ul>
<p>按标准流程来，创建一个虚拟机</p>
<p>流程:</p>
<ol>
<li>文件</li>
<li>新建虚拟机</li>
<li>自定义</li>
<li>下一步</li>
<li>单选  稍后安装操作系统</li>
<li>下一步</li>
<li>虚拟机名称定义一下，位置定义一下</li>
<li>设置cpu数量和内存</li>
<li>设置网络连接方式为桥接</li>
<li>后面全都默认即可</li>
</ol>
<p>编辑虚拟机，选CD/DVD添加iso镜像。</p>
<p>选择USB控制器，根据你的U盘类型，选择兼容2.0还是3.0，然后勾选显示所有USB输入设备。</p>
<p>启动虚拟机，然后插入U盘到电脑，选择虚拟机-可移动设备-你的U盘，选择连接。然后在设置分区的时候就找到U盘了。</p>
<p>启动服务器，一步步安装。在安装的时候，要配置分区的话。你就需要将分区设置到你的U盘上了。这个在网上搜索centos硬盘分区都能找到怎么配。简要地说一下centos7安装中，可以自定义分区，点一下哪个帮助自定义创建，就都给你弄好了。一般是一个/boot配置为标准分区，文件系统都可以选ext4的，一个/根设为LVM逻辑分区，一个swap交换分区，文件系统选为swap。</p>
<p>等待安装就行了。</p>
<p>安装完后会让重启，可以选择重启，但是起不来，此时你要关闭虚拟机，在菜单栏上关掉。</p>
<p>然后编辑虚拟机设置，点击添加，添加一个硬盘，默认选SCSI即可，选择 使用物理磁盘，然后会有设备选择就是硬盘，一般都是最后一个，可以点击使用单个分区按钮之后点下一步，可以看到容量。来确定是不是U盘。知道是哪个后选择使用整个磁盘的单选按钮。设置磁盘文件默认就好。</p>
<p>然后点菜单 虚拟机-电源-打开电源时进入固件，在boot栏里更换一下U盘在前，通过+号可以向上移。随后F10保存并退出，就直接启动U盘里的系统了，可以再这里操作了。</p>
<p>等把必要的ssh，静态ip等都配置好就可以关闭虚拟机，拿出来使用了。</p>
<p>静态IP的配置</p>
<p>查看ifconfig看看网卡名叫什么，到/etc/sysconfig/network-scripts中找到ifcfg-网卡名即可。添加</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql常用函数</title>
    <url>/2020/03/24/PostgreSQL/Postgresql%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>获取最近一周，一个月，一年的日期函数</p>
<ul>
<li>近一周<br>select now() - interval ‘1 week’;</li>
<li>近一月<br>select now() - interval ‘1 month’;</li>
<li>近一年<br>select now() - interval ‘1 year’;</li>
<li>下一周<br>select now() + interval ‘1 week’;</li>
<li>下一月<br>select now() + interval ‘1 month’;</li>
<li>下一年<br>select now() + interval ‘1 year’;<h3 id="获取指定时间段内的日期列表"><a href="#获取指定时间段内的日期列表" class="headerlink" title="获取指定时间段内的日期列表"></a>获取指定时间段内的日期列表</h3>select to_char(generate_series(‘2018-10-01’::date,’2018-10-25’,’1 day’),’yyyy-mm-dd’);<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> daytime::<span class="built_in">date</span> <span class="keyword">from</span> generate_series(</span><br><span class="line">	(<span class="string">&#x27;2017-06-01&#x27;</span>),		<span class="comment">--查询开始日期（可根据需求调整） </span></span><br><span class="line">	(<span class="keyword">select</span> <span class="keyword">now</span>()::<span class="built_in">date</span>),	<span class="comment">--查询结束日期（可根据需求调整） </span></span><br><span class="line"> 	<span class="string">&#x27;1 day&#x27;</span>			<span class="comment">--间隔（可根据需求调整）</span></span><br><span class="line">) s(daytime)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="日期截断-获取当前日期的年月日"><a href="#日期截断-获取当前日期的年月日" class="headerlink" title="日期截断,获取当前日期的年月日"></a>日期截断,获取当前日期的年月日</h3><p>date_trunc(‘&lt;unit&gt;’,&lt;date&gt;);</p>
<ul>
<li>截取为当天日期<br>select date_trunc(‘day’,now())</li>
<li>截取为当月日期<br>select date_trunc(‘month’,now())</li>
<li>截取小时，即当天0点整合12点整<br>select date_trunc(‘h’,now())<br>select date_trunc(‘h’,to_date(‘2020-02-12 09:00:00’,’YYYY-MM-DD HH24:mi:ss’))</li>
<li>截取分钟，即当前当前分钟整，秒数归零<br>select date_trunc(‘minute’,now())</li>
<li>截取当前季度，以1234位第一季度，当前月为2月则季度获取为1月1日<br>select date_trunc(‘quarter’,now())</li>
</ul>
<p>第二个参数为日期类型，可以使用日期函数，也可以使用<code>date &#39;2020-01-23 12:23:34&#39;</code>的方式表示为一个日期。还可使用time、timestamp、timestamptz定义对应格式的字符串。</p>
<p><strong>interval ‘&lt;number&gt; &lt;unit&gt;’</strong><br>interval表示间隔多少，可以不要这个单词</p>
<ul>
<li>number 表示数量</li>
<li>unit 表示单位,second、minute、hour、day、week、month、quarter、year都可以。</li>
</ul>
<h3 id="截取年月日时分秒"><a href="#截取年月日时分秒" class="headerlink" title="截取年月日时分秒"></a>截取年月日时分秒</h3><p>使用<strong>to_char</strong>函数，可进行截取</p>
<ul>
<li>获取年份,使用YYYY或YY<br>select to_char(date ‘1989-12-12’,’YYYY’)</li>
<li>获取月份MM</li>
<li>获取天DD</li>
<li>获取星期,小写表示星期小写，首字母大写为星期首字母大小，全大写为星期字母全大写<br>select to_char(date ‘1989-12-13’,’day’)</li>
</ul>
<p><strong>extract(&lt;unit&gt; from &lt;date&gt;)</strong><br>该函数表示从date中提取，unit为单位，date为日期时间。但unit中的day表示的是日不是星期</p>
<p><a href="https://www.postgresql.org/docs/10/functions-formatting.html">此处为日期格式化中文官方文档</a></p>
<h2 id="常用逻辑函数"><a href="#常用逻辑函数" class="headerlink" title="常用逻辑函数"></a>常用逻辑函数</h2><h3 id="COALESCE-val-val2-val3"><a href="#COALESCE-val-val2-val3" class="headerlink" title="COALESCE(val,val2[,val3])"></a>COALESCE(val,val2[,val3])</h3><p>该函数表示为空判断，如果val为空则使用val2的值，否则使用val的值。<br>如果3个参数表示，如果不为空使用val3</p>
<h3 id="case-when-then-else-end可使用多条件判断"><a href="#case-when-then-else-end可使用多条件判断" class="headerlink" title="case when then else end可使用多条件判断"></a>case when then else end可使用多条件判断</h3>]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB笔记</title>
    <url>/2020/03/24/MongoDB/MongoDB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Windows安装mongodb，去官网下载windows最新msi版本，在安装时。取消勾选左下角的Install Mongodb compass选项。改选项是数据库的客户端功能句，在安装时会非常非常慢。<br>安装后服务已经默认安装过了，开发服务即可，cmd输入mongo即可进入mongo命令行</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol>
<li>数据库<br>数据仓库，一个mongodb有多个数据库</li>
<li>文档document<br>K-V键值对，类似关系数据库的行，文档中的键/值对顺序是有序的，区分类型和大小写，文档不能有重复的键。<br>键不能有\0(空字符),这个字符表示键的结尾;“.”和$有特别意义，只有在特定环境下才能使用；以下划线”_”开头的键是保留的(不是严格要求的)</li>
<li>集合collection<br>类似关系数据库的表。当第一行文档插入后，集合就被创建。</li>
</ol>
<ul>
<li>集合名不能是空字符串””</li>
<li>集合名不能有\0</li>
<li>集合名不能以system.开头</li>
<li>集合名不能有保留字符</li>
</ul>
<ol start="3">
<li>元数据<br>数据库的信息，存储在集合中，通过<code>数据库名.system.*</code>的方式</li>
</ol>
<ul>
<li>dbname.system.namespaces:列出所有命名空间</li>
<li>dbname.system.indexes:列出所有索引</li>
<li>dbname.system.profile:包含数据库概要(profile)信息</li>
<li>dbname.system.users:列出所有可访问数据库的用户</li>
<li>dbname.local.sources:包含复制对端（slave）的服务器信息和状态</li>
</ul>
<ol start="4">
<li>ObjectId<br>类似为唯一主键，可以很快的生成和排序，包含12bytes<br>存储文档必须要有一个_id键，可以是任何类型，默认是ObjectId，在插入不指定_id时自动生成</li>
</ol>
<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><ul>
<li>查看所有数据库(<strong>show dbs</strong>)</li>
<li>使用数据库,不存在则会创建(<strong>use <DATABASE_NAME></strong>)</li>
<li>查看当前使用的数据库(<strong>db</strong>)</li>
<li>查看所有集合(<strong>show collections</strong>)</li>
<li>删除集合(<strong>db.collection.drop()</strong>)</li>
<li>删除数据库(<strong>db.dropDatabase()</strong>)</li>
</ul>
<p>CURD操作:</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>db.<collection_name>.insert()</td>
<td>db.student.insert({“name”:”名称”,”age”:18})</td>
<td></td>
</tr>
<tr>
<td>db.<collection_name>.insertOne()</td>
<td>db.student.insertOne({“name”:”名称”,”age”:18})</td>
<td></td>
</tr>
<tr>
<td>db.<collection_name>.insertMany()</td>
<td>db.student.insertMany([{“name”:”名称”,”age”:20},{“name”:”名2”,”age”:22}])</td>
<td></td>
</tr>
</tbody></table>
<p><strong><a href="http://www.mongoing.com/docs/tutorial/query-documents.html">查询</a></strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>db.<collection_name>.find(,)</td>
<td>db.student.find();<br/>db.student.find({name:”名称”});<br/>db.student.findOne({name:”名称”});<br/>db.student.find({name:”名称”}).count();<br/>db.student.find({name:{ $in: [“名称”,”名2”]}});<br/> db.student.find({name:”名称”,age:{ $gt: 19}});<br/>db.student.find({ $or: [{name:”名称”},{age:{ $gt:19 }}]});</td>
<td>查询所有<br/>指定属性名精确查询<br/>匹配第一个<br/>查询结果数量<br/>使用in表达式匹配<br/>使用and，逗号就相当于and，age大于($lt小于)19的<br/>or表达式数组，逗号为或，name为名称,age大于19的</td>
</tr>
</tbody></table>
<p><strong>数组上的查询，即字段的值为数组</strong>,<code>name:[&quot;chen&quot;,&quot;xiao chen&quot;]</code></p>
<ul>
<li><p>db.users.find( { badges: [ “blue”, “black” ] } ):精确匹配</p>
</li>
<li><p>db.users.find( { badges: “black” } ):包含某个元素</p>
</li>
<li><p>db.users.find( { “badges.0”: “black” } ):匹配第一元素是black的</p>
</li>
<li><p><code>db.users.find( &#123; finished: &#123; $elemMatch: &#123; $gt: 15, $lt: 20 &#125; &#125; &#125; ): $elemMatch</code>为数组提供的，需要至少满足一个条件</p>
</li>
<li><p>db.users.find( { finished: { $gt: 15, $lt: 20 } } ):满足多条件</p>
</li>
<li><p>db.student.find({name:/^小/}):查询出name以小开头的数据</p>
</li>
<li><p>db.student.find({name:/刚$/}):查询name以刚结尾的数据</p>
</li>
<li><p>$lt:&lt;</p>
</li>
<li><p>$gt:&gt;</p>
</li>
<li><p>$lte:&lt;=</p>
</li>
<li><p>$gte:&gt;=</p>
</li>
<li><p>$net:!=</p>
</li>
<li><p>$eq:=</p>
</li>
</ul>
<p>嵌入文档数组查询:</p>
<ul>
<li>db.users.find( { ‘points.0.points’: { $lte: 55 } } ):查询points属性的第一个文档的points属性匹配</li>
</ul>
<p><strong><a href="http://www.mongoing.com/docs/tutorial/update-documents.html">更新</a></strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>db.collection.updateOne()</td>
<td>db.student.updateOne({name:”名2”},{$set:{address:”丰台”,name:”小刚”},$currentDate: {lastModifyDate:true}});</td>
<td>方法第一个参数为查询需要修改的数据，第二个参数为修改，$set表示需要修改的属性或要添加的属性(没有的时候),$currentDate表示为数据添加一个当前日期，lastModifyDate字段为自定义字段，若没有则创建。该方法只修改一条</td>
</tr>
<tr>
<td>db.collection.updateMany()</td>
<td>同上</td>
<td>该方法可匹配多个数据进行更改</td>
</tr>
<tr>
<td>db.collection.update()</td>
<td>db.student.update({name:”名2”},{$set:{address:”丰台”}},{multi:true})</td>
<td>该方法默认只修改一条数据，若设置multi:true，则修改多条数据</td>
</tr>
<tr>
<td>db.collection.replaceOne()</td>
<td>db.student.replaceOne({name:”小明”},{name:”小飞”,address:”大马士革”});</td>
<td>表示替换一条匹配的文档称为新文档</td>
</tr>
<tr>
<td>db.collection.update()</td>
<td>db.student.update({name:”小刚”},{$unset: {lastModifyDate: “” }});</td>
<td>删除匹配数据的某个属性</td>
</tr>
</tbody></table>
<p><strong><a href="http://www.mongoing.com/docs/tutorial/remove-documents.html">删除</a></strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>db.collection.deleteOne()</td>
<td>db.student.deleteOne({name:”小飞”});</td>
<td>仅删除匹配的第一条数据</td>
</tr>
<tr>
<td>db.collection.deleteMany()</td>
<td>db.users.deleteMany({name:”小飞”})</td>
<td>删除所有名称为小飞的数据,若传入参数为空参，则清空所有数据</td>
</tr>
<tr>
<td>db.collection.remove()</td>
<td>db.users.remove({name:”小飞”})</td>
<td>删除所有name为小飞的数据</td>
</tr>
<tr>
<td>db.collection.remove()</td>
<td>db.users.remove({name:”小飞”},1)</td>
<td>仅删除第一条名称为小飞的数据,第二个参数为justOne,bollean类型</td>
</tr>
<tr>
<td>db.collection.remove()</td>
<td>db.users.remove({name:”小飞”},{justOne:true})</td>
<td>remove默认删除所有，使用justOne为true表示仅第一条</td>
</tr>
</tbody></table>
<p><strong>操作符</strong></p>
<p>$type操作符:检索集合中匹配的数据类型。Mongodb中众多数据类型都有对应的数子，查询是可以通过一下查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.student.find(&#123;name:&#123;$type:&quot;string&quot;&#125;&#125;)</span><br><span class="line">或</span><br><span class="line">db.student.find(&#123;name:&#123;$type:2&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>limit()与skip()方法，sort()</strong><br>limit(number)表示从结果集中读取指定数量的数据,默认不填查询全部<br>skip(number)表示从结果集中跳过指定数量,默认为0，即跳过0行<br><strong>但是如果要将limit和skip同时使用，放置顺序不管如何。其mongodb的解析顺序是固定的，先skip()再limit()，如果有sort()，则sort()在最前</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.student.find().skip(1).limit(2)</span><br><span class="line">与下面是相同的</span><br><span class="line">db.student.find().limit(2).skip(1)</span><br></pre></td></tr></table></figure>
<p>sort方法，-1表示降序，-1表示升序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.student.find().sort(&#123;age:1,address:-1&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="单键索引创建"><a href="#单键索引创建" class="headerlink" title="单键索引创建"></a>单键索引创建</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collection.createIndex(&#123;name:1&#125;)</span><br></pre></td></tr></table></figure>
<p>以上表示，创建name字段的索引，1表示升序，-1表示降序</p>
<p>嵌入式文档的属性单键索引创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collection.createIndex(&#123;&quot;class.address&quot;:-1&#125;)</span><br></pre></td></tr></table></figure>
<p>使用点的方式，表示学生所在班级地址字段的索引。</p>
<p>在嵌入式文档创建索引，若要使用需要在查询时写全部字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collection.createIndex(&#123;class:-1&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="复合索引创建"><a href="#复合索引创建" class="headerlink" title="复合索引创建"></a>复合索引创建</h3><p>db.collection.createIndex({name:1,class:1})<br>复合索引的排序<br><strong>索引以升序（1）或降序（-1）排序顺序存储对字段的引用。对于单字段索引，键的排序无关紧要，对于复合索引，排序顺序决定索引是否支持排序操作</strong></p>
<p>建立复合索引后的排序，如果要想索引可以使用</p>
<ul>
<li>索引字段<strong>前后顺序一致</strong>且<strong>数量一致</strong>，查询顺序与索引匹配或相反</li>
<li>复合索引定义数量与查询排序数量不一致，则以复合索引字段前置优先规则<br>如上规则创立索引:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.student.createIndex(&#123;age:-1,name:1&#125;);</span><br><span class="line">以上索引,以下可用</span><br><span class="line">db.student.find().sort(&#123;age:-1,name:1&#125;);</span><br><span class="line">db.student.find().sort(&#123;age:1,name:-1&#125;);</span><br><span class="line">db.student.find().sort(&#123;age:-1&#125;);</span><br><span class="line">但下面这个不可用</span><br><span class="line">db.student.find().sort(&#123;age:-1,name:-1&#125;);</span><br></pre></td></tr></table></figure>
对于查询时使用索引，只要数量一致，与顺序无关,或使用复合索引的前置字段。</li>
</ul>
<p><strong>多键索引</strong>:为数组键创建的索引是多键索引，它为数组中每个元素添加一个索引项。<br><strong>文本索引</strong>:一个集合只能创建创建一个文本索引。为了索引一个存储字符串或字符串数组的键，可以创建文本索引。也可以为文本索引索引多个字段，即复合文本索引。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.reviews.createIndex( &#123; comments: &quot;text&quot; &#125; )</span><br><span class="line">db.reviews.createIndex( &#123; subject: &quot;text&quot;, comments: &quot;text&quot; &#125; )</span><br></pre></td></tr></table></figure>

<p><strong>索引的第二个参数为可选参数</strong>:</p>
<ul>
<li>background:Boolean:建索引为阻塞其他数据库操作，所以若键索引的键数据过多，可设置为true，后台建立索引。默认为false</li>
<li>unique:Boolean:建立的索引是否是唯一索引,默认false</li>
<li>name:string:索引的名称</li>
<li>sparse:Boolean:对文档中不存在的字段数据不启用索引。如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档。默认false</li>
<li>expireAfterSeconds:integer:指定一个以秒为单位的数值，设定集合的生存时间。</li>
</ul>
<p>获得所有索引:db.student.getIndexes();<br>获得索引总大小:db.student.totalIndexSize()<br>获得表数据总大小:db.student.totalSize()<br>删除所有索引:db.student.dropIndexs()<br>删除指定名称索引:db.student.dropIndex(“索引名”)</p>
<h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>即聚合方法，类似count，sum等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)  </span><br></pre></td></tr></table></figure>
<p>示例<br>db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : 1}}}])<br>以上结果类似于select by_user, count(<em>) from mycol group by by_user;<br>首先<code>_id</code>表示要分组的字段,值需要使用键前面加$符号。后面的num_tutorial表示结果集列名，里面的$sum是重点，1说明是1倍，相当于count(</em>),若为2,则其查询的值为count(*) * 2。这个至应该是要进行计算操作的键名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, likes : &#123;$sum : &quot;$likes&quot;&#125;&#125;&#125;]) </span><br></pre></td></tr></table></figure>
<p>以上的查询表示，以by_user键进行分组，求likes字段的所有和。注意键前需要$符号<br>类似:select by_user,sum(likes) from mycol group by by_user;</p>
<p>表达式有:</p>
<ul>
<li>$sum:求和或数量</li>
<li>$avg:求平均数</li>
<li>$min:求最小值</li>
<li>$max:求最大值</li>
<li>$push:将结果文档中插入值到数组中。也就是说不是求数量和求和，而是将分组的结果放到倍分组列里，这个列变成了数组类型</li>
<li>$addToSet:将结果文档中插入值到数组中，但是set，所以会去重。</li>
<li>$first:根据资源文档的排序获取第一个文档数据。查询出所有的数据，取第一个值组成分组</li>
<li>$last:根据资源文档的排序获取第一个文档数据。查询出所有的数据，取最后一个值组成分组</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM虚拟机原理</title>
    <url>/2020/03/24/Java/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="JVM-Java虚拟机原理"><a href="#JVM-Java虚拟机原理" class="headerlink" title="JVM Java虚拟机原理"></a>JVM Java虚拟机原理</h1><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>类加载器子系统负责从文件系统或网络中加载Class文件，class文件在文件开头有特定的文件标识。</p>
<p>ClassLoader只负责加载，是否可以运行由Execution Engine决定。</p>
<p>加载类信息存放在方法区的内存空间。除了类信息，还有运行时常量信息，字符串字面量和数字常量(这部分常量是Class文件中的常量池信息部分的内存映射)。</p>
<p><strong>环节</strong></p>
<p>Loading加载—&gt;链接(Verification验证—&gt;Preparation准备—&gt;Resolution解析)—&gt;Initialzation初始化</p>
<p><strong>加载.class文件的方式。</strong></p>
<ul>
<li>本地直接加载</li>
<li>通过网络获取:Web Applet</li>
<li>从zip，jar，war中获取</li>
<li>动态代理</li>
<li>其他文件生成,JSP</li>
<li>加密文件中获取，防Class文件被反编译措施</li>
</ul>
<p><strong>验证</strong></p>
<p>确保Class文件字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性。包括验证，文件格式验证、元数据、字节码、符号引用。</p>
<p><strong>准备</strong></p>
<p>为变量分配内存并设置该类变量的默认初始值，即零值。</p>
<ul>
<li>不包含final修饰的static变量，final在编译的时候就分配了，准备阶段会显示初始化。</li>
<li><u>不会为实例变量分配初始值</u>，类变量会分配在方法区中，而实例变量会随着对象一起分配到Java堆中。</li>
</ul>
<p><strong>解析</strong></p>
<p>将常量池内的符号引用转换为直接引用的过程。</p>
<p>符号引用就是一组符号来描述所引用的目标。</p>
<p>直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p>
<p>解析动作主要针对类或接口、字段、方法、类方法、接口方法、方法类型等。</p>
<p><strong>初始化</strong></p>
<p>初始化阶段就是执行类构造器方法&lt;clinit&gt;()的过程。</p>
<ul>
<li><p>此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。</p>
</li>
<li><p>构造器方法中指令按语句在源文件中出现的顺序执行。</p>
</li>
<li><p>&lt;clinit&gt;()不同于类的构造器(&lt;init&gt;–&gt;bytecode viewer工具可以看到)</p>
</li>
<li><p>若该类具有父类,JVM会保证子类的clinit执行前执行父类的clinit</p>
</li>
<li><p>虚拟机必须保证一个类的&lt;clinit&gt;()方法在多线程下被同步加锁。</p>
</li>
</ul>
<h3 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h3><p>分为引导类加载器(BootStrap ClassLoader)和自定义加载器(所有派生于ClassLoader的加载器都是自定义加载器)。</p>
<p>拓展类加载器(ExtClassLoader)、系统类加载器间接的继承了ClassLoader。</p>
<h3 id="引导类加载器"><a href="#引导类加载器" class="headerlink" title="引导类加载器"></a>引导类加载器</h3><ul>
<li>这个类加载使用C/C++语言实现，嵌套在JVM内部。</li>
<li>用来加载核心库rt.jar，resources.jar，sun.boot.class.path路径下的内容，用于提供JVM自身需要的类。</li>
<li>并不继承自java.lang.ClassLoader，没有父加载器</li>
<li>加载拓展类和应用程序类加载器，并指定为他们的父类加载器</li>
<li>出于安全考虑，BootStrap启动类加载器只加载包含包名为java、javax、sun开头的类</li>
</ul>
<h3 id="应用程序类加载器"><a href="#应用程序类加载器" class="headerlink" title="应用程序类加载器"></a>应用程序类加载器</h3><ul>
<li><p>有sum.misc.launcher$AppClassLoader实现，派生于ClassLoader类，父加载器为拓展类加载器。</p>
</li>
<li><p>负责加载环境变量classpath或系统属性java.class.path指定路径下的类库。</p>
</li>
<li><p>是程序的默认类加载器，一般来说，Java应用的类都是由它完成的。</p>
</li>
<li><p>通过ClassLoader#getSystemClassLoader方法获取到该类加载器。</p>
</li>
</ul>
<h3 id="拓展类加载器"><a href="#拓展类加载器" class="headerlink" title="拓展类加载器"></a>拓展类加载器</h3><p>Java语言编写，有sum.misc.Launcher$ExtClassLoader实现，派生于ClassLoader类，父加载器为启动类加载器。</p>
<p>从java.ext.dirs系统属性所指定的目录中加载类库，或从jdk目录的rt/lib/ext/子目录下加载类库。如果用户创建的jar放在此目录，也由它加载。</p>
<h3 id="用户自定义加载类"><a href="#用户自定义加载类" class="headerlink" title="用户自定义加载类"></a>用户自定义加载类</h3><p>为什么要自定义加载类？</p>
<ul>
<li>隔离加载类。当引用中间件时，确保框架jar使用的加载和中间件jar加载的分开，自定义加载类隔离</li>
<li>修改类的加载方式</li>
<li>拓展加载源</li>
<li>防止源码泄露</li>
</ul>
<p><strong>步骤</strong></p>
<ul>
<li><p>用户通过集成java.lang.ClassLoader类的方式，实现自己的类加载器，以满足特殊需求。</p>
</li>
<li><p>建议把自定义逻辑卸载findClass方法中</p>
</li>
</ul>
<h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p>Java虚拟机对class文件采用的时按需加载的方式，也就是说当需要使用该类时才会将他的class文件加载到内存生成class对象。而且加载某个类的class文件时，java虚拟机采用的时双亲委派机制，<strong>即把请求交由父类处理，它是一种任务委派模式</strong>。</p>
<p><strong>工作原理</strong></p>
<ol>
<li>如果一个类加载器收到了类加载请求,它并不会自己先去加载,而是把这个请求委托给父类的加载器去执行;</li>
<li>如果父类加载器还存在其父类加载器,则进一步向上委托,依次递归,请求最终将到达顶层的启动类加载器;</li>
<li>如果父类加载器可以完成类加载任务,就成功返回,倘若父类加载器无法完成此加载任务,子加载器才会尝试自己去加载,这就是双亲委派模式。</li>
</ol>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/picture/TIM%E6%88%AA%E5%9B%BE20200315214250.png" alt=""></p>
<p>例子：假如有一个自定义完全相同的完全限定名的String类，那么，该类会从appClassLoader向上委托，然后引导类会加载java.lang.String,也就是他自己能扫描到类库下的jdk 的String类。加载的是核心类库的String类。</p>
<p>而如果自定义的String类执行main方法，则报错，在类java.lang.String中找不到main方法。此时类加载器一直委托到引导类加载器，会加载核心API的String，但它没有main方法，因此会报错。</p>
<blockquote>
<p> <strong>沙箱安全机制</strong></p>
</blockquote>
<p><strong>优势</strong></p>
<ul>
<li><p>防止新API被篡改</p>
</li>
<li><p>避免类重复加载</p>
</li>
</ul>
<h3 id="类的主动使用和被动使用"><a href="#类的主动使用和被动使用" class="headerlink" title="类的主动使用和被动使用"></a>类的主动使用和被动使用</h3><p>在JVM中表示两个class对象是否为同一对象存在的另两个必要条件:</p>
<ul>
<li>类的完整类名完全相同，包括包名</li>
<li>加载这个类的ClassLoader(指ClassLoader实例对象)必须相同</li>
</ul>
<p>只要加载他们的类加载器不一样，两个类的对象也不一样。</p>
<p>如果一个类型由用户类加载器加载，那么JVM会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中。</p>
<p>当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。</p>
<p><strong>Java程序对类的使用方式分为:主动使用和被动使用</strong><br>主动使用,又分为七种情况:<br>创建类的实例</p>
<ul>
<li>访问某个类或接口的静态变量,或者对该静态变量赋值</li>
<li>调用类的静态方法</li>
<li>反射(比如: Class. forName(“com. atguigu.test”))</li>
<li>初始化一个类的子类</li>
<li>Java虚拟机启动时被标明为启动类的类</li>
<li>JDK7开始提供的动态语言支持:<br>java.lang. invoke. MethodHandle实例的解析结果<br> REF getStatic、 REF putStatic REF invokeStatic句柄对<br>应的类没有初始化,则初始化</li>
</ul>
<p>除了以上七种情况,其他使用Java类的方式都被看作是对类的被动使用,<br>都不会导致类的初始化。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java8新特性</title>
    <url>/2020/03/24/Java/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h1><ul>
<li>速度更快</li>
<li>代码更少(<strong>新增Lambda语法</strong>)</li>
<li><strong>强大的Stream API</strong></li>
<li>便于并行</li>
<li>最大化减少空指针异常 Optional</li>
</ul>
<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Lambda表达式即函数式编程，需要<code>函数式接口</code>的支持。<br>函数式接口即:</p>
<ul>
<li>接口中只有1个方法</li>
<li>接口支持泛型</li>
<li>使用@FunctionalInterface注解修饰接口</li>
</ul>
<p>函数式编程只为简化代码量，简化写法，只是将new Xxxx(){public int xx(){}}这些需要实现接口方法的代码进行简化，而并非是执行这个方法。<strong>其目的依旧是实现接口方法</strong>。而<strong>变量是接口类</strong>并非方法返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyNumbercompare</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(Integer n1,Integer n2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现函数式接口的方式</p>
<ul>
<li>() -&gt; System.out.println();//无参数，无返回值</li>
<li>(x) -&gt; System.out.println();//只有一个参数，且无返回值</li>
<li>x -&gt; System.out.println();//只有一个参数，小括号可以不写</li>
<li>Comparator<Integer> com = (x,y) -&gt; Integer.compare(x,y);//主体只有一条语句，return和大括号可以不写</li>
</ul>
<h3 id="default修饰符"><a href="#default修饰符" class="headerlink" title="default修饰符"></a>default修饰符</h3><p>可以再接口类中修饰方法，该方法是一个具体实现。<br>在接口中添加新功能特性，不影响接口的实现类。<br>不影响函数式接口。<br>关键字default，那么就无须提供该方法的实现。<br>函数式接口中，可以使用多个default修饰方法</p>
<h3 id="四大内置核心函数式接口"><a href="#四大内置核心函数式接口" class="headerlink" title="四大内置核心函数式接口"></a>四大内置核心函数式接口</h3><ul>
<li>Consumer<T>:消费型接口,void accept(T t);</li>
<li>Supplier<T>:供给型接口,T get();</li>
<li>Function<T>:函数型接口,R apply(T t);</li>
<li>Predicate<T>: 段言型接口,boolean test(T t);<br>其他相关所有函数式接口，都在java.util.function包里</li>
<li>BiFunction&lt;T,U,R&gt;: 参数类型为T,U,返回值为R</li>
<li>UnaryOperator<T>: 参数类型T,返回值T；对类型为T的对象进行一元运算</li>
<li>BinaryOperator<T>:参数T,T,返回值T;对类型为T的对象进行二元运算</li>
<li>ToIntFunction<T>:参数T,返回int类型</li>
<li>ToILongFunction<T>:参数T,返回long类型</li>
<li>ToDoubleFunction<T>:参数T,返回double类型</li>
<li>IntFunction<R>:参数int，返回类型为R</li>
</ul>
<h3 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h3><p>若Lambda体中内容有方法已经实现了，我们可以使用方法引用。<br>语法格式:</p>
<ul>
<li>对象::实例方法名</li>
<li>类:静态方法名</li>
<li>类::实例方法名</li>
</ul>
<p>需要保证的是，++函数式接口的方法++的参数列表与返回值类型要与++方法引用的实现方法++的参数列表与返回值类型一致。<br>例子如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Consumer&lt;String&gt; com = (x)-&gt; System.out.println(x);</span><br><span class="line"></span><br><span class="line">    Consumer&lt;String&gt; consumer = System.out::println;</span><br><span class="line"></span><br><span class="line">    consumer.accept(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于上面两种，可以理解为两者都是右侧表达式，且表达式相同，只不过是显示方式不同<br>另外对方法引用还有一个理解是，上面的一句话，只需要保证其右侧表达式和函数式接口的方法是同参数列表同返回类型的，不就代表引用吗。</p>
<p><strong>类名::实例方法名的使用说明:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BiPredicate&lt;String,String&gt; bp = (x,y) -&gt; x.equals(y);</span><br><span class="line"></span><br><span class="line">BiPredicate&lt;String,String&gt; bp = String::equals;</span><br></pre></td></tr></table></figure>
<p>++即方法参数的第一个参数x为方法的调用对象，第二个参数及后面的为对象方法的参数列表.++</p>
<p><strong>构造器引用:</strong><br>例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;Integer,MyClass&gt; fun = (n) -&gt; <span class="keyword">new</span> MyClass(n);</span><br><span class="line">Function&lt;Integer,MyClass&gt; fun = MyClass::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure>
<p>以上案例与方法引用类似，同样构造器参数列表要与接口提供的方法的参数列表一致。<br><strong>数组引用:</strong><br>例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;Integer,Integer[]&gt; fun = (n) -&gt; <span class="keyword">new</span> Integer[n];</span><br><span class="line">Function&lt;Integer,Integer[]&gt; fun = Integer[]::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h2><p>流Stream是数据渠道，用于操作数据源(集合，数组)所生成的元素序列。流的来源还可以是I/O channel等s</p>
<ul>
<li>Stream自己不会存储元素</li>
<li>Stream不会改变源对象。相反，它们会持有结果的新Stream</li>
<li>Stream操作是延迟执行的。意味着它们会等到需要结果的时候才执行</li>
</ul>
<p>流的操作分为三个步骤:</p>
<ul>
<li>创建Stream，从集合或数组等数据源获取流</li>
<li>中间操作，对数据源进行处理</li>
<li>终止操作，执行中间操作链，产生结果</li>
</ul>
<h3 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h3><ol>
<li>Collection接口获得流</li>
</ol>
<ul>
<li>default Stream<E> stream():返回一个顺序流</li>
<li>default Stream<E> paralleStream():返回一个并行流</li>
</ul>
<ol start="2">
<li>数组创建流<br>使用Arrays的静态Stream()重载方法可以获得数据流，重载包括int,long,double,T泛型。</li>
</ol>
<ul>
<li>public static IntStream stream(int[] array)</li>
<li>public static LongStream stream(long[] array)</li>
<li>public static DoubleStream stream(double[] array)</li>
<li>public static <T> Stream<T> stream(T[] array)</li>
</ul>
<ol start="3">
<li><p>通过Stream类创建<br>静态方法of,创建一个流，接收任意数量的参数<br>public static<T> Stream<T> of(T… values)</p>
</li>
<li><p>函数创建流<br>使用静态方法Stream.iterator()和Stream.generate()创建流</p>
</li>
</ol>
<ul>
<li>迭代:public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) </li>
<li>生成:public static<T> Stream<T> generate(Supplier<T> s)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.iterate(<span class="number">0</span>,(x)-&gt;x+<span class="number">2</span>);</span><br><span class="line">stream.limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">Stream.generate(()-&gt; Math.random()).limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><p>多个中间操作可以连接起来形成一个流水线，除非终止操作，即类似ForEach,println等，否则<strong>中间操作不会执行任何的处理</strong>，而在终止操作时一次性处理全部处理，称为惰性求值。</p>
<ol>
<li>筛选与切片</li>
</ol>
<ul>
<li>filter(Predicate p):接收lambda表达式，段言型，即过滤去除。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Double&gt; stream1 = Stream.generate(()-&gt; Math.random()).limit(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">Stream&lt;Double&gt; stream1x =  stream1.filter((x)-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Stream API&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> x&gt;<span class="number">0.4</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">stream1.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p>如上，若没有第三段的forEach，则运行到第二段后，是不会进行打印Stream API的，知道有打印的才会打印，而被过滤的数据不被计入到limit20里，所以在ForEach只有会有20个double随机数被打印出来，和不定的Stream API打印。</p>
<ul>
<li>limit(int number):在Stream找到所需元素固定次数后，就不在迭代过滤。</li>
<li>skip(int n):跳过n个元素，如果流中元素不足n个，则返回空流</li>
<li>distinct():去除重复记录,通过hashCode()和euqals()来去重</li>
</ul>
<ol start="2">
<li>映射</li>
</ol>
<ul>
<li>map:接受一个函数作为参数，该函数会应用到所有的元素上，并将其映射成一个新的元素。</li>
<li>flatMap:接收一个函数作为参数，将flatMap的的函数中返回的流连接成一个流，即若flatMap的参数函数返回一个流，那么它会将返回的流连接成一个流，即从Stream&lt;Stream<String>&gt; 变成 Stream<String></li>
</ul>
<ol start="3">
<li>排序</li>
</ol>
<ul>
<li>sorted:自然排序</li>
<li>stored(Comparator com):参数接受一个Comparator接口函数，用于自定义排序</li>
</ul>
<ol start="4">
<li>查找与匹配</li>
</ol>
<ul>
<li>allMatch(Predicate p):检查是否匹配所有元素</li>
<li>anyMatch(Predicate p):检查是否至少匹配一个元素</li>
<li>noneMatch(predicate p):检查是否没有匹配所有元素</li>
<li>findFirst():返回第一个元素</li>
<li>findAny():返回当前流中任意元素</li>
<li>count():返回流中的元素数量</li>
<li>max(Comparator c):返回流中最大值</li>
<li>min(Comparator c):返回流中最小值</li>
<li>forEach(Consumer c):内部迭代</li>
</ul>
<p><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/other/TIM%E6%88%AA%E5%9B%BE20190604115348.png" alt=""><br><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/other/TIM%E6%88%AA%E5%9B%BE20190604115508.png" alt=""><br><img src="https://chen-sys.oss-cn-beijing.aliyuncs.com/other/TIM%E6%88%AA%E5%9B%BE20190604115552.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>集群搭建相关问题</title>
    <url>/2020/03/24/Hadoop/%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="免密登录失败Permission-denied-publickey-gssapi-keyex-gssapi-with-mic-password"><a href="#免密登录失败Permission-denied-publickey-gssapi-keyex-gssapi-with-mic-password" class="headerlink" title="免密登录失败Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password)?"></a>免密登录失败Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password)?</h2><p>通常该问题，网上说需要sshd_config配置，一个是SELinux被打开了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一种是需要这样做</span><br><span class="line">PubkeyAuthentication yes </span><br><span class="line">第二种需要使用root关闭(暂时)</span><br><span class="line">setenforce 0 </span><br></pre></td></tr></table></figure>

<p>注意在ssh进行免密登录的时候，一定注意几台机器的用户名是否一样。比如各服务器用户名不一样，则你直接<code>ssh 主机名</code>那这样是有问题的，必须<code>ssh 用户名@主机名</code>;如果各机器用户名一样，那么直接可以<code>ssh 主机名</code>，这样登录后才行。<strong>否则就是以当前用户登录其他主机，肯定是登不上的</strong>,这也是为什么我第一次配置时没有任何问题的就好了，之后都不行，原来是用户名设的不一样。</p>
<p>如果你hadoop集群出现了异常，那么实在不行就尝试将<strong>几台机器的用户名都修改成一样的</strong>。我觉得应该必须一样</p>
<h2 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a><a href="https://www.cnblogs.com/guojuboke/p/10680213.html">修改用户名</a></h2><p>修改<br>/etc/passwd<br>/etc/shadow<br>/etc/group<br>/etc/gshadow<br>这四个文件里面原来的用户名名称都改为现在需要改变的名称<br>修改home文件下原来的文件名称<br>然后可以重启或不重启。但是密码没有改变。</p>
<h2 id="互通"><a href="#互通" class="headerlink" title="互通"></a><a href="https://blog.csdn.net/crazyxinma/article/details/83029351">互通</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa </span><br><span class="line">ssh-copy-id IP ；（自身IP）</span><br><span class="line">ssh-copy-id IP ；（其他节点IP）</span><br></pre></td></tr></table></figure>

<h2 id="Inconsistent-checkpoint-fields-LV-64-namespaceID-1824398440-cTime-1562671135968-clusterId-CID-8366be1d-a420-44ef-9c91-0b2b6c779fd4-blockpoolId-BP-1686275258-192-168-181-140-1562671135968-Expecting-respectively-64-1349177589-1562664989"><a href="#Inconsistent-checkpoint-fields-LV-64-namespaceID-1824398440-cTime-1562671135968-clusterId-CID-8366be1d-a420-44ef-9c91-0b2b6c779fd4-blockpoolId-BP-1686275258-192-168-181-140-1562671135968-Expecting-respectively-64-1349177589-1562664989" class="headerlink" title="Inconsistent checkpoint fields. LV = -64 namespaceID = 1824398440 cTime = 1562671135968 ; clusterId = CID-8366be1d-a420-44ef-9c91-0b2b6c779fd4 ; blockpoolId = BP-1686275258-192.168.181.140-1562671135968. Expecting respectively: -64; 1349177589; 1562664989"></a>Inconsistent checkpoint fields. LV = -64 namespaceID = 1824398440 cTime = 1562671135968 ; clusterId = CID-8366be1d-a420-44ef-9c91-0b2b6c779fd4 ; blockpoolId = BP-1686275258-192.168.181.140-1562671135968. Expecting respectively: -64; 1349177589; 1562664989</h2><p>注意,core-site.xml中的hadoop.tmp.dir是否写对了</p>
<h2 id="出现Retrying-connect-to-server-centos2-192-168-181-141-8031-Already-tried-8-time-s-retry-policy-is-RetryUpToMaximumCountWithFixedSleep-maxRetries-10-sleepTime-1000-MILLISECONDS"><a href="#出现Retrying-connect-to-server-centos2-192-168-181-141-8031-Already-tried-8-time-s-retry-policy-is-RetryUpToMaximumCountWithFixedSleep-maxRetries-10-sleepTime-1000-MILLISECONDS" class="headerlink" title="出现Retrying connect to server: centos2/192.168.181.141:8031. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)"></a>出现Retrying connect to server: centos2/192.168.181.141:8031. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)</h2><p>关闭所有机器的防火墙，如果你不关闭，只开放对应端口，可能不太行，因为除了配置上的一些端口，还有许多隐藏的端口需要。但允许某些服务器访问没有试过</p>
<h2 id="启动start-yarn-sh后，当前节点没有NodeManager"><a href="#启动start-yarn-sh后，当前节点没有NodeManager" class="headerlink" title="启动start-yarn.sh后，当前节点没有NodeManager"></a>启动start-yarn.sh后，当前节点没有NodeManager</h2><p>检查配置项，是否配置全。另外对于hadoop3和hadoop2的数据节点由slaves文件变成的workers文件了。这个要注意，否则总是无法启动全datanode。</p>
<h2 id="另外访问50090或50070的，有的视频教程只配置的50090，但是可以访问50070，当你访问50090时，会出现和50070一样的界面，但之后Home和Overview，且http路径为xxx-xxx-xxx-xxx-50090-status-html，但是你访问50070时访问不到的。"><a href="#另外访问50090或50070的，有的视频教程只配置的50090，但是可以访问50070，当你访问50090时，会出现和50070一样的界面，但之后Home和Overview，且http路径为xxx-xxx-xxx-xxx-50090-status-html，但是你访问50070时访问不到的。" class="headerlink" title="另外访问50090或50070的，有的视频教程只配置的50090，但是可以访问50070，当你访问50090时，会出现和50070一样的界面，但之后Home和Overview，且http路径为xxx.xxx.xxx.xxx:50090/status.html，但是你访问50070时访问不到的。"></a>另外访问50090或50070的，有的视频教程只配置的50090，但是可以访问50070，当你访问50090时，会出现和50070一样的界面，但之后Home和Overview，且http路径为<code>xxx.xxx.xxx.xxx:50090/status.html</code>，但是你访问50070时访问不到的。</h2><p>所以你不仅需要配置secondary的httpaddress，还要直接配置namenode的httpaddress,在hdfs-site.xml文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.secondary.http-address&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;centos3:50090&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;description&gt;secondarynamenode运行节点的信息,和namenode不同节点&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.http-address&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;centos1:50070&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<p>另外每次关闭，下次重新启动 时都先stop-dfs.sh和stop-yarn,然后在删除所有节点的data logs，这样hdfs namenode -format之后对的操作才可能不出问题。平常关闭启动的话就不需要hdfs namenode -format,仅对没搭建起来集群的，需要重新部署的，要删干净。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop完全分布式集群</title>
    <url>/2020/03/24/Hadoop/Hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="第一章-虚拟机配置"><a href="#第一章-虚拟机配置" class="headerlink" title="第一章 虚拟机配置"></a>第一章 虚拟机配置</h1><p>创建centos7.x虚拟机不再描述,网卡连接方式使用桥接方式</p>
<p><strong>网络问题,创建NAT虚拟网络</strong><br>可在VMware的编辑，虚拟网络编辑器中，添加网络，点击右下角的管理员操作权限，点击添加网络按钮，随意选一个VMnet，选择VMnet为NAT模式。<br>勾选将主机虚拟适配器连接到此网络和勾选使用本地DHCP服务将IP地址分配给虚拟机。然后可以修改HDCP设置，默认可以不更改。</p>
<h2 id="创建完虚拟机后，无法使用sudo问题"><a href="#创建完虚拟机后，无法使用sudo问题" class="headerlink" title="创建完虚拟机后，无法使用sudo问题"></a>创建完虚拟机后，无法使用sudo问题</h2><p>使用命令<code>su root</code>进入root用户,执行<code>visudo</code>命令打开sudoer文件,找到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root    ALL&#x3D;(ALL)       ALL</span><br></pre></td></tr></table></figure>
<p>在其下面添加与其一样的一行，并把root改为自己的用户名,然后保存退出,如:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">centos    ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>

<h2 id="安装jdk和hadoop"><a href="#安装jdk和hadoop" class="headerlink" title="安装jdk和hadoop"></a>安装jdk和hadoop</h2><p>jdk选JDK8的,hadoop建议选择3.x版本的，这里，我使用JDK8和hadoop3.1.3。目前JDK11与hadoop3.x版本的匹配问题还没有找到解决办法，使用jdk会导致在启动时出现java.lang.ClassNotFoundException: javax.activation.DataSource的异常。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[centos@centos3 ~]$ java -version</span><br><span class="line">java version &quot;1.8.0_231&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_231-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)</span><br><span class="line">[centos@localhost ~]$ hadoop version</span><br><span class="line">Hadoop 3.1.3</span><br><span class="line">Source code repository https://gitbox.apache.org/repos/asf/hadoop.git -r ba631c436b806728f8ec2f54ab1e289526c90579</span><br><span class="line">Compiled by ztang on 2019-09-12T02:47Z</span><br><span class="line">Compiled with protoc 2.5.0</span><br><span class="line">From source with checksum ec785077c385118ac91aadde5ec9799</span><br><span class="line">This command was run using /home/centos/hadoop/share/hadoop/common/hadoop-common-3.1.3.jar</span><br></pre></td></tr></table></figure>
<p>将jdk8和hadoop解压，放置在~/下,在/etc/profile中配置环境变量,<code>sudo vim /etc/profile</code>命令，打开后在结尾追加</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/home/centos/jdk8</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export HADOOP_HOME=/home/centos/hadoop</span><br><span class="line">export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br></pre></td></tr></table></figure>
<p>然后使用<code>source /etc/profile</code>编译文件。然后可以输入上面的版本命令，看看信息。</p>
<h2 id="暂时关闭防火墙"><a href="#暂时关闭防火墙" class="headerlink" title="暂时关闭防火墙"></a>暂时关闭防火墙</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<h2 id="规定三台服务器的IP-这个ip地址是随意的。"><a href="#规定三台服务器的IP-这个ip地址是随意的。" class="headerlink" title="规定三台服务器的IP,这个ip地址是随意的。"></a>规定三台服务器的IP,这个ip地址是随意的。</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.181.129 centos1</span><br><span class="line">192.168.181.130 centos2</span><br><span class="line">192.168.181.131 centos3</span><br></pre></td></tr></table></figure>
<p>修改/etc/host文件，配置映射文件,将上面的配置放在该文件中。</p>
<h2 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h2><p>关闭虚拟机，点击菜单栏的虚拟机，选择管理，选择克隆，选择完全克隆，选择存储位置，然后进行克隆。如果你的当前磁盘是固态，那么是非常非常快的，不超过1分钟。</p>
<h2 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h2><p>打开全部虚拟机，其实完全克隆后，主机名已经变了，从centos1到centos3，hostname是直接改过了的。你可以到设置-详细信息-用户里改一下用户名称为主机名名称。<br>然后配置一下另外两个的网络,这里配ip，上面好像没说。可以直接到设置-网络，点有线连接下的那个网卡点IPV4，设为手动，分别填写，你在虚拟网络配置里配置的网络ip，或者可以不用这用，因为是hdcp的，所以直接ifconfig查看ip结构，把之前预先设计好的ip填进去，并把地址和子网掩码放进去，网关为.1，DNS设为114.114.114.114。然后ipv6这点击禁用。<br>然后尝试互相ping并ping一下<a href="http://www.baidu.com看是否外网可以通。">www.baidu.com看是否外网可以通。</a><br>如果找不到地方，看不到英文的话，可以设置成中文，点设置-region-language，看上部分，选择语言，汉语中文，然后根据他的提示重启一下就好了，让修改home下的文件名称的话，<strong>选不修改且不再提示</strong>。</p>
<h2 id="虚拟机免密登录"><a href="#虚拟机免密登录" class="headerlink" title="虚拟机免密登录"></a>虚拟机免密登录</h2><p>在三台机器都执行以下指令</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa ；</span><br><span class="line">ssh-copy-id IP (自身)</span><br><span class="line">ssh-copy-id IP (其他节点)</span><br></pre></td></tr></table></figure>
<p>执行第一条指令时，回车三次，第二条和第三条是一样的，输入yes，然后输入ip的密码。<br>这三条指令，每台机器都执行一遍。<br>执行完毕后，从129开始，ssh centos1,ssh centos2,ssh centos3,三台机器都执行一遍这三个命令，表示要ssh连接一次，记住ip。</p>
<h1 id="第二章-集群配置"><a href="#第二章-集群配置" class="headerlink" title="第二章 集群配置"></a>第二章 集群配置</h1><h2 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h2><table>
<thead>
<tr>
<th></th>
<th>centos1</th>
<th>centos2</th>
<th>centos3</th>
</tr>
</thead>
<tbody><tr>
<td>HDFS</td>
<td>NameNode<br/>DataNode</td>
<td>DataNode</td>
<td>SecondaryNameNode<br/>DataNode</td>
</tr>
<tr>
<td>YARN</td>
<td>NodeManager</td>
<td>NodeManager<br/>ResourceManager</td>
<td>NodeManager</td>
</tr>
</tbody></table>
<p>每个DataNode一定是有个NodeManager的。NameNode是比较重要的，管理所有的节点，所以一般是单独占一个服务器，但是只有三台机器又要做三个机器的数据存储。</p>
<h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><p>进入hadoop的etc/hadoop</p>
<ol>
<li>配置hadoop-env.sh，找到被注释的JAVA_HOME与HADOOP_HOME，解开注释，修改为对应位置。</li>
<li>修改core-site.xml,添加如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 指定HDFS中的NameNode地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;</span><br><span class="line">   &lt;value&gt;hdfs:&#x2F;&#x2F;centos1:9000&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;!-- 指定hadoop运行时产生的临时文件 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">   &lt;value&gt;&#x2F;home&#x2F;centos&#x2F;hadoop&#x2F;data&#x2F;hadoopdata&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure></li>
<li>修改hdfs-site.xml，添加如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;dfs.namenode.secondary.http-address&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;centos3:50090&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;description&gt;secondarynamenode运行节点的信息,和namenode不同节点&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;3&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;description&gt;HDFS的数据块副本存储个数&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;dfs.namenode.http-address&lt;&#x2F;name&gt;</span><br><span class="line">	&lt;value&gt;centos1:50070&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;&#x2F;home&#x2F;centos&#x2F;hadoop&#x2F;data&#x2F;name&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;description&gt;namenode的数据存储目录&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.data.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;&#x2F;home&#x2F;centos&#x2F;hadoop&#x2F;data&#x2F;data&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;description&gt;datanode的数据存储目录&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure></li>
<li>修改yarn-site.xml，添加如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.hostname&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;centos2&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;description&gt;yarn集群为mapreduce程序提供的shuffle服务&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>
有时候，有的yarn还是什么日志报错，具体问题忘了，是需要配置<code>yarn.application.classpath</code>的属性，它的值通过<code>hadoop classpath</code>命令打出来<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.application.classpath&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;&#x2F;home&#x2F;hadoop&#x2F;install&#x2F;hadoop&#x2F;etc&#x2F;hadoop:&#x2F;home&#x2F;hadoop&#x2F;install&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;*:&#x2F;home&#x2F;hadoop&#x2F;install&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;*:&#x2F;home&#x2F;hadoop&#x2F;install&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs:&#x2F;home&#x2F;hadoop&#x2F;install&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;*:&#x2F;home&#x2F;hadoop&#x2F;install&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;*:&#x2F;home&#x2F;hadoop&#x2F;install&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;*:&#x2F;home&#x2F;hadoop&#x2F;install&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;*:&#x2F;home&#x2F;hadoop&#x2F;install&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn:&#x2F;home&#x2F;hadoop&#x2F;install&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;*:&#x2F;home&#x2F;hadoop&#x2F;install&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;*&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure></li>
<li>修改mapred-site.xml，添加如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.jobhistory.address&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;centos1:10020&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;centos1:19888&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="hadoop拷贝到centos2和centos3"><a href="#hadoop拷贝到centos2和centos3" class="headerlink" title="hadoop拷贝到centos2和centos3"></a>hadoop拷贝到centos2和centos3</h2><p>之前的克隆的时候的从centos1中克隆来的，但没有配置，在这里，先把centos2和centos3的hadoop目录删了，通过命令吧刚配置的centos1的hadoop拷贝过去。当前，如果读到这，你还没有克隆的话，先把这里的配置配了再克隆吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r .&#x2F;hadoop centos@centos2:~&#x2F;</span><br><span class="line">scp -r .&#x2F;hadoop centos@centos3:~&#x2F;</span><br></pre></td></tr></table></figure>
<h2 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h2><ol>
<li>首先执行一次格式化hdf,centos1中(namenode)<br>这是必须的，但下此再要重启服务的话就不需要了。<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[centos@centos1 hadoop]$ hdfs namenode -format</span><br><span class="line">2019-12-06 08:00:49,798 INFO namenode.NameNode: STARTUP_MSG: </span><br><span class="line">/************************************************************</span><br><span class="line">STARTUP_MSG: Starting NameNode</span><br><span class="line">STARTUP_MSG:   host = centos1/192.168.181.129</span><br><span class="line">STARTUP_MSG:   args = [-format]</span><br><span class="line">STARTUP_MSG:   version = 3.1.3</span><br><span class="line">STARTUP_MSG:   classpath = /home/centos/hadoop/etc/hadoop:/home/ce</span><br><span class="line">....省略</span><br></pre></td></tr></table></figure></li>
<li>启动start-dfs,start-yarn</li>
</ol>
<p>在centos1中，也就是namenode中启动<code>start-dfs.sh</code>,必须在namenode中启动<br>然后去centos2,也就是resourceManager，<code>start-yarn.sh</code>,必须在resourceManager上启动<br>以上的启动位置，是强制的，否则出现服务启动缺失等其他异常情况。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[centos@centos1 hadoop]$ start-dfs.sh </span><br><span class="line">Starting namenodes on [centos1]</span><br><span class="line">Starting datanodes</span><br><span class="line">Starting secondary namenodes [centos3]</span><br><span class="line">[centos@centos2 hadoop]$ start-yarn.sh </span><br><span class="line">Starting resourcemanager</span><br><span class="line">Starting nodemanagers</span><br><span class="line">[centos@centos1 hadoop]$ jps</span><br><span class="line">15426 NameNode</span><br><span class="line">15938 Jps</span><br><span class="line">15561 DataNode</span><br><span class="line">15868 NodeManager</span><br><span class="line">[centos@centos2 hadoop]$ jps</span><br><span class="line">15028 ResourceManager</span><br><span class="line">15428 Jps</span><br><span class="line">14872 DataNode</span><br><span class="line">15161 NodeManager</span><br><span class="line">[centos@centos3 hadoop]$ jps</span><br><span class="line">14214 SecondaryNameNode</span><br><span class="line">14104 DataNode</span><br><span class="line">14317 NodeManager</span><br><span class="line">14414 Jps</span><br></pre></td></tr></table></figure>
<p>这里，因为测试的时候忘记执行<code>hdfs namenode -format</code>命令了，所以出现了错误，所以日志目录没有删除，这里如果第一次启动的话会提示WARN没有logs文件，会自动创建。不必在意。</p>
<p>以上服务，一个都不能少。如果少了哪个，则查看nameNode机器的日志或其他节点的日志。<br>如果集群启动失败，则必须把服务先关停，然后删除每个节点的data 和logs目录，然后再hdfs namenode -format。</p>
<p>记得关闭防火墙，避免无法访问web服务，如果不想关闭，那么去开放端口吧。每次重启需要执行关闭命令，也可以永久关闭。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"># 查看状态</span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"># 临时关闭</span><br><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>
<p>然后可以再宿主机上，通过访问centos1的ip地址:50070端口即可访问web页面。这里的地址是192.168.181.129:50070.<br>进入后选择最后一项Utilities，选择呢Brower the file system即可看到HDFS文件系统。</p>
<h2 id="HDFS文件测试"><a href="#HDFS文件测试" class="headerlink" title="HDFS文件测试"></a>HDFS文件测试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir -p &#x2F;user&#x2F;input</span><br><span class="line">hdfs dfs -put abc.txt &#x2F;user&#x2F;input</span><br><span class="line"></span><br><span class="line">hdfs dfs -mkdir -p &#x2F;user&#x2F;package</span><br><span class="line">hdfs dfs -put ~&#x2F;jdk-8u231-linux-x64.tar.gzip &#x2F;user&#x2F;package</span><br></pre></td></tr></table></figure>
<p>上传了一个小文件，一个大文件。查看centos1:50070,发现是有的。以128M为一个block，abc.txt占用一个块，jdk为俩个块。</p>
<p>如何在本地查找,进入到data目录中找<br><code>/home/centos/hadoop/data/data/current/BP-2112740988-192.168.181.129-1562738006972/current/finalized/subdir0/subdir0</code></p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署完全分布式Hadoop</title>
    <url>/2020/03/22/Hadoop/Docker%E9%83%A8%E7%BD%B2%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8FHadoop/</url>
    <content><![CDATA[<h1 id="Docker部署完全分布式Hadoop"><a href="#Docker部署完全分布式Hadoop" class="headerlink" title="Docker部署完全分布式Hadoop"></a>Docker部署完全分布式Hadoop</h1><h2 id="编写镜像文件构建镜像"><a href="#编写镜像文件构建镜像" class="headerlink" title="编写镜像文件构建镜像"></a>编写镜像文件构建镜像</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> cgq_rain@<span class="number">163</span>.com</span><br><span class="line"><span class="comment"># 切换工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr</span></span><br><span class="line"><span class="comment"># 执行命令创建目录</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir jdk</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir hadoop</span></span><br><span class="line"><span class="comment"># 添加本地文件到镜像中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk1.8 /usr/jdk</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> hadoop /usr/hadoop</span></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=/usr/jdk</span><br><span class="line"><span class="keyword">ENV</span> HADOOP_HOME=/usr/hadoop</span><br><span class="line"><span class="keyword">ENV</span> PATH=$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install openssh-server</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install openssh-clients</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install passwd</span></span><br></pre></td></tr></table></figure>

<p>要添加文件，jdk1.8和hadoop都是目录，而<code>ADD jdk1.8 /usr/jdk</code>表示将当前dockerfile同目录下的jdk1.8目录下所有数据添加到容器的/usr/jdk目录中。</p>
<p>使用命令构建镜像，执行命令完成后，镜像会出现在docker images中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f Dockerfile -t chen/base-hadoop:0.1 .</span><br></pre></td></tr></table></figure>

<ul>
<li>-f参数表示dockerfile文件</li>
<li>-t表示镜像名和版本</li>
<li>最后的 . 表示当前目录</li>
</ul>
<p>确保dockerfile所属目录尽量是干净的目录。</p>
<h2 id="配置自定义网络"><a href="#配置自定义网络" class="headerlink" title="配置自定义网络"></a>配置自定义网络</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create --subnet=192.168.0.0/24 hadoop</span><br></pre></td></tr></table></figure>

<p>自定义网络，192.168.0.0网段，网络名为hadoop，默认为桥接网络。</p>
<p>在创建完成后在<code>ifconfig</code>中会看到定义的网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">br-3c0945ebc199: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.0.1  netmask 255.255.255.0  broadcast 192.168.0.255</span><br><span class="line">        inet6 fe80::42:67ff:fee6:b900  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 02:42:67:e6:b9:00  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 19586  bytes 4595681 (4.3 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 14136  bytes 3194964 (3.0 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>

<p>此时，如果容器已经配置好ip，则虚拟机和容器是可以互相ping通的。</p>
<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name hadoop1  --network=hadoop --ip=192.168.0.11 -dit --privileged chen/base-hadoop:0.1 /usr/sbin/init</span><br></pre></td></tr></table></figure>

<p>执行此命令，需要注意顺序问题，否则启动会出错。另外因为如果要是用centos的systemctl命令则需要 –privileged 和/usr/sbin/init 参数。</p>
<p>分别启动三个容器命名为hadoop1，hadoop2，hadoop3，指定ip为11,12,13</p>
<h2 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h2><p>这个在配置免密登录是需要用到密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>

<p>passwd命令默认没有，在构建镜像是已经安装了passwd依赖。</p>
<h2 id="配置hosts文件"><a href="#配置hosts文件" class="headerlink" title="配置hosts文件"></a>配置hosts文件</h2><p>三个容器都配置,修改/etc/hosts文件</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">192.168.0.11	centos1</span><br><span class="line">192.168.0.12	centos2</span><br><span class="line">192.168.0.13	centos3</span><br></pre></td></tr></table></figure>

<h2 id="免密登录配置"><a href="#免密登录配置" class="headerlink" title="免密登录配置"></a>免密登录配置</h2><p>三个容器都执行这三条命令。执行<code>ssh-copy-id</code>命令时输入root密码就是修改的root密码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id 192.168.0.11</span><br><span class="line">ssh-copy-id 192.168.0.12</span><br><span class="line">ssh-copy-id 192.168.0.13</span><br></pre></td></tr></table></figure>

<h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><table>
<thead>
<tr>
<th></th>
<th>centos1</th>
<th>centos2</th>
<th>centos3</th>
</tr>
</thead>
<tbody><tr>
<td>HDFS</td>
<td>NameNode<br/>DataNode</td>
<td>DataNode</td>
<td>SecondaryNameNode<br/>DataNode</td>
</tr>
<tr>
<td>YARN</td>
<td>NodeManager</td>
<td>NodeManager ResourceManager</td>
<td>NodeManager</td>
</tr>
</tbody></table>
<p>以上是集群规划。</p>
<p>每个DataNode一定是有个NodeManager的。NameNode是比较重要的，管理所有的节点，所以一般是单独占一个服务器，但是只有三台机器又要做三个机器的数据存储。</p>
<p><strong>修改配置文件</strong></p>
<ol>
<li>配置hadoop-env.sh，找到被注释的JAVA_HOME与HADOOP_HOME，解开注释，修改为对应位置。</li>
<li>修改core-site.xml,添加如下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 指定HDFS中的NameNode地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;</span><br><span class="line">   &lt;value&gt;hdfs:&#x2F;&#x2F;centos1:9000&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;!-- 指定hadoop运行时产生的临时文件 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">   &lt;value&gt;&#x2F;usr&#x2F;hadoop&#x2F;data&#x2F;hadoopdata&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>修改hdfs-site.xml，添加如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;dfs.namenode.secondary.http-address&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;centos3:50090&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;description&gt;secondarynamenode运行节点的信息,和namenode不同节点&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;3&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;description&gt;HDFS的数据块副本存储个数&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;dfs.namenode.http-address&lt;&#x2F;name&gt;</span><br><span class="line">	&lt;value&gt;centos1:50070&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;&#x2F;usr&#x2F;hadoop&#x2F;data&#x2F;name&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;description&gt;namenode的数据存储目录&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.data.dir&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;&#x2F;usr&#x2F;hadoop&#x2F;data&#x2F;data&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;description&gt;datanode的数据存储目录&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure></li>
<li>修改yarn-site.xml，添加如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.hostname&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;centos2&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;description&gt;yarn集群为mapreduce程序提供的shuffle服务&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>
有时候，有的yarn还是什么日志报错，具体问题忘了，是需要配置<code>yarn.application.classpath</code>的属性，它的值通过<code>hadoop classpath</code>命令打出来。hadoop是直接添加到镜像里的，所以要想不改必须此处配置的和环境变量一致。建议进入容器更改这个值。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.application.classpath&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;&#x2F;usr&#x2F;hadoop&#x2F;etc&#x2F;hadoop:&#x2F;usr&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;*:&#x2F;usr&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;*:&#x2F;usr&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs:&#x2F;usr&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;*:&#x2F;usr&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;*:&#x2F;usr&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;*:&#x2F;usr&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;*:&#x2F;usr&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn:&#x2F;usr&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;*:&#x2F;usr&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;*&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure></li>
<li>修改mapred-site.xml，添加如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.jobhistory.address&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;centos1:10020&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;centos1:19888&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p><strong>建议在构建镜像前把hadoop配置好，确定好环境变量，把hadoop配置文件配置的和环境变量确定一致。</strong></p>
</blockquote>
<h2 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h2><h3 id="修改启动脚本配置"><a href="#修改启动脚本配置" class="headerlink" title="修改启动脚本配置"></a>修改启动脚本配置</h3><p>启动集群前需要配置一下start-dfs.sh文件。因为容器默认用户是root，而启动start-dfs.sh会报错</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ERROR: Attempting to operate on hdfs namenode as root</span><br><span class="line">ERROR: but there is no HDFS_NAMENODE_USER defined. Aborting operation.</span><br><span class="line">Stopping datanodes</span><br><span class="line">ERROR: Attempting to operate on hdfs datanode as root</span><br><span class="line">ERROR: but there is no HDFS_DATANODE_USER defined. Aborting operation.</span><br><span class="line">Stopping secondary namenodes [centos3]</span><br><span class="line">ERROR: Attempting to operate on hdfs secondarynamenode as root</span><br><span class="line">ERROR: but there is no HDFS_SECONDARYNAMENODE_USER defined. Aborting operation.</span><br></pre></td></tr></table></figure>

<p>这个问题在三台虚拟机上，使用普通用户处理是没有问题的。</p>
<p>错误说没有配置HDFS_NAMENODE_USER和HDFS_SECONDARYNAMENODE_USER，因此需要进行配置。</p>
<p>因此，在启动集群之前配置start-dfs.sh和stop-dfs.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HDFS_DATANODE_USER=root</span><br><span class="line">HDFS_NAMENODE_USER=root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER=root</span><br></pre></td></tr></table></figure>

<p>以及start-yarn.sh和stop-yarn.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>

<p>以上配置每台机器都需要。且需要把配置放在第二行，bin bash声明后面</p>
<h3 id="格式化并启动集群"><a href="#格式化并启动集群" class="headerlink" title="格式化并启动集群"></a>格式化并启动集群</h3><p>格式化,在namenode中,就是centos1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>



<p>在hadoop1的机器执行命令，也就是centos1,必须在namenode中启动hdfs</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure>

<p>在hadoop2的机器上执行命令，也就是centos2,必须在resourceManager中启动yarn,这也是强制的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure>

<h3 id="启动结果"><a href="#启动结果" class="headerlink" title="启动结果"></a>启动结果</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@901ae10904fb usr]# jps</span><br><span class="line">7012 Jps</span><br><span class="line">6393 DataNode</span><br><span class="line">6732 NodeManager</span><br><span class="line">6253 NameNode</span><br><span class="line"></span><br><span class="line">[root@9550b16ec82d hadoop]# jps</span><br><span class="line">3952 Jps</span><br><span class="line">3602 NodeManager</span><br><span class="line">3465 ResourceManager</span><br><span class="line">3278 DataNode</span><br><span class="line"></span><br><span class="line">[root@59d708cc0206 hadoop]# jps</span><br><span class="line">2384 SecondaryNameNode</span><br><span class="line">2466 NodeManager</span><br><span class="line">2275 DataNode</span><br><span class="line">2631 Jps</span><br></pre></td></tr></table></figure>

<p>从上至下分别为centos1到centos3的输出进程。必须满足此种情况才能正常使用。如果nameNode无法正常启动，首先检查配置文件，其次重新格式化一次，在执行<code>hdfs namenode -format</code>之前，先把三台机器的data目录和logs目录全部删除，再执行格式化命令，确保centos1先启动dfs，如果namenode没有问题，再centos2执行yarn。否则需要在centos1中查找namenode的日志记录,查找namenode没有正常启动的原因。</p>
<h3 id="关闭集群"><a href="#关闭集群" class="headerlink" title="关闭集群"></a>关闭集群</h3><p>首先在centos2上关闭stop-yarn.sh，再在centos1上stop-dfs.sh</p>
<h2 id="测试hdfs并访问50070"><a href="#测试hdfs并访问50070" class="headerlink" title="测试hdfs并访问50070"></a>测试hdfs并访问50070</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir -p &#x2F;user&#x2F;input</span><br><span class="line">hdfs dfs -put a.txt &#x2F;user&#x2F;input</span><br></pre></td></tr></table></figure>

<p>在虚拟机上访问，192.168.0.11:50070就可以看到了。可以查看文件系统目录。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>代码开发常用方法说明</title>
    <url>/2020/03/22/Javascript/%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="代码开发常用方法说明"><a href="#代码开发常用方法说明" class="headerlink" title="代码开发常用方法说明"></a>代码开发常用方法说明</h1><h2 id="Java篇"><a href="#Java篇" class="headerlink" title="Java篇"></a>Java篇</h2><h2 id="JavaScript篇"><a href="#JavaScript篇" class="headerlink" title="JavaScript篇"></a>JavaScript篇</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol>
<li><p>$(“form”).serialize()：返回一个以form内所有包含name的表单元素的值，通过&amp;连接</p>
</li>
<li><p>$(“#form”).serializeArray()：返回一个将每个包含name的表单元素组成json，并将所有json形成一个数组</p>
<blockquote>
<p>如果元素中包含多选值的元素，可能造成每个值都添加一次name，select2插件中多选就是如此。</p>
</blockquote>
</li>
</ol>
<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="阻止表单提交"><a href="#阻止表单提交" class="headerlink" title="阻止表单提交"></a>阻止表单提交</h4><ol>
<li>可以在form标签中添加onSubmit属性，并返回一个函数，可在函数中控制返回true为提交，false为不提交</li>
<li>监听表单submit事件，并使用event.preventDefault();阻止元素发生默认行为。</li>
<li>在form中btn按钮中点击事件e.preventDefault();可阻止默认提交</li>
</ol>
<h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><h4 id="select2选择框插件"><a href="#select2选择框插件" class="headerlink" title="select2选择框插件"></a>select2选择框插件</h4><p>此处为<a href="https://github.com/select2/select2">Github地址</a>，此处可以查看<a href="http://select2.github.io/select2/#documentation">官方文档</a></p>
<p>详细的使用方法在文档已经说明。避免看文档麻烦。此处简要说明使用过程。</p>
<ol>
<li><p>直接按照官网，<code>$(&quot;select[name=&#39;unit&#39;]&quot;).select2(&#123;width:&#39;50%&#39;,placeholder:&#39;请选择&#39;&#125;);</code>，即可初始化一个下拉，html依然只是一个select标签，如果多选需要在标签上添加<code>multiple</code>属性。</p>
</li>
<li><p>在使用placeholder或其他特定属性显示时，必须在原有option的基础上添加一个空的option值，否则placeholder等属性不会显示。</p>
</li>
<li><p>属性值的回显问题，回显一般使用``$(“select[name=’unit’]”).val(值).trigger(‘change’)`的方式赋值，对于多选，需要在val中防止一个数组才可以，而且如果在val中赋值一个option中没有的值，其值是不会显示的。且值的回显必须等到select2初始化方法渲染完才可以赋值，否则option可以出来，但赋值没有完成。</p>
<p>比如以jsp为例，初始进入页面不仅需要json请求配置option，又要对象属性赋值，因此在select中的option添加完毕之后<code>$(&quot;select[name=&#39;unit&#39;]&quot;).html(optionhtml)</code>，再执行回显的js才可以回显成功。</p>
</li>
<li><p>包括搜索配置，清除按钮，选择完不自动关闭，排序等，以及直接ajax属性请求数据显示。</p>
</li>
</ol>
<p><strong>示例1</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;width-15 active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span>统计字段：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;width-35&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;statisticsField&quot;</span> <span class="attr">multiple</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在$(function()&#123;&#125;)下初始化选择框</span></span><br><span class="line">$(<span class="string">&quot;select[name=&#x27;statisticsField&#x27;]&quot;</span>).select2(&#123;<span class="attr">width</span>:<span class="string">&#x27;50%&#x27;</span>,<span class="attr">placeholder</span>:<span class="string">&#x27;请选择&#x27;</span>&#125;);<span class="comment">//统计字段</span></span><br><span class="line"><span class="comment">//在某个加载调用方法中配置option</span></span><br><span class="line">$(<span class="string">&quot;select[name=&#x27;statisticsField&#x27;]&quot;</span>).html(html);</span><br><span class="line"><span class="comment">//在配置完option值之后再进行回显设置</span></span><br><span class="line"><span class="keyword">if</span> (statisticsField!==<span class="literal">undefined</span>&amp;&amp;statisticsField!==<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">	$(<span class="string">&quot;select[name=&#x27;statisticsField&#x27;]&quot;</span>).val(statisticsField.split(<span class="string">&#x27;,&#x27;</span>)).trigger(<span class="string">&#x27;change&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="一般标准的Bootstrap-form表单"><a href="#一般标准的Bootstrap-form表单" class="headerlink" title="一般标准的Bootstrap form表单"></a>一般标准的Bootstrap form表单</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;baseForm&quot;</span> <span class="attr">name</span>=<span class="string">&quot;baseForm&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form form-horizontal&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag">                                  <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 80%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;groupId&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;color-required&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>规划分类：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;group.name&quot;</span> <span class="attr">required</span> <span class="attr">readonly</span> <span class="attr">class</span>=<span class="string">&quot;form-control required&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;color-required&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>模板名称：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;modelName&quot;</span> <span class="attr">required</span> <span class="attr">class</span>=<span class="string">&quot;form-control required&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;color-required&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>模板文件名称：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;modelFileName&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                &lt;c:forEach items=&quot;$&#123;modelPath&#125;&quot; var=&quot;item&quot;&gt;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;item&#125;&quot;</span>&gt;</span>$&#123;item&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                &lt;/c:forEach&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;color-required&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>缩略图：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;thumbnail-img&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upload-file&quot;</span>&gt;</span>选择文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;color-required&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>配置人员：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;createBy.name&quot;</span> <span class="attr">required</span> <span class="attr">readonly</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;fns:getUser().name&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;color-required&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>配置时间：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;createDate&quot;</span> <span class="attr">required</span> <span class="attr">readonly</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;fns:getDate(&quot;</span><span class="attr">YYYY-MM-dd</span> <span class="attr">HH:mm:ss</span>&quot;)&#125;&quot;/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;color-required&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>前端显示<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;show&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span>是<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;show&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span>否</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;thematicSubmit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>常用</category>
      </categories>
      <tags>
        <tag>常用</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软相关问题</title>
    <url>/2020/03/20/%E5%B8%86%E8%BD%AF/%E5%B8%86%E8%BD%AF%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="帆软相关问题"><a href="#帆软相关问题" class="headerlink" title="帆软相关问题"></a>帆软相关问题</h1><h3 id="基于8-0低版本问题"><a href="#基于8-0低版本问题" class="headerlink" title="基于8.0低版本问题"></a>基于8.0低版本问题</h3><ol>
<li><p>为文本控件设置默认值，控件值为空设置默认值。当点击控件后，设置的默认消失了。原因是设置了控件的值长度。取消长度规则设置，若需要长度校验可在控件属性-编辑后时间中处理。</p>
</li>
<li><p>当你编辑控件文本框时，如果没有点击空白区域，那么控件不会认为你已经编辑结束，且输入的值，会在编辑结束后才会被控件接收到。因此当你编辑完控件值后，直接点击保存，那么得到的值是上一个编辑完成后的值。</p>
</li>
<li><p>报表显示高度问题。当最后一行没有单元格被占用是，报表就到结束了。如果你想获取某单元格的数据放到(动态js)另一个地方，以便其他操作的时候可以取，那么这个时候就不能把值放到报表无数据最后面。因为现实报表后，没有行占用。就没有这一样，那么你要获取的话就获取不到。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>帆软</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>帆软</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软JS API</title>
    <url>/2020/03/20/%E5%B8%86%E8%BD%AF/%E5%B8%86%E8%BD%AFJS%20API/</url>
    <content><![CDATA[<p><strong>在报表内，直接使用contentPane对象调取方法。如果在js中可使用content_iframe(iframe控件名称)获取contentPane子对象调取API</strong></p>
<p>//获取控件的值(在报表内)<br>contentPane.curLGP.write.getWidgetsByName(“YYGDJ”).getValue();</p>
<p>//获取某单元格的值，第一个参数为Sheet编号，第二个为列号(0开始)，第三个为行号(0开始)<br>contentPane.getCellValue({reportIndex:0, columnIndex: 8, rowIndex:9});//js中用法<br>contentPane.getCellValue(0, 8, 9);//帆软自定义脚本用法</p>
<p>地址<a href="https://help.finereport.com/doc-view-619.htm">https://help.finereport.com/doc-view-619.htm</a></p>
]]></content>
      <categories>
        <category>帆软</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>帆软</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软报表相关高级用法</title>
    <url>/2020/03/20/%E5%B8%86%E8%BD%AF/%E5%B8%86%E8%BD%AF%E6%8A%A5%E8%A1%A8%E7%9B%B8%E5%85%B3%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="帆软报表相关高级用法"><a href="#帆软报表相关高级用法" class="headerlink" title="帆软报表相关高级用法"></a>帆软报表相关高级用法</h1><h3 id="填报报表的模板数据集"><a href="#填报报表的模板数据集" class="headerlink" title="填报报表的模板数据集"></a>填报报表的模板数据集</h3><p>通常的模板数据集直接使用sql语句编写，若有模板参数，则通过${参数名称}的方式来引用它。这是通常的做法。<br>另外可以使用携带方法的查询语句，类似如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$&#123;IF(cfcount = 0,</span><br><span class="line">&quot;<span class="keyword">select</span> ywh, bdcdyh <span class="keyword">from</span> slsq s <span class="keyword">where</span> s.ywh = <span class="string">&#x27;&quot; + YWH + &quot;&#x27;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span><span class="keyword">select</span> * <span class="keyword">FROM</span> CFDJ <span class="keyword">where</span> ywh = <span class="string">&#x27;&quot; + YWH + &quot;&#x27;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">)&#125;</span></span><br></pre></td></tr></table></figure>
<p>即，使用帆软函数IF，外部使用${}表达式，内部参数就不需要使用了。IF内的书写按照函数的方式，携带引号作为字符串。当前查询语句的内容是哦按段cfcount的值是否为0，是就执行第二个参数的语句，否则执行第三个参数的语句。<br>还可以使用其他帆软函数进行查询。</p>
<h3 id="帆软公式中使用数据库查询SQL函数"><a href="#帆软公式中使用数据库查询SQL函数" class="headerlink" title="帆软公式中使用数据库查询SQL函数"></a>帆软公式中使用数据库查询SQL函数</h3><p>例如:模板参数，在web的时候就可以通过url的方式传递参数到报表里。报表就可以使用这些参数。以公式的方式设置模板参数的默认值，我们可以使用SQL来查询数据库获得值进行定义。例如下面的:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF(ISNULL(YWH), 0, SQL(&quot;BDCSDE&quot;,&quot;<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> cfdj <span class="keyword">where</span> ywh =<span class="string">&#x27;&quot; + YWH + &quot;&#x27;</span><span class="string">&quot;, 1, 1))</span></span><br></pre></td></tr></table></figure>
<p>以上表达式就表示定义一个模板参数的默认值。它使用了帆软的SQL函数，可以通过服务器连接来查询，在服务器连接中定义的连接。第一个参数就是定义的连接名称，后面的为查询语句，第三个和第四个参数分别表示取第几行第几列的单元数据。以上实例就表示，若YWH为null，则返回0，否则执行sql语句，语句中返回的是第一行第一列的数据。</p>
<h3 id="填报报表的配置属性的数据校验"><a href="#填报报表的配置属性的数据校验" class="headerlink" title="填报报表的配置属性的数据校验"></a>填报报表的配置属性的数据校验</h3><p>在配置填报报表属性设置中，有数据校验选项卡，可以设置数据校验，同样可以使用验证公式的方式校验。例如校验身份证完整性:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(I16 &#x3D; &quot;1&quot;, if(len(M16) &#x3D; 0, true, REGEXP(M16, &quot;(^\\d&#123;15&#125;$)|(^\\d&#123;17&#125;([0-9]|[Xx])$)&quot;)), true)</span><br></pre></td></tr></table></figure>
<p>以上公式表达式表示，对I16单元格进行判断，然后判断M16单元格的长度，若不为0则对其进行正则表达式的判定。<br>设置了数据校验，在填报报表操作时，便会在点击报表提交后进行数据的校验。</p>
<h3 id="关于填报报表的数据回显问题"><a href="#关于填报报表的数据回显问题" class="headerlink" title="关于填报报表的数据回显问题"></a>关于填报报表的数据回显问题</h3><p>例如当前报表的某个单元格控件为下拉控件。则你需要设置其数据字典，实际值和显示值，在数据显示的时候传递的值是id，那么显示的就是对应的显示值。这也是通常回显是出现的传递id出现值得原因。</p>
<h3 id="有关模板Web属性配置，报表页面设置"><a href="#有关模板Web属性配置，报表页面设置" class="headerlink" title="有关模板Web属性配置，报表页面设置"></a>有关模板Web属性配置，报表页面设置</h3><p>在菜单栏的<strong>模板</strong>下的<strong>模板Web属性</strong>,基本上使用web填报报表都会设置，在填报页面设置选项卡中都使用<strong>工具栏</strong>和<strong>事件配置</strong>。<br>还有设置的报表显示为值为居中，直接显示控件。</p>
<p>在帆软报表中，一般按项目业务，重要的就是分页报表与填报报表。而除了报表本身外，javascript的使用也是帆软必不可少的助力。通常新手只知道通过配置报表等显示数据。但报表是Web端展示，通过Web项目，也就是将报表模板转换成html和js在页面上显示。所以，操作的终究是内置js或自定义的js配置。</p>
<p>填报页面配置选项卡，配置工具栏。可以选择<strong>自定义按钮</strong>工具，添加到工具栏，然后配置图标，控件别名，然后就是配置自定义事件，也就是自定义一个js脚本，在页面上点击后，就会触发帆软模板将此封装的js方法。<br>在js的编写中，不仅可以写原生的js，还可以有帆软内置的js方法。我们可以先使用原生的，类似如下，打开一个新窗口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">&quot;ReportServer?reportlet=edit/bdc_ws_slpz.cpt&amp;op=write&amp;YWH=&quot;</span>  + ywh + <span class="string">&quot;&amp;TASKTAG=&quot;</span> + tasktag + <span class="string">&quot;&amp;USERID=&quot;</span> + userid , <span class="string">&quot;_blank&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>例如帆软提供的js操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proid=contentPane.curLGP.write.getWidgetByName(<span class="string">&quot;proid_param&quot;</span>).getValue();</span><br><span class="line"><span class="built_in">window</span>.parent.parent.showModel(bdcUrl+<span class="string">&#x27;/lpb/queryZdList?proid=&#x27;</span>+proid,<span class="string">&quot;选择楼盘表&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>以上可能是，获取控件名为proid_param的控件值。</p>
<p>在web页面中，可能需要引入finereport.js这个帆软的js，可以使用FR这个对象。这个先不说，我们先说自定义的js。看下面的事件设置。</p>
<p>事件设置可以配置当前填报报表在任意操作下会触发的事件，包括加载前后，填报前后，导出，打印等等事件。然后给它定义一个事件名称，事件类型定为javascript脚本，然后下面，甚至可以引用js文件，也就是放在帆软服务项目的static下的js，你可以引用它。</p>
<h3 id="contentPane对象"><a href="#contentPane对象" class="headerlink" title="contentPane对象"></a><a href="https://help.finereport.com/doc-view-619.htm">contentPane对象</a></h3><p>据官网介绍，contentPane是存放cpt报表内容的容器，是contentWindow的属性。可在js中直接操作。<br>首先说常用方法:以下方法可能参数不全，官网的资料不全(仅通过项目与官网对比)</p>
<ul>
<li>getCellValue(cell)</li>
<li>getCellValue(reportIndex,columnIndex,rowIndex):分表表示sheet编号，列号，行号，都以0开始。我们可以给这三个值指定模板上任意值来表示一个单元格。</li>
<li><a href="https://help.finereport.com/doc-view-595.html">deleteReportRC</a>(null,number|array):删除指定行，只有填报报表可用。第二个参数可以是行号或一个单元格id数组，如下:  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $span = $(<span class="string">&#x27;.fr-checkbox-checkon&#x27;</span>);  <span class="comment">//定义选中的复选框 </span></span><br><span class="line"><span class="keyword">var</span> darray = []; </span><br><span class="line"><span class="keyword">var</span> $tds = $(<span class="string">&quot;td&quot;</span>).has($span);   <span class="comment">//定义选中复选框的单元格 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = $tds.length; i &lt; len; i ++) &#123;    <span class="comment">//遍历选中的单元格</span></span><br><span class="line">     <span class="keyword">var</span> id = $($tds[i]).attr(<span class="string">&quot;id&quot;</span>);     <span class="comment">//给选中的单元格加上id的属性</span></span><br><span class="line">     <span class="keyword">if</span> (id) &#123;</span><br><span class="line">	darray.push(id);     <span class="comment">//将选中的id放入到数组中</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">contentPane.deleteReportRC(<span class="keyword">null</span>,darray); </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>帆软</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>帆软</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker使用操作及命令</title>
    <url>/2020/03/19/Docker/Docker%E4%BD%BF%E7%94%A8%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Docker使用操作及命令"><a href="#Docker使用操作及命令" class="headerlink" title="Docker使用操作及命令"></a>Docker使用操作及命令</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="ubuntu的源更换"><a href="#ubuntu的源更换" class="headerlink" title="ubuntu的源更换"></a>ubuntu的源更换</h3><p>/etc/apt/sources.list中替换为此</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h3 id="ubuntu安装docker"><a href="#ubuntu安装docker" class="headerlink" title="ubuntu安装docker"></a>ubuntu安装docker</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker</span><br><span class="line">sudo apt-get install docker-io</span><br></pre></td></tr></table></figure>
<p>安装后需要在docker命令前加上sudo，贴别麻烦，需要将当前用户添加到docker组中</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker     #添加docker用户组,可能该组已存在，不需要执行此命令</span><br><span class="line">sudo gpasswd -a $USER docker     #将登陆用户加入到docker用户组中</span><br><span class="line">newgrp docker     #更新用户组</span><br></pre></td></tr></table></figure>

<p>或者使用<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">官网</a>的安装方式(<strong>此处安装方式建议前往docker官网依据操作系统对应安装,还是很简单的</strong>)</p>
<p>卸载docker相关</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line">whereis docker	//找到并删除</span><br></pre></td></tr></table></figure>

<p>安装存储库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line"></span><br><span class="line">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -</span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu \</span><br><span class="line">   $(lsb_release -cs) \</span><br><span class="line">   stable&quot;</span><br></pre></td></tr></table></figure>

<p>安装docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="docker查询下载超时问题"><a href="#docker查询下载超时问题" class="headerlink" title="docker查询下载超时问题"></a>docker查询下载超时问题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line">#添加如下内容</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>



<h3 id="当前用户使用docker权限"><a href="#当前用户使用docker权限" class="headerlink" title="当前用户使用docker权限"></a>当前用户使用docker权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加用户到docker组</span></span><br><span class="line">sudo gpasswd -a &#123;用户名&#125; docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新组</span></span><br><span class="line">newgrp docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启服务</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="安装windows-docker-desktop时-应对windows下的Docker-desktop"><a href="#安装windows-docker-desktop时-应对windows下的Docker-desktop" class="headerlink" title="安装windows docker desktop时(应对windows下的Docker desktop)"></a>安装windows docker desktop时(应对windows下的Docker desktop)</h3><p>出现没有开启bios虚拟化，但是在任务管理器-性能里已经开启，且Helper-V也已经开启，如果还说bios需要开启虚拟化则以管理员cmd执行命令<code>bcdedit /set hypervisorlaunchtype Auto</code>,重启电脑即可。</p>
<p>如果需要关闭docker虚拟化，不光要移除helper-v角色，还需要直营命令，关闭虚拟化<code>bcdedit /set hypervisorlaunchtype off</code></p>
<h2 id="Docker-容器命令"><a href="#Docker-容器命令" class="headerlink" title="Docker 容器命令"></a>Docker 容器命令</h2><h3 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<p>检测到本地没有hello-world镜像，便会到仓库下载最新版，并启用这个镜像</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><ul>
<li>docker search [image_name]</li>
<li>docker search -s 30 [image_name]:点赞数stark超过30的当前镜像名称</li>
<li>docker search [image_name] –automated:查询有自动构建的镜像</li>
<li>docker pull [image_name][:TAG]:拉取镜像，或添加镜像标签版本</li>
<li></li>
</ul>
<h4 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作:"></a>镜像操作:</h4><ul>
<li>docker images -a:列出本地所有镜像(镜像是分层的)</li>
<li>docker images -qa:列出所有本地镜像的镜像id</li>
<li>docker images –digests：查询所有镜像的详情</li>
<li>docker images –no-trunc:查询所有镜像的完整信息</li>
<li>docker rmi image_name[:TAG]:删除镜像</li>
<li>docker rm container_id:删除已停止的容器</li>
<li>批量删除容器:docker rm -f ${docker ps -a -q}</li>
</ul>
<h4 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h4><ul>
<li>–name=”容器名字”:为容器指定名字</li>
<li>-d:后台运行容器，并返回容器ID，守护式进程</li>
<li>-i:以交互模式运行容器，通常与-t同时使用</li>
<li>-t:为容器分配一个伪输入终端，通常与-i一起使用</li>
<li>-P:随机端口映射</li>
<li>-p:指定端口映射，格式如下:<ul>
<li>ip:hostPort:containerPort</li>
<li>ip::containerPort</li>
<li>hostPort:containerPort</li>
<li>containerPort</li>
</ul>
</li>
</ul>
<h4 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h4><ul>
<li>docker ps -a:列出当前正在运行的和历史上运行的容器</li>
<li>docker ps -l:显示最近创建的容器</li>
<li>docker ps -n [num]:显示最近启动的n个容器</li>
<li>docker ps -q:静默模式，只显示容器编号</li>
<li>docker ps –notrunc:不截断输出</li>
</ul>
<p>退出启动容器</p>
<ul>
<li>exit:容器停止退出</li>
<li>ctrl+Q+P:容器不停止退出</li>
<li>docker start container_id:启动容器</li>
<li>docker restart container_id:重启容器</li>
<li>docker stop container_id:停止容器</li>
<li>docker kill container_id:强制关闭容器</li>
</ul>
<h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><ul>
<li><p>docker logs -f -t –tail container_id: 日志查看</p>
<ul>
<li>-t:加入时间戳</li>
<li>-f:跟随最新的日志打印</li>
<li>–tail 数字:显示最后多少条</li>
</ul>
</li>
<li><p>docker inspect container_id:查看容器内部运行细节</p>
</li>
<li><p>docker exec -it container_id ls -l /tmp:不打开终端，直接打印出容器内部命令</p>
</li>
<li><p>docker exec -it container_id /bin/bash:打开新终端，启用一个进程</p>
</li>
<li><p>docker attach container_id:直接进入启动命令的终端，不会启动新的进程</p>
</li>
<li><p>从容器内文件拷贝到本地:docker cp container_id:/path localpath</p>
</li>
</ul>
<h2 id="Docker镜像操作"><a href="#Docker镜像操作" class="headerlink" title="Docker镜像操作"></a>Docker镜像操作</h2><h3 id="镜像原理"><a href="#镜像原理" class="headerlink" title="镜像原理"></a>镜像原理</h3><p>镜像是轻量级、可执行的独立软件包，用来打包软件运行环境和基于环境开发的软件，它包含某个软件所需的所有内容，包括代码，运行时，库，环境变量和配置文件。</p>
<p>联合文件系统(UnionFS),是一种分层、轻量级并且高性能的文件系统，它支持对文件系统修改作为一次提交来以层层叠加，同时将不同目录挂载到同一个虚拟文件系统下。UnionFS是Docker镜像的基础。镜像可以分层进行继承，基于基础镜像(没有父镜像)，可以制作各种具体的应用镜像。</p>
<p>bootfs主要包含bootloader和kernal，bootloader主要是引导加载kernal，linux刚启动时会加载bootfs文件系统，在Docker镜像最底层是bootfs。这一层与我们经典的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核都在内存中了，此时内存的使用权由bootfs交给内核，此时系统卸载bootfs。</p>
<p>rootfs，在bootfs之上，包含经典linux系统中的/dev,/proc,/bin等目录文件。</p>
<p>对于一个精简的OS，rootfs可以很小，只需要包括基本的命令，工具和程序库就可以了，因为底层直接使用Host和kernal，自己只需要提供rootfs就可以了。因此不同的发行版本可以共用bootfs</p>
<p>资源共享：多个镜像由多个base镜像构建而来，那么宿主机秩序保存一份base镜像，可以被共享。就是是说，多某个镜像的基础镜像在之前的镜像下载中已经下载过，那么就不需要下载。整个镜像是一层层叠起来的。就像下载是，下载的是多个镜像，而不是tomcat这一个单一的镜像。</p>
<h3 id="提交镜像"><a href="#提交镜像" class="headerlink" title="提交镜像"></a>提交镜像</h3><p>以tomcat，为例，进入tomcat中的虚拟容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it 05a585c60501 &#x2F;bin&#x2F;bash</span><br><span class="line">进入后，删除docs文件，删除tomcat的文档</span><br><span class="line">docker commit -a &quot;chen&quot; -m &quot;del docs&quot; 05a585c60501 chen&#x2F;mytomcat:1.1</span><br></pre></td></tr></table></figure>
<ul>
<li>-a为作者名</li>
<li>-m为提交信息</li>
<li>最后为镜像名及版本</li>
</ul>
<h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><ul>
<li>容器的持久化</li>
<li>容器间继承和共享数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v 宿主机绝对目录:容器内绝对目录 镜像名</span><br><span class="line">docker run -it -v 宿主机绝对目录:容器内绝对目录:ro 镜像名</span><br></pre></td></tr></table></figure>
<p>执行此命令name宿主机和容器内将进行关联并且资源同步共享，目录若没有都可以自动创建，那如何才能看到被关联，可以通过<code>docker inspect container</code>看到容器内部细节。<br>不管在宿主机还是在容器内，只要存储数据文件，都会被另一方看到。<br>若容器退出且关闭，尽管宿主机关联的目录作出修改，那么容器重启后依然会同步。<br>加上ro表示容器内数据是只读的。</p>
<h4 id="使用dockerfile来进行数据卷数据共享"><a href="#使用dockerfile来进行数据卷数据共享" class="headerlink" title="使用dockerfile来进行数据卷数据共享"></a>使用dockerfile来进行数据卷数据共享</h4><p>模拟构建centos，自动进行数据卷数据共享。</p>
<ol>
<li>创建dockerfile文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">VOLUME[&quot;&#x2F;dataVolumeContainer1&quot;,&quot;&#x2F;dataVolumeContainer2&quot;]</span><br><span class="line">CMD echo &quot;finashed,--------------successed&quot;</span><br><span class="line">CMD &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure></li>
<li>使用build命令构建镜像<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -f dockerfile -t image_name[:tag] .</span><br></pre></td></tr></table></figure>
表示通过dockerfile构建，名称为image_name,构建到当前目录下</li>
</ol>
<p>-f 表示dockerfile文件的位置</p>
<p>docker挂载主机目录Docker访问出现cannot open directory:Permission denied<br>解决办法:在挂载目录后多加一个–privileged=true参数</p>
<h4 id="容器间传递共享-volumes-from命令"><a href="#容器间传递共享-volumes-from命令" class="headerlink" title="容器间传递共享 volumes-from命令"></a>容器间传递共享 volumes-from命令</h4><p>该命令可进行类似继承式volumes共享<br>即:通过创建容器c1(通过dockerfile构建的chen/centos镜像创建),该容器进行了与宿主机之间的数据卷共享，若c2也想加入其中共享，那么只需要创建c2容器继承(依据创建)于c1即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it --name c2 --volumes-from c1 chen&#x2F;centos</span><br></pre></td></tr></table></figure>
<p>然后c3,也继承c1。<br>若把c1删除，那么操作c2,向共享数据卷内添加文件，那么进入c3里也会有此文件。<br>若新建c4再继承c3,删除c3后，c4里依然有</p>
<p>总结:容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用他位置。 </p>
<p><strong>备注:</strong><br>容器退出，重进步骤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line">docker start 容器名称</span><br><span class="line">docker attach 容器名称</span><br></pre></td></tr></table></figure>


<h2 id="dockerfile解析"><a href="#dockerfile解析" class="headerlink" title="dockerfile解析"></a>dockerfile解析</h2><p>是构建docker镜像的构建文件。</p>
<ul>
<li>dockerfile</li>
<li>docker build</li>
<li>docker run</li>
</ul>
<h4 id="保留字指令"><a href="#保留字指令" class="headerlink" title="保留字指令"></a>保留字指令</h4><p>保留字指令必须大写</p>
<ul>
<li>FROM：将要编辑的基础镜像</li>
<li>MAINTAINER:镜像维护者的姓名和邮箱</li>
<li>RUN:容器构建时需要运行的命令</li>
<li>EXPOSE：对外暴露的端口</li>
<li>WORKDIR：创建容器后，默认进入的工作目录</li>
<li>ENV:构建镜像时，设置环境变量</li>
<li>ADD：将宿主机下的文件拷贝到镜像且ADD命令会自动处理url和解压包</li>
<li>COPY：拷贝文件和目录到镜像</li>
<li>VOLUMES: 容器数据卷，用于数据保存和持久化工作</li>
<li>CMD:指定容器启动时要运行的命令。dockerfile中可以有多个CMD命令，但只有最后一个生效，CMD会被docker run之后的参数替换</li>
<li>ENTRYPOINT：指定一个容器启动要运行的命令。当添加参数时，会进行参数合并</li>
<li>ONBUILD：当构建一个被继承的dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发。</li>
</ul>
<h4 id="案例构建"><a href="#案例构建" class="headerlink" title="案例构建"></a>案例构建</h4><p>模拟构建centos</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER author&lt;email&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH &#x2F;usr&#x2F;local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;successed--------ok&quot;</span><br><span class="line">CMD &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p><code>docker histroy 镜像id</code>可以查看镜像的构建历史</p>
<p>mysql容器内备份<br>docker exec 容器id sh -C ‘exec mysqldump –all-databases -uroot -p”123456”‘ &gt; /本地存储文件</p>
<h2 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h2><p>启动完容器后执行docker attach 容器id即可进入交互式容器</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo在github page上的部署</title>
    <url>/2020/03/18/NodeJS/hexo%E5%9C%A8github%20page%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="hexo在github-page上的部署"><a href="#hexo在github-page上的部署" class="headerlink" title="hexo在github page上的部署"></a>hexo在github page上的部署</h1><ul>
<li><a href="https://hexo.io/zh-cn/">网站</a></li>
<li><a href="https://segmentfault.com/a/1190000017986794">推荐的一个超详细部署博客</a></li>
</ul>
<p>在推荐文章里，里面已经说的非常清楚了。这篇文章主要描述对详细部署文章的简要说明以及本站点使用的一个主题来说明食用方式。</p>
<h2 id="安装使用hexo"><a href="#安装使用hexo" class="headerlink" title="安装使用hexo"></a>安装使用hexo</h2><p>nodejs的安装和git的安装我就不说明了。</p>
<p>直接按照<a href="https://segmentfault.com/a/1190000017986794#item-3">博客的安装Hexo</a>二级标题开始看</p>
<h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli --全局安装,可在任意位置执行</span><br><span class="line">hexo init myBlog --在当前目录初始化一个hexo项目</span><br><span class="line">cd myBlog --进入目录</span><br><span class="line">npm install --安装依赖</span><br></pre></td></tr></table></figure>

<h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><p>s表示服务简写，启动后会提示<a href="http://localhost:4000。浏览器访问即可。">http://localhost:4000。浏览器访问即可。</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s </span><br></pre></td></tr></table></figure>

<h2 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h2><p>略</p>
<h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><ol>
<li><p>在项目根目录下_config.yml配置文件配置参数。在文件最后面添加参数。此文件为yml文件，注意缩进格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">	type: git</span><br><span class="line">	repo:</span><br><span class="line">		github: 你的github仓库地址</span><br><span class="line">	branch: master</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>安装一个部署插件<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure>

<p>此条命令并非全局安装，需要在hexo项目根目录下执行，注意了。</p>
</li>
<li><p>部署上去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<p>g表示generate生成,-d 参数表示deploy部署。</p>
<p>然后访问网址: https://用户名.github.io</p>
</li>
</ol>
<h2 id="写作文章"><a href="#写作文章" class="headerlink" title="写作文章"></a>写作文章</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &#x27;文章标题&#x27; --如果包含空格或特殊关键符号使用双引号</span><br></pre></td></tr></table></figure>

<p>执行完毕后，会提示文件在哪，在/source/_posts下有一个这个文章标题的md文件。</p>
<p>你可以编辑md文件，Markdown语法就不多说了。每次创建完之后，在文件最上面都有文件元信息,由三个<code>-</code>符号上下包裹</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: ...时间</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>默认是这个，但是还可以添加更多的内容。这个元信息表示这个文件的所属信息，在主题中会使用到的。包括tags属性名和categories属性名，分别表示标签和分类。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>Ctrl+C可以退出hexo服务。执行第一个命令可以重新生成相关文件，执行第二个命令启动服务。</p>
<p>如果要再次部署到github上，需要清一下缓存或历史文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean --清除db等相关信息，避免修改没有及时反馈,清除后需要重新生成</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g -d --生成，并部署到github上</span><br></pre></td></tr></table></figure>

<p>另外，如果你的文章暂时不发布可以先保存在草稿里面。生成草稿的方法和文章差不多 hexo new draft “文章标题”，生成后会在 /source/_drafts 里看到你的草稿文章。当你想发布时只要执行 publish 命令即可发布到博客。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<h2 id="主题使用"><a href="#主题使用" class="headerlink" title="主题使用"></a>主题使用</h2><p>我们以当前站点主题为例，访问<a href="https://hexo.io/themes/">hexo主题</a>,找到A-Ayer,<a href="https://shen-yu.gitee.io/">这个是实例页面</a>,我们可以看一下<a href="https://shen-yu.gitee.io/2019/ayer/">相关说明</a>,如何使用。</p>
<ol>
<li><p>下载主题，直接进入项目根目录就行，命令已经指定了下载位置，不需要进入到themes里。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改根目录下的_config.yml文件,修改主题值为alyer</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">ayer</span></span><br></pre></td></tr></table></figure>

<p>然后，你可以重新刷新一下页面或clean，重新访问即可看到新主题</p>
</li>
<li><p>目录的创建Categories</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>此时_source/categories/index.md就会出现。然后修改index.md的源信息,这就行了。不要往里面添加任何内容。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建tags标签</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>此时_source/tags/index.md就会出现。然后修改index.md的源信息,这就行了。不要往里面添加任何内容。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>完毕后，创建文章，只需要修改文章的原信息即可,在元信息上添加这些属性,标签是数组形式，分类只能所属一个</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tags:</span> [<span class="string">&#x27;测试&#x27;</span>]</span><br><span class="line"><span class="attr">categories:</span> <span class="string">测试</span></span><br></pre></td></tr></table></figure>

<p>这样，再看分类和标签就有东西显示出来了。</p>
</li>
</ol>
<p>如果你打开页面的话，如果没有任何一个文章有标签5的配置，那么标签和分类页面都是空的。另外，你需要注意一下主题里的_config.xml，可以配置一下menu菜单和其他相关的信息。更多操作可以在<a href="https://shen-yu.gitee.io/2019/ayer/">说明文档</a>或<a href="https://gitee.com/shen-yu/shen-yu/tree/dev/">作者dev分支项目</a>中看到目录分级和操作。</p>
]]></content>
      <categories>
        <category>建站相关</category>
      </categories>
      <tags>
        <tag>建站相关</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s ingress暴露应用</title>
    <url>/2020/01/11/k8s/k8s-ingress%E6%9A%B4%E9%9C%B2%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>一组基于DNS名称或URL路径把请求转发到指定的Service资源的规则。用于将集群外部的请求流量转发到集群内部完成的服务发布。只提供外部暴露访问，类似于改造nginx形式。</p>
<p>ingress作为统一入口，通过定义一组规则，以通过域名的方式关联service，再由service关联pod</p>
<p>使用ingress，第一步需要ingress Controller，第二步需要ingress</p>
<p><strong>创建pod，和service</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl create deployment web --image&#x3D;nginx</span><br><span class="line">deployment.apps&#x2F;web created</span><br><span class="line">[root@k8smaster ~]# kubectl expose deployment web --port&#x3D;80 --target-port&#x3D;80 --type&#x3D;NodePort</span><br><span class="line">service&#x2F;web exposed</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>部署ingress Controller</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-configuration</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tcp-services</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">udp-services</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-clusterrole</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">events</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;extensions&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;networking.k8s.io&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;extensions&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;networking.k8s.io&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-role</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namespaces</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">resourceNames:</span></span><br><span class="line">      <span class="comment"># Defaults to &quot;&lt;election-id&gt;-&lt;ingress-class&gt;&quot;</span></span><br><span class="line">      <span class="comment"># Here: &quot;&lt;ingress-controller-leader&gt;-&lt;nginx&gt;&quot;</span></span><br><span class="line">      <span class="comment"># This has to be adapted if you change either parameter</span></span><br><span class="line">      <span class="comment"># when launching the nginx-ingress-controller.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ingress-controller-leader-nginx&quot;</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-role-nisa-binding</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-role</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-clusterrole-nisa-binding</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-clusterrole</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">prometheus.io/port:</span> <span class="string">&quot;10254&quot;</span></span><br><span class="line">        <span class="attr">prometheus.io/scrape:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># wait up to five minutes for the drain of connections</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">300</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nginx-ingress-serviceaccount</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">lizhenliang/nginx-ingress-controller:0.30.0</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/nginx-ingress-controller</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--configmap=$(POD_NAMESPACE)/nginx-configuration</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--udp-services-configmap=$(POD_NAMESPACE)/udp-services</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--publish-service=$(POD_NAMESPACE)/ingress-nginx</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--annotations-prefix=nginx.ingress.kubernetes.io</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">capabilities:</span></span><br><span class="line">              <span class="attr">drop:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">              <span class="attr">add:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">            <span class="comment"># www-data -&gt; 101</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">101</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">lifecycle:</span></span><br><span class="line">            <span class="attr">preStop:</span></span><br><span class="line">              <span class="attr">exec:</span></span><br><span class="line">                <span class="attr">command:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="string">/wait-shutdown</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">LimitRange</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">min:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">90Mi</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Container</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>配置ingress规则</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">example.ingress.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">web</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8smaster ~]# kubectl apply -f ingress-http.yaml </span><br><span class="line">Warning: networking.k8s.io&#x2F;v1beta1 Ingress is deprecated in v1.19+, unavailable in v1.22+; use networking.k8s.io&#x2F;v1 Ingress</span><br><span class="line">ingress.networking.k8s.io&#x2F;example-ingress created</span><br><span class="line">[root@k8smaster ~]# kubectl get pods -n ingress-nginx -o wide</span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE   IP               NODE       NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-ingress-controller-5dc64b58f-qzsgw   1&#x2F;1     Running   0          15m   192.168.38.129   k8snode2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[root@k8smaster ~]# </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在window电脑配置hosts文件，增加<code>192.168.38.129 example.ingress.com</code>，访问example.ingress.com成功，但是直接访问192.168.38.129是不行的。</p>
<p>https的ingress配置规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io&#x2F;v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: tls-example-ingress</span><br><span class="line">spec:</span><br><span class="line">  tls:</span><br><span class="line">  - hosts:</span><br><span class="line">    - sslexample.ctnrs.com</span><br><span class="line">    secretName: secret-tls</span><br><span class="line">  rules:</span><br><span class="line">    - host: sslexample.ctnrs.com</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">        - path: &#x2F;</span><br><span class="line">          backend:</span><br><span class="line">            serviceName: web</span><br><span class="line">            servicePort: 80</span><br></pre></td></tr></table></figure>



<p>构建TLS，需要创建secret，对应secretName的值。</p>
<p>全文可参考<code>https://www.cnblogs.com/linuxk/p/9706720.html</code></p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
  </entry>
  <entry>
    <title>依据word模板使用freemarker生成docx文件</title>
    <url>/2020/01/02/Java/%E4%BE%9D%E6%8D%AEword%E6%A8%A1%E6%9D%BF%E4%BD%BF%E7%94%A8freemarker%E7%94%9F%E6%88%90docx%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>使用freemarker方式生成docx，有两种方法，一种是转成word xml方式，但是这种文件在程序中使用流预览文件是有问题的，它是xml字符串，这种方式杜宇docx和doc都可以。原理就是将模板docx和doc另存为word xml文件，使用文本工具打开，就是一个xml，你只需要把要替换的地方使用${}方式改了就可以了，然后使用freemarker程序替换即可。</p>
<p>虽然转换成功后可以再桌面上正常打开，但是输出流就是xml格式，你要想可以有流就必须手动进行另存为word格式。</p>
<p>因此我们只能使用docx文件来操作，docx文件是有多个文件夹和文件组成，它可以通过winrar打开。只需要将后缀改为zip，但是，这个文件必须编辑过，就是打开并输入任意字符，得有东西。这样docx才能通过压缩包打开。</p>
<p>里面的word/document.xml就是文档内容。此处我们只使用模板生成简单的文字模板即可。</p>
<h3 id="已经完成的模板文件"><a href="#已经完成的模板文件" class="headerlink" title="已经完成的模板文件"></a>已经完成的模板文件</h3><p>将模板文件打开，修改需要更改的地方为 { 变量 },然后更改后缀为zip并通过压缩工具打开。然后把word/document.xml文件从压缩包里解压出来。这个文件存储的就是所有的文字。打开后需要查看变量，因为在文档中每个字符都有渲染标签包含着，可能 $ 与{之间就被某个渲染标签给分隔了，所以需要把中间的标签删掉，让变量连成一块。</p>
<p>此时已经有两个文件，一个zip，一个document.xml模板文件。然后freemarker的任务就是将document.xml模板替换变量为真正的值，然后把docuemnt.xml替换到zip中并输出成docx文件即可。</p>
<h3 id="freemarker操作"><a href="#freemarker操作" class="headerlink" title="freemarker操作"></a>freemarker操作</h3><p>首先需要将xml和zip放到resource中，此处获取文件我们通过class类路径的方式获取模板。方法共分两个，一个是替换模板文件，一个是转换zip。</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.freemarker&lt;/groupId&gt;
    &lt;artifactId&gt;freemarker&lt;/artifactId&gt;
    &lt;version&gt;2.3.28&lt;/version&gt;
&lt;/dependency&gt;</code></pre><h3 id="替换模板文件"><a href="#替换模板文件" class="headerlink" title="替换模板文件"></a>替换模板文件</h3><ol>
<li><p>配置map替换变量</p>
<p>   Map&lt;String, String&gt; paramMap = assemblyQualityResultParam(planResult);</p>
</li>
<li><p>传递原文件名和模板文件名</p>
<p>   String filePath = fileDir + Constant.SEPARATOR + qualityName.replace(“.docx”,””) + “.xml”;//拼接为质检报告XML文件路径<br>   XX县(XXXXXX)国土空间规划数据库成果质检报告（不通过）_templete.xml<br>   //调用<br>   freemarkerWithSimple(paramMap, filePath, “XX县(XXXXXX)国土空间规划数据库成果质检报告（不通过）_templete.xml”);</p>
</li>
<li><p>configuration设置编码格式和模板类路径</p>
<p>public void freemarkerWithSimple(Map&lt;String, String&gt; paramMap, String saveFilePath, String templeteName) {</p>
<pre><code>    try &#123;
        String basePath = Constant.USER_FILE_BASE_DIR;//Global.getConfig(&quot;userfiles.basedir&quot;).replace(&quot;\\&quot;,&quot;/&quot;).replace(&quot;//&quot;,&quot;/&quot;);
        Configuration configuration = new Configuration(new Version(&quot;2.3.28&quot;));
        configuration.setDefaultEncoding(&quot;utf-8&quot;);
        configuration.setClassForTemplateLoading(this.getClass(), &quot;/freemarker&quot;);
        //指定模板路径的第二种方式,我的路径是D:/      还有其他方式
        //configuration.setDirectoryForTemplateLoading(new File(&quot;C:/Users/cgq_r/Desktop&quot;));
        String filePath = basePath + saveFilePath.replace(&quot;\\&quot;, &quot;/&quot;).replace(&quot;//&quot;, &quot;/&quot;);//fileDir + File.separator + name;
        FileUtils.createDirectory(filePath.substring(0, filePath.lastIndexOf(&quot;/&quot;)));
        // 输出文档路径及名称
        File outFile = new File(filePath);
        //以utf-8的编码读取ftl文件
        Template t = configuration.getTemplate(templeteName, &quot;utf-8&quot;);
        Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outFile), &quot;utf-8&quot;), 10240);
        t.process(paramMap, out);
        out.close();
        logger.info(&quot;生成质检报告XML文件完成-&gt;&quot; + filePath);
    &#125; catch (IOException e) &#123;
        logger.error(e.getMessage());
        e.printStackTrace();
    &#125; catch (Exception e) &#123;
        e.printStackTrace();
    &#125;
&#125;</code></pre></li>
</ol>
<p>以上代码，首先设置编码格式和模板加载类路径，此模板我放在resource下的freemarker文件夹下，因此编译后就在项目根/freemarker下。</p>
<p>设置模板输出和写文件。因为已经配置模板加载路径，所以tepleteName直接就是模板文件名不需要绝对相对路径。</p>
<p>outputFile就是文件输出的位置，此处便只是创建了一下目录。虽然生成到了指定位置，但是整个过程都转换完了会后要删除这个document.xml的。</p>
<h3 id="转换zip为docx"><a href="#转换zip为docx" class="headerlink" title="转换zip为docx"></a>转换zip为docx</h3><pre><code>filePath = generateDocxByZipAndXml(
                        filePath.replace(&quot;\\&quot;, &quot;/&quot;).replace(&quot;//&quot;, &quot;/&quot;),
                        &quot;XX县(XXXXXX)国土空间规划数据库成果质检报告（不通过）.zip&quot;,
                        qualityName);</code></pre><p>此时，第一个参数为已经转换的xml路径,第二个是模板zip，第三个要生成的docx的文件名称。</p>
<pre><code>private String generateDocxByZipAndXml(String filePath, String templeteZip, String qualityFileName) &#123;
        String pathDir = Utils.getFileDir(filePath);
        String qualityResultAllPath = Constant.USER_FILE_BASE_DIR + pathDir + Constant.SEPARATOR + qualityFileName; //质检报告docx全路径
        try &#123;
            //获取模板目录
            String freemarkerDir = Servlets.getRequest().getServletContext().getRealPath(&quot;/WEB-INF/classes/freemarker&quot;);
            String freemarkerZip = freemarkerDir + Constant.SEPARATOR + templeteZip;//模板zip路径
            System.out.println(&quot;模板zip文件路径--&gt;&quot; + freemarkerZip);

            //zip模板替换xml并输出docx文档
            ZipInputStream zipInputStream = ZipUtils.wrapZipInputStream(new FileInputStream(new File(freemarkerZip)));
            ZipOutputStream zipOutputStream = ZipUtils.wrapZipOutputStream(new FileOutputStream(new File(qualityResultAllPath)));
            String itemname = &quot;word/document.xml&quot;;
            ZipUtils.replaceItem(zipInputStream, zipOutputStream, itemname, new FileInputStream(new File(Constant.USER_FILE_BASE_DIR+filePath)));
            logger.info(&quot;生成质检报告--&gt;&quot; + qualityResultAllPath);

            //word生成-&gt;pdf
            converterUtils.WordToPDF(qualityResultAllPath,qualityResultAllPath.replace(&quot;.docx&quot;,&quot;.pdf&quot;));
            logger.info(&quot;生成质检报告PDF版--&gt;&quot; + qualityResultAllPath.replace(&quot;.docx&quot;,&quot;.pdf&quot;));

            //删除生成的data数据
            File tempData = new File(Constant.USER_FILE_BASE_DIR+filePath);
            if (tempData.exists()) &#123;
                tempData.delete();
            &#125;
        &#125; catch (Exception e) &#123;
            e.printStackTrace();
        &#125;
        return qualityResultAllPath.replace(Constant.USER_FILE_BASE_DIR,&quot;&quot;);
    &#125;</code></pre><p>以上代码首先获取zip的路径，只有获取绝对路径才能进行文件操作，</p>
<p>定义了两个ZipInputStream，其调用的方法仅仅只是inputStream和outputSteam包装一下zip输入输出流而已。</p>
<p>ZipUtils.replaceItem是重点，就是替换文件到压缩包中。</p>
<pre><code>/**
     * 替换某个 item,
     *
     * @param zipInputStream  zip文件的zip输入流
     * @param zipOutputStream 输出的zip输出流
     * @param itemName        要替换的 item 名称
     * @param itemInputStream 要替换的 item 的内容输入流
     */
    public static void replaceItem(ZipInputStream zipInputStream,
                                   ZipOutputStream zipOutputStream,
                                   String itemName,
                                   InputStream itemInputStream
    ) &#123;
        //
        if (null == zipInputStream) &#123;
            return;
        &#125;
        if (null == zipOutputStream) &#123;
            return;
        &#125;
        if (null == itemName) &#123;
            return;
        &#125;
        if (null == itemInputStream) &#123;
            return;
        &#125;
        //
        ZipEntry entryIn;
        try &#123;
            while ((entryIn = zipInputStream.getNextEntry()) != null) &#123;
                String entryName = entryIn.getName();
                ZipEntry entryOut = new ZipEntry(entryName);
                // 只使用 name
                zipOutputStream.putNextEntry(entryOut);
                // 缓冲区
                byte[] buf = new byte[8 * 1024];
                int len;

                if (entryName.equals(itemName)) &#123;
                    // 使用替换流
                    while ((len = (itemInputStream.read(buf))) &gt; 0) &#123;
                        zipOutputStream.write(buf, 0, len);
                    &#125;
                &#125; else &#123;
                    // 输出普通Zip流
                    while ((len = (zipInputStream.read(buf))) &gt; 0) &#123;
                        zipOutputStream.write(buf, 0, len);
                    &#125;
                &#125;
                // 关闭此 entry
                zipOutputStream.closeEntry();

            &#125;
        &#125; catch (IOException e) &#123;
            e.printStackTrace();
        &#125; finally &#123;
            //e.printStackTrace();
            close(itemInputStream);
            close(zipInputStream);
            close(zipOutputStream);
        &#125;
    &#125;</code></pre><ul>
<li>第一个参数是zip文件输入流</li>
<li>第二个参数是最后docx文件输出流</li>
<li>第三个参数是要替换的位置</li>
<li>第四个是已经转换模板完成的docuemnt.xml文件</li>
</ul>
<p>此方法就是重新循环一下zip，并把流输出到另一个文件中，找到匹配的就使用docuemnt.xml流写进去。</p>
<h3 id="多余docuemnt-xml删除"><a href="#多余docuemnt-xml删除" class="headerlink" title="多余docuemnt.xml删除"></a>多余docuemnt.xml删除</h3><pre><code>File tempData = new File(Constant.USER_FILE_BASE_DIR+filePath);
if (tempData.exists()) &#123;
    tempData.delete();
&#125;</code></pre>]]></content>
      <categories>
        <category>项目问题</category>
      </categories>
      <tags>
        <tag>freemarker</tag>
      </tags>
  </entry>
  <entry>
    <title>openOffce和jacob方式转换office为pdf文件</title>
    <url>/2020/01/02/Java/openOffce%E5%92%8Cjacob%E6%96%B9%E5%BC%8F%E8%BD%AC%E6%8D%A2office%E4%B8%BApdf%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="OpenOffice-转换"><a href="#OpenOffice-转换" class="headerlink" title="OpenOffice 转换"></a>OpenOffice 转换</h2><p>首先需要到apache openoffice下载包并安装<a href="http://www.openoffice.org/download/index.html">http://www.openoffice.org/download/index.html</a></p>
<p>windows默认会安装到c盘program file(x86)中的openoffice4中，可以把这个文件文件夹拷贝到任意位置。</p>
<p>要想使用转换首先需要jar包,他需要jodconverter的jar包，这包可能在maven中央仓库没有。详细的转换代码如下</p>
<pre><code>@Component
public class OfficeConverterUtils &#123;

    private Logger logger = LoggerFactory.getLogger(OfficeConverterUtils.class);

    @Value(&quot;$&#123;openoffice.path&#125;&quot;)
    private  String openOfficePath;

    public void WordToPDF(String startFile, String overFile) &#123;
        if (StringUtils.isBlank(openOfficePath))&#123;
            return;
        &#125;

        // 源文件目录
        File inputFile = new File(startFile);
        if (!inputFile.exists()) &#123;
            System.out.println(&quot;源文件不存在！&quot;);
            return;
        &#125;

        // 输出文件目录
        File outputFile = new File(overFile);
        if (!outputFile.getParentFile().exists()) &#123;
            outputFile.getParentFile().exists();
        &#125;
        OpenOfficeConnection connection = null;
        Process p = null;
        try &#123;

            // 调用openoffice服务线程
            /** 我把openOffice下载到了 C:/Program Files (x86)/下  ,下面的写法自己修改编辑就可以**/
            String command = openOfficePath + &quot; -headless -accept=\&quot;socket,host=127.0.0.1,port=8100;urp;\&quot;&quot;;
            try &#123;
                p = Runtime.getRuntime().exec(command);
            &#125;catch (Exception e)&#123;
                logger.error(&quot;服务无法启动或已经启动,请确认文件是否转换成功&quot;);
            &#125;
            // 连接openoffice服务
            connection = new SocketOpenOfficeConnection(&quot;127.0.0.1&quot;, 8100);
            connection.connect();

            // 转换
            DocumentConverter converter = new OpenOfficeDocumentConverter(connection);
            converter.convert(inputFile, outputFile);
        &#125; catch (Exception e) &#123;
            e.printStackTrace();
            logger.error(&quot;转换PDF出现异常&quot;);
            logger.error(&quot;切换使用jocob方式转换&quot;);
            if (startFile.lastIndexOf(&quot;.docx&quot;)!=-1)&#123;
                JocobUtil.word2Pdf(startFile, overFile);
            &#125;else if(startFile.lastIndexOf(&quot;.doc&quot;)!=-1)&#123;
                JocobUtil.word2Pdf(startFile, overFile);
            &#125;else if(startFile.lastIndexOf(&quot;.xlsx&quot;)!=-1)&#123;
                JocobUtil.excel2Pdf(startFile, overFile);
            &#125;else if(startFile.lastIndexOf(&quot;.xls&quot;)!=-1)&#123;
                JocobUtil.excel2Pdf(startFile, overFile);
            &#125;
        &#125; finally &#123;
            // 关闭连接
            if (connection != null &amp;&amp; connection.isConnected()) &#123;
                connection.disconnect();
            &#125;
            // 关闭进程
            if (p != null &amp;&amp; p.isAlive()) &#123;
                p.destroy();
            &#125;
        &#125;

    &#125;

    public static void main(String[] args) &#123;
        //openOfficePath = &quot;D:/soft/OpenOffice4/program/soffice.exe&quot;;
        String start = &quot;C:\\Users\\lics\\Desktop\\abc.docx&quot;;
        String over = &quot;C:\\Users\\lics\\Desktop\\abc.pdf&quot;;

            new OfficeConverterUtils().WordToPDF(start, over);
    &#125;


&#125;</code></pre><p>以上是通过代码的方式启动服务，操作完成后会关闭服务。</p>
<p>还有通过cmd直接启动服务的。</p>
<pre><code>soffice -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot; -nofirststartwizard</code></pre><p>以上中，在C:\Program Files (x86)\OpenOffice 4\program目录下执行此命令，因此soffice不需要写全，否则需要写绝对路径。执行后cmd不会有等待占用窗口，会在后台启动服务。</p>
<p>有时候，可能莫名其妙的在服务器上有时候可以连接成功有时候就连接不上服务。所以可以试用jacob方式补充，但是经过测验，jacob比openOffice慢点，而且是越大越慢，但是转换ppt的时候openOffice却比较慢，无论怎么大jacob都比openOffice快。</p>
<h2 id="Jacob转换"><a href="#Jacob转换" class="headerlink" title="Jacob转换"></a>Jacob转换</h2><p>jacob转换时dll方式操作，需要将dll放到jdk/bin中。首先需要jacob.jar包。然后有一个dll。</p>
<p>有了这两个东西便可以进行转换了。</p>
<pre><code>public class JacobUtil &#123;
    private static Logger logger = Logger.getLogger(JocobUtil.class.getName());

    public static void main(String[] args) &#123;
        long b = System.currentTimeMillis();
        //ppt2Pdf(&quot;C:\\Users\\cgq_r\\Desktop\\iOS多边形.pptx&quot;,&quot;C:\\Users\\cgq_r\\Desktop\\iOS多边形.pptx&quot;);
        word2Pdf(&quot;C:\\Users\\cgq_r\\Desktop\\abc.doc&quot;,&quot;C:\\Users\\cgq_r\\Desktop\\abc.pdf&quot;);
        long c = System.currentTimeMillis();
        System.out.println(c-b);
    &#125;

    public static void ppt2Pdf(String src, String tar) &#123;
        ActiveXComponent app = null;
        Dispatch doc = null;
        try &#123;
            app = new ActiveXComponent(&quot;PowerPoint.Application&quot;);
            app.setProperty(&quot;AutomationSecurity&quot;, new Variant(3));
            Dispatch docs = app.getProperty(&quot;Presentations&quot;).toDispatch();
            doc = Dispatch.call(
                    docs,
                    &quot;Open&quot;,
                    new Object[] &#123; src, Boolean.TRUE, Boolean.TRUE,
                            Boolean.FALSE &#125;).toDispatch();
            Dispatch.call(doc, &quot;SaveAs&quot;,
                    new Object[] &#123; tar, Integer.valueOf(32) &#125;);
        &#125; finally &#123;
            if (doc != null) &#123;
                try &#123;
                    Dispatch.call(doc, &quot;Close&quot;);
                &#125; catch (Throwable t) &#123;
                    logger.log(Level.SEVERE, t.getMessage(), t);
                &#125;
            &#125;
            if (app != null) &#123;
                try &#123;
                    app.invoke(&quot;Quit&quot;);
                    app.safeRelease();
                &#125; catch (Throwable t) &#123;
                    logger.log(Level.SEVERE, t.getMessage(), t);
                &#125;
            &#125;
        &#125;
    &#125;

    public static void word2Pdf(String src, String tar) &#123;
        ActiveXComponent app = null;
        Dispatch doc = null;
        try &#123;
            app = new ActiveXComponent(&quot;Word.Application&quot;);
            app.setProperty(&quot;Visible&quot;, new Variant(false));
            app.setProperty(&quot;AutomationSecurity&quot;, new Variant(3));
            Dispatch docs = app.getProperty(&quot;Documents&quot;).toDispatch();
            doc = Dispatch.call(docs, &quot;Open&quot;,
                    new Object[] &#123; src, Boolean.FALSE, Boolean.TRUE &#125;)
                    .toDispatch();
            Dispatch.call(doc, &quot;SaveAs&quot;,
                    new Object[] &#123; tar, Integer.valueOf(17) &#125;);
        &#125; catch (Throwable t) &#123;
            logger.log(Level.SEVERE, t.getMessage(), t);
        &#125; finally &#123;
            if (doc != null) &#123;
                try &#123;
                    Dispatch.call(doc, &quot;Close&quot;, new Object[] &#123; Boolean.FALSE &#125;);
                &#125; catch (Throwable t) &#123;
                    logger.log(Level.SEVERE, t.getMessage(), t);
                &#125;
            &#125;
            if (app != null) &#123;
                try &#123;
                    app.invoke(&quot;Quit&quot;, new Variant[] &#123;new Variant(false)&#125;);
                    app.safeRelease();
                &#125; catch (Throwable t) &#123;
                    logger.log(Level.SEVERE, t.getMessage(), t);
                &#125;
            &#125;

        &#125;
    &#125;

    public static void excel2Pdf(String src, String tar) &#123;
        ActiveXComponent app = null;
        Dispatch doc = null;
        try &#123;
            app = new ActiveXComponent(&quot;Excel.Application&quot;);
            app.setProperty(&quot;Visible&quot;, new Variant(false));
            app.setProperty(&quot;AutomationSecurity&quot;, new Variant(3));
            Dispatch docs = app.getProperty(&quot;Workbooks&quot;).toDispatch();
            doc = Dispatch.call(docs, &quot;Open&quot;,
                    new Object[] &#123; src, Boolean.FALSE, Boolean.TRUE &#125;)
                    .toDispatch();
            Dispatch.call(doc, &quot;ExportAsFixedFormat&quot;,
                    new Object[] &#123; Integer.valueOf(0), tar &#125;);
        &#125; finally &#123;
            if (doc != null) &#123;
                try &#123;
                    Dispatch.call(doc, &quot;Close&quot;, new Object[] &#123; Boolean.FALSE &#125;);
                &#125; catch (Throwable t) &#123;
                    logger.log(Level.SEVERE, t.getMessage(), t);
                &#125;
            &#125;
            if (app != null) &#123;
                try &#123;
                    app.invoke(&quot;Quit&quot;);
                    app.safeRelease();
                &#125; catch (Throwable t) &#123;
                    logger.log(Level.SEVERE, t.getMessage(), t);
                &#125;
            &#125;
        &#125;
    &#125;

&#125;</code></pre>]]></content>
      <categories>
        <category>项目问题</category>
      </categories>
  </entry>
  <entry>
    <title>使用java gdal将shp文件转为geojson</title>
    <url>/2020/01/02/Java/%E4%BD%BF%E7%94%A8java%20gdal%E5%B0%86shp%E6%96%87%E4%BB%B6%E8%BD%AC%E4%B8%BAgeojson/</url>
    <content><![CDATA[<p>原因描述:因为要使用乡镇级别的地图进行显示，但是网上都没有对应的geojosn格式的文件，最低到区县级别。网上说是可以手绘的，在geojson开源网站上绘制自动生成json。 <a href="http://geojson.io/">http://geojson.io/</a></p>
<p>于是找了又找发现可将shp转为geojson格式，于是使用java gdal来转换shp为geojson文件。你只需要找shp文件即可了，如果没有找到，看看公司有没有arcgis相关的开发人员，问他们要。</p>
<p>首先需要下载包，从<a href="http://download.gisinternals.com/sdk.php">http://download.gisinternals.com/sdk.php</a>中去下载，解压后进入release-版本好-x64/bin中,将当前目录下所有dll文件放到java 的jdk/bin下,然后进入./gdal/java目录,将下面的所有dll也放到jdk/bin下面，然后再把这些放到java功能根目录下,jar供程序使用。</p>
<p>1900版本gdal/java下只有gdal.jar和gdalalljni.dll,因此将dll分别分别放在jdk/bin下和项目根目录下即可。</p>
<pre><code>public class Application &#123;
    //http://download.gisinternals.com/sdk.php
    public static void main(String[] args) &#123;
        // 注册所有的驱动
        ogr.RegisterAll();
        // 为了支持中文路径，请添加下面这句代码
        gdal.SetConfigOption(&quot;GDAL_FILENAME_IS_UTF8&quot;,&quot;YES&quot;);
        // 为了使属性表字段支持中文，请添加下面这句
        gdal.SetConfigOption(&quot;SHAPE_ENCODING&quot;,&quot;&quot;);

        String strVectorFile = &quot;J:\\行政区\\XZQ.shp&quot;;
        //打开数据
        DataSource ds = ogr.Open(strVectorFile,0);
        if (ds == null)
        &#123;
            System.out.println(&quot;打开文件失败！&quot; );
            return;
        &#125;
        System.out.println(&quot;打开文件成功！&quot; );
        Driver dv = ogr.GetDriverByName(&quot;GeoJSON&quot;);
        if (dv == null)
        &#123;
            System.out.println(&quot;打开驱动失败！&quot; );
            return;
        &#125;
        System.out.println(&quot;打开驱动成功！&quot; );
        dv.CopyDataSource(ds, &quot;J:\\行政区\\fibercable.geojson&quot;);
        System.out.println(&quot;转换成功！&quot; );
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>项目问题</category>
      </categories>
      <tags>
        <tag>项目问题</tag>
      </tags>
  </entry>
  <entry>
    <title>超简单基础搭建分布式hadoop</title>
    <url>/2019/12/07/Hadoop/%E8%B6%85%E7%AE%80%E5%8D%95%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8Fhadoop/</url>
    <content><![CDATA[<p>新文章，之前的hadoop部署文章教程均可能出现问题，仅作为参考。以本文为准</p>
<h1 id="第一章-虚拟机配置"><a href="#第一章-虚拟机配置" class="headerlink" title="第一章 虚拟机配置"></a>第一章 虚拟机配置</h1><p>创建centos7.x虚拟机不再描述,网卡连接方式使用NAT方式</p>
<p><strong>网络问题,创建NAT虚拟网络</strong><br>可在VMware的编辑，虚拟网络编辑器中，添加网络，点击右下角的管理员操作权限，点击添加网络按钮，随意选一个VMnet，选择VMnet为NAT模式。<br>勾选将主机虚拟适配器连接到此网络和勾选使用本地DHCP服务将IP地址分配给虚拟机。然后可以修改HDCP设置，默认可以不更改。</p>
<h2 id="创建完虚拟机后，无法使用sudo问题"><a href="#创建完虚拟机后，无法使用sudo问题" class="headerlink" title="创建完虚拟机后，无法使用sudo问题"></a>创建完虚拟机后，无法使用sudo问题</h2><p>使用命令<code>su root</code>进入root用户,执行<code>visudo</code>命令打开sudoer文件,找到</p>
<pre><code>root    ALL=(ALL)       ALL</code></pre><p>在其下面添加与其一样的一行，并把root改为自己的用户名,然后保存退出,如:</p>
<pre><code>centos    ALL=(ALL)       ALL</code></pre><h2 id="安装jdk和hadoop"><a href="#安装jdk和hadoop" class="headerlink" title="安装jdk和hadoop"></a>安装jdk和hadoop</h2><p>jdk选JDK8的,hadoop建议选择3.x版本的，这里，我使用JDK8和hadoop3.1.3。目前JDK11与hadoop3.x版本的匹配问题还没有找到解决办法，使用jdk会导致在启动时出现java.lang.ClassNotFoundException: javax.activation.DataSource的异常。</p>
<pre><code>[centos@centos3 ~]$ java -version
java version &quot;1.8.0_231&quot;
Java(TM) SE Runtime Environment (build 1.8.0_231-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)
[centos@localhost ~]$ hadoop version
Hadoop 3.1.3
Source code repository https://gitbox.apache.org/repos/asf/hadoop.git -r ba631c436b806728f8ec2f54ab1e289526c90579
Compiled by ztang on 2019-09-12T02:47Z
Compiled with protoc 2.5.0
From source with checksum ec785077c385118ac91aadde5ec9799
This command was run using /home/centos/hadoop/share/hadoop/common/hadoop-common-3.1.3.jar</code></pre><p>将jdk8和hadoop解压，放置在~/下,在/etc/profile中配置环境变量,<code>sudo vim /etc/profile</code>命令，打开后在结尾追加</p>
<pre><code>export JAVA_HOME=/home/centos/jdk8
export PATH=$JAVA_HOME/bin:$PATH
export HADOOP_HOME=/home/centos/hadoop
export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</code></pre><p>然后使用<code>source /etc/profile</code>编译文件。然后可以输入上面的版本命令，看看信息。</p>
<h2 id="暂时关闭防火墙"><a href="#暂时关闭防火墙" class="headerlink" title="暂时关闭防火墙"></a>暂时关闭防火墙</h2><pre><code>systemctl stop firewalld.service</code></pre><h2 id="规定三台服务器的IP-这个ip地址是随意的。"><a href="#规定三台服务器的IP-这个ip地址是随意的。" class="headerlink" title="规定三台服务器的IP,这个ip地址是随意的。"></a>规定三台服务器的IP,这个ip地址是随意的。</h2><pre><code>192.168.181.129 centos1
192.168.181.130 centos2
192.168.181.131 centos3</code></pre><p>修改/etc/host文件，配置映射文件,将上面的配置放在该文件中。</p>
<h2 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h2><p>关闭虚拟机，点击菜单栏的虚拟机，选择管理，选择克隆，选择完全克隆，选择存储位置，然后进行克隆。如果你的当前磁盘是固态，那么是非常非常快的，不超过1分钟。</p>
<h2 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h2><p>打开全部虚拟机，其实完全克隆后，主机名已经变了，从centos1到centos3，hostname是直接改过了的。你可以到设置-详细信息-用户里改一下用户名称为主机名名称。<br>然后配置一下另外两个的网络,这里配ip，上面好像没说。可以直接到设置-网络，点有线连接下的那个网卡点IPV4，设为手动，分别填写，你在虚拟网络配置里配置的网络ip，或者可以不用这用，因为是hdcp的，所以直接ifconfig查看ip结构，把之前预先设计好的ip填进去，并把地址和子网掩码放进去，网关为.1，DNS设为114.114.114.114。然后ipv6这点击禁用。<br>然后尝试互相ping并ping一下<a href="http://www.baidu.com看是否外网可以通。">www.baidu.com看是否外网可以通。</a><br>如果找不到地方，看不到英文的话，可以设置成中文，点设置-region-language，看上部分，选择语言，汉语中文，然后根据他的提示重启一下就好了，让修改home下的文件名称的话，<strong>选不修改且不再提示</strong>。</p>
<h2 id="虚拟机免密登录"><a href="#虚拟机免密登录" class="headerlink" title="虚拟机免密登录"></a>虚拟机免密登录</h2><p>在三台机器都执行以下指令</p>
<pre><code>ssh-keygen -t rsa ；
ssh-copy-id IP (自身)
ssh-copy-id IP (其他节点)</code></pre><p>执行第一条指令时，回车三次，第二条和第三条是一样的，输入yes，然后输入ip的密码。<br>这三条指令，每台机器都执行一遍。<br>执行完毕后，从129开始，ssh centos1,ssh centos2,ssh centos3,三台机器都执行一遍这三个命令，表示要ssh连接一次，记住ip。</p>
<h1 id="第二章-集群配置"><a href="#第二章-集群配置" class="headerlink" title="第二章 集群配置"></a>第二章 集群配置</h1><h2 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h2><p>centos1</p>
<p>centos2</p>
<p>centos3</p>
<p>HDFS</p>
<p>NameNode<br>DataNode</p>
<p>DataNode</p>
<p>SecondaryNameNode<br>DataNode</p>
<p>YARN</p>
<p>NodeManager</p>
<p>NodeManager<br>ResourceManager</p>
<p>NodeManager</p>
<p>每个DataNode一定是有个NodeManager的。NameNode是比较重要的，管理所有的节点，所以一般是单独占一个服务器，但是只有三台机器又要做三个机器的数据存储。</p>
<h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><p>进入hadoop的etc/hadoop</p>
<ol>
<li><p>配置hadoop-env.sh，找到被注释的JAVA_HOME与HADOOP_HOME，解开注释，修改为对应位置。</p>
</li>
<li><p>修改core-site.xml,添加如下</p>
<!-- 指定HDFS中的NameNode地址 -->
<property>
<name>fs.defaultFS</name>
   <value>hdfs://centos1:9000</value>
</property>
<!-- 指定hadoop运行时产生的临时文件 -->
<property>
<name>hadoop.tmp.dir</name>
   <value>/home/centos/hadoop/data/hadoopdata</value>
</property>
</li>
<li><p>修改hdfs-site.xml，添加如下</p>
<property>
    <name>dfs.namenode.secondary.http-address</name>
        <value>centos3:50090</value>
    <description>secondarynamenode运行节点的信息,和namenode不同节点</description>
</property>
<property>
        <name>dfs.replication</name>
        <value>3</value>
    <description>HDFS的数据块副本存储个数</description>
</property>
<property>
    <name>dfs.namenode.http-address</name>
    <value>centos1:50070</value>
</property>
<property>
        <name>dfs.namenode.name.dir</name>
        <value>/home/centos/hadoop/data/name</value>
    <description>namenode的数据存储目录</description>
</property>
<property>
        <name>dfs.datanode.data.dir</name>
        <value>/home/centos/hadoop/data/data</value>
    <description>datanode的数据存储目录</description>
</property>
</li>
<li><p>修改yarn-site.xml，添加如下</p>
<property>
        <name>yarn.resourcemanager.hostname</name>
        <value>centos2</value>
</property>
<property>
        <name>yarn.nodemanager.aux-services</name>
        <value>mapreduce_shuffle</value>
        <description>yarn集群为mapreduce程序提供的shuffle服务</description>
</property>

</li>
</ol>
<p>有时候，有的yarn还是什么日志报错，具体问题忘了，是需要配置<code>yarn.application.classpath</code>的属性，它的值通过<code>hadoop classpath</code>命令打出来</p>
<pre><code>&lt;property&gt;
&lt;name&gt;yarn.application.classpath&lt;/name&gt;
&lt;value&gt;/home/hadoop/install/hadoop/etc/hadoop:/home/hadoop/install/hadoop/share/hadoop/common/lib/*:/home/hadoop/install/hadoop/share/hadoop/common/*:/home/hadoop/install/hadoop/share/hadoop/hdfs:/home/hadoop/install/hadoop/share/hadoop/hdfs/lib/*:/home/hadoop/install/hadoop/share/hadoop/hdfs/*:/home/hadoop/install/hadoop/share/hadoop/mapreduce/lib/*:/home/hadoop/install/hadoop/share/hadoop/mapreduce/*:/home/hadoop/install/hadoop/share/hadoop/yarn:/home/hadoop/install/hadoop/share/hadoop/yarn/lib/*:/home/hadoop/install/hadoop/share/hadoop/yarn/*&lt;/value&gt;
&lt;/property&gt;</code></pre><ol>
<li><p>修改mapred-site.xml，添加如下</p>
<property>
        <name>mapreduce.framework.name</name>
        <value>yarn</value>
</property>
<property>
        <name>mapreduce.jobhistory.address</name>
        <value>centos1:10020</value>
</property>
<property>
        <name>mapreduce.jobhistory.webapp.address</name>
        <value>centos1:19888</value>
</property>

</li>
</ol>
<h2 id="hadoop拷贝到centos2和centos3"><a href="#hadoop拷贝到centos2和centos3" class="headerlink" title="hadoop拷贝到centos2和centos3"></a>hadoop拷贝到centos2和centos3</h2><p>之前的克隆的时候的从centos1中克隆来的，但没有配置，在这里，先把centos2和centos3的hadoop目录删了，通过命令吧刚配置的centos1的hadoop拷贝过去。当前，如果读到这，你还没有克隆的话，先把这里的配置配了再克隆吧</p>
<pre><code>scp -r ./hadoop centos@centos2:~/
scp -r ./hadoop centos@centos3:~/</code></pre><h2 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h2><ol>
<li><p>首先执行一次格式化hdf,centos1中(namenode)<br>这是必须的，但下此再要重启服务的话就不需要了。</p>
<p>[centos@centos1 hadoop]$ hdfs namenode -format<br>2019-12-06 08:00:49,798 INFO namenode.NameNode: STARTUP_MSG:<br>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>STARTUP_MSG: Starting NameNode<br>STARTUP_MSG:   host = centos1/192.168.181.129<br>STARTUP_MSG:   args = [-format]<br>STARTUP_MSG:   version = 3.1.3<br>STARTUP_MSG:   classpath = /home/centos/hadoop/etc/hadoop:/home/ce<br>….省略</p>
</li>
<li><p>启动start-dfs,start-yarn</p>
</li>
</ol>
<p>在centos1中，也就是namenode中启动<code>start-dfs.sh</code>,必须在namenode中启动<br>然后去centos2,也就是resourceManager，<code>start-yarn.sh</code>,必须在resourceManager上启动<br>以上的启动位置，是强制的，否则出现服务启动缺失等其他异常情况。</p>
<pre><code>[centos@centos1 hadoop]$ start-dfs.sh 
Starting namenodes on [centos1]
Starting datanodes
Starting secondary namenodes [centos3]
[centos@centos2 hadoop]$ start-yarn.sh 
Starting resourcemanager
Starting nodemanagers
[centos@centos1 hadoop]$ jps
15426 NameNode
15938 Jps
15561 DataNode
15868 NodeManager
[centos@centos2 hadoop]$ jps
15028 ResourceManager
15428 Jps
14872 DataNode
15161 NodeManager
[centos@centos3 hadoop]$ jps
14214 SecondaryNameNode
14104 DataNode
14317 NodeManager
14414 Jps</code></pre><p>这里，因为测试的时候忘记执行<code>hdfs namenode -format</code>命令了，所以出现了错误，所以日志目录没有删除，这里如果第一次启动的话会提示WARN没有logs文件，会自动创建。不必在意。</p>
<p>以上服务，一个都不能少。如果少了哪个，则查看nameNode机器的日志或其他节点的日志。<br>如果集群启动失败，则必须把服务先关停，然后删除每个节点的data 和logs目录，然后再hdfs namenode -format。</p>
<p>记得关闭防火墙，避免无法访问web服务，如果不想关闭，那么去开放端口吧。每次重启需要执行关闭命令，也可以永久关闭。</p>
<pre><code># 查看状态
systemctl status firewalld.service
# 临时关闭
systemctl stop firewalld.service</code></pre><p>然后可以再宿主机上，通过访问centos1的ip地址:50070端口即可访问web页面。这里的地址是192.168.181.129:50070.<br>进入后选择最后一项Utilities，选择呢Brower the file system即可看到HDFS文件系统。</p>
<h2 id="HDFS文件测试"><a href="#HDFS文件测试" class="headerlink" title="HDFS文件测试"></a>HDFS文件测试</h2><pre><code>hdfs dfs -mkdir -p /user/input
hdfs dfs -put abc.txt /user/input

hdfs dfs -mkdir -p /user/package
hdfs dfs -put ~/jdk-8u231-linux-x64.tar.gzip /user/package</code></pre><p>上传了一个小文件，一个大文件。查看centos1:50070,发现是有的。以128M为一个block，abc.txt占用一个块，jdk为俩个块。</p>
<p>如何在本地查找,进入到data目录中找<br><code>/home/centos/hadoop/data/data/current/BP-2112740988-192.168.181.129-1562738006972/current/finalized/subdir0/subdir0</code></p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud项目基础搭建2</title>
    <url>/2019/11/03/SpringCloud/SpringCloud%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA2/</url>
    <content><![CDATA[<p>基本结构已经搭起来了,使用的是feign进行访问的。<br>接下来我们继续完善这个项目，做到更加的适用可靠。<br>项目均使用的yml配置文件，但是文章中使用properties的.符号来代替文章格式显示的问题。</p>
<p>以下项目的配置，如果说出现报错的问题，也就是说最开始没问题，改了哪个不影响的地方却突然出问题。任何问题首先clean，重新package，在重新启动一下。看看有没有解决，如果开没有解决，就检查一下当前报错应用的配置文件，最后再去百度上搜。</p>
<h2 id="配置服务的info信息"><a href="#配置服务的info信息" class="headerlink" title="配置服务的info信息"></a>配置服务的info信息</h2><p>服务的info信息可以再注册中心查看，可以描述说明当前服务主要是干什么的。访问服务即可进入一个json打开的页面。<br>我们来注册服务者的info信息,项目结构在上一篇已经有了。下面的依赖actuator可以直接放在cloudservice这个模块中就可以</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre><p>然后再build元素里添加如下内容</p>
<pre><code>&lt;build&gt;
    &lt;finalName&gt;USER-SERVICE&lt;/finalName&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/resources&lt;/directory&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;
            &lt;configuration&gt;
                &lt;delimiters&gt;
                    &lt;delimit&gt;$&lt;/delimit&gt;
                &lt;/delimiters&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;</code></pre><p>最后,服务的info信息在application.yml里配置。</p>
<pre><code>info:
  app.name: USER-SERVICE-9001
  company.name: www.fsats.com
  build.artifactId: @project.artifactId@
  build.version: @project.version@</code></pre><p>这里呢，其实应该是$符号不该是@,因为已经在pom中定义过了，但是总是个别问题出现，网上也有情况，这里也不描述为什么出现这总情况，不深究这些。</p>
<p>默认呢,actuator会给我们两个接口,info和health分别表示应用信息和健康指标,还有一个单独的根节点访问。另外还有其他的访问节点，但是并没有默认对外暴露，在官方文档上都有，可以进行开启。</p>
<ul>
<li><a href="http://192.168.88.1:9001/actuator/info">http://192.168.88.1:9001/actuator/info</a></li>
<li><a href="http://192.168.88.1:9001/actuator/health">http://192.168.88.1:9001/actuator/health</a></li>
<li><a href="http://192.168.88.1:9001/actuator">http://192.168.88.1:9001/actuator</a></li>
</ul>
<p>文档<a href="https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/actuator-api/html/#overview描述了actuator的所有提供信息端点。">https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/actuator-api/html/#overview描述了actuator的所有提供信息端点。</a><br>我们在application.yml中输入management.endpoints.web就可以自动提示叫base-path的，他的路径默认值是/actuator，也就是访问的名称，是可以改的，然后引入端点的话是management.endpoints.web.exposure.include，它是一个数组，默认值就是info和health,我们可以依据文档上新增,如果要引入全部的话可以吧值写成 “*” ，注意包含双引号。然后访问actuator就可以显示了。</p>
<p>如果想修改访问名称，也就是映射，可以设置path-mapping属性，他是一个map形式。</p>
<p>哦对了，这个东西页面可以直接在eureka页面中点服务的名称就可以跳转到actuator页面了。其他的可以看官网和其他博客看。</p>
<h2 id="注册实例名称的修改和左下角ip更改"><a href="#注册实例名称的修改和左下角ip更改" class="headerlink" title="注册实例名称的修改和左下角ip更改"></a>注册实例名称的修改和左下角ip更改</h2><p>注册实例id是唯一的通过eureka.instance.instance-id设置一个值。这样页面上就会变。然后你碰status后，左下角不是ip路径而是服务名称，要改成ip的话只需要配置eureka.instance.prefer-ip-address: true即可。</p>
<h2 id="eureka服务实例的自我保护机制-了解"><a href="#eureka服务实例的自我保护机制-了解" class="headerlink" title="eureka服务实例的自我保护机制(了解)"></a>eureka服务实例的自我保护机制(了解)</h2><p>自我保护机制是应对注册进注册中心的服务的，当服务注册进后，服务会向注册中心发送特定消息(心跳)，eureka server会接收到,在一定时间内(默认90秒，可以修改)没有收到某个微服务的心跳，eureka server便会移除这个注册服务实例，而某些情况可能只是网络通信的原因导致心跳消息无法及时发送到，导致实例被移除，因此引入了自我保护机制，该微服务实例并不会移除。</p>
<p>那自我保护机制是怎么个机制，如果接受的心跳在15分钟内低于应收总量的85%，那么这个实例就会处于保护状态，那么这个实例就不会过期。而如果收到的请求回到那个阙值，就会关闭保护机制。</p>
<p>但如果开启了保护机制，万一请求到这个实例，那么就处于非正常的请求，可能是空的或者是错误请求。我们可以取消保护机制，那么在一定时间内该实例就会被下线，不会再注册中心中出现。</p>
<p>eureka server关闭自我保护:eureka.server.enable-self-preservation: false<br>微服务注册客户端设置心跳:</p>
<ul>
<li>lease-expiration-duration-in-seconds: 90 #表示若90秒内没有发送服务端心跳，说明服务为Down状态</li>
<li>lease-renewal-interval-in-seconds: 30 #表示每30秒向服务端发送一次心跳，保证出于连接状态</li>
</ul>
<h2 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><p>首先eureka是注册中心，所有服务都注册于此，但难免某个服务所在的服务器出现问题或网络出现问题，这样，当某用户在请求时，刚好将请求分配到这个服务实例去响应，然而却无法通信，可能就会出现无响应或者请求阻塞等问题。<br>这也是，如果eureka server的自我保护机制中如果出现了这种问题，那么请求不也有问题了么。</p>
<p>因此就有负载均衡来解决这个问题，通常的单机应用程序，可以使用nginx，多台服务器启动多个程序，并使用nginx来进行负载均衡，属于集中式的。<br>而我们现在要说的Netflix Ribbon是进程式的，可以嵌入到消费者服务中，从注册中心中获取哪个服务地址有用，在选择适合的服务器请求</p>
<p>因为Ribbon是嵌入到服务消费者中的，因此在eureka-consumer中配置<br>添加依赖</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;
    &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p>然后第二步时创建数据库,分别再创建cloud2和cloud3，用来表示另外两个userservice服务的各自的库，并把user表给建上。</p>
<p>然后第三步是,新建模块userservice2和userservice3,将java下的包和resources下的mapper及application.yml拷贝一份。然后修改，端口号为9002和9002，修改instance-id的命名，修改数据库分别为cloud2和cloud3,修改info.app.name的名字。<br><strong>除了更改配置文件，其他的是完全一模一样的</strong>。</p>
<p>然后就可以测试了，之前在单个服务的时候已经测试过了，cloud1里面也已经有数据了，然后当我们执行<a href="http://loclahost:8001/consumer/user/list的时候，发现每执行3次会查询出一次结果，因为其中一个库有数据，另两个是新建的没有数据。而这种查询的负载均衡就是默认的轮询模式，多个服务循环依次请求。">http://loclahost:8001/consumer/user/list的时候，发现每执行3次会查询出一次结果，因为其中一个库有数据，另两个是新建的没有数据。而这种查询的负载均衡就是默认的轮询模式，多个服务循环依次请求。</a><br>我们看一下现在包的结构:</p>
<p><img src="https://i.loli.net/2019/11/02/l4De82QVfRWxihN.png" alt="title"></p>
<p>然后我们说一下负载均衡的策略，默认的轮询模式已经知道是怎么个形式了。拿一个表，列出其他的模式</p>
<table>
<thead>
<tr>
<th>类名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>RoundRobinRule</td>
<td>轮询,按照定义顺序一次循环访问</td>
</tr>
<tr>
<td>RandomRule</td>
<td>随机进行访问</td>
</tr>
<tr>
<td>AvailabilityFilteringRule</td>
<td>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，还有并发的连接数量超过阙值的服务，然后对剩余服务列表按照轮询策略访问</td>
</tr>
<tr>
<td>WeightedResponseTimeRule</td>
<td>根据平均响应时间计算所有服务的权重，响应时间越快的服务权重越大被选中的概率越高，如果刚启动统计信息不足，则使用RoundRobinRule策略，等统计信息足够时，切换到WeightedResponseTimeRule</td>
</tr>
<tr>
<td>RetryRule</td>
<td>先按照RoundRobinRule的策略获取服务，如果获取失败则在指定时间内进行重试，获取可用的服务</td>
</tr>
<tr>
<td>BestAvailableRule</td>
<td>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择并发量最小的服务</td>
</tr>
<tr>
<td>ZoneAvoidanceRule</td>
<td>复合判断server所在区域的性能和server的可用性选择服务器</td>
</tr>
</tbody></table>
<p>如果要修改默认的策略，只需要注入对应的Bean就好了。处于cfg包里</p>
<pre><code>@Configuration
public class MyConfiguration &#123;

    @Bean
    public IRule myRule()&#123;
        return new RandomRule();
    &#125;
&#125;</code></pre><p>当然这是对当前应用所有请求都是用这个规则，如果你的这个消费者模块想要处理两个模块的请求，可以分开处理请求规则。你可以在启动类上标注注解</p>
<pre><code>@RibbonClient(name = &quot;SPRING-PROD&quot;,configuration = RoundRobinRule.class)
@EnableFeignClients(basePackages = &#123;&quot;com.fsats.user&quot;&#125;)
@EnableEurekaClient
@SpringBootApplication
public class ConsumerApplication &#123;

    public static void main(String[] args) &#123;
        SpringApplication.run(ConsumerApplication.class,args);
    &#125;
&#125;</code></pre><p>这个注解使用的是应对单个模块SPRING-PROD，configuration属性就是规则类。如果因为业务需要这个应用程序处理两个模块的业务，那么么可以使用@RibbonClients注解。另外，在注解上标注的和通用配置的不能重复。否则会报错说找到两个匹配的规则。</p>
<p><strong>自定义规则</strong><br>自定义规则也是在configuration中配置，可以继承AbstractLoadBalancerRule类来配置规则。<br>我们在cfg包里创建MyRule类</p>
<pre><code>public class MyRule extends AbstractLoadBalancerRule &#123;

    @Override
    public void initWithNiwsConfig(IClientConfig iClientConfig) &#123;

    &#125;

    private int total = 0;            // 总共被调用的次数，目前要求每台被调用5次
    private int currentIndex = 0;    // 当前提供服务的机器号

    public Server choose(ILoadBalancer lb, Object key) &#123;
        if (lb == null) &#123;
            return null;
        &#125;
        Server server = null;

        while (server == null) &#123;
            if (Thread.interrupted()) &#123;
                return null;
            &#125;
            List&lt;Server&gt; upList = lb.getReachableServers();
            List&lt;Server&gt; allList = lb.getAllServers();

            int serverCount = allList.size();
            if (serverCount == 0) &#123;
                return null;
            &#125;
            if (total &lt; 5) &#123;
                server = upList.get(currentIndex);
                total++;
            &#125; else &#123;
                total = 0;
                currentIndex++;
                if (currentIndex &gt;= upList.size()) &#123;
                    currentIndex = 0;
                &#125;
            &#125;
            if (server == null) &#123;
                Thread.yield();
                continue;
            &#125;
            if (server.isAlive()) &#123;
                return (server);
            &#125;
            server = null;
            Thread.yield();
        &#125;

        return server;

    &#125;

    @Override
    public Server choose(Object o) &#123;
        return choose(getLoadBalancer(),o);
    &#125;
&#125;</code></pre><p>该类定义规则是每个服务都请求5次后再请求下一个服务。然后更改MyConfiguration的注入的规则Bean，注入MyRule。然后修改注解上的配置类MyConfiguration.class,或者直接把MyRule.class写在configuration属性上。</p>
<h2 id="Hystrix断路器"><a href="#Hystrix断路器" class="headerlink" title="Hystrix断路器"></a>Hystrix断路器</h2><p>服务器负载均衡的策略已经说好了，那如果程序出现异常错误，请求超时等等其他问题该怎么办，如果特殊原因把某个服务停了，而刚好请求到这里该怎么办。<br>断路器，字面意思就如电路保险丝一样。<br>Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</p>
<h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><p>服务熔断，可以理解为当客户端访问服务时，因为服务的原因，导致服务响应报错，或响应失败，导致响应超时造成资源损失，作出的处理(<strong>向调用方法返回一个符合预期的可处理的备选响应Fallback</strong>),而不是一直等待响应或抛出异常。<br>如果执行一个方法报错了，怎么办，我们来模拟一下:<br>在consumer添加依赖</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre><p>在UserController中添加方法,请求路径get改为getn,然后添加注解，配置fallbackMethod为某个方法名称</p>
<pre><code>@HystrixCommand(fallbackMethod = &quot;requestErrorGet&quot;)
@GetMapping(&quot;/consumer/user/getn/&#123;id&#125;&quot;)
public User getWithNull(@PathVariable(&quot;id&quot;) Long id)&#123;
    User user = iUserClient.get(id);
    if (user==null)&#123;
        throw new RuntimeException();
    &#125;
    return user;
&#125;

public User requestErrorGet(@PathVariable(&quot;id&quot;) Long id)&#123;
    return new User().setId((long) 0).setName(&quot;没有找到记录&quot;).setAge((long) 21);
&#125;</code></pre><p>然后给consumer启动类添加@EnableCircuitBreaker注解。即可测试，发现如果数据入库请求请求到cloud2或cloud3，就会获取null，然后抛出异常，就执行requestErrorGet方法了。</p>
<h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>服务降级属于服务的较大问题，例如服务所在服务器关机或其他情况，导致访问服务无法响应。与熔断的区别在于，服务熔断其服务是可用的，但服务降级的问题是可能服务不可用，在注册中心处于Down状态。即服务为暂停状态，无法访问。此时做服务降级处理。任何访问此服务的都会返回相应的自定义信息。<br>而因为诸多个方法，每个方法都需要一个熔断后处理方法，所以，他需要一个FallbackFactory来集中处理每个服务中方法的请求。它放在Feign中，也是与实际业务解耦。<br>所以服务降级的配置在api模块上，api模块要请求服务提供者，但服务提供者挂了。那么这个就会被触发。但是如果同时配置服务熔断，那么会先执行服务熔断@HystrixCommand注解上的fallbackMethod。因此这里我们先把这个注解注释掉。</p>
<p>配置api模块,在feign包同级创建fallback包，创建类</p>
<pre><code>@Component
public class UserClientFallbackFactory implements FallbackFactory&lt;IUserClient&gt; &#123;
    @Override
    public IUserClient create(Throwable throwable) &#123;
        return new IUserClient() &#123;
            @Override
            public boolean add(User user) &#123;
                return false;
            &#125;

            @Override
            public User get(Long id) &#123;
                return new User().setId((long) 0).setName(&quot;服务降级&quot;).setAge((long) 0);
            &#125;

            @Override
            public List&lt;User&gt; list() &#123;
                return new ArrayList&lt;&gt;();
            &#125;
        &#125;;
    &#125;
&#125;</code></pre><p>然后再feign中IUserClient接口类上的@FeighClient注解上新增属性fallbackFactory,然后现在是这样的@FeignClient(value = “SPRING-PROD”,fallbackFactory = UserClientFallbackFactory.class)<br>最后在consumer上加上配置，开启feign和Hystrix，feign.hystrix.enabled:true</p>
<p>接下来测试，首先把consumer的@HystrixCommand注解注释掉，这个会在服务降级之前处理。/consumer/user/getn/1<br>我们只启动ecurekaServer和consumer来测试，服务提供者均不启动，当我们请求get的时候，因为api那请求服务提供者不了啊，所以就进入那个类的方法里，打印了服务降级的信息。<br>那我们此时再启动三个服务提供者，会发现有时候有结果，有时候报错，因为cloud1有数据，而且服务熔断的注释被注掉了，所以请求到另两个的时候会报错。<br>现在，再停止consumer，把@HystrixCommand服务熔断注释解开，在重新启动，再请求发现，有的是返回正确信息，有的返回没有记录(cloud2，cloud3)。</p>
<h3 id="hystrixDashboard服务调用监控"><a href="#hystrixDashboard服务调用监控" class="headerlink" title="hystrixDashboard服务调用监控"></a>hystrixDashboard服务调用监控</h3><p>Hystrix会持续记录所有通过Hystrix发起的请求的执行信息，以统计报表和图形的方式展现给用户，每秒执行多少成功，多少失败等等。<br>Spring Cloud提供Hystrix Dashboard的整合将监控内容转化成可视化界面。</p>
<p>我们为三个userservice添加依赖，可以放在父pom里</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre><p>然后为各自启动类添加@EnableHystrixDashboard注解<br>因2.0版本情况原因，还需要在userservice中配置一段代码,才能访问</p>
<pre><code>@Configuration
public class MyConfiguration &#123;

    @Bean
    public ServletRegistrationBean hystrixMetricsStreamServlet() &#123;
        ServletRegistrationBean registration = new ServletRegistrationBean(new HystrixMetricsStreamServlet());
        registration.addUrlMappings(&quot;/hystrix.stream&quot;);
        return registration;
    &#125;
&#125;</code></pre><p>访问<a href="http://lcoalhost:9001/hystrix可以访问搭配监控页面,在地址栏输入`http://localhost:9001/hystrix.stream`,下面可是输入刷新间隔个监控名称。点击按钮即可进入监控。">http://lcoalhost:9001/hystrix可以访问搭配监控页面,在地址栏输入`http://localhost:9001/hystrix.stream`,下面可是输入刷新间隔个监控名称。点击按钮即可进入监控。</a></p>
<p>不过奇怪的是，一直loding中，没有图像显示,因为他必须要在经过请求的方法上添加@HystrixCommand注解来监控，因此需要在userservice的UserController的方法上添加此注解。然后再多次请求就有结果了。</p>
<p>不过更奇怪的是，再服务熔断的时候不是配置在consumer中了么。可见好像配置的位置不怎么正确，不过功能依据注解，还是可以使用的。<br>但是，我们尝试把consumer的服务熔断给取消掉，然后由userservice来处理服务熔断这个问题，发现，是没有问题的。可以放在userservice中，那么这个监控的问题就顺理成章了。</p>
<p>此时我们的consumer就还是feign和ribbon负载均衡了。而uservice则承载着服务熔断和服务监控，而api依旧是负责服务降级的问题。</p>
<p>我列一下userservice的UserController和启动类</p>
<pre><code>@RestController
public class UserController &#123;

    @Autowired
    private UserService userService;

    @ResponseBody
    @PostMapping(&quot;/user/add&quot;)
    public boolean add(@RequestBody User user)&#123;
        return userService.add(user);
    &#125;
    @HystrixCommand(fallbackMethod = &quot;requestErrorGet&quot;)
    @ResponseBody
    @GetMapping(&quot;/user/get/&#123;id&#125;&quot;)
    public User get(@PathVariable(&quot;id&quot;) Long id)&#123;
        User user = userService.get(id);
        if (user==null)&#123;
            throw  new RuntimeException();
        &#125;
        return user;
    &#125;

    @ResponseBody
    @GetMapping(&quot;/user/list&quot;)
    public List&lt;User&gt; list()&#123;
        return userService.list();
    &#125;

    public User requestErrorGet(@PathVariable(&quot;id&quot;) Long id)&#123;
        return new User().setAge((long) 0).setName(&quot;Asd&quot;).setId((long) 0);
    &#125;
&#125;

@EnableCircuitBreaker
@EnableHystrixDashboard
@EnableEurekaClient
@SpringBootApplication
public class UserServiceApplication &#123;
    public static void main(String[] args) &#123;
        SpringApplication.run(UserServiceApplication.class,args);
    &#125;
&#125;</code></pre><p>application.yml是没变的，pom是父pom添加的依赖</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre><p>consumer的启动类</p>
<pre><code>@RibbonClient(name = &quot;SPRING-PROD&quot;,configuration = RoundRobinRule.class)
@EnableFeignClients(basePackages = &#123;&quot;com.fsats.user&quot;&#125;)
@EnableEurekaClient
@SpringBootApplication
public class ConsumerApplication &#123;

    public static void main(String[] args) &#123;
        SpringApplication.run(ConsumerApplication.class,args);
    &#125;

&#125;</code></pre><p>项目下载:<a href="https://nas.tsaving.cn/file/download/72">https://nas.tsaving.cn/file/download/72</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>微服务</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud项目基础搭建1</title>
    <url>/2019/11/01/SpringCloud/SpringCloud%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA1/</url>
    <content><![CDATA[<p>首先从可以通信开始，然后再配置负载均衡熔断器之类的。<br>首先，学完了springcloud之后，许多名词，虽然了解一点，但是他们之间的关系还是不太明确清晰。<br>分布式微服务，既然是分布式肯定会通信的，离不开ip的。</p>
<p>服务注册:也就是注册中心，通俗一点就是 将服务提供者注册到这个服务中心中，<strong>由注册中心来进行资源调配管理，上线下线等</strong>，服务提供者可以同时注册多个，可以负载均衡。</p>
<p>服务提供者:就是平常写的一套单机程序，controller，service,mapper一整套代码，它能对外提供接口，因此被称为提供者，他需要注册到注册中心去</p>
<p>服务消费者:也就是对外部开放的,而提供者可以不对外开放，也就是说，浏览器直接调用服务消费者的代码，而在后台，直接由服务消费者请求服务提供者，而中间请求的过程就是请求服务注册中心，由他来确定请求哪个服务提供者的服务。</p>
<p>简而言之,服务注册是管理所有的服务，服务提供者对内，服务消费者对外。<br>服务消费者通过什么调用请求注册中心调用服务提供者,Feign。<br>Feign是一个声明式的Web Service客户端，它的目的是让Web Service调用更简单。Feign提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息。</p>
<p>虽然说到这，基本简单的微服务已经形成了，但是还无法明确项目搭建的机构。Feign，服务消费者，服务提供者该往哪写。</p>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>springcloud如果没有教程入门，可能还没进门就卡死在外。<br>springboot 与springcloud，springcloud是依赖springboot的，而springboot的版本有1.x和2.x，而2.x又分为2.1和2.2。而springcloud的版本号却不是以数字命名，这就很难搞。而且两者版本的依赖是有非常严格的，否则就会莫名的出错，甚至连项目都起不来。springboot2.1和2.2也有很大的区别，以及springcloud的不同版本引用有有较大的改动。<br>还有就是依赖的问题,老版本的eureka依赖名教eureka，而新版本的叫eureka-server，feign也有老版和新版,为openfeign和feign。<br>通过教程的学习以及多次尝试，最后找到匹配的版本。</p>
<p><strong>父工程POM</strong></p>
<pre><code>&lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;2.1.6.RELEASE&lt;/version&gt;
    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
&lt;/parent&gt;
&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;spring-cloud.version&gt;Greenwich.BUILD-SNAPSHOT&lt;/spring-cloud.version&gt;
&lt;/properties&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;!--&lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
    &lt;/dependency&gt;--&gt;
    &lt;!--&lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-oauth2-client&lt;/artifactId&gt;
    &lt;/dependency&gt;--&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
        &lt;scope&gt;runtime&lt;/scope&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;scope&gt;runtime&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
        &lt;exclusions&gt;
            &lt;exclusion&gt;
                &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;
                &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;
            &lt;/exclusion&gt;
        &lt;/exclusions&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
        &lt;artifactId&gt;druid&lt;/artifactId&gt;
        &lt;version&gt;1.1.16&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</code></pre><p>以上的版本匹配是:<br>SpringBoot:2.1.6.RELEASE<br>SpringCloud:Greenwich.BUILD-SNAPSHOT<br>这个是没有问题的。</p>
<h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><p>服务注册是用eureka,分为eureka-server和eureka-client。<br>server及服务注册中心本身，他也是服务，但他不需要注册自己，只作为服务管理者。<br>模块名:eureka-server<br><strong>POM文件</strong></p>
<pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</code></pre><p>依赖security的原因是，这个springcloud的版本对安全要求更严格，当然也有方法来阻止这种安全检查。<br><strong>application.yml</strong></p>
<pre><code>server:
  port: 7001
eureka:
  instance:
    hostname: localhost
  client:
    register-with-eureka: false
    fetch-registry: false
    service-url:
      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/
spring:
  security:
    user:
      name: root
      password: root</code></pre><p>以上配置文件标识注册中心端口为7001，注册服务地址为defaultZone的值地址，然后是配置一下security的用户名密码，这个用户名密码需要在eureka-client连接时写上。<br>此处需要添加对security的配置</p>
<pre><code>@EnableWebSecurity
public class WebSecurityConfigurer extends WebSecurityConfigurerAdapter &#123;
    @Override
    protected void configure(HttpSecurity http) throws Exception &#123;
        // Configure HttpSecurity as needed (e.g. enable http basic).
        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.NEVER);
        http.csrf().disable();
        //注意：为了可以使用 http://$&#123;user&#125;:$&#123;password&#125;@$&#123;host&#125;:$&#123;port&#125;/eureka/ 这种方式登录,所以必须是httpBasic,
        // 如果是form方式,不能使用url格式登录
        http.authorizeRequests().anyRequest().authenticated().and().httpBasic();
    &#125;
&#125;</code></pre><p>然后就是启动类了,只需要@EnableEurekaServer注解</p>
<pre><code>@EnableEurekaServer
@SpringBootApplication
public class EurekaServerApplication &#123;
    public static void main(String[] args) &#123;
        SpringApplication.run(EurekaServerApplication.class,args);
    &#125;
&#125;</code></pre><p>最后访问localhost:7001即可进入页面，如果有密码，则输入security配置的即可。</p>
<h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><p>接下来讲就是服务提供者，就是一般的访问数据库的，我只列出Controller的简单代码。</p>
<pre><code>@RestController
public class UserController &#123;

    @Autowired
    private UserService userService;

    @ResponseBody
    @PostMapping(&quot;/user/add&quot;)
    public boolean add(@RequestBody User user)&#123;
        return userService.add(user);
    &#125;

    @ResponseBody
    @GetMapping(&quot;/user/get/&#123;id&#125;&quot;)
    public User get(@PathVariable(&quot;id&quot;) Long id)&#123;
        return userService.get(id);
    &#125;

    @ResponseBody
    @GetMapping(&quot;/user/list&quot;)
    public List&lt;User&gt; list()&#123;
        return userService.list();
    &#125;
&#125;</code></pre><p>接下来，重要的还是配置文件</p>
<pre><code>server:
  port: 9001
eureka:
  instance:
    instance-id: springcloud8001
    prefer-ip-address: true
  client:
    service-url:
      defaultZone: http://root:root@localhost:7001/eureka/
spring:
  application:
    name: SPRING-PROD
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型
    driver-class-name: com.mysql.jdbc.Driver              # mysql驱动包
    url: jdbc:mysql://localhost:3306/cloud1?serverTimezone=UTC&amp;characterEncoding=utf-8              # 数据库名称
    username: root
    password: root
    dbcp2:
      min-idle: 5                                           # 数据库连接池的最小维持连接数
      initial-size: 5                                       # 初始化连接数
      max-total: 5                                          # 最大连接数
      max-wait-millis: 200                                  # 等待连接获取的最大超时时间
mybatis:
  type-aliases-package: com.fsats.user.entity    # 所有Entity别名类所在包
  mapper-locations:
    - classpath:mapper/**/*.xml                       # mapper映射文件
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</code></pre><p>以上配置表示,服务提供者的端口,eureka.instance.instance-id表示注册在服务上的显示的名称。而spring.application.name就比较重要了，是当前服务的应用名称,多个相同的服务提供者负载均衡，instance-id可以不同，但这个值一定要一样，他表示一个独立的微服务应用。而且feign使用也是需要这个应用名称的。<br>剩下的就是mybatis和连接数据库了。<br>这个service提供者，我使用了新模块，并在新模块cloudservice里再新建的user-service模块,因此把依赖放到父模块cloudservice里。</p>
<pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.fsats&lt;/groupId&gt;
        &lt;artifactId&gt;user-api&lt;/artifactId&gt;
        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
        &lt;version&gt;2.0.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</code></pre><p>启动类的话只需要加上@EnableEurekaClient注解即可。</p>
<p>服务提供者的主要内容就是，作为服务提供外部访问，然后把自己注册到服务注册中心去。</p>
<p>在上面依赖里依赖了user-api，它是feign客户端，是服务消费者与服务提供者沟通的桥梁。<br>如果桥梁呢,首先这个api定义后，服务提供者和服务消费者都可以依赖他，提供者可以获取实体类，也可以在自己模块定义实体类。<br>先看一下UserFeignClient类</p>
<pre><code>@FeignClient(value = &quot;SPRING-PROD&quot;)
public interface UserFeignClient&#123;

    @PostMapping(&quot;/user/add&quot;)
    boolean add(@RequestBody User user);

    @GetMapping(&quot;/user/&#123;id&#125;&quot;)
    User get(@PathVariable(&quot;id&quot;) Long id);

    @GetMapping(&quot;/user/list&quot;)
    List&lt;User&gt; list();

&#125;</code></pre><p>它就表示一个feign客户端,主要调用SPRING-PROD应用里的请求。<br>那么，逻辑明显了，服务消费者通过自己的请求，然后注入这个UserFeignClient类，便可以操作了。这个类的方法因为已经标识了应用名称，所以他会以webservice的方式和方法上定义的请求路径去请求这个地址。并把结果给服务消费者。<br>那么很显然，服务消费者是一定需要这个类的包的，但是如何知道这个feign，那就是通过另一个注解@EnableFeignClients扫描，在服务提供者类里扫描包含@FeignClient注解的方法,因为已经引入api这个包了，所以一定是扫描的上的，并且如果扫描上，直接被注入容器中。</p>
<h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><p>服务消费者也属于服务，但可以不注册。<br>看一下yml</p>
<pre><code>server:
  port: 8001

eureka:
  client:
    service-url:
      defaultZone: http://root:root@localhost:7001/eureka
    register-with-eureka: false

info:
  app.name: springcloud-test-8001
  company.name: www.fsats.com
  build.artifactId: $project.artifactId$
  build.version: $project.version$</code></pre><p>register-with-eureka表示，不在注册中心注册自己，虽然这里已经定义了路径，但是是没有注册的。info后面的可以去掉，这个是服务的相关定义信息。</p>
<p><strong>POM文件</strong></p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.fsats&lt;/groupId&gt;
    &lt;artifactId&gt;user-api&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p>接下来需要在启动类中标注@EnableFeignClients注解</p>
<pre><code>@EnableFeignClients(basePackages = &#123;&quot;com.fsats.user&quot;&#125;)
@EnableEurekaClient
@SpringBootApplication
public class ConsumerApplication &#123;

    public static void main(String[] args) &#123;
        SpringApplication.run(ConsumerApplication.class,args);
    &#125;
&#125;</code></pre><p>其中，basePackage表示扫描的注解基础路径,此处填写api模块的包名。</p>
<pre><code>@RestController
public class UserController &#123;

    //@Autowired
    private IUserClient iUserClient;

    @PostMapping(&quot;/consumer/user/add&quot;)
    public boolean add(User user)&#123;
        return this.iUserClient.add(user);
    &#125;

    @GetMapping(&quot;/consumer/user/get/&#123;id&#125;&quot;)
    public User get(@PathVariable(&quot;id&quot;) Long id)&#123;
        return this.iUserClient.get(id);
    &#125;

    @GetMapping(&quot;/consumer/user/list&quot;)
    public List&lt;User&gt; list(User user)&#123;
        return this.iUserClient.list();
    &#125;
&#125;</code></pre><p>在Controller中，既然启动类上已经扫描feignClient了，这里也不需要@AutoWired注解也是可以请求的。<br>另外，这个PostMapping在postman使用里测试，不能在params里写参数并使用post提交，必须在Body里，选择raw，然后填写json格式数据才能正确提交。因为feignClient里定义了@RequestBody注解。</p>
<p>包结构如下:</p>
<p><img src="https://i.loli.net/2019/11/01/GkJfy9WDsbRLmZC.png" alt="TIM截图20191101131246.png"></p>
<p>项目下载地址:<a href="https://nas.tsaving.cn/file/download/71">https://nas.tsaving.cn/file/download/71</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>微服务</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud微服务快速学习零碎文档</title>
    <url>/2019/11/01/SpringCloud/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E9%9B%B6%E7%A2%8E%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p>项目位置为H盘符ideaProject下的springcloud-test项目</p>
<p>该项目以尚硅谷springcloud课程为例，以dept部分为案例的项目</p>
<h2 id="模块分析"><a href="#模块分析" class="headerlink" title="模块分析"></a>模块分析</h2><ul>
<li>springcloud-test:项目父包，存储相关通用依赖，插件等。</li>
<li>api模块:目前存放实体类和相关通用类</li>
<li>provider-dept-8001:为dao，service，controller层，连接访问数据库，并提供Rest风格的请求,该模块为生产者模块</li>
<li>consumer-dept-80:该模块为消费者模块，启动端口为80，通过RestTemplate以客户端消费者的模式来访问生产者提供的rest接口</li>
<li>eureka-7001:该模块为eureka server模块,需添加依赖</li>
</ul>
<h2 id="Eureka组件相关"><a href="#Eureka组件相关" class="headerlink" title="Eureka组件相关"></a>Eureka组件相关</h2><p>添加Eureka依赖,添加之前需要在springcloud-test父工程下添加springcloud依赖管理,版本需要匹配</p>
<pre><code>&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;Greenwich.SR1&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;
    &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p>添加yml配置</p>
<pre><code>server:
  port: 7001

eureka:
  instance:
    hostname: localhost #eureka服务端的实例名称
  client:
    register-with-eureka: false     #false表示不向注册中心注册自己。
    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    service-url:
      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。
      #defaultZone: http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</code></pre><p>添加App启动类，添加@SpringBootApplication注解和@EnableEurekaServer注解</p>
<p>为8001服务提供者模块添加eureka-client依赖，并配置，将模块注册到eureka注册中心。该依赖引入，若出现右侧maven红线，则检查依赖包是否下载成功，若pom.xml没有报红线，且在application.xml中有提示eureka配置则说明引入依赖成功。</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
    &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;
    &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p>application.yml追加eureka配置</p>
<pre><code>eureka:
  client: #客户端注册进eureka服务列表
    service-url:
      defaultZone: http://localhost:7001/eureka</code></pre><p>为8001服务提供者主启动类添加@EnableEurekaClient注解。</p>
<blockquote>
<p><strong>以上在springcloud2.0中并无法注册成功</strong></p>
</blockquote>
<p>解决方案:<br>因为2.0的原因，安全问题，所以</p>
<ol>
<li><p>在eureka server模块添加security依赖<br><code>xml &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; &lt;/dependency&gt;</code></p>
</li>
<li><p>修改配置</p>
<p>eureka:<br>  instance:</p>
<pre><code>hostname: localhost #eureka服务端的实例名称</code></pre><p>  client:</p>
<pre><code>register-with-eureka: false     #false表示不向注册中心注册自己。
fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
service-url:
  defaultZone: http://root:root@$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。
  #defaultZone: http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</code></pre><p>spring:<br>  security:</p>
<pre><code>user:
  name: root
  password: root</code></pre></li>
<li><p>添加配置类</p>
<p>@EnableWebSecurity<br>public class WebSecurityConfigurer extends WebSecurityConfigurerAdapter {</p>
<pre><code>@Override
protected void configure(HttpSecurity http) throws Exception &#123;
    // Configure HttpSecurity as needed (e.g. enable http basic).
    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.NEVER);
    http.csrf().disable();
    //注意：为了可以使用 http://$&#123;user&#125;:$&#123;password&#125;@$&#123;host&#125;:$&#123;port&#125;/eureka/ 这种方式登录,所以必须是httpBasic,
    // 如果是form方式,不能使用url格式登录
    http.authorizeRequests().anyRequest().authenticated().and().httpBasic();
&#125;</code></pre><p>}</p>
</li>
<li><p>在eureka client修改配置</p>
<p>eureka:<br>  client: #客户端注册进eureka服务列表</p>
<pre><code>service-url:
  defaultZone: http://root:root@localhost:7001/eureka</code></pre></li>
</ol>
<p>然后，重新clean install后启动，eureka server启动会需要密码。在eureka client启动后显示启动时间后会出现类似这样的信息说明注册成功</p>
<pre><code>2019-05-27 19:00:16.538  INFO 3396 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SPRINGCLOUD-TEST/192.168.43.216:springcloud-test:8001 - registration status: 204</code></pre><h3 id="主机名称的修改，即服务注册页status名称修改"><a href="#主机名称的修改，即服务注册页status名称修改" class="headerlink" title="主机名称的修改，即服务注册页status名称修改"></a>主机名称的修改，即服务注册页status名称修改</h3><p>在springcloud下，其名称为IP地址:${spring.application.name}:端口号,但，若要改成一个名称，则需要在eureka client配置如下</p>
<pre><code>eureka:
  client: #客户端注册进eureka服务列表
    service-url:
      defaultZone: http://root:root@localhost:7001/eureka
  instance:
    instance-id: springcloud8001</code></pre><p>即多添加后两行的代码。<strong>修改完成后，若没有自动加载修改，则需要重新clean install</strong></p>
<blockquote>
<p>默认情况下可能是当前主机的ip在hosts文件中的映射，请检查windows下或linux下的hosts文件的当前主机ip配置。</p>
</blockquote>
<h3 id="修改ip信息提示，即触碰status注册名称则右下角连接出现url访问地址。"><a href="#修改ip信息提示，即触碰status注册名称则右下角连接出现url访问地址。" class="headerlink" title="修改ip信息提示，即触碰status注册名称则右下角连接出现url访问地址。"></a>修改ip信息提示，即触碰status注册名称则右下角连接出现url访问地址。</h3><p>只需要在eureka client中instance-id下面再添加<code>prefer-ip-address: true</code>的配置即可。</p>
<h3 id="服务注册客户端配置info信息"><a href="#服务注册客户端配置info信息" class="headerlink" title="服务注册客户端配置info信息"></a>服务注册客户端配置info信息</h3><p>点击status下的instance-id，即可打开到新页面查看相关信息。<br>该信息为当前模块的服务信息，可进行配置。</p>
<ol>
<li><p>在父工程的pom.xml下配置build</p>
<build>
    <finalName>springcloud-test</finalName>
    <resources>
        <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
        </resource>
    </resources>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <configuration>
                <delimiters>
                    <delimit>$</delimit>
                </delimiters>
            </configuration>
        </plugin>
    </plugins>
</build>
</li>
<li><p>然后在服务的pom.xml添加监控依赖</p>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
</li>
<li><p>然后配置application.yml文件</p>
<p>info:<br>  app.name: springcloud-test-8001<br>  company.name: <a href="http://www.fsats.com">www.fsats.com</a><br>  build.artifactId: $project.artifactId$<br>  build.version: $project.version$</p>
</li>
</ol>
<p>可以再info下添加各类信息，然后$的配置为父工程里的配置，可引用maven中的${}里的变量来显示信息。</p>
<h3 id="自我保护机制"><a href="#自我保护机制" class="headerlink" title="自我保护机制"></a>自我保护机制</h3><p>在自我保护模式中，Eureka Server会保护注册表的信息，不再注销任何服务实例。当它收到心跳数重新恢复到阙值以上时，该节点就会退出自我保护模式。<br>默认情况下，Eureka Server在一定时间内(默认90秒)没有收到服务的实例心跳，该服务就会处于自我保护。<br>若需关闭自我保护机制则配置<code>eureka.server.enable-self-preservation: false</code>。</p>
<p>配置Eureka Client设置心跳检测</p>
<pre><code>lease-expiration-duration-in-seconds: 90 #表示若90秒内没有发送服务端心跳，说明服务为Down状态
lease-renewal-interval-in-seconds: 30 #表示每30秒向服务端发送一次心跳，保证出于连接状态</code></pre><h3 id="单机版集群配置"><a href="#单机版集群配置" class="headerlink" title="单机版集群配置"></a>单机版集群配置</h3><ol>
<li><p>新增两个模块分别为eureka7002和eureka7003,pom依赖坐标一致。</p>
</li>
<li><p>因为是单机版，所以是一台服务器模拟三个eureka server，所以在windows下hosts文件修改域名ip映射，或在linux下的etc下的hosts修改</p>
<p>127.0.0.1 eureka7001.com<br>127.0.0.1 eureka7002.com<br>127.0.0.1 eureka7003.com</p>
</li>
<li><p>修改7001,7002,7003的yml配置<br>修改<code>eureka.instance.hostname</code>为配置的映射域名,每个yml对应每个修改。<br>修改<code>eureka.client.service-url.defaultZone</code>的值为除当前url之外的另外两个serviceUrl,使用逗号分开<br>一下以7001的application.yml为例</p>
<p>eureka:<br>  instance:</p>
<pre><code>hostname: eureka7001.com #eureka服务端的实例名称</code></pre><p>  client:</p>
<pre><code>register-with-eureka: false     #false表示不向注册中心注册自己。
fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
service-url:
  defaultZone: http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</code></pre></li>
<li><p>修改8001的服务提供者，eureka client的yml配置如下<br>即，将其写成3个server服务</p>
<p>defaultZone: <a href="http://root:root@eureka7001.com:7001/eureka,http://root:root@eureka7002.com:7002/eureka,http://root:root@eureka7003.com:7003/eureka">http://root:root@eureka7001.com:7001/eureka,http://root:root@eureka7002.com:7002/eureka,http://root:root@eureka7003.com:7003/eureka</a></p>
</li>
<li><p>替换另外两个的启动类<br>修改启动类名称</p>
</li>
</ol>
<h3 id="Eureka-和Zookeeper的区别和好处"><a href="#Eureka-和Zookeeper的区别和好处" class="headerlink" title="Eureka 和Zookeeper的区别和好处"></a>Eureka 和Zookeeper的区别和好处</h3><p>CAP是强一致性，高可用性，和分区容错性。<br>Zookeeper使用CP，而Eureka使用的是AP。</p>
<ul>
<li>zk在master节点出现网络故障后会与其他节点失去联系，然后会leader选举一个新的master，选举的时间可能太长，导致整个集群不可用。虽然能最终恢复，但是漫长的选举时间导致注册长期不可用。</li>
<li>eureka在设计时就保证可用性。保证了每个节点都是平等的。几个节点挂掉不会影响正常工作，剩余的依旧可以正常提供注册和查询服务，保证注册可用，不过查询的结果不保证是最新的(<strong>不保证强一致性</strong>)。除此之外，eureka的自我保护机制，如果在15分钟内超过85%的节点都没有正常心跳，那么eureka认为客户端与注册中心出现网络故障，此时出现以下情况:<ul>
<li>Eureka不再从注册中心中移除因为长时间没有接收心跳而过期的服务</li>
<li>仍然能够接收新服务的注册和查询服务，但是不会被同步到其他节点上(保证当前节点依然可用)</li>
<li>当网络稳定时，当前实例新的注册信息被同步到其他节点中</li>
</ul>
</li>
</ul>
<h2 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><p>Ribbon是基于Netflix Ribbon实现的客户端 负载均衡工具，其功能是提供客户端的软件负载均衡算法，。<br>Load balance分为集中式和进程内</p>
<ul>
<li>集中式即多数为硬件，如:F5，也可以是软件如:nginx。由该设施负责把访问请求通过某种策略转发到服务的提供方。</li>
<li>进程内：即集成到消费方，从服务中心获知哪个地址有用，再从中选出合适的服务器。Ribbon属于进程内LB，只是一个类库，继承于消费方进程，消费方通过它来获取到服务提供方的地址。</li>
</ul>
<h3 id="Ribbon的入门配置"><a href="#Ribbon的入门配置" class="headerlink" title="Ribbon的入门配置"></a>Ribbon的入门配置</h3><p>Ribbon为客户端的负载均衡，且为进程内的，所以，那么集成到客户端调用consumer80模块中</p>
<ol>
<li><p>首先需要引入相关依赖</p>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
    <version>2.1.1.RELEASE</version>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    <version>2.1.1.RELEASE</version>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-config</artifactId>
    <version>2.1.1.RELEASE</version>
</dependency>
</li>
<li><p>配置负载均衡注解。在ConfigBean中的配置RestTempldate方法添加@LoadBalanced注解</p>
</li>
<li><p>在启动类上添加@EnableEurekaClient注解</p>
</li>
<li><p>修改Controller中的RestTempldate，访问服务提供者8001的前缀REST_URL_PREFIX。将localhost:8001修改为服务的应用名称，即注册服务的名称。</p>
</li>
<li><p>修改yml文件，新增eurekaclient配置</p>
<p>eureka:<br>  client: #客户端注册进eureka服务列表</p>
<pre><code>service-url:
  defaultZone: http://root:root@eureka7001.com:7001/eureka/,http://root:root@eureka7002.com:7002/eureka/,http://root:root@eureka7003.com:7003/eureka/
register-with-eureka: false</code></pre></li>
</ol>
<p>以上的配置，Ribbon为进程内的，即一个类库，且为<strong>客户端负载均衡</strong>，所以在80上进行操作，直接在RestTemplate访问时添加注解，但是其客户端需要到注册中心去查找服务地址，而非是直接访问服务提供者的地址，所以需要eureka client的依赖，因此要引入client依赖，并配置集群访问的defaultZone。通过<strong>服务注册中心注册的服务的名称来访问</strong>。</p>
<blockquote>
<p>经测试，要想在dept80上访问前缀<a href="http://localhost:8081替换为http://SPRINGCLOUD-TEST就必须和Ribbon一块使用，单使用@EnableEurekaClient注解，并替换前缀，是无法访问到服务的，会出现超时错误。需要添加上Ribbon的依赖,且为RestTemplateBean加上@LoadBalanced注解。">http://localhost:8081替换为http://SPRINGCLOUD-TEST就必须和Ribbon一块使用，单使用@EnableEurekaClient注解，并替换前缀，是无法访问到服务的，会出现超时错误。需要添加上Ribbon的依赖,且为RestTemplateBean加上@LoadBalanced注解。</a></p>
</blockquote>
<h3 id="多服务实例负载均衡"><a href="#多服务实例负载均衡" class="headerlink" title="多服务实例负载均衡"></a>多服务实例负载均衡</h3><p>以拷贝8001服务为8002,8003来模拟另外两台服务器部署服务，即同服务多实例的负载均衡体现。</p>
<ol>
<li>创建cloud02,cloud03数据库并插入数据(数据同cloud01)。</li>
<li>拷贝8001的代码和myabtis配置及yml配置</li>
<li>修改启动类名称</li>
<li>修改yml文件，分别修改<code>端口号</code>,<code>数据库名称</code>，即可能的<code>info信息</code>。注意spring.application.name不需要更改，否则就不是同一个服务了。</li>
<li>分别启动7001,7002,7001 eureka server，然后启动8001，8002，8003服务实例，然后进行localhost:8001自测</li>
<li>启动80，使用consumer来进行测试,发现打印的信息为不同数据库的数据，且负载均衡访问为三个实例循环访问。</li>
</ol>
<h3 id="核心组件IRule，修改配置负载均衡算法"><a href="#核心组件IRule，修改配置负载均衡算法" class="headerlink" title="核心组件IRule，修改配置负载均衡算法"></a>核心组件IRule，修改配置负载均衡算法</h3><p>只需要在80客户端配置IRule Bean即可，默认没有配置会使用默认的IRule配置，RoundRobinRule</p>
<pre><code>@Configuration
public class ConfigBean &#123;

    @Bean
    @LoadBalanced
    public RestTemplate getRestTemplate() &#123;
        return new RestTemplate();
    &#125;

    @Bean
    public IRule myIRule()&#123;
        return new RandomRule();
    &#125;

&#125;</code></pre><p>在Ribbon中自带的负载均衡算法有如下几种：<br>| 类名 | 描述 |<br>|-|-|<br>|RoundRobinRule |轮询,按照定义顺序一次循环访问|<br>|RandomRule|随机进行访问|<br>|AvailabilityFilteringRule |会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，还有并发的连接数量超过阙值的服务，然后对剩余服务列表按照轮询策略访问|<br>|WeightedResponseTimeRule|根据平均响应时间计算所有服务的权重，响应时间越快的服务权重越大被选中的概率越高，如果刚启动统计信息不足，则使用RoundRobinRule策略，等统计信息足够时，切换到WeightedResponseTimeRule|<br>|RetryRule|先按照RoundRobinRule的策略获取服务，如果获取失败则在指定时间内进行重试，获取可用的服务|<br>|BestAvailableRule|会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择并发量最小的服务|<br>|ZoneAvoidanceRule|复合判断server所在区域的性能和server的可用性选择服务器|</p>
<h3 id="Ribbon的自定义负载均衡策略"><a href="#Ribbon的自定义负载均衡策略" class="headerlink" title="Ribbon的自定义负载均衡策略"></a>Ribbon的自定义负载均衡策略</h3><p>负载均衡策略，主要就是继承AbstractLoadBalancerRule抽象类,可以参考RandomRule类的配置，其实现了getLoadBalancer()方法，可以获取所有的服务和可用服务。主要就是choose方法，并返回Server对象，也就是服务。</p>
<pre><code>public class MyRule extends AbstractLoadBalancerRule &#123;

    @Override
    public void initWithNiwsConfig(IClientConfig iClientConfig) &#123;

    &#125;

    // total = 0 // 当total==5以后，我们指针才能往下走，
    // index = 0 // 当前对外提供服务的服务器地址，
    // total需要重新置为零，但是已经达到过一个5次，我们的index = 1
    // 分析：我们5次，但是微服务只有8001 8002 8003 三台，OK？
    //</code></pre><p>​<br>        private int total = 0;            // 总共被调用的次数，目前要求每台被调用5次<br>        private int currentIndex = 0;    // 当前提供服务的机器号</p>
<pre><code>    public Server choose(ILoadBalancer lb, Object key) &#123;
        if (lb == null) &#123;
            return null;
        &#125;
        Server server = null;

        while (server == null) &#123;
            if (Thread.interrupted()) &#123;
                return null;
            &#125;
            List&lt;Server&gt; upList = lb.getReachableServers();
            List&lt;Server&gt; allList = lb.getAllServers();

            int serverCount = allList.size();
            if (serverCount == 0) &#123;
                /*
                 * No servers. End regardless of pass, because subsequent passes only get more
                 * restrictive.
                 */
                return null;
            &#125;

//            int index = rand.nextInt(serverCount);// java.util.Random().nextInt(3);
//            server = upList.get(index);
//            private int total = 0;          // 总共被调用的次数，目前要求每台被调用5次
//            private int currentIndex = 0;   // 当前提供服务的机器号
            if (total &lt; 5) &#123;
                server = upList.get(currentIndex);
                total++;
            &#125; else &#123;
                total = 0;
                currentIndex++;
                if (currentIndex &gt;= upList.size()) &#123;
                    currentIndex = 0;
                &#125;
            &#125;
            if (server == null) &#123;
                /*
                 * The only time this should happen is if the server list were somehow trimmed.
                 * This is a transient condition. Retry after yielding.
                 */
                Thread.yield();
                continue;
            &#125;
            if (server.isAlive()) &#123;
                return (server);
            &#125;

            // Shouldn&apos;t actually happen.. but must be transient or a bug.
            server = null;
            Thread.yield();
        &#125;
        return server;
    &#125;

    @Override
    public Server choose(Object o) &#123;
        return choose(getLoadBalancer(), o);
    &#125;
&#125;</code></pre><p>该类为自定义的负载均衡算法规则类，要想使用需要进行配置。首先需要在当前启动类无法进行@CompomentScan的地方创建configuration类，即无法被Spring容器扫描到。该类有@Configuration注解，并配置IRule Bean，返回当前自定义规则类。<br>然后在启动类上配置@RibbonClient注解</p>
<pre><code>@RibbonClient(name = &quot;SPRINGCLOUD-TEST&quot;,configuration = MyRuleConfiguration.class)</code></pre><p>name表示负载均衡所应用的服务名称，configuration为配置的configuration类</p>
<h2 id="Feign声明式WebService客户端"><a href="#Feign声明式WebService客户端" class="headerlink" title="Feign声明式WebService客户端"></a>Feign声明式WebService客户端</h2><p>Feign是一个声明式的Web Service客户端，它的目的是让Web Service调用更简单。Feign提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息。<br>Feign可以和Eureka与Ribbon结合使用负载均衡。<br>其使用过程就像类似于MyBatis Dao，接口访问，其作用<strong>是代替RestTemplate，而是直接使用类似Mybatis接口调用的方式</strong>。<br>步骤定义如下:</p>
<ol>
<li><p>首先需要在api模块处定义service接口方法，所以需要添加相关依赖</p>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-openfeign</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-config</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>
</li>
<li><p>配置Service接口DeptClientService接口类,其注解，值为提供接口的服务名称，此接口将关联到服务提供者。</p>
<p>@FeignClient(value = “SPRINGCLOUD-TEST”)<br>public interface DeptClientService {</p>
<pre><code>@PostMapping(&quot;/dept/add&quot;)
public boolean add(@RequestBody Dept dept);

@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)
public Dept get(@PathVariable(&quot;id&quot;) Long id);

@GetMapping(&quot;/dept/list&quot;)
public List&lt;Dept&gt; list();</code></pre><p>}</p>
</li>
<li><p>在客户端80 Controller中注入DeptClientService对象,通过其方法返回，不在使用RestTemplate</p>
<p>@RestController<br>public class DeptController_Consumer {</p>
<pre><code>@Autowired
private DeptClientService deptClientService;</code></pre><p>   //private static final String REST_URL_PREFIX = “<a href="http://localhost:8001&quot;">http://localhost:8001&quot;</a>;</p>
<pre><code>private static final String REST_URL_PREFIX = &quot;http://SPRINGCLOUD-TEST&quot;;

@Autowired
private RestTemplate restTemplate;

@PostMapping(&quot;/consumer/dept/add&quot;)
public boolean add(Dept dept)&#123;
    //return restTemplate.postForObject(REST_URL_PREFIX+&quot;/dept/add&quot;,dept,Boolean.class);
    return this.deptClientService.add(dept);
&#125;

@GetMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)
public Dept get(@PathVariable(&quot;id&quot;) Long id)&#123;
    //return restTemplate.getForObject(REST_URL_PREFIX+&quot;/dept/get/&quot; + id,Dept.class);
    return this.deptClientService.get(id);
&#125;

@GetMapping(&quot;/consumer/dept/list&quot;)
public List&lt;Dept&gt; list(Dept dept)&#123;
    //return restTemplate.getForObject(REST_URL_PREFIX+&quot;/dept/list&quot;,List.class);
    return this.deptClientService.list();
&#125;</code></pre><p>}</p>
</li>
<li><p>在80的启动类中，配置<code>@EnableFeignClients(basePackages = &#123;&quot;com.fsats.springcloud&quot;&#125;)</code>,表示扫描当前包下的FeignClient,那么其就会被Spring发现，步骤三不会报错，所以在配置Service接口的时候就不必使用@ComponentScan注解。</p>
</li>
</ol>
<h2 id="Hystrix断路器"><a href="#Hystrix断路器" class="headerlink" title="Hystrix断路器"></a>Hystrix断路器</h2><p>案例:多个服务，依赖调用，如A-&gt;B,B-&gt;C,C-&gt;D，如果某个服务出现错误或异常，会导致请求超时，或响应报错，等其他情况。或者项目实施原因为停止某个服务的使用是，该服务无法使用该如何处理。这是断路器要做的。<br><strong>Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</strong></p>
<h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><p>服务熔断，可以理解为当客户端访问服务时，因为服务的原因，导致服务响应报错，或响应失败，导致响应超时造成资源损失，作出的处理(<strong>向调用方法返回一个符合预期的可处理的备选响应Fallback</strong>),而不是一直等待响应或抛出异常。<br>其问题可以理解为Spring的AOP异常增强处理。通过添加注解并给予服务出错时要执行的方法。<br>只需要在方法上标注@HystrixCommand注解，并设置fallbackMethod属性值为回调方法。</p>
<ol>
<li><p>首先依据8001创建一个新的模块，新增hystrix依赖</p>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
</dependency>
</li>
<li><p>在controller的get方法上模拟Dept为null时抛出异常的情况</p>
<p>@HystrixCommand(fallbackMethod = “requestErrorGet”)<br>@GetMapping(“/dept/get/{id}”)<br>public Dept get(@PathVariable(“id”) Long id){</p>
<pre><code>Dept dept = deptService.get(id);
if (dept==null)&#123;
    throw new RuntimeException();
&#125;
return dept;</code></pre><p>}<br>public Dept requestErrorGet(@PathVariable(“id”) Long id){</p>
<pre><code>return new Dept(id,&quot;没有此部门&quot;,&quot;请确认部门编号&quot;);</code></pre><p>}</p>
</li>
<li><p>在主启动类上标注@EnableCircuitBreaker注解</p>
</li>
<li><p>启动7001，当前hystrix8001,和feign80</p>
</li>
<li><p>测试访问localhost/consumer/dept/get/123获得服务熔断打印信息</p>
</li>
</ol>
<h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>服务降级属于服务的较大问题，例如服务所在服务器关机或其他情况，导致访问服务无法响应。与熔断的区别在于，服务熔断其服务是可用的，但服务降级的问题是可能服务不可用，在注册中心处于Down状态。即服务为暂停状态，无法访问。此时做服务降级处理。任何访问此服务的都会返回相应的自定义信息。<br>而因为诸多个方法，每个方法都需要一个熔断后处理方法，所以，他需要一个FallbackFactory来集中处理每个服务中方法的请求。它放在Feign中，也是与实际业务解耦。</p>
<ol>
<li><p>在api模块，deptClientService同包目录下创建DeptClientServiceFallbackFactory实现FallbackFactory</p>
<p>/**</p>
<ul>
<li><p>DeptClientService里的每一个方法的熔断都统一放在当前类中</p>
</li>
<li><p>/<br>@Component<br>public class DeptClientServiceFallbackFactory implements FallbackFactory<DeptClientService> {<br>  @Override<br>  public DeptClientService create(Throwable throwable) {</p>
<pre><code>return new DeptClientService() &#123;
    @Override
    public boolean add(Dept dept) &#123;
        return false;
    &#125;

    @Override
    public Dept get(Long id) &#123;
        return new Dept(id,&quot;服务降级&quot;,&quot;确认数据库&quot;);
    &#125;

    @Override
    public List&lt;Dept&gt; list() &#123;
        return null;
    &#125;
&#125;;</code></pre><p>  }<br>}</p>
</li>
</ul>
</li>
<li><p>在DeptClientService的FeignClient注解上，配置fallbackFactory属性，即为DeptClientServiceFallbackFactory类</p>
<p>@FeignClient(value = “SPRINGCLOUD-TEST”,fallbackFactory = DeptClientServiceFallbackFactory.class)<br>public interface DeptClientService {<br>….<br>}</p>
</li>
<li><p>在客户端80feign项目中开启<code>feign.hystrix.enable:true</code>配置。使两个技术关联开启，步骤2的Feign才能解析fallbackFactory属性。</p>
</li>
<li><p>启动7001，当前hystrix8001,和feign80</p>
</li>
<li><p>测试，首先访问localhost/consumer/dept/get/123获得服务熔断的信息。然后关闭hystrix8001服务，再次访问，出现服务降级的信息。</p>
</li>
</ol>
<h3 id="hystrixDashboard服务调用监控"><a href="#hystrixDashboard服务调用监控" class="headerlink" title="hystrixDashboard服务调用监控"></a>hystrixDashboard服务调用监控</h3><p>Hystrix会持续记录所有通过Hystrix发起的请求的执行信息，以统计报表和图形的方式展现给用户，每秒执行多少成功，多少失败等等。<br>Spring Cloud提供Hystrix Dashboard的整合将监控内容转化成可视化界面。</p>
<ol>
<li><p>创建新项目hystrixDashboard,添加依赖</p>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>
</dependency>
</li>
<li><p>为启动类添加添加@EnableHystrixDashboard注解表示开启</p>
</li>
<li><p>为所有服务提供者8001,8002,8003服务，添加监控依赖</p>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
</li>
<li><p>使用<code>http://localhost:8001/hystrix.stream</code>可以看到ping:,data:,如果使用2.0以上版本，使用此地址404，那么，要在每个服务提供模块添加配置Bean，且需要hystrix依赖</p>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
</dependency>

<p>@Configuration<br>public class MyConfiguration {</p>
<pre><code>@Bean
public ServletRegistrationBean hystrixMetricsStreamServlet() &#123;
    ServletRegistrationBean registration = new ServletRegistrationBean(new HystrixMetricsStreamServlet());
    registration.addUrlMappings(&quot;/hystrix.stream&quot;);
    return registration;
&#125;</code></pre><p>}</p>
</li>
<li><p>需要服务提供者主启动类上加上@EnableCircuitBreaker注解</p>
</li>
<li><p>访问<a href="http://lcoalhost:9001/hystrix可以访问搭配监控页面,在地址栏输入`http://localhost:8001/hystrix.stream`,下面可是输入刷新间隔个监控名称。点击按钮即可进入监控。">http://lcoalhost:9001/hystrix可以访问搭配监控页面,在地址栏输入`http://localhost:8001/hystrix.stream`,下面可是输入刷新间隔个监控名称。点击按钮即可进入监控。</a></p>
</li>
</ol>
<blockquote>
<p>需要注意的是，以上步骤并不完整，如果你的代码中没有类似@HystrixCommand注解，则尽管能访问hystrix.stream，但没有data数据，无法进行图表查看,所以，需要在方法上加上@HystrixCommand注解配置，具体问题详见<a href="https://www.cnblogs.com/jinjiyese153/p/9172885.html">https://www.cnblogs.com/jinjiyese153/p/9172885.html</a></p>
</blockquote>
<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><h2 id="Zuul路由"><a href="#Zuul路由" class="headerlink" title="Zuul路由"></a>Zuul路由</h2><p>Zuul包含了对请求的路由和过滤两个功能，<br>其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础。<br>过滤功能负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础，<br>Zuul和Eureka整合，将Zuul资深注册到Eureka服务治理下的应用，同时从Eureka获得其他微服务的消息，也即以后的微服务都是通过Zuul跳转后获得。</p>
<h3 id="路由的简单应用"><a href="#路由的简单应用" class="headerlink" title="路由的简单应用"></a>路由的简单应用</h3><p>使用类似如下的地址通过路由即可访问服务<code>http://localhost:9527/springcloud-test/dept/list</code>,localhost:9527即为路由微服务，通过路由(路由注册到Eureka中)访问注册中心的服务。</p>
<ol>
<li><p>创建路由项目,添加依赖</p>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-zuul</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-devtools</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-config</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
</dependency>
</li>
<li><p>配置yml</p>
<p>server:<br>  port: 9527</p>
<p>eureka:<br>  client:</p>
<pre><code>service-url:
  defaultZone: http://root:root@eureka7001.com:7001/eureka/</code></pre><p>  instance:</p>
<pre><code>instance-id: dept-zuul-9537
prefer-ip-address: true</code></pre><p>spring:<br>  application:</p>
<pre><code>name: dept-zuul-geteway</code></pre><p>info:<br>  app.name: springcloud-test<br>  company.name: <a href="http://www.fsats.com">www.fsats.com</a><br>  build.artifactId: $project.artifactId$<br>  build.version: $project.version$</p>
</li>
<li><p>主启动类配置注解</p>
<p>@EnableEurekaClient<br>@EnableZuulProxy<br>@SpringBootApplication<br>public class DeptZuul9527_App {</p>
<pre><code>public static void main(String[] args) &#123;
    SpringApplication.run(DeptZuul9527_App.class,args);
&#125;</code></pre><p>}</p>
</li>
</ol>
<h3 id="路由访问配置"><a href="#路由访问配置" class="headerlink" title="路由访问配置"></a>路由访问配置</h3><p>隐藏实际服务名称，使用自定义的名称</p>
<pre><code>zuul:
  routes:
    mydept.serviceId: springcloud-test
    mydept.path: /mydept/**</code></pre><ul>
<li>表示将springcloud-test的服务，其路径改为mydept,使用原服务名称和mydept均可访问。</li>
<li>配置<code>zuul.ignored-services: springcloud-test</code>可取消原服务名称的访问。若要忽略全部的服务，则使用<code>&quot;*&quot;</code>配置。</li>
<li>若需要服务访问的前缀，则配置<code>zuul.prefix: /xxx</code>,即可使用前缀访问</li>
</ul>
<h2 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h2><p>Spring Cloud Config分为<strong>服务端和客户端两部分</strong>。<br>服务端也称为分布式配置中心，他是一个<strong>独立的微服务应用</strong>，用来++连接配置服务器并为客户端提供配置信息，加密/解密信息等访问接口。++<br>客户端是通过指定的配置中心来管理应用资源，以及业务相关的配置，并在启动的时候从配置中心获取和加载配置信息，配置服务器默认采用git来存储配置信息，有助于对环境配置进行版本管理。<br>在运行期间动态调整配置，不需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取自己的信息。当配置变动时，服务不需要重启即可感知到配置的变化并应用新的配置。</p>
<h3 id="服务端配置，以Github为例，若无法访问，可使用Gitee码云"><a href="#服务端配置，以Github为例，若无法访问，可使用Gitee码云" class="headerlink" title="服务端配置，以Github为例，若无法访问，可使用Gitee码云"></a>服务端配置，以Github为例，若无法访问，可使用Gitee码云</h3><ol>
<li><p>首先在码云创建公共仓库，然后clone到本地，在本地创建application.yml文件(注意保存为UTF-8格式)并上传拿到远程仓库,配置如下:</p>
<p>spring:<br>  active:</p>
<pre><code>- dev</code></pre><hr>
<p>spring:<br>  profile: dev<br>  application:</p>
<pre><code>name: springcloud-dev</code></pre><hr>
<p>spring:<br>  profile: test<br>  application:</p>
<pre><code>name: springcloud-test</code></pre></li>
<li><p>创建configserver模块，添加依赖如下:</p>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-devtools</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-config</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-config-server</artifactId>
</dependency>
</li>
<li><p>配置application.yml文件</p>
<p>server:<br>  port: 3344<br>spring:<br>  application:</p>
<pre><code>name: springcloud-config-server</code></pre><p>  cloud:</p>
<pre><code>config:
  server:
    git:
      uri: https://gitee.com/snow_rain/springcloud-config.git</code></pre></li>
</ol>
<p>表示，配置的服务git的uri为公共仓库的地址。</p>
<ol>
<li><p>配置主启动类，并添加@EnableConfigServer注解</p>
</li>
<li><p>启动项目，访问<code>http://localhost:3344/application-dev.yml</code>即可获得如下</p>
<p>spring:<br>  active:</p>
<ul>
<li>dev<br>application:<br>name: springcloud-test<br>profile: test</li>
</ul>
</li>
<li><p>访问的方式，有如下几种:</p>
<p>/{application}/{profile}[/{label}]<br>/{application}-{profile}.yml<br>/{label}/{application}-{profile}.yml</p>
</li>
</ol>
<p>上面访问的是第二种，另外两个可以以下方式访问:</p>
<ul>
<li><a href="http://localhost:3344/application/dev/master">http://localhost:3344/application/dev/master</a></li>
<li><a href="http://localhost:3344/master/application-dev.yml">http://localhost:3344/master/application-dev.yml</a></li>
</ul>
<h3 id="创建客户端模拟服务器提供者连通配置中心"><a href="#创建客户端模拟服务器提供者连通配置中心" class="headerlink" title="创建客户端模拟服务器提供者连通配置中心"></a>创建客户端模拟服务器提供者连通配置中心</h3><ol>
<li><p>创建新模块，配置依赖如下:</p>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-devtools</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-config</artifactId>
</dependency>
</li>
<li><p>创建springcloud-config-client.yml上传到远程仓库中</p>
<p>spring:<br>  profile:</p>
<pre><code>active: dev</code></pre><hr>
<p>server:<br>  port: 8201<br>spring:<br>  profile: dev<br>  application:</p>
<pre><code>name: springcloud-config-client</code></pre><p>eureka:<br>  client:</p>
<pre><code>service-url:
  defaultZone: http://eureka7001.com:7001/eureka</code></pre><hr>
<p>server:<br>  port: 8202<br>spring:<br>  profile: test<br>  application:</p>
<pre><code>name: springcloud-config-client</code></pre><p>eureka:<br>  client:</p>
<pre><code>service-url:
  defaultZone: http://eureka7002.com:7002/eureka</code></pre></li>
<li><p>在client端,resources下创建bootstrap.yml文件<br>bootstrap是最高优先级的加载文件，是系统级的.<br>SpringCloud 会创建<code>BootStrap Context</code>作为Spring应用<code>Application Context</code>的父上下文。初始化时BootStrap Context负责从外部加载配置属性并解析配置，BootStrap具有较高优先级，默认情况下，他们不会被本地配置覆盖。<br>新增BootStrap.yml保证<code>BootStrap Context</code>和<code>Application Context</code>配置的分离。</p>
<p>spring:<br>  cloud:</p>
<pre><code>config:
  label: master
  name: springcloud-config-client
  profile: dev
  uri: http://localhost:3344</code></pre></li>
</ol>
<p>以上配置中label表示仓库的分支，name表示仓库中的要使用的yml文件名称,profile表示文件中的dev环境，uri表示配置中心服务端地址。即需要通过服务端的连接，即以上配置参数，即可通过服务端连接到仓库并获得对应的信息。</p>
<ol>
<li><p>可配置application.yml</p>
<p>spring:<br>  application:</p>
<pre><code>name: springcloud-config-client</code></pre></li>
</ol>
<p>如果想配置，则name值需要和上面的name值一样，否则可以没有application.yml文件。即默认约定，该仓库springcloud-config-client名称为服务名称。<br>项目启动配置服务server和client，</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>微服务</category>
      </categories>
  </entry>
  <entry>
    <title>Spring批量文件下载，ZIP包</title>
    <url>/2019/09/18/Spring/Spring%E6%89%B9%E9%87%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%EF%BC%8CZIP%E5%8C%85/</url>
    <content><![CDATA[<p>核心方法，递归写文件到Zip流中</p>
<pre><code>private static void compress(File sourceFile, ZipOutputStream zos, String name,
                                 boolean KeepDirStructure) throws Exception &#123;
        byte[] buf = new byte[1024];
        if (sourceFile.isFile()) &#123;
            if (!sourceFile.getName().contains(&quot;.zip&quot;)) &#123;
                // 向zip输出流中添加一个zip实体，构造器中name为zip实体的文件的名字
                zos.putNextEntry(new ZipEntry(name));
                // copy文件到zip输出流中
                int len;
                FileInputStream in = new FileInputStream(sourceFile);
                while ((len = in.read(buf)) != -1) &#123;
                    zos.write(buf, 0, len);
                &#125;
                // Complete the entry
                zos.closeEntry();
                in.close();
            &#125;
        &#125; else &#123;
            File[] listFiles = sourceFile.listFiles();
            if (listFiles == null || listFiles.length == 0) &#123;

                // 需要保留原来的文件结构时,需要对空文件夹进行处理
                if (KeepDirStructure) &#123;
                    // 空文件夹的处理
                    zos.putNextEntry(new ZipEntry(name + &quot;/&quot;));
                    // 没有文件，不需要文件的copy
                    zos.closeEntry();
                &#125;
            &#125; else &#123;
                for (File file : listFiles) &#123;
                    // 判断是否需要保留原来的文件结构
                    if (KeepDirStructure) &#123;
                        // 注意：file.getName()前面需要带上父文件夹的名字加一斜杠,
                        // 不然最后压缩包中就不能保留原来的文件结构,即：所有文件都跑到压缩包根目录下了
                        compress(file, zos, name + &quot;/&quot; + file.getName(), KeepDirStructure);
                    &#125; else &#123;
                        compress(file, zos, file.getName(), KeepDirStructure);
                    &#125;
                &#125;
            &#125;
        &#125;
    &#125;</code></pre><p>文件下载</p>
<pre><code>//压缩文件zip到服务器
ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipPath));
compress(ywhFiles,out, ywhFiles.getName(),true);

out.close();
//下载文件
try &#123;
    // 以流的形式下载文件。
    BufferedInputStream fis = new BufferedInputStream(new FileInputStream(zipFile.getPath()));
    byte[] buffer = new byte[fis.available()];
    fis.read(buffer);
    fis.close();
    // 清空response
    response.reset();
    OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
    response.setContentType(&quot;application/octet-stream&quot;);
    response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + new String(zipFile.getName().getBytes(&quot;UTF-8&quot;),&quot;ISO-8859-1&quot;));
    toClient.write(buffer);
    toClient.flush();
    toClient.close();
    zipFile.delete();        //是否将生成的服务器端文件删除
&#125;
catch (IOException ex) &#123;
    ex.printStackTrace();
&#125;</code></pre><p>此处使用response将流写出。如果使用springmvc的ResponseEntity返回，可能出现下载后zip包打不开的情况。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot2.x打jar包本地部署https访问</title>
    <url>/2019/09/15/SpringBoot/Springboot2.x%E6%89%93jar%E5%8C%85%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2https%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>首先我的环境是springboot2.x的，可能配置不一样，这个可以去网上找一下。这个是我真实搭建使用的。</p>
<p>首先具备条件：有一个域名是必须的。</p>
<p>去域名的注册商，比如阿里或腾讯，去控制台找SSL证书配置，此处以阿里云为例，注册SSL</p>
<p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2019/09/image.png?x-oss-process=image/resize,m_fill,h_392,w_1024" alt=""></p>
<p>点击购买证书，选择最后一项，选择DV免费证书，提交订单。订单完成后，操作刚才的证书，填写绑定域名，免费证书只能绑定一个域名，所以填写你需要访问的一级或二级域名。填写信息等。然后会让你将txt记录解析到域名，点击验证按钮自动配置域名解析。然后等待审核给你发送邮箱消息。</p>
<p>审核完成后，SSL已经成功了。点击下载，下载tomcat版本的就可以。解压会有一个pfx文件，和txt密码文件。将pfx拷贝到项目resources下。</p>
<p>配置application.yml</p>
<pre><code>server:
  port: 443
  ssl:
    key-store: classpath:2812584_xxx.xxx.cn.pfx
    key-store-password: 
    key-store-type: PKCS12
    enabled: true</code></pre><p>填写你的pfx路径，填写密码，密码就是txt文件里面的。</p>
<p>然后创建配置类:</p>
<pre><code>@Configuration
public class HttpsConfig &#123;

    @Bean
    public TomcatServletWebServerFactory servletContainer() &#123;
        TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory() &#123;
            @Override
            protected void postProcessContext(Context context) &#123;
                SecurityConstraint securityConstraint = new SecurityConstraint();
                securityConstraint.setUserConstraint(&quot;CONFIDENTIAL&quot;);
                SecurityCollection collection = new SecurityCollection();
                collection.addPattern(&quot;/*&quot;);
                securityConstraint.addCollection(collection);
                context.addConstraint(securityConstraint);
            &#125;
        &#125;;
        tomcat.addAdditionalTomcatConnectors(getHttpConnector());
        return tomcat;
    &#125;

    private Connector getHttpConnector() &#123;
        Connector connector = new Connector(&quot;org.apache.coyote.http11.Http11NioProtocol&quot;);
        connector.setScheme(&quot;http&quot;);
        connector.setPort(8080);
        connector.setSecure(false);
        connector.setRedirectPort(443);
        return connector;
    &#125;

&#125;</code></pre><p>以上就完成了。如果你在本地，直接使用localhost访问，不加http前缀的话是直接https访问8080不管用，默认https访问80端口然后转发到443端口中。</p>
<p>首先我说一下上面的问题：首先我是内网映射，映射本地8080，所以如果本地localhost访问8080的话是有问题的，必须是80，因为你输入地址后直接是以https形式访问了。那么使用域名的话，内网穿透8080，访问443使用https。</p>
<p>但是如果使用的直接是云产品，将服务部署在云服务器上，则域名绑定服务器后，域名可直接使用服务的端口访问，然后转发到443端口上,如果服务端口是80，那么么直接可访问。</p>
<p>我的系统使用了内网映射natapp。只要在配置中开启https即可。花生壳等也是如此。云服务器使用的话，在阿里云文档有说明，也可以使用这种方式直接配置。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>JFinal搭建后jar的部署</title>
    <url>/2019/09/04/%E5%BC%80%E6%BA%90/JFinal%E6%90%AD%E5%BB%BA%E5%90%8Ejar%E7%9A%84%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>使用jfinal开发确实是非常非常的便利，虽然我才接触了两天，看点文档和社区才把一些资源常用操作等给弄完。唯一一个不怎么舒服的就是打包了。</p>
<p>正常springmvc或springboot打包，要么是war，要么是jar，不用做什么操作，只有有默认创建maven项目的插件，就能正常的打好包。</p>
<p>打包里，我遇到算是最困难的就是该博客里提到的，springboot+jdk6,打的war包，要是再有个axis2的使用。就会更麻烦。</p>
<p>虽然jfinal官方提供的打包方式很好，可以使zip，tar.gz等打包。但是关于package.xml文件配置和插件的配置始终没搞懂怎么运行。最后才在社区里找到打jar包的方法。这里我先打一个地址，行不行还得根据项目来定</p>
<p><a href="http://www.jfinal.com/share/422">http://www.jfinal.com/share/422</a></p>
<p>首先按照社区的说法是要把webapp的东西放到resource中再打包。这里呢，根据上一篇的环境搭建，已经把所有的东西都放到resources了，不必大费周折。</p>
<p>依据上一篇搭建的之后，还需要做的如下。</p>
<ul>
<li><p>添加jfinal的jetty依赖</p>
<dependency>
    <groupId>com.jfinal</groupId>
    <artifactId>jetty-server</artifactId>
    <version>2019.3</version>
</dependency>
</li>
<li><p>配置社区里截图得maven插件</p>
<plugins>
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
            <source>1.8</source>
            <target>1.8</target>
            <encoding>UTF-8</encoding>
        </configuration>
    </plugin>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
        &lt;skip&gt;true&lt;/skip&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;plugin&gt;&lt;!--核心打成jar包插件--&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.6&lt;/version&gt;
    &lt;configuration&gt;
        &lt;archive&gt;
            &lt;manifest&gt;
                &lt;addClasspath&gt;true&lt;/addClasspath&gt;
                &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;
                &lt;mainClass&gt;com.fsats.demo.DemoConfig&lt;/mainClass&gt;
            &lt;/manifest&gt;
        &lt;/archive&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.10&lt;/version&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;id&gt;copy-dependencies&lt;/id&gt;
            &lt;phase&gt;package&lt;/phase&gt;
            &lt;goals&gt;
                &lt;goal&gt;copy-dependencies&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
                &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/lib&lt;/outputDirectory&gt;
            &lt;/configuration&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;</code></pre></plugins>
</li>
<li><p>配置主启动类，就是manifest的设置。</p>
<p>public class DemoConfig{</p>
<pre><code>public static void main(String[] args) &#123;
    //打包时使用
    String baseBath = String.valueOf(DemoConfig.class.getProtectionDomain().getCodeSource().getLocation());
    String classPath, webRootPath, jarPath;
    if (StrKit.notBlank(baseBath) &amp;&amp; baseBath.contains(&quot;file:/&quot;)) &#123;
        // 获取运行操作系统的运行方式  window和linux的细微区别
        boolean windows = System.getProperties().getProperty(&quot;os.name&quot;).contains(&quot;Windows&quot;);
        System.out.println(System.getProperties().getProperty(&quot;os.name&quot;));
        jarPath = (windows ? &quot;&quot; : &quot;/&quot;) + baseBath.substring(&quot;file:/&quot;.length());
        classPath = (windows ? &quot;&quot; : &quot;/&quot;) + jarPath.substring(0, jarPath.lastIndexOf(&quot;/&quot;)) + &quot;/classes&quot;;
        System.out.println(&quot;jarPath:&quot; + jarPath);
        System.out.println(&quot;classPath:&quot; + classPath);
        webRootPath = classPath;
        ZipUtil.unzip(jarPath, classPath);
    &#125;
    UndertowServer.start(DemoConfig.class, 80, true);
&#125;</code></pre><p>}</p>
</li>
</ul>
<p>上面的代码和社区给的有些不同</p>
<p>PathKit似乎并没有什么用，而且社区中解压目录为class-path，这个可以再上面改，这里我改成了classes。</p>
<p>社区里值提供了maven和启动类main方法的代码。没有继承JFinalConfig类中配置的方法出来。以目前的项目若是访问页面，可能不可行，访问的路径就有问题，访问模板路径访问不到classes，查看报错，这里被webapp替换。这是他默认的模板存放位置，就像undertow.txt中配置的resource的src/main/resources一样。但是好像读不到，所以只能修改configEngine方法，添加基础模板路径，值就是设置的最后一级目录名称。</p>
<pre><code>public void configEngine(Engine engine) &#123;
    engine.setBaseTemplatePath(&quot;classes&quot;);
&#125;</code></pre><p>根据社区打包完成后，会生成一个jar包和一个lib文件夹到taraget下。你可以直接运行java -jar jar包，此时jar包里的东西就会被解压到classes目录下。</p>
<p>其实依据之前的springboot的问题，好像可以不必要解压，而且直接将lib放在jar里，运行jar</p>
]]></content>
      <categories>
        <category>FJinal</category>
      </categories>
  </entry>
  <entry>
    <title>JFinal基础搭建</title>
    <url>/2019/09/04/%E5%BC%80%E6%BA%90/JFinal%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>创建Maven普通项目，添加依赖</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.jfinal&lt;/groupId&gt;
    &lt;artifactId&gt;jfinal&lt;/artifactId&gt;
    &lt;version&gt;4.5&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.jfinal&lt;/groupId&gt;
    &lt;artifactId&gt;jfinal-undertow&lt;/artifactId&gt;
    &lt;version&gt;1.9&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p>创建DemoConfig集成JFinalConfig类，实现所有方法</p>
<p>创建main方法启动</p>
<pre><code>public static void main(String[] args) &#123;
    UndertowServer.start(DemoConfig.class, 80, true);
&#125;</code></pre><p>在resources下创建undertow.txt文件，文件名可通过程序修改。</p>
<pre><code># 配置 undertow

undertow.devMode=true
undertow.host=localhost
undertow.port=80

# 打成 fatjar 部署的项目开启下面的配置。。。。。第一个是模板资源存放位置，第二个是静态文件存放位置(暂时可以这么认为)
undertow.resourcePath=src/main/resources, classpath:static</code></pre><p>这个文件会被自动加载装配，以上分别表示热部署，主机地址，端口号。</p>
<p>undertow.resourcePath表示资源文件存放位置，目前也不具体清楚，只是测试了一下项目跑起来。src/amin/resources表示模板资源存放的位置，后面的是静态资源存放的位置。</p>
<p>在DemoConfig里实现的方法configConstant</p>
<pre><code>private static Prop prop;
public void configConstant(Constants constants) &#123;
    if (prop==null)&#123;
        prop = PropKit.use(&quot;undertow.txt&quot;);
    &#125;
    constants.setDevMode(prop.getBoolean(&quot;undertow.devMode&quot;));
    constants.setViewType(ViewType.JFINAL_TEMPLATE);
&#125;</code></pre><p>上面的代码表示，获取文件并设置属性</p>
<p>配置configRoute方法</p>
<pre><code>public void configRoute(Routes routes) &#123;
    routes.setBaseViewPath(&quot;/template&quot;);//设置视图基础路径
    routes.add(&quot;/&quot;,DemoController.class);
&#125;</code></pre><p>需要创建DemoController类</p>
<pre><code>@Log4j
public class DemoController extends Controller &#123;

    public void index()&#123;
        set(&quot;name&quot;,&quot;chen&quot;);
        log.info(&quot;inf&quot;);
        log.error(&quot;error&quot;);
        render(&quot;index.html&quot;);
    &#125;
&#125;</code></pre><p>render方法可传入视图名称，可直接返回到视图中。</p>
<p>那么模板和静态文件的存储位置为</p>
<ul>
<li>模板位置:resources/template/index.html(因为上面设置了BaseViewPath所以有template目录，然后因为路由直接设置的是/所以没有目录，直接index.html)</li>
<li>静态资源位置:resources/static/index.js</li>
</ul>
<p>如何在页面中访问静态资源。通过以上的配置之后，在index.html可直接通过/static/index.js获取script文件</p>
]]></content>
      <categories>
        <category>FJinal</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA打断点也无法debug问题</title>
    <url>/2019/08/07/other/IDEA%E6%89%93%E6%96%AD%E7%82%B9%E4%B9%9F%E6%97%A0%E6%B3%95debug%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>首先，出现这个问题肯定是莫名其妙的。其他项目就可以，刚导入这个项目就不可以。</p>
<p>去google搜索，搜索到低级问题，是点击了左边的禁用断点。</p>
<p>然后还有的就是springboot-devtool的问题</p>
<p>我的问题是catalina.bat设置的java_opts问题,因为设置了这个，导致的无法启动断点。但是之前的项目也是使用的这个设置就没问题。莫名其妙了。</p>
<p>检查一下catalina.bat里的SET JAVA_OPTS配置吧。</p>
<p>原因是idea里的环境变量java_opts也有配置，导致catalina.bat里的覆盖了debug的这个配置，导致无法debug。因此在IDEA的start/connection里的配置不用改。只需要将cataina.bat的SET JAVA_OPTS = xxxxxx修改为</p>
<p>SET JAVA_OPTS = %JAVA_OPTS% -xxxxxxx即可，这样就可以继承环境变量。</p>
<p>但是，这个问题也会导致，你的项目启动会多启动一两次，也就是说你点了一下启动，然后控制台上走了两遍三遍项目启动。</p>
]]></content>
      <categories>
        <category>项目问题</category>
      </categories>
  </entry>
  <entry>
    <title>jExcel web交互式电子表格</title>
    <url>/2019/08/05/Javascript/jExcel%20web%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%94%B5%E5%AD%90%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<p><a href="https://bossanova.uk/jexcel/v3/"><strong>jExcel</strong></a>是一个轻量级的vanilla javascript插件，用于创建与Excel或任何其他电子表格软件兼容的基于Web的交互式表格和电子表格。可以从JS数组，JSON，CSV或XSLX文件创建在线电子表格表 。 可以从excel复制并直接粘贴到jExcel电子表格，反之亦然 。 可以创建自己的自定义列，自定义编辑器，并在应用程序中自定义任何功能 。</p>
<p>以上官方介绍的话。并且也真的可以实现。而且仅需要进入两个js和两个css即可。</p>
<p>可以访问gihub的地址<a href="https://github.com/paulhodel/jexcel">https://github.com/paulhodel/jexcel</a></p>
<p>或码云的镜像地址:<a href="https://gitee.com/mirrors/jExcel/tree/master">https://gitee.com/mirrors/jExcel/tree/master</a></p>
<h3 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h3><p>首先可以看一下官方基础的实例</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;script src=&quot;https://bossanova.uk/jexcel/v3/jexcel.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://bossanova.uk/jsuites/v2/jsuites.js&quot;&gt;&lt;/script&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://bossanova.uk/jsuites/v2/jsuites.css&quot; type=&quot;text/css&quot; /&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://bossanova.uk/jexcel/v3/jexcel.css&quot; type=&quot;text/css&quot; /&gt;
    &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div id=&quot;mytable&quot;&gt;&lt;/div&gt;
    &lt;script&gt;
        data = [
            [&apos;Google&apos;, 1998, 807.80],
            [&apos;Apple&apos;, 1976, 116.52],
            [&apos;Yahoo&apos;, 1994, 38.66],
        ];

        jexcel(document.getElementById(&apos;mytable&apos;), &#123;
            data: data,
            colWidths: [300, 80, 100]
        &#125;);
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><p>访问这个页面，会出现一个web表格。</p>
<ul>
<li>选中列，右击可以进行一些列操作，导出，新增行，删除行，修改列名等</li>
<li>选中列拷贝，可拷贝到当前表格和office excel表格中。</li>
<li>双击列排序</li>
<li>选中表格，右击save as可保存为cvs文件</li>
<li>选中表格，右下角的点可以和office一样拉伸填充</li>
<li>列宽度可以直接拉伸</li>
<li>双击单元格可直接修改值</li>
</ul>
<h3 id="列类型"><a href="#列类型" class="headerlink" title="列类型"></a>列类型</h3><p>在此web电子表格中，首先与office excel不同的一点是，office的类型为单元格设置类型，而jexcel中为更简易，设置为每列为一类型，称之为列类型。作用相类似于前端table数据展示的那种，每列都是同一个属性或同一个列类型。</p>
<pre><code>&lt;html&gt;
    &lt;script src=&quot;jexcel-master/dist/jexcel.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://bossanova.uk/jsuites/v2/jsuites.js&quot;&gt;&lt;/script&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://bossanova.uk/jexcel/v3/jexcel.css&quot; type=&quot;text/css&quot; /&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://bossanova.uk/jsuites/v2/jsuites.css&quot; type=&quot;text/css&quot; /&gt;

    &lt;div id=&quot;spreadsheet&quot;&gt;&lt;/div&gt;

    &lt;script&gt;
        var data = [
            [&apos;Jazz&apos;, &apos;Honda&apos;, &apos;2019-02-12&apos;, &apos;&apos;, true, &apos;$ 2.000,00&apos;, &apos;#777700&apos;],
            [&apos;Civic&apos;, &apos;Honda&apos;, &apos;2018-07-11&apos;, &apos;&apos;, true, &apos;$ 4.000,01&apos;, &apos;#007777&apos;],
        ];

        jexcel(document.getElementById(&apos;spreadsheet&apos;), &#123;
            data:data,
            columns: [
                &#123; type: &apos;text&apos;, title:&apos;Car&apos;, width:120 &#125;,
                &#123; type: &apos;dropdown&apos;, title:&apos;Make&apos;, width:200, source:[ &quot;Alfa Romeo&quot;, &quot;Audi&quot;, &quot;Bmw&quot;,&apos;Honda&apos; ] &#125;,
                &#123; type: &apos;calendar&apos;, title:&apos;Available&apos;, width:200 &#125;,
                &#123; type: &apos;image&apos;, title:&apos;Photo&apos;, width:120 &#125;,
                &#123; type: &apos;checkbox&apos;, title:&apos;Stock&apos;, width:80 &#125;,
                &#123; type: &apos;numeric&apos;, title:&apos;Price&apos;, width:100, mask:&apos;$ #.##,00&apos;, decimal:&apos;,&apos; &#125;,
                &#123; type: &apos;color&apos;, width:100, render:&apos;circle&apos;, &#125;
                ]
        &#125;);
    &lt;/script&gt;
&lt;/html&gt;</code></pre><p>以上官方示例，表示配置columns类型，按顺序进行配置，包括</p>
<ul>
<li>text:表示文本类型</li>
<li>dropdown:表示下拉类型，需要设置source属性，列表</li>
<li>calendar:表示日期类型，该日期格式可在js的323行处修改日期格式</li>
<li>image:为图片，点击列，双击弹出的框，可选择图片，选择后，点击表格可关闭弹框并填充图片</li>
<li>numberic:为数字类型，mask为数字格式，decimal为分隔符</li>
<li>color:表示为颜色框，width为绘制宽度，render为为形状</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>bootstrap table列行都有滚动条造成查看不便</title>
    <url>/2019/08/05/Javascript/bootstrap%20table%E5%88%97%E8%A1%8C%E9%83%BD%E6%9C%89%E6%BB%9A%E5%8A%A8%E6%9D%A1%E9%80%A0%E6%88%90%E6%9F%A5%E7%9C%8B%E4%B8%8D%E4%BE%BF/</url>
    <content><![CDATA[<p>bootstrap table在显示数据的时候，由于列过多导致出现的横向滚动条。而页面高度又很低，所以分页时，纵向也有一个滚动条，必须滚到最下面才能拉动横向滚动条。否则只能按左右键查看数据。</p>
<p>因此有需求取消纵向滚动条，将bootstrap table整体高度缩小到页面剩余高度，让分页框也显示在页面上。</p>
<pre><code>$(window).resize(function () &#123;
    //重置表格
    $(&quot;#fwdyDetailTable&quot;).bootstrapTable(&apos;resetView&apos;);
    initBootstrapTableHeight();
&#125;);
//初始化表格高度
function initBootstrapTableHeight()&#123;
    var total = $(window).height();//窗口高度
    var page = $(&quot;#fwdyDetailTable&quot;).parent(&apos;.fixed-table-body&apos;).parent(&apos;.fixed-table-container&apos;).parent(&apos;.bootstrap-table&apos;).next(&apos;.clearfix&apos;).height();
    $(&quot;#fwdyDetailTable&quot;).parent(&apos;.fixed-table-body&apos;).css(&quot;height&quot;,(total-page-100)+&quot;px&quot;);//100为固定的弹框的上标题和底部按钮高度之和。
&#125;
$(&quot;#fwdyDetailTable&quot;).parent(&apos;.fixed-table-body&apos;).css(&quot;height&quot;,($(window).height()-125)+&quot;px&quot;);</code></pre><p>我们设置其高度，只能设置class为fixed-table-body的div高度才有效。只需要给它一个合适的高度。在这里，我用的是弹框显示，所以窗口较小。需要用总高度减去分页高度和弹框标题高度和弹框底部高度。</p>
<p>在弹出框放大缩小时，监听window.resize。刷新bootstrap table视图。并重新设置表格高度</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Springboot文件上传过大无法被全局异常捕获</title>
    <url>/2019/08/03/SpringBoot/Springboot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%BF%87%E5%A4%A7%E6%97%A0%E6%B3%95%E8%A2%AB%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/</url>
    <content><![CDATA[<p>Springboot配置文件上传，设置上传文件最大值，当上传文件过大时，没有进入到controller，且直接抛出异常。在配置_ControllerAdvice_异常捕获类依然无法被捕获到。</p>
<p>具体可以有效解决的方式有两三种。其中可以设置tomcat的一个配置就可以完成。</p>
<p>你只需要配置server.tomcat.max-swallow-size的值即可。有效的让异常处理类捕获到异常。</p>
<p>该配置按照某博客的介绍，从google中获得的内嵌tomcat吞吐量,默认值为2MB,如果当文件上传大小这个值那么就会在controller之前抛出异常。而如果这个值设置大于上传最大值的话，那么就可以被异常捕获到。也可以设置成-1不被限制。因此只要将其值调整到较大，就可以捕获文件过大抛出的异常。更详细的可以去这里<a href="https://weiku.co/article/198/">https://weiku.co/article/198</a>看看描述。</p>
<p>还有一种解决方式是禁用默认的上传,<code>spring.servlet.multipart.enable</code>。使用common-upload方式上传。添加依赖，然后进行相关配置。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>Axis2中不支持1.8新特性</title>
    <url>/2019/07/31/Spring/Axis2%E4%B8%AD%E4%B8%8D%E6%94%AF%E6%8C%811.8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>在Axis2中不能使用包括lambda表达式stream流等相关代码，否则在发布wsdl服务时会报错。</p>
<pre><code>Caused by: org.apache.axis2.deployment.DeploymentException: The following error occurred during schema generation: Error looking for paramter names in bytecode: unexpected bytes in file
    at org.apache.axis2.deployment.ServiceBuilder.populateService(ServiceBuilder.java:441) ~[axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.deployment.ServiceGroupBuilder.populateServiceGroup(ServiceGroupBuilder.java:101) ~[axis2-kernel-1.7.9.jar:1.7.9]
    ... 31 common frames omitted
Caused by: org.apache.axis2.deployment.DeploymentException: The following error occurred during schema generation: Error looking for paramter names in bytecode: unexpected bytes in file
    at org.apache.axis2.deployment.ServiceBuilder.populateService(ServiceBuilder.java:404) ~[axis2-kernel-1.7.9.jar:1.7.9]
    ... 32 common frames omitted
Caused by: java.lang.IllegalStateException: Error looking for paramter names in bytecode: unexpected bytes in file
    at org.apache.axis2.description.java2wsdl.bytecode.ClassReader.readCpool(ClassReader.java:354) ~[axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.description.java2wsdl.bytecode.ParamReader.&lt;init&gt;(ParamReader.java:78) ~[axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.description.java2wsdl.bytecode.ParamReader.&lt;init&gt;(ParamReader.java:57) ~[axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.description.java2wsdl.bytecode.ChainedParamReader.&lt;init&gt;(ChainedParamReader.java:52) ~[axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.description.java2wsdl.bytecode.MethodTable.&lt;init&gt;(MethodTable.java:31) ~[axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.description.java2wsdl.DefaultSchemaGenerator.&lt;init&gt;(DefaultSchemaGenerator.java:177) ~[axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.deployment.util.Utils.fillAxisService(Utils.java:439) ~[axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.deployment.ServiceBuilder.populateService(ServiceBuilder.java:396) ~[axis2-kernel-1.7.9.jar:1.7.9]
    ... 32 common frames omitted</code></pre><p>这是使用spring配置axis2的时候，若发布服务的类中有新特性就会出现问题，但是你可以把新特性放在其它类中，那么axis2就不会出现问题。</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>axis2</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis对存储过程的调用</title>
    <url>/2019/07/30/MyBatis/Mybatis%E5%AF%B9%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h3 id="调用存储过程，输出参数为CURSOR"><a href="#调用存储过程，输出参数为CURSOR" class="headerlink" title="调用存储过程，输出参数为CURSOR"></a>调用存储过程，输出参数为CURSOR</h3><p>使用mybatis来调用存储过程，然后输出参数为CURSOR类型，在存储过程中，输出参数为SYS_REFCURSOR类型的游标。简易存储过程如下:</p>
<pre><code>create or replace procedure testproc(test in varchar2,RETURNVAL out sys_refcursor)
is
test1 VARCHAR2(50);
begin
open RETURNVAL for
     select * from baowen.bizmsg where trunc(receivedate)&gt;=to_date(&apos;2019-07-12&apos;,&apos;yyyy-mm-dd&apos;);
end;</code></pre><p>那么mybatis中调用的方式如下:</p>
<pre><code>&lt;resultMap id=&quot;test&quot; type=&quot;hashmap&quot;&gt;

&lt;/resultMap&gt;
&lt;select id=&quot;testProcedure&quot; parameterType=&quot;map&quot; statementType=&quot;CALLABLE&quot;&gt;
        &lt;![CDATA[
           &#123;call baowen.TESTPROC(
             #&#123;test,mode=IN,jdbcType=VARCHAR&#125;,
             #&#123;v_cursor,mode=OUT,jdbcType=CURSOR,resultMap=test&#125;
           )&#125;
       ]]&gt;
&lt;/select&gt;</code></pre><p>在mybatis中，dao层定义的方法是无返回值的，参数为map类型，并有test和v_cursor参数，test值设置为实际值，v_cursor值为创建一个空的ArrayList，泛型为map。注意游标接收，一定需要有resultMap指定，否则，会报错需要resultmap，resultmap只做字段映射，所以查出的字段取决于存储过程。</p>
<pre><code>void testProcedure(Map&lt;String,Object&gt; map);

HashMap&lt;String, Object&gt; hashMap = new HashMap&lt;&gt;();
hashMap.put(&quot;test&quot;, &quot;test&quot;);
hashMap.put(&quot;v_cursor&quot;, new ArrayList&lt;Map&lt;String, Object&gt;&gt;());
dzjDao.testProcedure(hashMap);
System.out.println(hashMap.get(&quot;v_cursor&quot;));</code></pre><h3 id="当数据库类型时blob时的读写以及blob类型字段转换成json"><a href="#当数据库类型时blob时的读写以及blob类型字段转换成json" class="headerlink" title="当数据库类型时blob时的读写以及blob类型字段转换成json"></a>当数据库类型时blob时的读写以及blob类型字段转换成json</h3><p><strong>读取blob，读取blob时，存储过程参数不用管，输出参数是sys_refcursor类型，在mybatis的mapperxml里游标类型肯定是要配resultMap的，你可以不用设置他的属性，他会自动转换为java.sql.Blob类型</strong></p>
<pre><code>&lt;resultMap id=&quot;zszmInfo&quot; type=&quot;hashmap&quot;&gt;
        &lt;result column=&quot;QLR&quot; property=&quot;qlr&quot; javaType=&quot;java.lang.String&quot;/&gt;
        &lt;result column=&quot;GYQK&quot; property=&quot;gyqk&quot; javaType=&quot;java.lang.String&quot;/&gt;
        &lt;result column=&quot;EWM&quot; property=&quot;ewm&quot;/&gt;
&lt;/resultMap&gt;</code></pre><p>然后你要想转为json，那么json里肯定是字符串类型。所以讲Blob转换为base64字符串放在json中。可以通过以下方式转换,改代码将blob转为字节数组，IOUtil是common-io包的类。使用alibaba fastjson的JSON可直接将byte数组转为base64.</p>
<pre><code>if (o instanceof Blob) &#123;
    Blob blob = (Blob) o;
    try &#123;
        byte[] bytes = IOUtils.toByteArray(blob.getBinaryStream());
        item.put(key, bytes);
    &#125; catch (IOException e) &#123;
        e.printStackTrace();
    &#125; catch (SQLException e) &#123;
        e.printStackTrace();
    &#125;
&#125;</code></pre><p><strong>写入blob类型数据时，若只需要将数据转为byte[]字节数组，若前台传递的是base64，则通过<code>new BASE64Decoder().decodeBuffer(YSXLHP);</code>转为字节数组，然后存储过程调用的参数的jdbcType设置为Blob。不需要任何转换，mybatis有Handler可以让byte数组转为Blob类型。</strong></p>
<pre><code>&lt;![CDATA[
   &#123;call bdcdj.LND_PROC_UPDATECERTINFO(
     #&#123;YWH,mode=IN,jdbcType=VARCHAR&#125;,
     #&#123;YSXLHP,mode=IN,jdbcType=BLOB&#125;,
     #&#123;returnval,mode=OUT,jdbcType=INTEGER&#125;
   )&#125;
]]&gt;</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>NodeJS——文件操作</title>
    <url>/2019/04/28/NodeJS/NodeJS%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="1-文件监听"><a href="#1-文件监听" class="headerlink" title="1. 文件监听"></a>1. 文件监听</h3><pre><code>//严格模式
&apos;use strict&apos;;
//引入fs模块
const fs = require(&apos;fs&apos;);
//使用模块watch函数，并使用箭头函数作为回调函数
fs.watch(&apos;target.txt&apos;,()=&gt;console.log(&apos;File changed!&apos;));
console.log(&apos;Now watching target.txt for changes...&apos;);</code></pre><h3 id="2-接受一个文件作为监听文件"><a href="#2-接受一个文件作为监听文件" class="headerlink" title="2. 接受一个文件作为监听文件"></a>2. 接受一个文件作为监听文件</h3><pre><code>const fs = require(&apos;fs&apos;);
//process全局对象，argv表示参数，第一第二分别为node和当前文件的路径，第三个参数则是传递的第一个参数
const filename = process.argv[2];
if(!filename)&#123;
    throw Error(&apos;A file to watch must be specified!&apos;);
&#125;
//输出，反引号(`)表示模板字符串，可以使用$&#123;&#125;，将变量放进去，也可使用表达式
fs.watch(filename,()=&amp;gt;console.log(`File $&#123;filename&#125; changed!`));
console.log(`Now watching $&#123;filename&#125; for changes...`);

$ node watcher-argv.js target.txt</code></pre><h3 id="3-使用子进程打印ls"><a href="#3-使用子进程打印ls" class="headerlink" title="3. 使用子进程打印ls"></a>3. 使用子进程打印ls</h3><pre><code>const fs = require(&apos;fs&apos;);
//拿到子模块的spawn函数
const spawn = require(&apos;child_process&apos;).spawn;
const filename = process.argv[2];
if (!filename) &#123;
    throw Error(&apos;A file to watch must be specified!&apos;);
&#125;
fs.watch(filename, () =&amp;gt; &#123;
    //使用该函数，第一个参数为命令，第二个参数为命令参数，其中最后一个为文件名
    const ls = spawn(&apos;ls&apos;, [&apos;-l&apos;, &apos;-h&apos;, filename]);
    //stdout为Stream，作为输入输出，使用pipe方法把子进程的输出内容传送到标准输出流
    ls.stdout.pipe(process.stdout);
&#125;);
console.log(`Now watching $&#123;filename&#125; for changes...`);</code></pre><h3 id="4-通过EventEmitter获得数据，即通过触发事件或响应事件的方式"><a href="#4-通过EventEmitter获得数据，即通过触发事件或响应事件的方式" class="headerlink" title="4. 通过EventEmitter获得数据，即通过触发事件或响应事件的方式"></a>4. 通过EventEmitter获得数据，即通过触发事件或响应事件的方式</h3><pre><code>//监听文件
fs.watch(filename, () =&amp;gt; &#123;
    //spawn函数设置命令
    const ls = spawn(&apos;ls&apos;, [&apos;-l&apos;, &apos;-h&apos;, filename]);
    let output = &apos;&apos;;
    //执行绑定data事件，将结果存储output
    ls.stdout.on(&apos;data&apos;, chuck =&amp;gt; output += chuck);
    //监听ls的close事件
    ls.on(&apos;close&apos;, () =&amp;gt; &#123;
        const parts = output.split(/\s+/);
        console.log([parts[0], parts[4], parts[8]]);
    &#125;);
&#125;);</code></pre><h3 id="5-异步读写文件"><a href="#5-异步读写文件" class="headerlink" title="5. 异步读写文件"></a>5. 异步读写文件</h3><pre><code>&apos;use strict&apos;;
const fs = require(&apos;fs&apos;);
fs.readFile(&apos;target.txt&apos;, (err, data) =&amp;gt; &#123;
    if (err) &#123;
        throw err;
    &#125;
    console.log(data.toString());
&#125;);

&apos;use strict&apos;;
const fs = require(&apos;fs&apos;);
fs.writeFile(&apos;target.txt&apos;, &apos;HelloWorld&apos;, (err) =&amp;gt; &#123;
    if (err) &#123;
        throw err;
    &#125;
    console.log(&apos;File saved!&apos;);
&#125;)</code></pre><h3 id="6-创建读-写流"><a href="#6-创建读-写流" class="headerlink" title="6. 创建读/写流"></a>6. 创建读/写流</h3><pre><code>&apos;use strict&apos;;
require(&apos;fs&apos;).createReadStream(process.argv[2])
    .on(&apos;data&apos;, chunk =&amp;gt; process.stdout.write(chunk))
    .on(&apos;error&apos;, err =&amp;gt; process.stderr.write(`ERROR:$&#123;err.message&#125;\n`));</code></pre><h3 id="7-可执行的js文件，将数据流传输到标准输出"><a href="#7-可执行的js文件，将数据流传输到标准输出" class="headerlink" title="7.可执行的js文件，将数据流传输到标准输出"></a>7.可执行的js文件，将数据流传输到标准输出</h3><pre><code>#!/usr/bin/env node
&apos;use strict&apos;;
require(&apos;fs&apos;).createReadStream(process.argv[2]).pipe(process.stdout);

$ chmod +x cat.js
$ ./cat.js target.txt</code></pre>]]></content>
      <categories>
        <category>Node JS</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot Mybatis多数据源配置</title>
    <url>/2019/04/10/SpringBoot/SpringBoot%20Mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="SpringBoot-Mybatis多数据源配置"><a href="#SpringBoot-Mybatis多数据源配置" class="headerlink" title="SpringBoot Mybatis多数据源配置"></a>SpringBoot Mybatis多数据源配置</h2><ol>
<li><p>依赖:</p>
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.0.1</version>
</dependency>
</li>
<li><p>再yml配置两个数据库的连接字符串</p>
<p>spring:</p>
<pre><code>datasource:
    primary:  # first database
      driver-class-name: oracle.jdbc.driver.OracleDriver
      jdbcUrl: jdbc:oracle:thin:@127.0.0.1:1521:btbdc
      username: sjbdc
      password: sjbdc
    secondary:
      driver-class-name: com.mysql.jdbc.Driver
      jdbcUrl: jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;characterEncoding=utf-8
      username: root
      password: root</code></pre></li>
<li><p>配置主从数据源，分两个配置类，主要就是配置DataSource，SqlSessionFactory和SqlSessionTemplate</p>
<p>package com.fsats.dbanalysis.config;</p>
<p>import org.apache.ibatis.session.SqlSessionFactory;<br>import org.mybatis.spring.SqlSessionFactoryBean;<br>import org.mybatis.spring.SqlSessionTemplate;<br>import org.mybatis.spring.annotation.MapperScan;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.beans.factory.annotation.Qualifier;<br>import org.springframework.boot.context.properties.ConfigurationProperties;<br>import org.springframework.boot.jdbc.DataSourceBuilder;<br>import org.springframework.context.annotation.Bean;<br>import org.springframework.context.annotation.Configuration;<br>import org.springframework.context.annotation.Primary;<br>import org.springframework.core.env.Environment;<br>import org.springframework.core.io.support.PathMatchingResourcePatternResolver;</p>
<p>import javax.sql.DataSource;</p>
<p>@Configuration<br>@MapperScan(basePackages = “com.fsats.**.oracle”,sqlSessionFactoryRef = “sqlSessionFactory”,sqlSessionTemplateRef = “sqlSessionTemplate”)<br>public class PrimaryConfig {</p>
<pre><code>@Autowired
private Environment env;

@Primary
@Qualifier(&quot;primaryDataSource&quot;)
@Bean(name = &quot;primaryDataSource&quot;)
@ConfigurationProperties(prefix = &quot;spring.datasource.primary&quot;)
public DataSource primaryDataSource()&#123;
    return DataSourceBuilder.create().build();
&#125;</code></pre></li>
</ol>
<pre><code>    @Primary
    @Bean(name = &quot;sqlSessionFactory&quot;)
    public SqlSessionFactory sqlSessionFactory(@Qualifier(&quot;primaryDataSource&quot;) DataSource datasource)
            throws Exception &#123;
        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();
        bean.setDataSource(datasource);
        bean.setMapperLocations(
                // 设置mybatis的xml所在位置
                new PathMatchingResourcePatternResolver().getResources(&quot;classpath*:mybatis/mapper/**/*.xml&quot;));
        return bean.getObject();
    &#125;

    // 表示这个数据源是默认数据源
    @Bean(&quot;sqlSessionTemplate&quot;)
    @Primary
    public SqlSessionTemplate sqlSessionTemplate(
            @Qualifier(&quot;sqlSessionFactory&quot;) SqlSessionFactory sessionfactory) &#123;
        return new SqlSessionTemplate(sessionfactory);
    &#125;

&#125;



package com.fsats.dbanalysis.config;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;

import javax.sql.DataSource;


@Configuration
@MapperScan(basePackages = &quot;com.fsats.**.mysql&quot;,sqlSessionFactoryRef = &quot;mySqlSqlSessionFactory&quot;,sqlSessionTemplateRef = &quot;mySqlSqlSessionTemplate&quot;)
public class SecondaryConfig &#123;

    @Bean(name = &quot;secondaryDataSource&quot;)
    @Qualifier(&quot;secondaryDataSource&quot;)
    @ConfigurationProperties(prefix = &quot;spring.datasource.secondary&quot;)
    public DataSource secondaryDataSource() &#123;

        return DataSourceBuilder.create().build();
    &#125;

    @Bean(name = &quot;mySqlSqlSessionFactory&quot;)
    public SqlSessionFactory mySqlSqlSessionFactory(@Qualifier(&quot;secondaryDataSource&quot;) DataSource datasource)
            throws Exception &#123;
        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();
        bean.setDataSource(datasource);
        bean.setMapperLocations(
                new PathMatchingResourcePatternResolver().getResources(&quot;classpath*:mybatis/mapper/**/*.xml&quot;));
        return bean.getObject();
    &#125;
    @Bean(&quot;mySqlSqlSessionTemplate&quot;)
    public SqlSessionTemplate mySqlSqlSessionTemplate(
            @Qualifier(&quot;mySqlSqlSessionFactory&quot;) SqlSessionFactory sessionfactory) &#123;
        return new SqlSessionTemplate(sessionfactory);
    &#125;
&#125;</code></pre><ol start="4">
<li>在代码中，先看方法，两个类里，除了方法Bean的名字不一样，之外，在PrimaryConfig里每个方法多了@Primary注解，标识多数据源时默认使用的Bean。</li>
</ol>
<p>然后ConfigurationProperties注解的值就是application.yml配置的。 SqlSessionFactory方法里，配置MapperLocations，注意，目录要提前创建。 然后是类上的注解MapperScan，填写，当前数据源所扫描的对应的Dao包位置，以及sqlSessionFactory和sqlsessionTemplate。</p>
<ol start="5">
<li><p>配置显示打印sql语句</p>
<p>logging:<br>  level:</p>
<pre><code>com.fsats: DEBUG</code></pre></li>
</ol>
<p>com.fsats标识包名</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库字符集更改</title>
    <url>/2019/04/09/Oracle/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E7%AC%A6%E9%9B%86%E6%9B%B4%E6%94%B9/</url>
    <content><![CDATA[<h2 id="Oracle数据库字符集更改"><a href="#Oracle数据库字符集更改" class="headerlink" title="Oracle数据库字符集更改"></a>Oracle数据库字符集更改</h2><ol>
<li><p>sqlplus登录，输入用户名密码</p>
</li>
<li><p>查看NLS参数</p>
</li>
</ol>
<pre><code>select * from V$NLS_PARAMETERS</code></pre><p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2019/04/20190409153659.png" alt=""> 我们需要改的是，将NLS_CHARACTERSET的值为AL32UTF8设置为ZHS16GBK.</p>
<ol start="3">
<li><p>sqlplus登录后，依次执行以下命令</p>
<p>shutdown immediate;</p>
<p>startup mount</p>
<p>ALTER SYSTEM ENABLE RESTRICTEDSESSION;<br>ALTER SYSTEM SETJOB_QUEUE_PROCESSES=0;<br>ALTER SYSTEM SETAQ_TM_PROCESSES=0;</p>
<p>alter database open;</p>
<p>ALTER DATABASE character set INTERNAL_USE ZHS16GBK;</p>
<p>select * from v$nls_parameters;</p>
<p>shutdown immediate;</p>
<p>startup</p>
</li>
</ol>
<p>依次步骤即可。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot多模块无法扫描到问题及Spring Data JPA多数据源配置</title>
    <url>/2019/04/07/SpringBoot/SpringBoot%E5%A4%9A%E6%A8%A1%E5%9D%97%E6%97%A0%E6%B3%95%E6%89%AB%E6%8F%8F%E5%88%B0%E9%97%AE%E9%A2%98%E5%8F%8ASpring%20Data%20JPA%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="SpringBoot多模块，为何其他模块无法被扫描到"><a href="#SpringBoot多模块，为何其他模块无法被扫描到" class="headerlink" title="SpringBoot多模块，为何其他模块无法被扫描到"></a>SpringBoot多模块，为何其他模块无法被扫描到</h2><ol>
<li>在项目时，通常是创建一个maven项目，然后有src啊，pom文件啊，src里的main，test，resource等，这些都创建出来了，然后用maven添加模块，然后子模块添加parent标签依赖父模块，最后DemoApplication扫描的时候就没扫到其他模块的注解类。</li>
<li>以上是通过maven创建的，想想用IDEA 的spring initializr创建时，，只有POM文件和一个iml文件，或者还有一个src。而在之前我也是按第一种方式，以为创建的就是父模块，DemoApplication就放那。但对，他确实是父模块。而Maven对父模块的定义是只是父模块的容器，不作任何操作。因此，他只需要一个POM文件，别的都不需要，而且该POM文件里的packing一定是POM，因为他是父模块，而里面的子模块都是jar。那DemoApplication放哪，放一个单独的模块，在学Timo项目的时候发现，分模块嘛，就把DemoApplication和yml放在一个单独的模块里。</li>
<li>都知道DemoApplication会扫描当前所在包的所有子包，而SpringBootApplication注解的指定扫描的包，但这不是重点，重点是，模块与模块之间的关系，一般除了各个子模块之间的业务关系，不需要进行依赖。而这个启动类的boot模块，<strong>需要依赖所有的子模块才能把其他的模块里的类被扫描到，并且必须要写上version值</strong>。</li>
</ol>
<p>总归两点，1.启动类为单独模块，2.启动类模块依赖其他子模块</p>
<h2 id="SpringBoot多数据源配置"><a href="#SpringBoot多数据源配置" class="headerlink" title="SpringBoot多数据源配置"></a>SpringBoot多数据源配置</h2><p>我们使用Oracle和Mysql配置 yml配置如下</p>
<pre><code>spring:
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
    properties:
      hibernate.dialect: com.linln.core.mysql.MySQLDialectUTF8
      hibernate.format_sql: true
      hibernate.enable_lazy_load_no_trans: true
  datasource:
    primary:
      driver-class-name: oracle.jdbc.driver.OracleDriver
      jdbcUrl: jdbc:oracle:thin:@127.0.0.1:1521:orcl
      username: sjbdc
      password: sjbdc
    secondary:
      driver-class-name: com.mysql.jdbc.Driver
      jdbcUrl: jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;characterEncoding=utf-8
      username: root
      password: root</code></pre><p>我们需要一个配置数据源的配置类:</p>
<pre><code>@Configuration
public class DataSourceConfig &#123;

    @Qualifier(&quot;primaryDataSource&quot;)
    @Primary
    @Bean(name = &quot;primaryDataSource&quot;)
    @ConfigurationProperties(prefix = &quot;spring.datasource.primary&quot;)
    public DataSource primaryDataSource()&#123;
        return DataSourceBuilder.create().build();
    &#125;

    @Bean(name = &quot;secondaryDataSource&quot;)
    @Qualifier(&quot;secondaryDataSource&quot;)
    @ConfigurationProperties(prefix = &quot;spring.datasource.secondary&quot;)
    public DataSource secondaryDataSource() &#123;
        return DataSourceBuilder.create().build();
    &#125;

&#125;</code></pre><p>你需要使用spring data jap，还需要为每个数据源配置jpa properties,所以各需要一个jpa属性配置类</p>
<pre><code>/**
 * 主数据源配置
 */
@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(
        entityManagerFactoryRef = &quot;entityManagerFactoryPrimary&quot;,
        transactionManagerRef = &quot;transactionManagerPrimary&quot;,
        basePackages = &quot;com.fsats.dbanalysis.oracle&quot; //dao扫描位置
)
public class PrimaryConfig &#123;

    @Autowired
    @Qualifier(&quot;primaryDataSource&quot;)
    private DataSource primaryDataSource;

    @Primary
    @Bean(name = &quot;transactionManagerPrimary&quot;)
    public EntityManager entityManager(EntityManagerFactoryBuilder builder) &#123;
        return entityManagerFactoryPrimary(builder).getObject().createEntityManager();
    &#125;

    @Primary
    @Bean(name = &quot;entityManagerFactoryPrimary&quot;)
    public LocalContainerEntityManagerFactoryBean entityManagerFactoryPrimary(EntityManagerFactoryBuilder builder) &#123;
        return builder
                .dataSource(primaryDataSource)
                .properties(getVendorProperties())
                .packages(&quot;com.fsats.dbanalysis.oracle.domain&quot;)         //设置实体类所在位置
                .persistenceUnit(&quot;primaryPersistenceUnit&quot;)
                .build();
    &#125;

    private Map getVendorProperties() &#123;
        HashMap&lt;String, Object&gt; properties = new HashMap&lt;&gt;();
        properties.put(&quot;hibernate.dialect&quot;,
                env.getProperty(&quot;hibernate.dialect&quot;));
        properties.put(&quot;hibernate.ddl-auto&quot;,
                &quot;update&quot;);
        properties.put(&quot;hibernate.physical_naming_strategy&quot;,
                &quot;org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&quot;);
        properties.put(&quot;hibernate.implicit_naming_strategy&quot;,
                &quot;org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy&quot;);
        return properties;
    &#125;

    @Autowired
    private Environment env;

    @Primary
    @Bean(name = &quot;transactionManagerPrimary&quot;)
    public PlatformTransactionManager transactionManagerPrimary(EntityManagerFactoryBuilder builder) &#123;
        return new JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());
    &#125;
&#125;


/**
 * 次数据源配置
 */
@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(
        entityManagerFactoryRef = &quot;entityManagerFactorySecondary&quot;,
        transactionManagerRef = &quot;transactionManagerSecondary&quot;,
        basePackages = &#123;&quot;com.fsats.dbanalysis.mysql&quot;&#125;) //设置DAO接口层所在包位置
public class SecondaryConfig &#123;

    @Autowired
    @Qualifier(&quot;secondaryDataSource&quot;)
    private DataSource secondaryDataSource;

    @Bean(name = &quot;entityManagerSecondary&quot;)
    public EntityManager entityManager(EntityManagerFactoryBuilder builder) &#123;
        return entityManagerFactorySecondary(builder).getObject().createEntityManager();
    &#125;

    @Bean(name = &quot;entityManagerFactorySecondary&quot;)
    public LocalContainerEntityManagerFactoryBean entityManagerFactorySecondary(EntityManagerFactoryBuilder builder) &#123;
        return builder
                .dataSource(secondaryDataSource)
                .properties(getVendorProperties())
                .packages(&quot;com.fsats.dbanalysis.mysql.domain&quot;)        //设置实体类所在包的位置
                .persistenceUnit(&quot;primaryPersistenceUnit&quot;)
                .build();
    &#125;

    private Map getVendorProperties() &#123;
        HashMap&lt;String, Object&gt; properties = new HashMap&lt;&gt;();
        properties.put(&quot;hibernate.hbm2ddl.auto&quot;,
                env.getProperty(&quot;hibernate.hbm2ddl.auto&quot;));
        properties.put(&quot;hibernate.ddl-auto&quot;,
                env.getProperty(&quot;update&quot;));
        properties.put(&quot;hibernate.dialect&quot;,
                env.getProperty(&quot;hibernate.dialect&quot;));
        properties.put(&quot;hibernate.physical_naming_strategy&quot;,
                &quot;org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&quot;);
        properties.put(&quot;hibernate.implicit_naming_strategy&quot;,
                &quot;org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy&quot;);
        return properties;
    &#125;

    @Autowired
    private Environment env;

    @Bean(name = &quot;transactionManagerSecondary&quot;)
    PlatformTransactionManager transactionManagerSecondary(EntityManagerFactoryBuilder builder) &#123;
        return new JpaTransactionManager(entityManagerFactorySecondary(builder).getObject());
    &#125;</code></pre><p>​<br>    }</p>
<p>这俩配置类，这三个类要关联，不要写错bean依赖名称，要改的就是注解上的dao扫描包，也就是repository位置，和entityManagerFactorySecondary方法里的实体类名称。这两个类都要更改。 因为当但数据源配置是，是默认自动配置的。默认是””,整个项目扫描，或者指定扫描路径。而多数据源需要各自配置Jpa properties，所以需要手动配置jpa扫描的dao位置和实体类位置。否则会报错Repository没有找到。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>linux上部署tomcat7及JDK1.6项目导致的某些问题</title>
    <url>/2019/03/13/Java/linux%E4%B8%8A%E9%83%A8%E7%BD%B2tomcat7%E5%8F%8AJDK1.6%E9%A1%B9%E7%9B%AE%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9F%90%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="linux上部署tomcat7及JDK1-6项目导致的某些问题"><a href="#linux上部署tomcat7及JDK1-6项目导致的某些问题" class="headerlink" title="linux上部署tomcat7及JDK1.6项目导致的某些问题"></a>linux上部署tomcat7及JDK1.6项目导致的某些问题</h1><p>在linux的tomcat启动项目时，使用wsdl上报的原因，由于客户端出现并发情况，而服务端tomcat，仅有一个，且没有负载均衡。 事故的开始是，每次测试都会成功，正常返回信息，但每次测试只是一条一条的测试，每次测试间隔很大，每次测都能成功，等客户端实际调用请求了，出现并发。第一个好的，后面就客户端超时，超时。 后来看了好几次日志发现，每次的并发请求，都堆到了一个线程里exec-1，好多都等着他一个处理。默认tomcat线程池中是10个线程的，这个在java的bin下有jvisualvm.exe，可以查看jvm，比如tomcat和java进程的资源，CPU，内存，堆栈，等等。 之后发现很奇怪，windows自己电脑上的就好好地，几个请求，几个线程，若同时并发50个，则tomcat会多拿出40个线程到线程池里，这是50的请求处理线程。 <strong>这个是单次循环，非并发的。不报错，ok</strong></p>
<pre><code>2019-03-06 19:16:58.337  INFO 873 --- [http-bio-8080-exec-3] c.x.logservice.services.LogWebService    : 登簿日志上报师ip为:192.168.0.98
2019-03-06 19:16:58.799  INFO 873 --- [http-bio-8080-exec-3] c.x.logservice.services.LogWebService    : 登簿日志向部服务器请求结束，数据返回
2019-03-08 15:52:00.625  INFO 873 --- [http-bio-8080-exec-7] c.x.logservice.services.LogWebService    : 登簿日志上报师ip为:null
2019-03-08 15:52:00.995  INFO 873 --- [http-bio-8080-exec-7] c.x.logservice.services.LogWebService    : 登簿日志向部服务器请求结束，数据返回
2019-03-10 14:45:44.918  INFO 873 --- [http-bio-8080-exec-9] c.x.logservice.services.LogWebService    : 登簿日志上报师ip为:null
2019-03-10 14:45:45.273  INFO 873 --- [http-bio-8080-exec-9] c.x.logservice.services.LogWebService    : 登簿日志向部服务器请求结束，数据返回
2019-03-11 11:50:27.746  INFO 873 --- [http-bio-8080-exec-2] c.x.logservice.services.LogWebService    : 登簿日志上报师ip为:null</code></pre><p><strong>然后，一次的连续请求，导致出现问题</strong></p>
<pre><code>2019-03-11 20:22:27.381  INFO 10355 --- [http-bio-8080-exec-9] c.x.logservice.services.LogWebService    : 登簿日志上报师ip为:null
2019-03-11 20:22:27.729  INFO 10355 --- [http-bio-8080-exec-9] c.x.logservice.services.LogWebService    : 登簿日志向部服务器请求结束，数据返回
2019-03-11 20:22:28.076  INFO 10355 --- [http-bio-8080-exec-9] c.x.logservice.services.LogWebService    : 登簿日志上报师ip为:null
2019-03-11 20:22:28.464  INFO 10355 --- [http-bio-8080-exec-9] c.x.logservice.services.LogWebService    : 登簿日志向部服务器请求结束，数据返回
2019-03-11 20:22:28.586  INFO 10355 --- [http-bio-8080-exec-9] c.x.logservice.services.LogWebService    : 登簿日志上报师ip为:null
2019-03-11 20:22:58.602  INFO 10355 --- [http-bio-8080-exec-9] o.a.a.t.h.i.httpclient3.HTTPSenderImpl   : Unable to sendViaPost to url

org.apache.commons.httpclient.ConnectionPoolTimeoutException: Timeout waiting for connection
    at org.apache.commons.httpclient.MultiThreadedHttpConnectionManager.doGetConnection(MultiThreadedHttpConnectionManager.java:497) ~[commons-httpclient-3.1.jar:na]
    at org.apache.commons.httpclient.MultiThreadedHttpConnectionManager.getConnectionWithTimeout(MultiThreadedHttpConnectionManager.java:416) ~[commons-httpclient-3.1.jar:na]
    at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:153) ~[commons-httpclient-3.1.jar:na]
    at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397) ~[commons-httpclient-3.1.jar:na]
    at org.apache.axis2.transport.http.impl.httpclient3.HTTPSenderImpl.executeMethod(HTTPSenderImpl.java:872) ~[axis2-transport-http-1.7.9.jar:1.7.9]
    at org.apache.axis2.transport.http.impl.httpclient3.HTTPSenderImpl.sendViaPost(HTTPSenderImpl.java:212) ~[axis2-transport-http-1.7.9.jar:1.7.9]
    at org.apache.axis2.transport.http.HTTPSender.send(HTTPSender.java:121) [axis2-transport-http-1.7.9.jar:1.7.9]
    at org.apache.axis2.transport.http.CommonsHTTPTransportSender.writeMessageWithCommons(CommonsHTTPTransportSender.java:403) [axis2-transport-http-1.7.9.jar:1.7.9]
    at org.apache.axis2.transport.http.CommonsHTTPTransportSender.invoke(CommonsHTTPTransportSender.java:234) [axis2-transport-http-1.7.9.jar:1.7.9]
    at org.apache.axis2.engine.AxisEngine.send(AxisEngine.java:431) [axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.description.OutInAxisOperationClient.send(OutInAxisOperation.java:399) [axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.description.OutInAxisOperationClient.executeImpl(OutInAxisOperation.java:225) [axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.client.OperationClient.execute(OperationClient.java:150) [axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.client.ServiceClient.sendReceive(ServiceClient.java:533) [axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.client.ServiceClient.sendReceive(ServiceClient.java:509) [axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.rpc.client.RPCServiceClient.invokeBlocking(RPCServiceClient.java:101) [axis2-adb-1.7.9.jar:1.7.9]
    at com.xxha.logservice.util.ServiceClient.dataExange(ServiceClient.java:36) [classes/:na]
    at com.xxha.logservice.services.LogWebService.exchangeInfo(LogWebService.java:24) [classes/:na]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_45]
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_45]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_45]
    at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_45]
    at org.apache.axis2.rpc.receivers.RPCUtil.invokeServiceClass(RPCUtil.java:256) [axis2-adb-1.7.9.jar:1.7.9]
    at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:121) [axis2-adb-1.7.9.jar:1.7.9]
    at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40) [axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:106) [axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:169) [axis2-kernel-1.7.9.jar:1.7.9]
    at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:178) [axis2-transport-http-1.7.9.jar:1.7.9]
    at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:164) [axis2-transport-http-1.7.9.jar:1.7.9]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:650) [servlet-api.jar:na]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:731) [servlet-api.jar:na]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303) [catalina.jar:7.0.92]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) [catalina.jar:7.0.92]
    at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-4.2.6.RELEASE.jar:4.2.6.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.6.RELEASE.jar:4.2.6.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) [catalina.jar:7.0.92]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) [catalina.jar:7.0.92]
    at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) [spring-web-4.2.6.RELEASE.jar:4.2.6.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.6.RELEASE.jar:4.2.6.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) [catalina.jar:7.0.92]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) [catalina.jar:7.0.92]
    at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) [spring-web-4.2.6.RELEASE.jar:4.2.6.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.6.RELEASE.jar:4.2.6.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) [catalina.jar:7.0.92]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) [catalina.jar:7.0.92]
    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) [spring-web-4.2.6.RELEASE.jar:4.2.6.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.6.RELEASE.jar:4.2.6.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) [catalina.jar:7.0.92]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) [catalina.jar:7.0.92]
    at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:120) [spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE]
    at org.springframework.boot.context.web.ErrorPageFilter.access$000(ErrorPageFilter.java:61) [spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE]
    at org.springframework.boot.context.web.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:95) [spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.6.RELEASE.jar:4.2.6.RELEASE]
    at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:113) [spring-boot-1.3.5.RELEASE.jar:1.3.5.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241) [catalina.jar:7.0.92]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208) [catalina.jar:7.0.92]
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) [catalina.jar:7.0.92]
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:110) [catalina.jar:7.0.92]
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:494) [catalina.jar:7.0.92]
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169) [catalina.jar:7.0.92]
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:104) [catalina.jar:7.0.92]
    at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:1025) [catalina.jar:7.0.92]
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116) [catalina.jar:7.0.92]
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:445) [catalina.jar:7.0.92]
    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1137) [tomcat-coyote.jar:7.0.92]
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:637) [tomcat-coyote.jar:7.0.92]
    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:318) [tomcat-coyote.jar:7.0.92]
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895) [na:1.6.0_45]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918) [na:1.6.0_45]
    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-coyote.jar:7.0.92]
    at java.lang.Thread.run(Thread.java:662) [na:1.6.0_45]

2019-03-11 20:22:58.605  INFO 10355 --- [http-bio-8080-exec-9] c.x.logservice.services.LogWebService    : 登簿日志向部服务器请求结束，数据返回
2019-03-11 20:22:58.744  INFO 10355 --- [http-bio-8080-exec-9] c.x.logservice.services.LogWebService    : 登簿日志上报师ip为:null
2019-03-11 20:23:28.747  INFO 10355 --- [http-bio-8080-exec-9] o.a.a.t.h.i.httpclient3.HTTPSenderImpl   : Unable to sendViaPost to url[http://10.255.5.123:8081/uaccess/services/registrationLog.dataExchange?wsdl]

org.apache.commons.httpclient.ConnectionPoolTimeoutException: Timeout waiting for connection
    at org.apache.commons.httpclient.MultiThreadedHttpConnectionManager.doGetConnection(MultiThreadedHttpConnectionManager.java:497) ~[commons-httpclient-3.1.jar:na]
    at org.apache.commons.httpclient.MultiThreadedHttpConnectionManager.getConnectionWithTimeout(MultiThreadedHttpConnectionManager.java:416) ~[commons-httpclient-3.1.jar:na]
    at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:153) ~[commons-httpclient-3.1.jar:na]
    at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397) ~[commons-httpclient-3.1.jar:na]</code></pre><p>最后，找了之后才发现,tomcat有bio，nio，apr的方式，再看看windows上的，都是nio。这才发现问题，根据博客上说的， bio是阻塞式I/O nio是非阻塞式I/O 这也是最后的问题，最后说改个地方就可以了，把tomcat中server.xml的Connector配置8080端口的哪里， 把protocol的值改成org.apache.coyote.http11.Http11NioProtocol</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>使用JDK1.6构建SpringBoot发布jar和war</title>
    <url>/2019/03/01/SpringBoot/%E4%BD%BF%E7%94%A8JDK1.6%E6%9E%84%E5%BB%BASpringBoot%E5%8F%91%E5%B8%83jar%E5%92%8Cwar/</url>
    <content><![CDATA[<h3 id="使用jdk1-6和springboot部署程序"><a href="#使用jdk1-6和springboot部署程序" class="headerlink" title="使用jdk1.6和springboot部署程序"></a>使用jdk1.6和springboot部署程序</h3><h4 id="jar包部署程序及没有主清单属性的问题"><a href="#jar包部署程序及没有主清单属性的问题" class="headerlink" title="jar包部署程序及没有主清单属性的问题"></a>jar包部署程序及没有主清单属性的问题</h4><ol>
<li><p>在使用JDK1.6时，网上普遍的搭配是，JDK1.6+tomcat7.0.59+springboot1.3.5。我用的也是这个。关于springboot和JDK的版本匹配，可以到网上查看一下，搜一下是有的。一般SpringBoot建议是JDK8及以上版本，对应的应该是1.5以上的2.x以上的SpringBoot版本。</p>
</li>
<li><p>在·pom.xml文件中，properties标签内指定tomcat-version版本为7.0.59,java版本为1.6</p>
<pre><code>&lt;properties&gt;
   &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
   &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
   &lt;maven.compiler.source&gt;1.6&lt;/maven.compiler.source&gt;
   &lt;maven.compiler.target&gt;1.6&lt;/maven.compiler.target&gt;
   &lt;tomcat.version&gt;7.0.59&lt;/tomcat.version&gt;
   &lt;java.version&gt;1.6&lt;/java.version&gt;
   &lt;axis.version&gt;1.7.9&lt;/axis.version&gt;
   &lt;commons-lang3.version&gt;3.2.1&lt;/commons-lang3.version&gt;
   &lt;lombok.version&gt;1.16.18&lt;/lombok.version&gt;
&lt;/properties&gt;</code></pre></li>
</ol>
<pre><code>在以上jar包版本中，所有的依赖尽量都不是最新的。因为服务器上报jdk师1.6低版本的，而如果依赖的jar包是1.8编译打包的，很可能在使用的时候出现版本不兼容问题，因为1.6和1.8的编译方式可能有些差异，所以将1.8编译的版本放在1.6上运行，在使用某些类时就会报把本不兼容错误，报错信息中的49,，50，51分别为1.6，1.7，1.8版本，所以若出现版本情况，就降低版本依赖。</code></pre><ol start="3">
<li><p>随后是IDE的编译版本设置，以IDEA为例，需要设置Project Structure的project的选项中选择java sdk为1.6，language level为6，在settings中搜索java compiler，设置当前项目Traget bytecode version为1.6。</p>
</li>
<li><p>另外关于打包jar后，使用java -jar命令运行显示没有主清单属性。这种情况，都说是加spring-boot-maven-plugin，没错，就是加他，但是一定要加正确。</p>
<pre><code>&lt;build&gt;
   &lt;plugins&gt;
       &lt;plugin&gt;
           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
           &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
       &lt;/plugin&gt;
   &lt;/plugins&gt;
   &lt;defaultGoal&gt;compile&lt;/defaultGoal&gt;
&lt;/build&gt;</code></pre></li>
</ol>
<pre><code>这种情况下才是正确的。但有时创建项目的时候，或其他时候会在plugins外面包裹一个pluginManagement标签，这时，可要注意了。当外面有pluginManagement标签时，插件时无法加载进来的，这个可以在右侧的Maven管理器的Plugins中看到，名称为spring-boot的插件，如果没有，则说明，插件没有下载并引用依赖。 另外出现没有主清单属性的问题，不要修改MANIFEST.MF文件，正常编译通过的情况，里面有很多配置，时没办法写全的，况且也可能不准确。</code></pre><h4 id="发布war包程序"><a href="#发布war包程序" class="headerlink" title="发布war包程序"></a>发布war包程序</h4><ol>
<li><p>修改pom.xml文件的打包方式为war</p>
<pre><code>&lt;groupId&gt;com.xxha&lt;/groupId&gt;
&lt;artifactId&gt;logservice&lt;/artifactId&gt;
&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
&lt;packaging&gt;war&lt;/packaging&gt;</code></pre></li>
<li><p>去除spring-boot-starter-web依赖包的tomcat依赖</p>
<pre><code>&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
   &lt;!-- 移除嵌入式tomcat插件 --&gt;
   &lt;exclusions&gt;
       &lt;exclusion&gt;
           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
           &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;
       &lt;/exclusion&gt;
   &lt;/exclusions&gt;
&lt;/dependency&gt;
&lt;!-- 若要使用servlet api则引入 --&gt;
&lt;dependency&gt;
   &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
   &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;
   &lt;version&gt;3.1.0&lt;/version&gt;
   &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</code></pre></li>
</ol>
<pre><code>如果，项目中需要用到tomcat中关于servlet或http相关的类，需要手动依赖servlet-api包</code></pre><ol start="3">
<li><p>修改启动类，使用控制启动类变为Web启动类，继承SpringBootServletInitializer类，并重写configure方法</p>
<pre><code>/**
* 修改启动类，继承 SpringBootServletInitializer 并重写 configure 方法
*/
public class SpringBootStartApplication extends SpringBootServletInitializer &#123;

   @Override
   protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;
       // 注意这里要指向原先用main方法执行的Application启动类
       return builder.sources(Application.class);
   &#125;
&#125;</code></pre></li>
<li><p>随后使用Maven命令，clean package，打成war包，直接放到tomcat webapps下就好。若要修改内容，需要先停止tomcat，然后修改对应文件，然后需要移除webapps里的war，否则重新启动tomcat会重新解压覆盖。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot异步任务定时任务邮件任务</title>
    <url>/2019/01/21/SpringBoot/SpringBoot%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%82%AE%E4%BB%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><p>SpringBoot简单集成的异步，可<strong>使用@EnableAsync和@Async注解</strong>来开启和标注异步任务,<strong>将@EnableAysnc标注在启动类上</strong>，@Async标注在要执行的方法上，则该方法在被调用是不阻塞线程，以异步方式执行。 关于再2.0中，仅仅这个俩个注解是不行的,需要额外注入bean</p>
<pre><code>@Bean(name = &quot;threadPoolTaskExecutor&quot;)
public Executor threadPoolTaskExecutor() &#123;
    return new ThreadPoolTaskExecutor();
&#125;</code></pre><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>SpringBoot也简单的继承了定时任务，可以在方法上<strong>标注@Scheduled注解</strong>，指定cron表达式，这个表达式和quartz任务调度的cron都是一样的，quartz是完整的，可继承SpringBoot并持久化到数据库，并可使用是API进行相关增改，暂停等。 而SpringBoot内置的比较简单，使用@Scheduled，并且需要在启动类上<strong>标注@EnableScheduling注解</strong>。则只要将该类注入到容器，即可默认根据cron表达式进行执行。关于quartz的可以看官网或quartz标签归档及Spring的整合quartz。</p>
<h3 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h3><p>SpringBoot开发了与邮件相关的依赖。引入依赖包，再进行配置即可进行使用。之前Spring使用javax的mail的话，需要依赖mail的jar包，然后依据邮件服务商的配置等进行开发。 这里SpringBoot依赖的mail可自动配置。自动引入了javax的mail并自动配置。虽然需要邮箱服务器账号的授权码，但仍然省去了很多的麻烦。</p>
<ol>
<li><p>添加依赖</p>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-mail</artifactId>
</dependency>
</li>
<li><p>yml配置</p>
<p>spring:<br>  mail:</p>
<pre><code>host: stmp.163.com
username: cgq_rain@163.com
##此为客户端授权码
password: xxxxxxx
properties:
  mail.smtp.enable: true</code></pre></li>
<li><p>注入JavaMailSenderimpl，用户发送,并编写简单邮件和带附件的邮件</p>
</li>
</ol>
<p>此为带附件的消息，不带附件的可以使用SimpleMailMessage</p>
<pre><code>@Autowired
private JavaMailSenderImpl javaMailSender;</code></pre><p>​<br>​    MimeMessage mailMessage = javaMailSender.createMimeMessage();<br>​    try {<br>​        MimeMessageHelper messageHelper = new MimeMessageHelper(mailMessage,true);<br>​        messageHelper.setFrom(mail.getSender());<br>​        messageHelper.setTo(mail.getAccepter());<br>​        messageHelper.setSubject(mail.getSubject());<br>​        messageHelper.setText(mail.getText(),true);<br>​        for (Object key:hashMap.keySet()) {<br>​            String o = hashMap.get(key).toString();<br>​            byte[] bytes = new BASE64Decoder().decodeBuffer(o);<br>​            messageHelper.addAttachment(key.toString(),new ByteArrayResource(bytes));<br>​        }<br>​        javaMailSender.send(mailMessage);<br>​        log.info(“发送成功”);<br>​    } catch (MessagingException e) {<br>​        e.printStackTrace();<br>​    } catch (IOException e) {<br>​        e.printStackTrace();<br>​    }</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中遇到的的某些问题</title>
    <url>/2019/01/19/SpringBoot/SpringBoot%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E7%9A%84%E6%9F%90%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li>关于Spring Data JPA使用懒加载，no session的情况？</li>
</ol>
<p>很多情况都说要再被调用的方法添加@Transactional注解，可是尝试了一下没有解决。再实体类中，你的User类中的Dept是添加的懒加载注解，并关联了外键字段，yml中，默认的hibernate就是open-in-view就是true。依旧没有解决，最后找了好久，可以这样配置hibernate 配置<strong>spring.jpa.properties.hibernate.enable_lazy_load_no_trans: true</strong>,表示再不适用事务注解是也进行懒加载。但是这跟只加@Transactional注解有什么区别呢。</p>
<ol start="2">
<li><p>关于在整合elasticsearch之后再整合redis出现的错误?</p>
<p>Failed to instantiate [org.elasticsearch.client.transport.TransportClient]: Factory method ‘esTransportClientInit’ threw exception; nested exception is java.lang.IllegalStateException: availableProcessors is already set to [8], rejecting [8]</p>
</li>
</ol>
<p>这个错误，这个错再网上也有，说是netty尝试初始化实例处理器。因为，再控制台打印上可以看到，elasticsearch使用了Netty4Plugin，而redis可能也使用到了，所以需要在启动时配置一下</p>
<pre><code>public static void main(String[] args) &#123;
    System.setProperty(&quot;es.set.netty.runtime.available.processors&quot;, &quot;false&quot;);
    SpringApplication.run(BootApplication.class, args);
&#125;</code></pre><p>添加第一行代码就好。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合RabbitMq</title>
    <url>/2019/01/17/SpringBoot/Spring%20Boot%E6%95%B4%E5%90%88RabbitMq/</url>
    <content><![CDATA[<h2 id="Spring-Boot整合RabbitMq"><a href="#Spring-Boot整合RabbitMq" class="headerlink" title="Spring Boot整合RabbitMq"></a>Spring Boot整合RabbitMq</h2><p>首先说明一下JMS和AMQP，</p>
<ul>
<li>JMS:(JAVA Message Service)java消息服务,基于JVM消息代理规范，ActiveMQ，HornetMQ是JMS的实现。</li>
<li>AMQP:高级消息队列协议，也是一个消息代理规范，兼容JMS，RabbitMQ是其实现。</li>
</ul>
<p>对于一般消息队列发送由点对点和发布订阅的方式。简单地说， 点对点是消息发送消息，消息代理将其放入队列中，消息接收者从队列中获取信息，读取消息后，消息被移除队列，且消息只有唯一的发送者和接收者，但并不是只能有一个接收者，而是只有一个接收者能接收。 发布订阅表示发送者发送消息到主题，多个接收者(订阅者)监听(订阅)这个主题，那么会在消息到达时接收到消息。对应@JmsListener和@RabbitListener。 一般JMS只提供这两种模式，而AMQP提供了五种。与之多引入了一些概念。</p>
<h3 id="RabbitMQ核心概念"><a href="#RabbitMQ核心概念" class="headerlink" title="RabbitMQ核心概念"></a>RabbitMQ核心概念</h3><ul>
<li>Message：消息是不具名的，也就是说针对某个接收者。由消息头和消息体组成，消息头由一系列可选属性，routing-key路由键，priority优先权，delivery-mode持久性存储等。</li>
<li>Publisher:消息生产者</li>
<li>Consumer:消费者，从一个消息队列中取走消息的客户端程序。</li>
<li>Exchange:交换器，用来接收生产者发送的消息，并将这些消息路由给服务器中的队列，由四种类型，Direct(默认，也就是点对点)，fanout，topic，headers，还有代码中可自定义的策略。其中后四种只是将发布订阅细分了一下。</li>
<li>Queue:队列，用来保存消息到，发送给消费者，它是消息的容器，消息一直在这个队列里，等待消费者链接这个队列将消息取走。</li>
<li>Binding:消息队列和交换器之间的关联。<strong>一个绑定就是基于路由键将交换器和队列链接起来的路由规则</strong>，可以将交换器理解成一个由绑定构成的路由表。</li>
<li>Connection:连接，TCP方式连接</li>
<li>Channel:通道，就如java中NIO的通道类似，较少资源消耗，双向通道。信道是建立在真实TCP连接内的虚拟连接。</li>
<li>Virtual Host:虚拟主机，表示一批交换器、消息队列和关联对象。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥有 自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时指定， RabbitMQ 默认的 vhost 是 / 。</li>
<li>Broker：消息队列服务器的实体</li>
</ul>
<p>其中有几张图可以更好和了解 <img src="images/%E5%9B%BE%E7%89%871.png" alt=""> <img src="images/%E5%9B%BE%E7%89%872.png" alt=""> 在AMQP中加入了Exchange和Binding的角色，生产者将消息发布到Exchange上，消息最终到达队列并被消息者接收，而Binding决定消息发送到哪个队列上。有必要了解一下Exchange、Binding、Queue，routing-key之间的关系。依据它们之间的关系了解一下这四个消息模型。 首先是Exchange，他是一个交换器，是一个枢纽，首先它可以添加一个绑定，并不是说这个对象可以创建绑定，这个绑定不仅可以绑定队列到Excahnge上，也可以是exchange，这里只讨论queue。在绑定的时候有一个routing-key路由键，这个路由键是exchange向queue分发的映射。 <img src="%5CUsers%5Ccgq_r%5CDesktop%5C20190113145158.png" alt=""> 首先，exchange有四种类型，分别是direct,fanout,topic,headers,一般headers用的不多，我们只将前三种。在创建时创建对应模式的exchange，分别表示:</p>
<ul>
<li>direct:点对点模式exchange</li>
<li>fanout:发布订阅exchange，即所有的绑定队列都被分发。</li>
<li>topic:匹配模式的exchange，可依据*和#进行匹配队列名发送消息。</li>
</ul>
<p>看上面图底下，绑定队列，绑定exchange就不说了。<strong>绑定队列，由队列名称，和routing-key。它是一个关键，我们可以把所有的队列都绑定到某个exchange上，但routing-key决定了是否分发到绑定的队列上。</strong> 我们举个例子:</p>
<ol>
<li>direct的exchange交换器绑定，首先direct是点到点，只有一个接收者能接收到，一句这个routing-key发送消息，因为当前模式只能一个接收者接收到，所以不能使用*或#。队列名和路由键是匹配对应的，消息可依据exchange和routing-key发送到某个指定的消息队列上。</li>
<li>fanout是分发，所有exchange被绑定的queue都会被发送消息。队列和路由键的匹配，尽管发送到某个路由键上，但仍然会发送到所有的exchange绑定队列上。</li>
<li>topic是主题分发，可以进行适配队列名的分发，若队列名为name.chen,路由键位name.#,则向name.#路由分发消息是，所有name.xxx的都会被分发消息。若队列名位name.chen，路由键位<em>.chen，则向</em>.chen路由分发消息，则所有xxx.chen被分发消息。</li>
</ol>
<p>只需要记住的是，一个exchange可以绑定多个队列，路由键与队列是关联的，不一定每个队列都会被分发，但匹配的路由键对应的队列会分发。direct点对点，一个路由只匹配一个队列；fanout，不管路由设置什么，只有绑定了队列，均发送消息；topic选择分发，依据路由规则进行选择性的分发到队列。 我们可以安装rabbitmq进行测试。通过docker镜像方式安装.</p>
<ol>
<li><p>去Docker Hub拉取<a href="https://hub.docker.com/_/rabbitmq?tab=tags">rabbitmq镜像</a>，带管理界面management的。</p>
<pre><code>docker pull rabbitmq:3.6.16-management-alpine</code></pre></li>
<li><p>查看下载镜像</p>
<pre><code>docker images</code></pre></li>
<li><p>启动镜像</p>
<pre><code>docker run -d -p 5672:5672 -p 15672:15672 --name myrabbitmq cad58564044c</code></pre></li>
<li><p>查看进程</p>
<pre><code>docker ps all</code></pre></li>
<li><p>页面访问localhost:15672页面进入rabbitmq管理界面，用户名密码为guest。</p>
</li>
<li><p>在Exchange选项卡和Queue选项卡进行操作，在Exchange选项卡中点击某个exchange进行添加绑定或者发送消息；在Queue选项卡，点击某个队列，点击getmessage，获得消息。查看被绑定的exchange。</p>
</li>
</ol>
<h3 id="整合Spring-Boot"><a href="#整合Spring-Boot" class="headerlink" title="整合Spring Boot"></a>整合Spring Boot</h3><ol>
<li><p>添加依赖</p>
<pre><code>org.springframework.boot
spring-boot-starter-amqp</code></pre></li>
</ol>
<pre><code>​    </code></pre><ol start="2">
<li><p>添加yml或properties配置，配置rabbit的主机localhost，用户名密码guest，端口号5672都是默认的，如果docker在本地的情况下，你可以什么都不配。端口号对应docker与本地的端口映射。</p>
</li>
<li><p>所有的配置都由springboot自动配置完成，只需要注入RabbitTemplate类，用于消息发送及处理；AmqpAdmin用于组件的管理。rabbitTemplate用于指定exchange或和routing-key进行发布消息。AmqpAdmin用于创建Exchange、Queue、Binding、删除等操作。</p>
</li>
<li><p>调用发布消息，消息类型是Object，可以放Map，对象等还有字符串数据。这样默认的话消息是MEMI类型为java序列化类型，是一堆序列化值。当然还可以自定义消息转换，将其序列化为json，定义配置Bean，返回MessageConverter对象类型为JackJson2JsonMessageConverter类。即可进行序列化对象，获取消息就可以反序列化。</p>
<pre><code>@Configuration
public class MyConfiguration &#123;

   @Bean
   public MessageConverter messageConverter()&#123;
       return new Jackson2JsonMessageConverter();
   &#125;
&#125;</code></pre></li>
<li><p>对于注解@RabbitListener和@EnableRabbit，首先需要开启注解模式，@EnableRabbit,然后在某个方法上添加注解@RabbitListener,并添加注解参数queue，方法参数为队列消息，若接收到消息则自动执行方法。该类需要注入spring容器。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot整合ElasticSearch全文检索引擎</title>
    <url>/2019/01/17/SpringBoot/Spring%20Boot%E6%95%B4%E5%90%88ElasticSearch%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h1 id="Spring-Boot整合ElasticSearch全文检索引擎"><a href="#Spring-Boot整合ElasticSearch全文检索引擎" class="headerlink" title="Spring Boot整合ElasticSearch全文检索引擎"></a>Spring Boot整合ElasticSearch全文检索引擎</h1><p>docker镜像安装:</p>
<pre><code>docker pull elasticsearch:6.5.4
docker run -e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; -d -p 9200:9200 -p 9300:9300 --name myes 93109ce1d590</code></pre><p>此处尽量选择拉取2.4.6的版本，因为spring boot data elasticsearch与elasticsearch版本会不匹配以至于无法操作。 访问localhost:9200返回响应json</p>
<pre><code>&#123;
  &quot;name&quot; : &quot;HBCk3xN&quot;,
  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,
  &quot;cluster_uuid&quot; : &quot;fzfscgtWQ1-9hlVbBU038Q&quot;,
  &quot;version&quot; : &#123;
    &quot;number&quot; : &quot;6.5.4&quot;,
    &quot;build_flavor&quot; : &quot;default&quot;,
    &quot;build_type&quot; : &quot;tar&quot;,
    &quot;build_hash&quot; : &quot;d2ef93d&quot;,
    &quot;build_date&quot; : &quot;2018-12-17T21:17:40.758843Z&quot;,
    &quot;build_snapshot&quot; : false,
    &quot;lucene_version&quot; : &quot;7.5.0&quot;,
    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,
    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;
  &#125;,
  &quot;tagline&quot; : &quot;You Know, for Search&quot;
&#125;</code></pre><p>有两种方式操作elasticsearch,一种是spring-data-elasticsearch，一种是jest，一个是使用java客户端操作，一个是使用restful方式操作的。Spring-data的方式非常类似Spring data-jpa，都是repository接口。</p>
<h3 id="官方文档示例"><a href="#官方文档示例" class="headerlink" title="官方文档示例"></a>官方文档示例</h3><p>Elasticsearch 是 <em>面向文档</em> 的，意味着它存储整个对象或 _文档_。Elasticsearch 不仅存储文档，而且 _索引_每个文档的内容使之可以被检索。在 Elasticsearch 中，你 对文档进行索引、检索、排序和过滤–而不是对行列数据。这是一种完全不同的思考数据的方式，也是 Elasticsearch 能支持复杂全文检索的原因。 Elasticsearch 使用 JavaScript Object Notation 或者 <a href="http://en.wikipedia.org/wiki/Json"><em>JSON</em></a> 作为文档的序列化格式。JSON 序列化被大多数编程语言所支持，并且已经成为 NoSQL 领域的标准格式</p>
<pre><code>&#123;
    &quot;email&quot;:      &quot;john@smith.com&quot;,
    &quot;first_name&quot;: &quot;John&quot;,
    &quot;last_name&quot;:  &quot;Smith&quot;,
    &quot;info&quot;: &#123;
        &quot;bio&quot;:         &quot;Eco-warrior and defender of the weak&quot;,
        &quot;age&quot;:         25,
        &quot;interests&quot;: [ &quot;dolphins&quot;, &quot;whales&quot; ]
    &#125;,
    &quot;join_date&quot;: &quot;2014/05/01&quot;
&#125;</code></pre><p>在官方文档中存在这样一段话： <strong>一个文档代表一个雇员。存储数据到 Elasticsearch 的行为叫做 <em>索引</em> ，但在索引一个文档之前，需要确定将文档存储在哪里。</strong> <strong>一个 Elasticsearch 集群可以 包含多个 <em>索引</em> ，相应的每个索引可以包含多个 <em>类型</em> 。 这些不同的类型存储着多个 <em>文档</em> ，每个文档又有 多个 <em>属性</em> 。</strong> 官网也有了解释，一个索引是名词，类似关系型数据库的mysql的数据库，一个索引时动词，类似于insert。 首先理解一下第二段，多个索引就是类似多个数据库；每个索引包含多个类型，类似于每个数据库的多个表；不同类型存储多个文档，类似于不同表存储多条数据；每个文档由多个属性，类似于每个数据记录的属性字段。 首先运行测试一下<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_indexing_employee_documents.html">官网的雇员例子</a>。 只需要发送PUT请求，并添加json数据即可，使用postman,添加3个雇员 <img src="images/20190113234018.png" alt=""></p>
<ol>
<li><p><strong>检索某个文档</strong>,发送get请求，指定索引库，类型和ID，/megacorp/employee/1</p>
<pre><code>GET localhost:9200/megacorp/employee/1</code></pre></li>
<li><p><strong>检索所有</strong>,结果都放在hits数组中</p>
<pre><code>GET localhost:9200/megacorp/employee/_search</code></pre></li>
<li><p><strong>指定属性检索</strong></p>
<pre><code>GET localhost:9200/megacorp/employee/_search?q=last_name:Smith</code></pre></li>
<li><p><strong>查询表达式搜索</strong>，发送查询json,qurey表示查询，match为匹配，匹配last_name</p>
<pre><code>POST localhost:9200/megacorp/employee/_search
&#123;
   &quot;query&quot; : &#123;
       &quot;match&quot; : &#123;
           &quot;last_name&quot; : &quot;Smith&quot;
       &#125;
   &#125;
&#125;</code></pre></li>
<li><p><strong>复杂表达式搜索</strong>,依然是传入json请求体，添加filter过滤搜索,使用范围搜索，检索age的范围匹配</p>
<pre><code>POST localhost:9200/megacorp/employee/_search
&#123;
   &quot;query&quot; : &#123;
       &quot;bool&quot;: &#123;
           &quot;must&quot;: &#123;
               &quot;match&quot; : &#123;
                   &quot;last_name&quot; : &quot;smith&quot; 
               &#125;
           &#125;,
           &quot;filter&quot;: &#123;
               &quot;range&quot; : &#123;
                   &quot;age&quot; : &#123; &quot;gt&quot; : 30 &#125; 
               &#125;
           &#125;
       &#125;
   &#125;
&#125;</code></pre></li>
<li><p><strong>全文检索</strong>,所有符合条件都会匹配，此时查出两条记录，按照_score匹配相关性得分排序。由空格分隔，前后都可能被匹配，此为全文检索非精确匹配</p>
<pre><code>POST localhost:9200/megacorp/employee/_search
&#123;
   &quot;query&quot; : &#123;
       &quot;match&quot; : &#123;
           &quot;about&quot; : &quot;rock climbing&quot;
       &#125;
   &#125;
&#125;</code></pre></li>
<li><p><strong>全文检索，精确匹配</strong>,使用match_phrase进行精确匹配，这样只匹配一条</p>
<pre><code>POST localhost:9200/megacorp/employee/_search
&#123;
   &quot;query&quot; : &#123;
       &quot;match_phrase&quot; : &#123;
           &quot;about&quot; : &quot;rock climbing&quot;
       &#125;
   &#125;
&#125;</code></pre></li>
<li><p><strong>高亮搜索，添加请求体highlight参数</strong>，设置某个属性，将查询某个文档，并高亮当前查询的匹配结果,此结果携带html标签，可以在页面上渲染。</p>
<pre><code>POST localhost:9200/megacorp/employee/_search
&#123;
   &quot;query&quot; : &#123;
       &quot;match_phrase&quot; : &#123;
           &quot;about&quot; : &quot;rock climbing&quot;
       &#125;
   &#125;,
   &quot;highlight&quot;: &#123;
       &quot;fields&quot; : &#123;
           &quot;about&quot; : &#123;&#125;
       &#125;
   &#125;
&#125;

&#123;
  ...
  &quot;hits&quot;: &#123;
     &quot;total&quot;:      1,
     &quot;max_score&quot;:  0.23013961,
     &quot;hits&quot;: [
        &#123;
           ...
           &quot;_score&quot;:         0.23013961,
           &quot;_source&quot;: &#123;
              &quot;first_name&quot;:  &quot;John&quot;,
              &quot;last_name&quot;:   &quot;Smith&quot;,
              &quot;age&quot;:         25,
              &quot;about&quot;:       &quot;I love to go rock climbing&quot;,
              &quot;interests&quot;: [ &quot;sports&quot;, &quot;music&quot; ]
           &#125;,
           &quot;highlight&quot;: &#123;
              &quot;about&quot;: [
                 &quot;I love to go &lt;em&gt;rock&lt;/em&gt; &lt;em&gt;climbing&lt;/em&gt;&quot; 
              ]
           &#125;
        &#125;
     ]
  &#125;
&#125;</code></pre></li>
<li><p><strong>聚合搜索</strong>，类似sql的groupby分组,可以依据某个属性做一些精细结果。aggs表示聚合，聚合interests。结果返回分片信息，某个值的数量。</p>
<pre><code>POST localhost:9200/megacorp/employee/_search
&#123;
 &quot;aggs&quot;: &#123;
   &quot;all_interests&quot;: &#123;
     &quot;terms&quot;: &#123; &quot;field&quot;: &quot;interests&quot; &#125;
   &#125;
 &#125;
&#125;

&#123;
  ...
  &quot;hits&quot;: &#123; ... &#125;,
  &quot;aggregations&quot;: &#123;
     &quot;all_interests&quot;: &#123;
        &quot;buckets&quot;: [
           &#123;
              &quot;key&quot;:       &quot;music&quot;,
              &quot;doc_count&quot;: 2
           &#125;,
           &#123;
              &quot;key&quot;:       &quot;forestry&quot;,
              &quot;doc_count&quot;: 1
           &#125;,
           &#123;
              &quot;key&quot;:       &quot;sports&quot;,
              &quot;doc_count&quot;: 1
           &#125;
        ]
     &#125;
  &#125;
&#125;</code></pre></li>
</ol>
<h3 id="Jest操作Elasticsearch"><a href="#Jest操作Elasticsearch" class="headerlink" title="Jest操作Elasticsearch"></a>Jest操作Elasticsearch</h3><p>jest是专门的restful风格的api 首先引入pom依赖</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;io.searchbox&lt;/groupId&gt;
    &lt;artifactId&gt;jest&lt;/artifactId&gt;
    &lt;version&gt;5.3.4&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p>配置yml，配置访问uris，默认localhost:9200</p>
<pre><code>spring:
  elasticsearch:
    jest:
      uris: localhost:9200</code></pre><p>使用JestClient自动注入，进行操作,构建文档添加到elasticsearch</p>
<pre><code>@Autowired
private JestClient jestClient;

@ResponseBody
@RequestMapping(&quot;test&quot;)
public String test()&#123;
    //创建实体类
    Dept dept = new Dept();
    dept.setId(1);
    dept.setName(&quot;产品部&quot;);
    dept.setFloor(1);
    dept.setDesc(&quot;这是产品部&quot;);
    //构建一个文档
    Index index = new Index.Builder(dept).index(&quot;xxha&quot;).type(&quot;dept&quot;).id(&quot;1&quot;).build();
    try &#123;
        //执行
        jestClient.execute(index);
    &#125; catch (IOException e) &#123;
        e.printStackTrace();
    &#125;
    return &quot;ok&quot;;
&#125;</code></pre><p>​    </p>
<p>从elasticsearch中查询</p>
<pre><code>@ResponseBody
@RequestMapping(&quot;test&quot;)
public String test()&#123;
    //Builder中携带query参数，用于传入json请求体，不填则为_search
    Search build = new Search.Builder(&quot;&quot;).addIndex(&quot;xxha&quot;).addType(&quot;dept&quot;).build();
    try &#123;
        SearchResult execute = jestClient.execute(build);
        System.out.println(execute.getJsonObject());
    &#125; catch (IOException e) &#123;
        e.printStackTrace();
    &#125;

    return &quot;ok&quot;;
&#125;</code></pre><p>使用id获得</p>
<pre><code>public String test()&#123;
    Get build = new Get.Builder(&quot;xxha&quot;, &quot;1&quot;).index(&quot;xxha&quot;).type(&quot;dept&quot;).build();
    try &#123;
    DocumentResult execute = jestClient.execute(build);
    System.out.println(execute.getJsonObject());
    &#125; catch (IOException e) &#123;
    e.printStackTrace();
    &#125;

    return &quot;ok&quot;;
&#125;</code></pre><p>其他操作</p>
<pre><code>//创建索引
CreateIndex build = new CreateIndex.Builder(&quot;&quot;).build();
//删除索引
DeleteIndex build = new DeleteIndex.Builder(&quot;&quot;).build();</code></pre><p>其他具体参照jest github。</p>
<h3 id="spring-data-elasticsearch操作"><a href="#spring-data-elasticsearch操作" class="headerlink" title="spring-data-elasticsearch操作"></a>spring-data-elasticsearch操作</h3><p>首先注意的就是版本问题，data-elasticsearch与elasticsearch的版本问题，建议是2.4.6的把，首先看好版本再说。</p>
<pre><code>spring:
  data:
    elasticsearch:
      cluster-name: elasticsearch
      cluster-nodes: localhost:9300</code></pre><p>我们只需同jpa一样，创建一个<strong>repository接口继承elasticsearchRepository</strong>接口,可以使用接口提供的方法。也可以同jpa一样使用自定义方法名匹配查询。以及elasticsearch的@Query注解。 同时，关联的持久化类需要添加@Docuemnt注解,添加indexName属性及type属性。 还有另外一种方式是ElasticsearchTemplate实例操作，它雷同JPA的EntityManager。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot国际化及接管SpringMVC拦截器格式化配置</title>
    <url>/2019/01/09/SpringBoot/SpringBoot%E5%9B%BD%E9%99%85%E5%8C%96%E5%8F%8A%E6%8E%A5%E7%AE%A1SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="页面国际化配置"><a href="#页面国际化配置" class="headerlink" title="页面国际化配置"></a>页面国际化配置</h2><h3 id="默认依据浏览器国际化"><a href="#默认依据浏览器国际化" class="headerlink" title="默认依据浏览器国际化"></a>默认依据浏览器国际化</h3><p>依据浏览器的默认首选语言作为国家语言显示。首先我们使用的渲染模板是thymeleaf，其提供的页面显示#{}方式显示数据，为message显示，可以设置国际化变量。而再使用Spring MVC时</p>
<ul>
<li>首先要配置国际化properties文件</li>
<li>然后要配置ResourceBundleMessageSource这个Bean来管理国际化</li>
<li>然后jsp使用fmt:message</li>
</ul>
<p>这里SpringBoot已经将国际化做了自动配置，不需要设置这些bean。我们只需要配置国际化资源文件和配置国际化资源文件基础名称。 <strong>我们以登录为例:</strong></p>
<ol>
<li>资源文件配置,在resource下创建i18n的文件夹并创建message.properties,message_en_US,message_zh_CN</li>
</ol>
<p>使用IDEA创建properties，点击编辑器下边的Resource Bundle,使用可视化编辑</p>
<ol start="2">
<li>然后在application.yml配置spring.messages.basename为i18n.message</li>
</ol>
<p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2019/01/20190109220532.png" alt=""> 国际化的默认文件名时message，且位置在系统classpath下，也就是resource下，那么如果包含文件名或包名，则使用 包名.基础名。</p>
<ol start="3">
<li><p>页面配置，部分</p>
<div class="layui-form-item">
    <input type="checkbox" name="rememberMe" title="记住我" lay-skin="primary" th:title="#{login.remember}">
    <a class="layui-layout-right forget-password" href="javascript:alert('请联系超级管理员！')">[[#{login.forget}]]</a>
</div>
<button type="submit" class="layui-btn layui-btn-fluid ajax-login"><i class="fa fa-sign-in fa-lg fa-fw"></i>[[#{login.btn}]]</button>


</li>
</ol>
<p>若页面出现??login.tip_zh_CN??这种两个问号的，看你的国际化文件名字配置对了没。</p>
<h3 id="点击中英文按钮切换国际化"><a href="#点击中英文按钮切换国际化" class="headerlink" title="点击中英文按钮切换国际化"></a>点击中英文按钮切换国际化</h3><p>首先默认浏览器的国际化也是和http请求有关的，浏览器设置中英文默认或中文前英文后。再http请求时header-language中包含了语言了编码zh_CN和en_US,哪个在前就显示那个语言，那么就请求哪各语言。那么我们就可以变更这个编码。 你可以查看，某个请求，请求头里有这个显示，那么我们只需要重新配置一下要请求的国际化。将请求编码作为参数给后台，并设置国际化的语言。我们来自定义覆盖Locale配置。</p>
<ol>
<li><p>新建LocaleResolver</p>
<p>/**</p>
<ul>
<li><p>创建自定义Locale解析器</p>
</li>
<li><p>/<br>public class MyLocaleResolver implements LocaleResolver {<br>  @Override<br>  public Locale resolveLocale(HttpServletRequest httpServletRequest) {</p>
<pre><code>Locale locale = Locale.getDefault();
String language = httpServletRequest.getParameter(&quot;l&quot;);
if (!StringUtils.isEmpty(language))&#123;
    String[] str = language.split(&quot;_&quot;);
    locale = new Locale(str[0],str[1]);
&#125;
return locale;</code></pre><p>  }</p>
<p>  @Override<br>  public void setLocale(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale) {</p>
<p>  }<br>}</p>
</li>
</ul>
</li>
<li><p>在配置中配置这个解析器</p>
<p>@Configuration<br>public class MyMvcConfiguration  extends WebMvcConfigurationSupport {</p>
<pre><code>/**
 * 配置自定义的Locale国际化配置
 * @return
 */
@Bean
public LocaleResolver localeResolver()&#123;
    return new MyLocaleResolver();
&#125;</code></pre><p>}</p>
</li>
</ol>
<h2 id="SpringBoot-configuration配置的WebMvcConfigurationSupport-WebMvcConfigrationer已弃用"><a href="#SpringBoot-configuration配置的WebMvcConfigurationSupport-WebMvcConfigrationer已弃用" class="headerlink" title="SpringBoot @configuration配置的WebMvcConfigurationSupport (WebMvcConfigrationer已弃用)"></a>SpringBoot @configuration配置的WebMvcConfigurationSupport (WebMvcConfigrationer已弃用)</h2><p>算了，不写了。默认配置的都在这个里面，只需要重写add就好，SpringBoot会自动将配置的追加到容器中。 也可以自己定义Bean，并标注上@Bean注解即可注入容器中，就像上面的Locale国际化一样。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop搭建本机模式和伪分布式并执行案例</title>
    <url>/2018/12/31/Hadoop/hadoop%E6%90%AD%E5%BB%BA%E6%9C%AC%E6%9C%BA%E6%A8%A1%E5%BC%8F%E5%92%8C%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E5%B9%B6%E6%89%A7%E8%A1%8C%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="单节点Hadoop运行-本地模式"><a href="#单节点Hadoop运行-本地模式" class="headerlink" title="单节点Hadoop运行(本地模式)"></a>单节点Hadoop运行(本地模式)</h2><p><a href="http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html">官网步骤地址</a> 必备条件:安装java及配置java环境变量，安装hadoop及配置hadoop环境变量</p>
<pre><code>export JAVA_HOME=/home/ubuntu1/jdk1.8
export PATH=$JAVA_HOME/bin:$PATH

export HADOOP_HOME=/home/ubuntu1/hadoop-2.7.7
export PATH=$PATH:$HADOOP_HOME/bin
export PATH=$PATH:$HADOOP_HOME/sbin</code></pre><p>配置hadoop根目录下etc下hadoop下的hadoop-env.sh文件中的JAVA_HOME地址</p>
<pre><code>ubuntu1@ubuntu1:~/hadoop-2.7.7$ cd etc/hadoop/
ubuntu1@ubuntu1:~/hadoop-2.7.7/etc/hadoop$ vim hadoop-env.sh
export JAVA_HOME=/home/ubuntu1/jdk1.8</code></pre><p>当前本地local模式只有当前一台机器，可以不安装ssh，而分布式需要ssh。那么配置完成之后，bin目录下的hadoop命令可以执行。 <strong>非分布式模式运行:grep程序</strong> grep程序用来检索intpu目录下所有符合指定参数的文件。</p>
<pre><code>$ mkdir input
$ cp etc/hadoop/*.xml input
$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.9.2.jar grep input output &apos;dfs[a-z.]+&apos;
$ cat output/*</code></pre><p>表示在hadoop根目录下创建input文件夹，将etc/hadoop下所有xml文件拷贝到input目录下，执行hadoop命令。执行完成后，进入output目录，这个output目录是程序运行后自动生成的，不能直接创建。目录下有两个文件：</p>
<pre><code>ubuntu1@ubuntu1:~/hadoop-2.7.7$ cd output/
ubuntu1@ubuntu1:~/hadoop-2.7.7/output$ ls
part-r-00000  _SUCCESS</code></pre><p>一个是执行结果存放，一个是成功标识。 <strong>非分布式模式运行:wordcount程序</strong> wordcount程序用来查询文件下单词每个重复的次数。</p>
<pre><code>ubuntu1@ubuntu1:~/hadoop-2.7.7$ rm -rf output/
ubuntu1@ubuntu1:~/hadoop-2.7.7/input$ rm -rf *
ubuntu1@ubuntu1:~/hadoop-2.7.7/input$ vim testhello.txt
ubuntu1@ubuntu1:~/hadoop-2.7.7$ hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar wordcount input output</code></pre><p>​    </p>
<p>删除output目录，删除input目录下所有文件，并创建testhello.txt文件，在文件内填多个单词，每个单词用空格分开，保存。然后执行命令。</p>
<pre><code>ubuntu1@ubuntu1:~/hadoop-2.7.7/output$ cat part-r-00000 
and 2
cehn    1
chen    2
name    1
where   1
with    1
xiaoxing    1</code></pre><h2 id="伪分布式配置"><a href="#伪分布式配置" class="headerlink" title="伪分布式配置"></a>伪分布式配置</h2><p>即单节点配置HDFS和YARN,可正常使用功能。</p>
<ol>
<li><p>配置core-site.xml</p>
<pre><code>&lt;!-- 指定HDFS中的NameNode地址 --&gt;
&lt;property&gt;
     &lt;name&gt;fs.defaultFS&lt;/name&gt;
     &lt;value&gt;hdfs://ubuntu1:9000&lt;/value&gt;
&lt;/property&gt;
&lt;!-- 指定hadoop运行时产生的临时文件 --&gt;
&lt;property&gt;
     &lt;name&gt;hadoop.temp.dir&lt;/name&gt;
     &lt;value&gt;/home/ubuntu1/hadoop-2.7.7/data/tmp&lt;/value&gt;
&lt;/property&gt;</code></pre></li>
<li><p>配置hdfs-site.xml</p>
<pre><code> &lt;!-- 指定HDFS副本数量 --&gt;
&lt;proerpty&gt;
    &lt;name&gt;dfs.replication&lt;/name&gt;
    &lt;value&gt;1&lt;/value&gt;
&lt;/proerpty&gt;</code></pre></li>
<li><p>配置完成后一定要将hdfs进行首次格式化</p>
<pre><code>hdfs namenode -format</code></pre></li>
<li><p>启动守护进程</p>
<pre><code>sbin/hadoop-daemon.sh start namenode    //启动namenode守护进程,非集群方式
sbin/hadoop-daemon.sh start datanode    //启动datanode守护进程，非集群方式
jps  //查看进程
ubuntu1@ubuntu1:~/hadoop-2.7.7$ jps
6889 Jps
6683 NameNode
6813 DataNode</code></pre></li>
<li><p>WEB浏览器访问 配置服务IP:50070进入HDFS文件系统。界面显示 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/12/20181231184929.png" alt=""> 其中Utilities菜单栏下的Browse the file system可以查看HDFS结构。</p>
</li>
<li><p>使用HDFS并运行wordcount</p>
<pre><code>ubuntu1@ubuntu1:~/hadoop-2.7.7$ hdfs dfs -mkdir -p /user/ubuntu1/input
ubuntu1@ubuntu1:~/hadoop-2.7.7$ hdfs dfs -put input/testhello.txt  /user/ubuntu1/input/
ubuntu1@ubuntu1:~/hadoop-2.7.7$ hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar wordcount /user/ubuntu1/input /user/ubuntu1/output</code></pre></li>
</ol>
<pre><code>以上命令分别表示创建一个多级目录到hdfs，并将本地input/testhello.txt上传到hdfs的intpu目录下。然后执行wordcount案例，指定hdfs中的文件和目录。执行完毕后，无错误则进入web查看结果，或使用如下命令:

    ubuntu1@ubuntu1:~/hadoop-2.7.7$ hdfs dfs -cat /user/ubuntu1/output/par*
    and  2
    cehn 1
    chen 2
    name 1
    where    1
    with 1
    xiaoxing 1</code></pre><ol start="7">
<li><p>查看HDFS,及命令</p>
<ol>
<li><p>查看文件系统</p>
<pre><code>ubuntu1@ubuntu1:~/hadoop-2.7.7$ hdfs dfs -ls /
Found 1 items
drwxr-xr-x   - ubuntu1 supergroup          0 2018-12-31 18:46 /user

ubuntu1@ubuntu1:~/hadoop-2.7.7$ hdfs dfs -ls -R /
drwxr-xr-x   - ubuntu1 supergroup          0 2018-12-31 18:46 /user
drwxr-xr-x   - ubuntu1 supergroup          0 2018-12-31 18:53 /user/ubuntu1
drwxr-xr-x   - ubuntu1 supergroup          0 2018-12-31 18:47 /user/ubuntu1/input
-rw-r--r--   1 ubuntu1 supergroup         50 2018-12-31 18:47 /user/ubuntu1/input/testhello.txt
drwxr-xr-x   - ubuntu1 supergroup          0 2018-12-31 18:53 /user/ubuntu1/output
-rw-r--r--   1 ubuntu1 supergroup          0 2018-12-31 18:53 /user/ubuntu1/output/_SUCCESS
-rw-r--r--   1 ubuntu1 supergroup         53 2018-12-31 18:53 /user/ubuntu1/output/part-r-00000</code></pre></li>
<li><p>下载文件到本地</p>
<pre><code>ubuntu1@ubuntu1:~/hadoop-2.7.7$ hdfs dfs -get /user/ubuntu1/output/par* ./
ubuntu1@ubuntu1:~/hadoop-2.7.7$ cat ./part-r-00000 
and   2
cehn  1
chen  2
name  1
where 1
with  1
xiaoxing  1</code></pre></li>
<li><p>删除HDFS中文件或文件夹</p>
<pre><code>ubuntu1@ubuntu1:~/hadoop-2.7.7$ hdfs dfs -rm -r /user/ubuntu1/output
18/12/31 19:04:14 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 0 minutes, Emptier interval = 0 minutes.
Deleted /user/ubuntu1/output

ubuntu1@ubuntu1:~/hadoop-2.7.7$ hdfs dfs -ls /user/ubuntu1
Found 1 items
drwxr-xr-x   - ubuntu1 supergroup          0 2018-12-31 18:47 /user/ubuntu1/input</code></pre></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper集群服务器注册动态上下线</title>
    <url>/2018/12/30/Zoopeeker/Zookeeper%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B3%A8%E5%86%8C%E5%8A%A8%E6%80%81%E4%B8%8A%E4%B8%8B%E7%BA%BF/</url>
    <content><![CDATA[<p>服务器上下线，就是服务器在集群化环境下，服务器出现的断开集群连接，或服务器宕机，关机，停止工作等问题。而服务器动态上下线感知就是客户端可以监听服务器的上线或下线，知道哪个服务器正在运行，哪个服务器停止了，若某台机器退出集群了，表示该服务器节点下线了。那么客户端就不会请求这台服务器了。并且客户端通过监听就可以知道那些机器在运行中。 首先Zookeepr能做什么，主要是作为分布式命名服务，通过调用zNode api 能够很容易的创建一个全局的path，一个path就是一个名称，且具有层级结构。当然还有其他作用。 而Zookeeper具有监听watch的功能，监听节点值和子节点。那么将服务器作为每个节点，由zookeeper统一管理，每个节点都会有stat信息，存储这相关内容及配置。那么节点又分为临时和持久，以及四个节点目录类型。只要将服务器节点设置为临时顺序节点，即可监听节点的数量。只要服务器节点断开。那个临时节点就会删除。这句话也就是说，将服务器通过Zookeeper管理，两者的关系就是，服务器就是Client，同真正的Client客户端类似。也就是说，服务器需要到Zookeeper值注册节点，那么Server服务器也就理应成了Client的角色。 <strong>简而言之:</strong></p>
<ul>
<li>n个服务器到Zookeeper中注册节点，注册到同一个节点下，那么他们都是同级的子节点。</li>
<li>而客户端会通过ls path [watch]，来监听这个节点的变化，也就是路径的变化。在java操作客户端时getChildren可以使用Watcher来监听某个节点。那么被监听的这个节点就是众多服务器节点的父节点。</li>
</ul>
<p>需要注意的是，服务器都通过zookeeper来管理，要到Zookeeper中注册节点。而客户端专门监听Zookeeper的节点列表。 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/12/20181230202802.png" alt=""> java代码的具体方式就是，先服务器注册，在客户端监听。 看一下服务器代码:</p>
<pre><code>public class ZkServer &#123;

    private String connectString = &quot;192.168.56.11:2181,192.168.56.12:2181,192.168.56.13:2181&quot;;
    private int sessionTimeout=20000;
    private ZooKeeper zkServer = null;

    public static void main(String[] args) &#123;
        ZkServer server = new ZkServer();
        server.connect();//连接Zookeeper
        server.register(args[0]);//注册服务器节点
        server.message(args[0]);
    &#125;

    /**
     * 服务器注册完毕提示
     * @param string
     */
    private void message(String hostName) &#123;
        System.out.println(hostName + &quot;启动完毕!!!&quot;);
    &#125;

    /**
     * 服务器节点注册
     */
    private void register(String hostName) &#123;
        try &#123;
            zkServer.create(&quot;/servers/server&quot;, hostName.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);
        &#125; catch (KeeperException e) &#123;
            // TODO Auto-generated catch block
            e.printStackTrace();
        &#125; catch (InterruptedException e) &#123;
            // TODO Auto-generated catch block
            e.printStackTrace();
        &#125;
        System.out.println(&quot;注册服务器节点&quot; + hostName);
        try &#123;
            Thread.sleep(Long.MAX_VALUE);
        &#125; catch (InterruptedException e) &#123;
            // TODO Auto-generated catch block
            e.printStackTrace();
        &#125;
    &#125;

    /**
     * 服务器作为客户端连接Zookeeper
     */
    private void connect() &#123;
        try &#123;
            zkServer  = new ZooKeeper(connectString, sessionTimeout, new Watcher() &#123;

                public void process(WatchedEvent event) &#123;

                &#125;
            &#125;);
        &#125; catch (IOException e) &#123;
            // TODO Auto-generated catch block
            e.printStackTrace();
        &#125;
    &#125;
&#125;</code></pre><p>客户端代码:</p>
<pre><code>public class ZkClient &#123;

    private String connectString = &quot;192.168.56.11:2181,192.168.56.12:2181,192.168.56.13:2181&quot;;
    private int sessionTimeout=20000;
    private ZooKeeper zkServer = null;

    public static void main(String[] args) &#123;
        ZkClient client = new ZkClient();
        client.connect();//连接Zookeeper

    &#125;

    /**
     * 服务器作为客户端连接Zookeeper
     */
    private void connect() &#123;
        try &#123;
            zkServer  = new ZooKeeper(connectString, sessionTimeout, new Watcher() &#123;
                public void process(WatchedEvent event) &#123;
                    try &#123;
                        List&lt;String&gt; list = zkServer.getChildren(&quot;/servers&quot;, true);
                        System.out.println(list.toString());
                    &#125; catch (KeeperException e) &#123;
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    &#125; catch (InterruptedException e) &#123;
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    &#125;
                &#125;
            &#125;);
        &#125; catch (IOException e) &#123;
            // TODO Auto-generated catch block
            e.printStackTrace();
        &#125;
        try &#123;
            Thread.sleep(Long.MAX_VALUE);
        &#125; catch (InterruptedException e) &#123;
            // TODO Auto-generated catch block
            e.printStackTrace();
        &#125;
    &#125;

&#125;</code></pre><p>其实总体来说，只有客户端代码有用，它负责监听，并把子节点打印出来。我们可以直接启动客户端代码。而对于服务器注册而言，无非是命令行创建变成了通过java代码创建。所以，只需要把客户端启动起来，在命令行上创建临时顺序节点即可。下面是命令行注册服务器，以及对应的客户端打印输出。</p>
<pre><code>[zk: localhost:2181(CONNECTED) 34] ls /servers
[]
[zk: localhost:2181(CONNECTED) 35] create -s -e /servers/server server1
Created /servers/server0000000001
[zk: localhost:2181(CONNECTED) 36] create -s -e /servers/server server2
Created /servers/server0000000002
[zk: localhost:2181(CONNECTED) 37] create -s -e /servers/server server3
Created /servers/server0000000003
[zk: localhost:2181(CONNECTED) 38] delete /servers/server0000000001


[]
[server0000000001]
[server0000000002, server0000000001]
[server0000000003, server0000000002, server0000000001]
[server0000000003, server0000000002]</code></pre><p>为什么我不用java启动服务注册，因为，你需要开线程，或者打个包才能执行三次。没有命令行快速方便。然后，没了。</p>
]]></content>
      <categories>
        <category>Zookeeper</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper客户端java操作说明</title>
    <url>/2018/12/30/Zoopeeker/Zookeeper%E5%AE%A2%E6%88%B7%E7%AB%AFjava%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<p>创建Maven项目，添加对应zookeeper版本依赖</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;
    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;
    &lt;version&gt;3.4.13&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p>再拷贝zookeeper.tar.gz包下的conf下的log4j.properties日志。到maven的resource目录下</p>
<pre><code>public class App &#123;

    //连接字符串
    private static String connectString = &quot;192.168.56.11:2181,192.168.56.12:2181,192.168.56.13:2181&quot;;
    //会话超时时间
    private static int sessionTimeout = 20000;
    //Zookeeper对象
    ZooKeeper zkCli = null;

    @Before
    public void initCli() throws IOException &#123;

        zkCli = new ZooKeeper(connectString, sessionTimeout, new Watcher() &#123;

            public void process(WatchedEvent event) &#123;
                // TODO Auto-generated method stub
                System.out.println(&quot;事件类型&quot; + event.getType());
            &#125;
        &#125;);
    &#125;

    @Test
    public void createNode() throws KeeperException, InterruptedException &#123;
        String path = zkCli.create(&quot;/chen&quot;, &quot;chenguangqi&quot;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        System.out.println(path);
    &#125;

&#125;</code></pre><p>代码中initCli方法用于创建客户端，通过Zokkepper构造方法构造客户端对象。</p>
<ul>
<li>第一个参数为连接字符串,多个连接使用逗号分开，可以写一个或多个，将随机连接。</li>
<li>第二个参数为会话超时时间，这个尽量不要低于5秒吧，否则可能导致超时报错。</li>
<li>第三个参数为监听Watcher,也就是监听器原理中的那个，获得到监听响应后会执行process方法。</li>
</ul>
<p>客户端创建节点，返回创建节点的路径</p>
<ul>
<li>第一个参数为创建的节点路径</li>
<li>第二个参数为节点数据值</li>
<li>第三个参数为ACL访问控制权限，Ids中获得其他节点权限，当前为开放权限不安全。</li>
<li>第四个参数为节点类型，暂时，暂时顺序，持久，持久顺序</li>
</ul>
<p>java客户端在连接服务器执行完操作后，就会断开连接。且<strong>每次连接客户端的Watcher都会执行</strong>。也就是首次连接服务器必会执行process方法。</p>
<h3 id="获得子节点"><a href="#获得子节点" class="headerlink" title="获得子节点"></a>获得子节点</h3><pre><code>@Test
public void getNode() throws KeeperException, InterruptedException &#123;
    List&lt;String&gt; list = zkCli.getChildren(&quot;/&quot;, false);
    for (String string : list) &#123;
        System.out.println(string);
    &#125;
&#125;


@Test
public void getNode() throws KeeperException, InterruptedException &#123;
    //List&lt;String&gt; list = zkCli.getChildren(&quot;/&quot;, false);
    List&lt;String&gt; list = zkCli.getChildren(&quot;/&quot;, new Watcher() &#123;
        public void process(WatchedEvent event) &#123;
            // TODO Auto-generated method stub
            System.out.println(&quot;监听路径&quot; + event.getPath());
        &#125;
    &#125;);
    for (String string : list) &#123;
        System.out.println(string);
    &#125;

    Thread.sleep(Long.MAX_VALUE);//因为客户端连接服务器执行操作后就会关闭连接，所以需要睡眠才能够看到监听结果的输出
&#125;</code></pre><p>通过getChildren方法获得子节点集合，第二个参数为是否监听，如果设置为true，则监听当前节点，并在创建客户端时的Watcher捕获的。 当getChildren方法的监听参数为true时，则连接服务器的Watcher会依据当前getChildren监听的节点的反应来执行process方法。同命令行监听一样，只会监听一次。 当getChildren方法的监听参数为false时，连接服务器的Watcher仅会在连接服务器时执行第一次process，而不会监听当前getChildren的节点。 当getChilredn方法的监听参数为Watcher监听对象，那么连接服务器的监听只有第一次连接服务器执行process，而更改/子节点时只有getChidren的监听才会执行。也只监听一次执行一次。 要想连续监听，需要在连接服务器的监听的process方法里，再次来一次getChildren(“/“,true);这样才能再次监听。</p>
<h3 id="查看节点是否存在"><a href="#查看节点是否存在" class="headerlink" title="查看节点是否存在"></a>查看节点是否存在</h3><p>依然可以监听当前节点，是否存在，同样可以设置true，false，Watcher</p>
<pre><code>@Test
public void exist() throws KeeperException, InterruptedException &#123;
    Stat stat = zkCli.exists(&quot;/chen&quot;,false);
    if(stat!=null) &#123;
        System.out.println(stat.getVersion());
        System.out.println(stat.getDataLength());
    &#125;else &#123;
        System.out.println(&quot;不存在&quot;);
    &#125;
    Thread.sleep(Long.MAX_VALUE);
&#125;</code></pre><p>监听与getChildren都是一样的。</p>
<h3 id="修改节点值"><a href="#修改节点值" class="headerlink" title="修改节点值"></a>修改节点值</h3><pre><code>@Test
public void setData() throws KeeperException, InterruptedException &#123;
    Stat stat = zkCli.setData(&quot;/chen&quot;, &quot;what is your name&quot;.getBytes(), 0);
    System.out.println(&quot;版本&quot; + stat.getVersion());
    System.out.println(&quot;修改时间&quot; + stat.getMtime());
&#125;</code></pre><ul>
<li>第一个参数为要修改的节点</li>
<li>第二个参数为要修改的节点值</li>
<li>第三个参数为被修改节点的版本</li>
</ul>
]]></content>
      <categories>
        <category>Zookeeper</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper的监听器原理和客户端写数据流程</title>
    <url>/2018/12/29/Zoopeeker/zookeeper%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%86%99%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="监听器原理"><a href="#监听器原理" class="headerlink" title="监听器原理"></a>监听器原理</h2><p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/12/20181229231357.png" alt="监听器原理"> 如图所示: 首先要有一个main线程，这个main线程创建zookeeper客户端，zkClient会分发两个子线程，一个用来监听，一个用来连接服务器。 通过connect线程将注册的监听事件发送给Zookeeper，Zookeeper的注册监听器列表将注册的监听事件添加到列表中。 Zookeeper监听到有数据变化或路径变化，就会将消息发送到listener线程。 而listener线程内部则调用process()方法。 通常有这两种监听，分别是监听节点值和子节点</p>
<ul>
<li>get path [watch]:监听节点数据变化</li>
<li>ls path [watch]:监听子节点增减的变化</li>
</ul>
<h2 id="客户端写数据到服务器流程"><a href="#客户端写数据到服务器流程" class="headerlink" title="客户端写数据到服务器流程"></a>客户端写数据到服务器流程</h2><p>下图为客户端请求写数据到服务器流程 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/12/20181229232711.png" alt=""></p>
<ol>
<li>首先Client会请求到某台服务器</li>
<li>如果请求的服务器不是Leader，则刚服务器将吧请求转发给Leader服务器</li>
<li>Leader会发通知各个服务器进行数据写入操作。</li>
<li>各个服务器写入完成后会再通知给Leader。</li>
<li>当Leader收到大多数服务器写成功后，就认为写成功了</li>
<li>Leader会将写入成功的通知发给请求的服务器</li>
<li>由服务器再把结果返回给客户端</li>
</ol>
]]></content>
      <categories>
        <category>Zookeeper</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper客户端的使用</title>
    <url>/2018/12/29/Zoopeeker/zookeeper%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>三台机子都启动完毕，状态都为Leader或Follower后，便可以找一个服务器启动客户端了，看一些客户端的命令。因为是集群所以，某台机器操作，数据是共享的，其他机器都会查到。选一个机器启动客户端程序,bin下的zkCli.sh</p>
<pre><code>bin/zkCli.sh</code></pre><ol>
<li><p>查看帮助命令</p>
<pre><code>[zk: localhost:2181(CONNECTED) 2] help</code></pre></li>
</ol>
<ol start="2">
<li><p>查看znode节点,ls命令</p>
<pre><code>[zk: localhost:2181(CONNECTED) 3] ls /
[chen, zookeeper]
[zk: localhost:2181(CONNECTED) 4] ls /chen
[]</code></pre></li>
</ol>
<ol start="3">
<li><p>查看节点详细信息ls2</p>
<pre><code>[zk: localhost:2181(CONNECTED) 6] ls2 /chen
[]
cZxid = 0x100000002
ctime = Thu Dec 27 00:58:04 CST 2018
mZxid = 0x100000002
mtime = Thu Dec 27 00:58:04 CST 2018
pZxid = 0x100000002
cversion = 0
dataVersion = 0
aclVersion = 0
ephemeralOwner = 0x0
dataLength = 7
numChildren = 0</code></pre></li>
</ol>
<pre><code>**后面的节点信息太多，占用篇幅，节点值还显示，后面的信息我就以xxxxx代替。**</code></pre><ol start="4">
<li><p>创建普通节点create</p>
<pre><code>[zk: localhost:2181(CONNECTED) 7] create /name &quot;this is name&quot;
Created /name
[zk: localhost:2181(CONNECTED) 8] ls /
[chen, name, zookeeper]</code></pre></li>
</ol>
<ol start="5">
<li><p>获得节点值get</p>
<pre><code>[zk: localhost:2181(CONNECTED) 9] get /name
this is name
xxxxxx</code></pre></li>
</ol>
<ol start="6">
<li><p>创建暂时节点,然后推出客户端重新登陆查看</p>
<pre><code>[zk: localhost:2181(CONNECTED) 0] create -e /temp &quot;temp&quot;
Created /temp
[zk: localhost:2181(CONNECTED) 1] ls /
[chen, name, temp, zookeeper]</code></pre></li>
</ol>
<pre><code>[zk: localhost:2181(CONNECTED) 2] quit
Quitting...
2018-12-29 21:12:38,133 [myid:] - INFO  [main-EventThread:ClientCnxn$EventThread@522] - EventThread shut down for session: 0x100000204ad0002
2018-12-29 21:12:38,133 [myid:] - INFO  [main:ZooKeeper@693] - Session: 0x100000204ad0002 closed
ubuntu1@ubuntu1:~/zookeeper/bin$ ./zkCli.sh
Connecting to localhost:2181

[zk: localhost:2181(CONNECTED) 1] ls /
[chen, name, zookeeper]</code></pre><ol start="7">
<li><p>创建带序号节点</p>
<pre><code>[zk: localhost:2181(CONNECTED) 9] create /app &quot;app&quot;
Created /app
[zk: localhost:2181(CONNECTED) 10] create -s /app/sun &quot;sun&quot;
Created /app/sun0000000000
[zk: localhost:2181(CONNECTED) 11] ls /app
[sun0000000000]

[zk: localhost:2181(CONNECTED) 12] create -s /app/sun &quot;sun2&quot;
Created /app/sun0000000001
[zk: localhost:2181(CONNECTED) 13] ls /app
[sun0000000000, sun0000000001]</code></pre></li>
</ol>
<pre><code>创建的节点是带顺序号的，就算创建的节点名称一样，但是被创建时仍然会添加上序号。另外就算创建的第一个sun节点时非顺序的，那么第二个顺序的sun仍然是000001，而不是000000.

    [zk: localhost:2181(CONNECTED) 14] ls /
    [chen, name, app, zookeeper]
    [zk: localhost:2181(CONNECTED) 15] create /sum &quot;sum&quot;
    Created /sum
    [zk: localhost:2181(CONNECTED) 16] create /sum/test &quot;sumtest1&quot;
    Created /sum/test
    [zk: localhost:2181(CONNECTED) 17] create -s /sum/test &quot;sumtest1&quot;
    Created /sum/test0000000001
    [zk: localhost:2181(CONNECTED) 18] ls /sum
    [test0000000001, test]


尽管创建非顺序节点时没有加顺序号，但再创建有序号的节点时依然会算上前面的节点。</code></pre><ol start="8">
<li><p>修改节点数据值set</p>
<pre><code>[zk: localhost:2181(CONNECTED) 19] ls /
[chen, name, app, sum, zookeeper]
[zk: localhost:2181(CONNECTED) 20] get /chen
guangqi
xxxxxx
[zk: localhost:2181(CONNECTED) 21] set /chen &quot;chenguangqi&quot;
xxxxxx
[zk: localhost:2181(CONNECTED) 22] get /chen
chenguangqi
xxxxx</code></pre></li>
</ol>
<ol start="9">
<li><p>节点值的变化监听get path watch</p>
<pre><code>--1号机器
[zk: localhost:2181(CONNECTED) 24] get /chen watch
chenguangqi
xxxx

-- 2号机器
[zk: localhost:2181(CONNECTED) 0] set /chen &quot;chen&quot;
xxxx

[zk: localhost:2181(CONNECTED) 25]
WATCHER::
--1号机器
WatchedEvent state:SyncConnected type:NodeDataChanged path:/chen</code></pre></li>
</ol>
<pre><code>首先在1号机器上设置某个节点的监听，然后在另一个机器上修改它，同时另一个机器的监听就会捕捉到。但监听只起一次作用，当再次更改后，1号机器就不会监听了，也不会有任何监听提示。</code></pre><ol start="10">
<li><p>节点的子节点监听(路径变化)ls path watch</p>
<p>   [zk: localhost:2181(CONNECTED) 25] ls / watch<br>   [chen, name, app, sum, zookeeper]</p>
<p>   [zk: localhost:2181(CONNECTED) 1] create /test “testwatch”<br>   Created /test</p>
<p>   [zk: localhost:2181(CONNECTED) 26]<br>   WATCHER::<br>   WatchedEvent state:SyncConnected type:NodeChildrenChanged path:/</p>
</li>
</ol>
<pre><code>由此看到当添加子节点或删除子节点时就会触发监听。当然，和监听节点值一样，同样监听只会作用一次。</code></pre><ol start="11">
<li><p>删除节点与递归删除节点delete/rmr</p>
<p>   [zk: localhost:2181(CONNECTED) 26] ls /<br>   [chen, name, app, sum, zookeeper, test]<br>   [zk: localhost:2181(CONNECTED) 27] delete /test<br>   [zk: localhost:2181(CONNECTED) 29] ls /<br>   [chen, name, app, sum, zookeeper]<br>   [zk: localhost:2181(CONNECTED) 34] delete /sum<br>   Node not empty: /sum<br>   [zk: localhost:2181(CONNECTED) 35] rmr /sum<br>   [zk: localhost:2181(CONNECTED) 36] ls /<br>   [chen, name, app, zookeeper]</p>
</li>
</ol>
<ol start="12">
<li><p>查看节点状态信息stat</p>
<p>   [zk: localhost:2181(CONNECTED) 39] stat /chen<br>   cZxid = 0x200000021<br>   ctime = Sat Dec 29 21:53:30 CST 2018<br>   mZxid = 0x200000021<br>   mtime = Sat Dec 29 21:53:30 CST 2018<br>   pZxid = 0x200000021<br>   cversion = 0<br>   dataVersion = 0<br>   aclVersion = 0<br>   ephemeralOwner = 0x0<br>   dataLength = 4<br>   numChildren = 0</p>
</li>
</ol>
<pre><code>对于stat的信息分别如下:
*   cZxid:因此这个节点创建的xzid，创建节点的事务的zxid。事务ID是ZooKeeper中所有修改总的次序。每个修改都有唯一的zxid，如果zxid1小于zxid2，那么zxid1在zxid2之前发生。
*   ctime:节点被创建的时间
*   mZxid:节点最后更新zxid
*   mtime:节点最后更新的时间
*   pZxid:最后更新的子节点zxid
*   cversion:子节点变化号，子节点修改次数
*   dataVersion:节点数据变化号
*   aclVersion:节点访问控制列表的变化号
*   ephemeralOwner:如果是临时节点，这个是znode拥有者的session id。如果不是临时节点则是0。
*   dataLength:节点值的长度。(重要)
*   numChildren:子节点数目。(重要)</code></pre><ol start="13">
<li><p>历史命令history,查看之前使用过的命令</p>
<p>   [zk: localhost:2181(CONNECTED) 42] history<br>   32 - rmr /chen<br>   33 - ls /<br>   34 - delete /sum<br>   35 - rmr /sum<br>   36 - ls /<br>   37 - ls /<br>   38 - create /chen “chen”<br>   39 - stat /chen<br>   40 - help<br>   41 - histor<br>   42 - history</p>
</li>
</ol>
<p>还有其他的命令请查看Zookeeper文档。</p>
]]></content>
      <categories>
        <category>Zookeeper</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper分布式搭建及选举机制和节点类型介绍</title>
    <url>/2018/12/29/Zoopeeker/Zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%80%89%E4%B8%BE%E6%9C%BA%E5%88%B6%E5%92%8C%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="Zookeeper分布式搭建"><a href="#Zookeeper分布式搭建" class="headerlink" title="Zookeeper分布式搭建"></a>Zookeeper分布式搭建</h2><ol>
<li><p>到<a href="https://archive.apache.org/dist/zookeeper/">apache zookeeper归档</a>处下载tar包。</p>
</li>
<li><p>将包分别拷贝到各自的user下,使用tar -zxf zookeeper-x.x.x.tar.gz解压。注意解压后的目录需要是当前用户组当前用户。传递tar包时使用当前用户登录ftp远程。</p>
</li>
<li><p>进入到zookeeper目录下的conf目录下，拷贝zoo_sample.cfg重命名为zoo.cfg</p>
<pre><code>cp zoo_sample.cfg zoo.cfg</code></pre></li>
</ol>
<ol start="4">
<li><p>vim或vi命令修改zoo.cfg文件,修改dataDir属性值为zookeeper目录/zkData,这个目录使用来存储数据的。</p>
<pre><code>例如:dataDir=/home/ubuntu1/zookeeper/zkData</code></pre></li>
</ol>
<ol start="5">
<li><p>在对应zookeeper目录下创建zkData目录即可</p>
</li>
<li><p>三台机子都这么做就好。但是目前还没有进行分布式的配置。但单个字节都可以使用bin下的命令</p>
<pre><code>bin/zkServer.sh start //启动
jps //查看jps进程
bin/zkServer.sh satus //状态
bin/zkServer.sh stop //停止</code></pre></li>
</ol>
<ol start="7">
<li><p>集群配置:在每个机子的zoo.cfg中配置如下信息</p>
<pre><code>server.1=192.168.56.11:2888:3888
server.2=192.168.56.11:2888:3888
server.3=192.168.56.11:2888:3888</code></pre></li>
</ol>
<pre><code>这是三台机子的配置。那么其格式为server.A=B:C:D。
*   A是一个数字，表示机器的序号，是唯一的，标识着某台机子，这个值要在myid文件中指定，myid文件要放在zkData目录下。
*   B是服务器地址，可以是IP，也可以是主机名(需要配置host)。
*   C是这个服务器与集群中的Leader服务器交换数据信息的结构。
*   D是万一集群中的Leader服务器挂了，需要一个端口来重新进行选举，选出一个新的Leader，而这个端口就是用来执行选举时服务器相互通信的端口。
*   就把这个拷贝到每个机子的zoo.cfg中，把IP地址改一下，机子序号按顺序不重复即可。</code></pre><ol start="8">
<li><p>在集群模式下的而这个myid文件标识一个机子，Zookeeper启动时读取此文件，拿到里面的数据与zoo.cfg配置信息比较而判断到底是哪个server。那么在zkData下创建myid文件，使用vi或vim命令来编辑</p>
<pre><code>cd zkData
touch myid
vim myid
对应的机子添加1或2或3就好</code></pre></li>
</ol>
<ol start="9">
<li><p>配置完server和myid后，可以依次启动。以下是启动第一台机子</p>
<pre><code>ubuntu1@ubuntu1:~/zookeeper$ **bin/zkServer.sh start**
ZooKeeper JMX enabled by default
Using config: /home/ubuntu1/zookeeper/bin/../conf/zoo.cfg
Starting zookeeper ... STARTED
ubuntu1@ubuntu1:~/zookeeper$ **jps**
7522 Jps
7498 QuorumPeerMain
ubuntu1@ubuntu1:~/zookeeper$ **bin/zkServer.sh status**
ZooKeeper JMX enabled by default
Using config: /home/ubuntu1/zookeeper/bin/../conf/zoo.cfg
Error contacting service. It is probably not running.</code></pre></li>
</ol>
<pre><code>可以看到在查看status状态时，说Error contacting service.It is probably not running.此时并不是错误。在单机时可以正常运行。此处因为集群原因，在选举还没选举完成时，就会启动而不运行。当启动第二台机子时

    ubuntu2@ubuntu2:~/zookeeper$ **bin/zkServer.sh start**
    ZooKeeper JMX enabled by default
    Using config: /home/ubuntu2/zookeeper/bin/../conf/zoo.cfg
    Starting zookeeper ... STARTED
    ubuntu2@ubuntu2:~/zookeeper$ **jps**
    24704 Jps
    24652 QuorumPeerMain
    ubuntu2@ubuntu2:~/zookeeper$ **bin/zkServer.sh status**
    ZooKeeper JMX enabled by default
    Using config: /home/ubuntu2/zookeeper/bin/../conf/zoo.cfg
    Mode: leader


此时，发现Model:leader,这时，选举机制就完毕了，Leader已经选举出来。此时再看机子1的status状态，已经变成Mode:follower。当然这是随机投票的。启动第三台机子时，状态也是mode:follower. OK，这样三台机子都启动起来了。</code></pre><h2 id="Zookeeper选举机制说明"><a href="#Zookeeper选举机制说明" class="headerlink" title="Zookeeper选举机制说明"></a>Zookeeper选举机制说明</h2><p>选举很简单，<strong>每机一票，当某台机子得票数超过总数的一半以上时即可当选leader，必须一半以上</strong>。 机子的id最大则被投票率最高，若1-5台机子都是最新启动的，没有任何历史数据，按顺序进行启动。 服务器1开始启动，只有当前一台机器启动，则处于Looking状态，没有任何选举结果。等待其他机子启动。 服务器2开始启动，互相交换选举结果，由于两者都没有历史数据,所以id大的胜出，但依然不大于总数的一半，所以依然Looking状态 服务器3开始启动，若有三票投给某个机器，则成为Leader，其他机器状态变为follower。 服务器4，5，<strong>虽然id大，但leader已经被选举出来，所以只能作为follower</strong>.</p>
<h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><p>节点时客户端连接服务器的标识，因为实际集群操作，所以在任意一个机器上操作，其他机器都能看到。 节点有两种类型:</p>
<ul>
<li>持久型:客户端和服务器断开连接后，创建的节点不删除</li>
<li>暂时型:客户端和服务器断开连接后，创建的节点被删除</li>
</ul>
<p>节点有四种目录形式的节点:</p>
<ul>
<li>持久化目录节点:客户端断开后这个节点依然存在</li>
<li>持久化顺序编号目录节点:客户端断开后这个节点依然存在，只是<strong>给该节点名称进行顺序编号</strong>。</li>
<li>临时目录节点:客户端点开后节点被删除</li>
<li>临时顺序编号目录节点:客户端断开连接后，节点被删除，只是Zookeeper会给该节点进行顺序编号。</li>
</ul>
<p>顺序号时单调的递增，由父节点进行维护 在分布式系统中，顺序号可以被用于为所有的事件进行全局排序，这样客户端可以通过顺序号推断事件的顺序。 关于节点的创建在下一节说明，会自然的了解节点的持久和暂时型。</p>
]]></content>
      <categories>
        <category>Zookeeper</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>记录工作中某些表的某些字段为空的数量并按行政区形成excel表格</title>
    <url>/2018/12/27/Java/%E8%AE%B0%E5%BD%95%E5%B7%A5%E4%BD%9C%E4%B8%AD%E6%9F%90%E4%BA%9B%E8%A1%A8%E7%9A%84%E6%9F%90%E4%BA%9B%E5%AD%97%E6%AE%B5%E4%B8%BA%E7%A9%BA%E7%9A%84%E6%95%B0%E9%87%8F%E5%B9%B6%E6%8C%89%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%BD%A2%E6%88%90excel%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<p>该统计主要就是，得到每个表里检测空字段的数量，并且是按行政区统计数量。 简单地说就是 这几十张表里每条数据都有可能是任何一个行政区的数据，并且某些字段都有为空的情况，那么要做的统计就是某个表某个字段为空的数量。如下图这样。 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/12/20181227222220.png" alt=""> 当然啊，这个上面的表名是可以换成表名称的。 其实统计是很简单的，只不过要通过POI包，将数据通过POI写到excel里，并且布置布局比较困难。查询还是很简单的。另外这个结果图还没有带excel单元格格式设置。 总体来说查询，就是单个单个的查，一个表对应一个字段，表和字段时一对多，那多个表就是多个一对多。这样一条一条的统计确实是很慢。若表比较多，要检查的字段也很多。有多少个检查字段，就要查多少次。 这个单个字段检测空的统计，就是到指定表里查询为空的数据，然后group分组一下，再右关联行政区划字段表(右表全部)。这样所有的行政区都会有，设置行政区为空的，也就是没匹配上的使用NVL化空位0. 当然这个统计需要按顺序的，不管行政区排序，还是表排序。其实这样做可以避免一些出错，或某些应用统计需要这样做。因为排好序的话，字段列多，可以使用到线程帮忙。一般而言，每个字段查询的数据越多、字段越多，那么数据量就越大。耗时越高。 总体的程序步骤是这样的:</p>
<ol>
<li><p>一个表对应一个字段，这样形成一张表，可以依次通过表名和字段名到统计里查，这两个值作为参数</p>
</li>
<li><p>因为每个字段是一列数据，所以每个字段作为一个linkedList，然后在用一个LinkedList在外面包起来。其中这数据再查询时必须要以行政区排序，纵轴行政区也是要排序的，一一对应。</p>
</li>
<li><p>这样这个数据就是外层list为每个列数据，内层nlist的每个值是每行的数据，这样嵌套循环时，就是<strong>list.get(j).get(i)了</strong>，表示的就是:POI先创建整行row，再创建单个cell，j为内层循环表示某个列，也就是该行的单元格，依次用j循环，就是循环所有列集合的第i个元素，也就是第i行的数据。看下代码吧。</p>
<pre><code>for (int i = 0; i &amp;lt; rowNum; i++)&#123;
        row = sheet.getRow(i+2);//第i行,行已经在设置行政区时创建

        //创建列，一共有属性集合数量个列
        for(int j = 0; j &amp;lt; linkedList.size(); j++)&#123;
            cell = row.createCell(j+2);//每行有多少列，是依据列的数量的,所以是j
            CheckNullField checkNullField = list.get(j);//获得当前的为空属性对象

            //当出现行号i大于等于最大行号时，后面的设置值就会超出索引。也就是说任意一列的某一行，这个行超出了内部集合区县的数量。

            //System.out.println(&amp;quot;第&amp;quot; + i + &amp;quot;行第&amp;quot; + j + &amp;quot;列的值为:&amp;quot; + linkedList.get(j).get(checkNullField.getTableName()+&amp;quot;,&amp;quot;+checkNullField.getField()).get(i).toString());
            Long value = linkedList.get(j).get(checkNullField.getTableName()+&amp;quot;,&amp;quot;+checkNullField.getField()).get(i);
            if(value!=0)&#123;
                cell.setCellStyle(cellStyle);
            &#125;
            cell.setCellValue(value.toString());
        &#125;
    &#125;</code></pre></li>
</ol>
<ol start="4">
<li><p>里面有多余的注释，是循环时可能出现的问题。不过被删了。暂时先不考虑，等错了再加上去。i+2和j+2表示从第三行开始也就是索引为2的开始，因为设置布局时已经被站了两行两列。这里的getRow()是为什么geRow而不是createRow，因为在布局行政区两列时已经把所有行都创建了，所以这里只有createCell。</p>
</li>
<li><p>当然应该先配置两行两列的布局,先配置列，行政区。这里的方法就是，循环所有区县，当他们的上级一样时就添加endRow，不一样时就合并上一个单元格。看代码比较好一点吧。</p>
<pre><code>sheet.createRow(0);
    sheet.createRow(1);
    //设置&amp;quot;地州&amp;quot;合并单元格
    CellRangeAddress cellRangeAddress = new CellRangeAddress(0,1,0,0);
    sheet.addMergedRegion(cellRangeAddress);
    sheet.getRow(0).createCell(0).setCellValue(&amp;quot;地州&amp;quot;);
    //设置&amp;quot;市县&amp;quot;合并单元格
    cellRangeAddress = new CellRangeAddress(0,1,1,1);
    sheet.addMergedRegion(cellRangeAddress);
    sheet.getRow(0).createCell(1).setCellValue(&amp;quot;区县&amp;quot;);
    //合并单元格之后，此时行和列都在第2
    //######################################以下为列循环###########################################################
    //循环区县列表
    int beginrow = 2;
    int endrow = 2;
    String twoXzqh = xzqhList.get(0).getDm().toString().substring(0,4)+&amp;quot;00&amp;quot;;//二级行政区判断
    for (int i = 0; i&amp;lt; xzqhList.size(); i++)&#123;

        XSSFRow row = sheet.createRow(i+2);//创建第三行
        if (i==104)&#123;
            cellRangeAddress = new CellRangeAddress(beginrow,endrow,0,0);//合并第一列单元格，改行值不改列值
            sheet.addMergedRegion(cellRangeAddress);
            sheet.getRow(cellRangeAddress.getFirstRow()).createCell(0).setCellValue(twoMap.get(twoXzqh));
            row.createCell(1).setCellValue(xzqhList.get(i).getMc());
        &#125;
        if((xzqhList.get(i).getDm().toString().substring(0,4)+&amp;quot;00&amp;quot;).equals(twoXzqh))&#123;//判断当前三级代码替换为二级后是否与判断的相同，相同则为一个地州
            twoXzqh = xzqhList.get(i).getDm().toString().substring(0,4)+&amp;quot;00&amp;quot;;
            endrow=endrow+1;
            row.createCell(1).setCellValue(xzqhList.get(i).getMc());
        &#125;else&#123;//不等于,说明已经换一个地州的区县了
            //合并单元格，设置单元格值
            cellRangeAddress = new CellRangeAddress(beginrow,endrow-1,0,0);//合并第一列单元格，改行值不改列值
            sheet.addMergedRegion(cellRangeAddress);
            //修改开始结束row,将结束设置为开始
            beginrow = endrow;
            //在更改临时二级行政变量之前，设置值

            sheet.getRow(cellRangeAddress.getFirstRow()).createCell(0).setCellValue(twoMap.get(twoXzqh));
            //尽管变了二级行政，但依然要设置
            twoXzqh = xzqhList.get(i).getDm().toString().substring(0,4)+&amp;quot;00&amp;quot;;
            endrow=endrow+1;
            row.createCell(1).setCellValue(xzqhList.get(i).getMc());
        &#125;
    &#125;</code></pre></li>
</ol>
<ol start="6">
<li><p>其中beginRow和endRow就是合并单元格时候的开始行和结束行，那么就通过这两和值，将相同的区县时，把endRow累加，不相同时，就换二级行政区了，需要合并上个单元格并设置值，然后设置当前行当前单元格的值。其中需要注意beginRow和endRow的关系，比如合并单元格时endrow-1，因为是以0为索引，所以要合并上一个单元格需要-1，这个需要通过尝试再调试，刚开始的时候不容易找到这个表达式。还有endrow=enrow+1是当前这个行，增的第一行，所以需要加1。而中间的benginrow=endrow表示合并完毕，就把结尾值为开始值，重新增长合并。</p>
</li>
<li><p>然后是设置两行:与设置列是一样的，对应相反，行已经创建了，只需要创建每个单元格</p>
<pre><code>public static void createRowHeader(XSSFWorkbook workbook, XSSFSheet sheet,List list)&#123;
    //前两行row在创建行政区时已经创建过了，直接getRow第一行第二行就好
    XSSFRow row1 = sheet.getRow(0);
    XSSFRow row2 = sheet.getRow(1);
    CellRangeAddress cellRangeAddress = null;
    int beginCell = 2;
    int endCell = 2;

    String tableName = list.get(0).getTableName() ;//第一个表名
    for(int i =0; i &amp;lt; list.size(); i++)&#123;

        row1.createCell(i+2);
        row2.createCell(i+2);

        if(i==list.size()-1)&#123;
            cellRangeAddress = new CellRangeAddress(0, 0, beginCell, endCell);
            sheet.addMergedRegion(cellRangeAddress);
            row1.getCell(cellRangeAddress.getFirstColumn()).setCellValue(tableName);//设置合并单元格值

            row2.getCell(i+2).setCellValue(list.get(i).getFieldmc()+&amp;quot;&amp;quot;+list.get(i).getField());
        &#125;

        if(list.get(i).getTableName().equals(tableName))&#123;
            tableName = list.get(i).getTableName();
            endCell += 1;
            row2.getCell(i+2).setCellValue(list.get(i).getFieldmc()+&amp;quot;&amp;quot;+list.get(i).getField());
        &#125;else&#123;
            //###设置之前单元格合并
            if(beginCell+1!=endCell) &#123;//不是单独单元格的进行合并
                cellRangeAddress = new CellRangeAddress(0, 0, beginCell, endCell - 1);
                sheet.addMergedRegion(cellRangeAddress);
                row1.getCell(cellRangeAddress.getFirstColumn()).setCellValue(tableName);//设置合并单元格值
            &#125;else&#123;
                row1.getCell(i-1 +2).setCellValue(tableName);//设置上一个单元格，因为没有合并单元格，所以在新表之前设置上个单元格值
            &#125;
            //##设置当前第二行单元格值
            beginCell = endCell;
            tableName = list.get(i).getTableName();
            endCell = endCell+1;
            row2.getCell(i+2).setCellValue(list.get(i).getFieldmc()+&amp;quot;&amp;quot;+list.get(i).getField());//添加当前新tablename的row2
        &#125;
    &#125;
&#125;</code></pre></li>
</ol>
<ol start="8">
<li><p>这里，在外部循环时，创建Cell，内部是要getCell，不能再创建了，否则获得不到值。而else中的那个判断表示的是当一个表只有一个字段要检查时，合并的话不能C1:C1,所以要设置这个判断条件。</p>
</li>
<li><p>最后结果就是，先配置行政区，后配置字段行，最后配置数据列，这个数据列要依据被占的行和列对应添加数。</p>
</li>
</ol>
<p>然后说一下表名和字段名作为参数的这个查询。我在之前想和好久，又是视图又是存储过程的。用视图和存储过程的话需要创建好多结果表，然后很难表连接，连一块。而且表名和字段是特殊字，有些地方不能直接使用。最后用hql来解决，jpa的entityManager的createNativeQuery,创建一个本地查询，可以直接将拼接字符串作为hql进行查询，后面尽量加上查询结果类型Class。因为jpa尽管方便的原因是有很多规则，包括必须的持久化类，还要添加注解，标识列.</p>
<pre><code>public HashMap&lt;String, LinkedList&lt;Long&gt;&gt; get(String table,String field,String startDate,String endDate) &#123;
        HashMap&lt;String, LinkedList&lt;Long&gt;&gt; map = new HashMap&lt;&gt;();//map集合存储表字段名，和数量集合
        LinkedList&lt;Long&gt; list = new LinkedList&lt;&gt;();
        //这些表不统计,仍需要确定表和字段，然后添加到linkedList中
        //todo 更改
        if(noCheck.contains(table)
                || (table.equals(&quot;QLF_FW_FDCQ_DZ_XM&quot;)&amp;&amp;field.equals(&quot;QLLX&quot;)))&#123;
            for (int i=0 ; i&lt;105; i++)&#123;
                list.add(0L);
            &#125;
            map.put(table + &quot;,&quot; + field,list);
            return map;
        &#125;
        //创建sql语句
        String sql = &quot;with\n&quot; +
                &quot;v0 as (\n&quot; +
                &quot;select qxdm from baowen.&quot; + table + &quot; \n&quot; +
                &quot;where (&quot; + field + &quot; is null or rtrim(ltrim(&quot;+ field +&quot;)) = &apos;&apos;) \n&quot; +
                &quot;and (qxdm is not null or qxdm!=&apos;&apos;) \n&quot; +
                &quot;and bizmsgid in (select bizmsgid from baowen.bizmsg where trunc(receivedate) between to_date(&apos;&quot; + startDate + &quot;&apos;,&apos;yyyy-mm-dd&apos;) and to_date(&apos;&quot; + endDate + &quot;&apos;,&apos;yyyy-mm-dd&apos;))\n&quot; +
                &quot;),v1 as (\n&quot; +
                &quot;select qxdm,count(qxdm) count from v0 group by qxdm\n&quot; +
                &quot;)select nvl(count,0) count from baowen.dict_xzqh a left join v1 on a.dm=v1.qxdm where a.dj=3 order by a.dm asc&quot;;
        Query query = entityManager.createNativeQuery(sql);
        //获得结果，将结果循序添加到LinkedList
        List nlist = query.getResultList();
        for (int i =0; i&lt;nlist.size();i++)&#123;
            list.add(i,Long.valueOf(nlist.get(i).toString()));
        &#125;
        map.put(table+&quot;,&quot;+field,list);
        return map;
    &#125;</code></pre><p>一般简单查询的话就使用hql使用entityManager的createQuery，使用hql语法查询，若查询语句复杂的使用createNativeQuery这个本地查询。 另外我为什么使用entityManager，因为继承JpaRepository的话，使用注解，不能用表名字段当参数，可能是没找到方法吧。而你要整合entityManager的话，这俩不太可能，因为这样会实现你的自定义接口，然后就的实现JpaRepsitory方法，所以只能一个用接口，一个用Dao实现类，并且不能实现。 <a href="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/12/demo.7z">源码包demo</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>Oracle VirtualBox虚拟机复制，更改用户信息</title>
    <url>/2018/12/26/Oracle/Oracle%20VirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%A4%8D%E5%88%B6%EF%BC%8C%E6%9B%B4%E6%94%B9%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>若可以更改静态IP，则先更改静态IP,以便宿主机和虚拟机可以即时通信,相关文档再本站查找ubuntu分类目录下。如果不太懂看本章结尾</p>
<ol>
<li><p>先关闭已经创建配置好的虚拟机，右击复制，默认勾选重新配置网卡选项,然后选择完全复制 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/12/20181226000703.png" alt="图片"> <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/12/20181226000815.png" alt=""></p>
</li>
<li><p>启动虚拟机，目前，用户密码任何东西与被复制的那个是一模一样的，除了刚刚设置的虚拟机名称。本案例呢，是吧ubuntu1复制一份为ubuntu3，用户名与密码一样。</p>
</li>
<li><p>首先更改主机名hostname文件，名字更改为ubuntu3</p>
<pre><code>sudo vim /etc/hostname</code></pre></li>
</ol>
<ol start="4">
<li><p>然后更改host文件，设置本机ip对应的主机名,和若需要配置静态IP的IP地址</p>
<pre><code>vim /etc/hosts</code></pre></li>
</ol>
<pre><code>![](http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/12/20181226001339.png)</code></pre><ol start="5">
<li><p>修改shadow文件,拉到最下边，找到原来的用户名，进行修改</p>
<pre><code>sudo vim /etc/shadow</code></pre></li>
</ol>
<pre><code>![](http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/12/20181226001827.png)</code></pre><ol start="6">
<li><p>修改home下当前用户目录名称</p>
<pre><code>sudo mv ubuntu1 ubuntu3</code></pre></li>
</ol>
<ol start="7">
<li><p>修改passwd文件,注意画圈的，一定要改成一样的，与你hosts中一致，一定要都改，否则你根本就登陆不上，不要忘了</p>
<pre><code>sudo vim /etc/passwd</code></pre></li>
</ol>
<pre><code>![](http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/12/20181226010202.png)</code></pre><ol start="8">
<li><p>修改组group文件,依然是找到之前的用户名改为当前用户名</p>
<pre><code>sudo vim /etc/group</code></pre></li>
</ol>
<ol start="9">
<li><p>更改当前用户密码,此时这里应该是ubuntu3，新用户名称，因为主机名用户名已经被更改了。</p>
<pre><code>sudo passwd ubuntu3</code></pre></li>
</ol>
<pre><code>此时你应该无法更改，提示ubuntu3 is not in the sudoers file. This incident will be reported。此时应擦做root用户更改sudoers文件

    su root
    vim /etc/sudoers
    #添加下面图片对应的ubuntu3
    ubuntu3 ALL=(ALL:ALL) ALL


![](http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/12/20181226001623.png)</code></pre><h2 id="虚拟机互通静态IP配置，文章说明"><a href="#虚拟机互通静态IP配置，文章说明" class="headerlink" title="虚拟机互通静态IP配置，文章说明"></a>虚拟机互通静态IP配置，文章说明</h2><p>根据<a href="http://www.fsats.com/2018/09/18/294/文章可以简单说明。">http://www.fsats.com/2018/09/18/294/文章可以简单说明。</a></p>
<ol>
<li>在默认安装VirtualBox之后，会默认提示你让你安装一个虚拟网段的网络适配器 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/12/20181226012219.png" alt=""></li>
<li>如果你的网络和共享中心，适配器设置中没有这个VirtualBox的这个适配器，则你打开这个软件.点管理-主机网络管理器，如果列表没有就新建一个，下面那个手动配置网卡选中，IP4xxx.xxx.xxx.1就是网关，HDCP起不起用都可以，可以关了。</li>
<li>创建了网络管理适配后，就有了网段，这个网段可以跟你本机的局域网ping通的，可以尝试一下。这样有了两个网卡。一个是这个创建的适配的Only-Host用于虚拟机之间互通，另一个就是网络NAT方式</li>
<li>配置虚拟机网络是，第一张网卡是网络NAT，第一张网卡就选创建的那个，为仅主机模式</li>
<li>进入Ubuntu后，一个是网卡03，一个是网卡08，一般第一个03的是连接宿主的，08的是创建的仅主机模式的。所以，第一张网卡IP4，IP6都自动获取，所以这个网卡的IP是10.xx.xx.xx的，但可以通过宿主机的网络访问外网。第二张网卡选择手动配置IP4，配置创建的网络适配器的网关，随意取一个地址，子网掩码依旧是255，DNS配置为114.114.114.114,别的也可以，IP6可以禁了，若有需要的话就不禁了。</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle物化视图使用相关查询</title>
    <url>/2018/12/13/Oracle/Oracle%E7%89%A9%E5%8C%96%E8%A7%86%E5%9B%BE%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h2 id="Oracle物化视图使用相关查询"><a href="#Oracle物化视图使用相关查询" class="headerlink" title="Oracle物化视图使用相关查询"></a>Oracle物化视图使用相关查询</h2><h3 id="查询当前用户所有物化视图"><a href="#查询当前用户所有物化视图" class="headerlink" title="查询当前用户所有物化视图"></a>查询当前用户所有物化视图</h3><pre><code>select * from user_mviews;</code></pre><h3 id="查询物化视图创建语句及更新时间、更新方式、是否失效"><a href="#查询物化视图创建语句及更新时间、更新方式、是否失效" class="headerlink" title="查询物化视图创建语句及更新时间、更新方式、是否失效"></a>查询物化视图创建语句及更新时间、更新方式、是否失效</h3><pre><code>SELECT OWNER            , --所有者账户
           MVIEW_NAME       , --名称
           LAST_REFRESH_DATE, --上次更新时间
           REFRESH_METHOD   , --更新方式
           INVALID          , --是否失效
           QUERY              --查询语句
      FROM USER_MVIEW_ANALYSIS 
  ORDER BY LAST_REFRESH_DATE DESC;</code></pre><h3 id="3-查询物化视图所有列名及列注释"><a href="#3-查询物化视图所有列名及列注释" class="headerlink" title="3. 查询物化视图所有列名及列注释"></a>3. 查询物化视图所有列名及列注释</h3><pre><code>SELECT a.OWNER        , --所有者账户
            a.MVIEW_NAME   , --名称
            b.COLUMN_NAME  , --列名称
            b.COMMENTS       --列注释
       FROM USER_MVIEW_ANALYSIS a
 INNER JOIN USER_COL_COMMENTS b
ON a.MVIEW_NAME = b.TABLE_NAME;</code></pre><h3 id="查询所有物化视图使用的基表"><a href="#查询所有物化视图使用的基表" class="headerlink" title="查询所有物化视图使用的基表"></a>查询所有物化视图使用的基表</h3><pre><code>SELECT DISTINCT 
               A.OWNER,          --所有者账户
               A.MVIEW_NAME     ,--物化视图名称
               B.COMMENTS       ,--视图注释
               A.DETAILOBJ_OWNER,--基表所有者账号
               A.DETAILOBJ_NAME  --基表名称
          FROM USER_MVIEW_DETAIL_RELATIONS A
    INNER JOIN USER_MVIEW_COMMENTS B ON A.MVIEW_NAME = B.MVIEW_NAME
         WHERE DETAILOBJ_NAME NOT LIKE &apos;BIN%&apos;;</code></pre><h3 id="物化视图或普通视图使用哪些基表，被那个存储过程引用"><a href="#物化视图或普通视图使用哪些基表，被那个存储过程引用" class="headerlink" title="物化视图或普通视图使用哪些基表，被那个存储过程引用"></a>物化视图或普通视图使用哪些基表，被那个存储过程引用</h3><pre><code>WITH CTE AS (
    SELECT DISTINCT 
           A.OWNER,               -- 所有者账户
           A.MVIEW_NAME         , -- 物化视图名称
           A.DETAILOBJ_OWNER    , -- 被引用表账号
           A.DETAILOBJ_NAME       -- 被引用表名称
      FROM USER_MVIEW_DETAIL_RELATIONS A
     WHERE A.DETAILOBJ_NAME NOT LIKE &apos;BIN%&apos;
 UNION ALL
    SELECT &apos;&apos; AS OWNER,
           NAME AS MVIEW_NAME,
           REFERENCED_OWNER AS DETAILOBJ_OWNER,
           REFERENCED_NAME AS DETAILOBJ_NAME
      FROM USER_DEPENDENCIES 
     WHERE TYPE =&apos;VIEW&apos;
)
    SELECT A.OWNER            ,-- 视图所有者账户
           A.MVIEW_NAME AS MV ,-- 视图名称
           A.DETAILOBJ_OWNER  ,-- 基表所有者账户
           A.DETAILOBJ_NAME   ,-- 基表/视图
           NVL(B.NAME,&apos;-&apos;) AS PROC_NAME -- 存储过程名称
      FROM CTE A
 LEFT JOIN (SELECT DISTINCT NAME,REFERENCED_NAME 
              FROM USER_DEPENDENCIES B 
             WHERE B.TYPE = &apos;PROCEDURE&apos; 
            ) B ON A.MVIEW_NAME = B.REFERENCED_NAME
  ORDER BY A.MVIEW_NAME,A.DETAILOBJ_NAME,B.NAME;</code></pre><h3 id="查询物化视图刷新信息"><a href="#查询物化视图刷新信息" class="headerlink" title="查询物化视图刷新信息"></a>查询物化视图刷新信息</h3><pre><code>SELECT MVIEW_NAME,--物化视图名称
       REFRESH_MODE,--刷新方式
       REFRESH_METHOD,--刷新类型
       FAST_REFRESHABLE,--是否可刷新
       LAST_REFRESH_TYPE,--最近一次刷新类型
       LAST_REFRESH_DATE,--最近一次刷新时间
       STALENESS --数据是否过时
  FROM USER_MVIEWS 
 ORDER BY LAST_REFRESH_DATE DESC;</code></pre><h3 id="物化视图最后一次刷新信息"><a href="#物化视图最后一次刷新信息" class="headerlink" title="物化视图最后一次刷新信息"></a>物化视图最后一次刷新信息</h3><pre><code>SELECT MVIEW_NAME,  --物化视图名称
        LAST_REFRESH_DATE &quot;START_TIME&quot;, --刷新开始时间
        CASE WHEN FULLREFRESHTIM &lt;&gt; 0 
             THEN LAST_REFRESH_DATE + FULLREFRESHTIM/60/60/24
             WHEN INCREFRESHTIM &lt;&gt; 0 
             THEN LAST_REFRESH_DATE + INCREFRESHTIM/60/60/24
             ELSE LAST_REFRESH_DATE
        END &quot;END_TIME&quot;, --刷新结束时间
        FULLREFRESHTIM, --全量刷新耗时
        INCREFRESHTIM , --增量刷新耗时
        REFRESH_METHOD, --最近一次刷新方式
        SUMMARY       , --是否含有聚合查询
        INC_REFRESHABLE,--是否支持增量刷新
        INVALID       , --是否失效
        REWRITE_ENABLED --是否支持查询重写
   FROM ALL_MVIEW_ANALYSIS
   WHERE OWNER=&apos;BDCCXTJ&apos;
ORDER BY LAST_REFRESH_DATE DESC;</code></pre>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>关于使用Editor.md的一些问题，尤其是方法的调用</title>
    <url>/2018/12/02/Javascript/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Editor.md%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%EF%BC%8C%E5%B0%A4%E5%85%B6%E6%98%AF%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h2 id="关于使用Editor-md的一些问题"><a href="#关于使用Editor-md的一些问题" class="headerlink" title="关于使用Editor.md的一些问题"></a>关于使用Editor.md的一些问题</h2><h3 id="testEditor无法调用该编译器的previewing-方法"><a href="#testEditor无法调用该编译器的previewing-方法" class="headerlink" title="testEditor无法调用该编译器的previewing()方法"></a>testEditor无法调用该编译器的previewing()方法</h3><p>我想用以下方法来预览全部和取消预览全部，所以需要watch属性和previewing方法，试了好多次，都说没有toggle方法或什么的，然后我就取editormd.js去看，发现调用这个方法需要好多对象支持，尤其是codeMirror,但是我看页面，这写js都已经在lib包里导入了。而且使用testEditor打印为undefined。只有在onload里使用this才能调用所有方法。 然后下载源码看，拷贝了老半天，才发现，需要使用方法调用才能使用testEditor执行方法，于是试了试，发现可以，然后就把没用的删了，把height改为autoHeight，因为这样更美观。之后再试，不行。 弄着弄着发现黑主题能显示出来，default主题出不来，于是又试，发现能出来，最后又改了改，又不行了。 最后后，一一的排查，发现是autoHeight搞得，一使用这个属性，就不能preview预览。于是只能改为height才行。 最终的问题，一个是需要使用function方法或事件来调用方法，另一个是autoHeight的坑爹之处。</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中启动项目报错URL没有设置属性</title>
    <url>/2018/11/30/SpringBoot/SpringBoot%E4%B8%AD%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99URL%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AE%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="SpringBoot中启动项目报错URL失败"><a href="#SpringBoot中启动项目报错URL失败" class="headerlink" title="SpringBoot中启动项目报错URL失败"></a>SpringBoot中启动项目报错URL失败</h1><p>Failed to configure a DataSource: ‘url’ attribute is not specified and no embedded datasource could be configured. Reason: Failed to determine a suitable driver class 通常这个情况是首次接触SpringbBoot时，犯的错误。</p>
<ul>
<li>一般网上说没有配置spring.database.url配置</li>
<li>或者使用注解去除DataSource的Bean</li>
<li>或者是url错误</li>
</ul>
<p>但是如果你url配置了，而且是正确的。 那么很可能是加了这个</p>
<pre><code>&lt;resources&gt;
    &lt;resource&gt;
        &lt;directory&gt;src/main/java&lt;/directory&gt;
        &lt;includes&gt;
            &lt;include&gt;**/*.properties&lt;/include&gt;
            &lt;include&gt;**/*.xml&lt;/include&gt;
        &lt;/includes&gt;
        &lt;filtering&gt;false&lt;/filtering&gt;
    &lt;/resource&gt;
    &lt;resource&gt;
        &lt;directory&gt;src/main/resources&lt;/directory&gt;
        &lt;includes&gt;
            &lt;include&gt;**/*.properties&lt;/include&gt;
            &lt;include&gt;**/*.xml&lt;/include&gt;
        &lt;/includes&gt;
        &lt;filtering&gt;false&lt;/filtering&gt;
    &lt;/resource&gt;
&lt;/resources&gt;</code></pre><p>这串代码放在maven的pom.xml的build标签里。一般在SpringMVC中用于properties,xml文件在resources目录中，放置这个标签，就可以在编译的时候读到resources里的这两种文件，不然无法读到，所以就需要加这个代码。 但SpringBoot中使用yml或properties，不需要这个配置，如果需要编写properties，可以通过yml里的属性配置，然后classpath:/xxx.properties。 所以，去掉这个代码，就完全OK了。 这只是一种情况，还有其他各种各样的情况。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring集成Quartz定时任务</title>
    <url>/2018/11/27/%E4%B8%AD%E9%97%B4%E4%BB%B6/Spring%E9%9B%86%E6%88%90Quartz%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="Spring集成Quartz定时任务"><a href="#Spring集成Quartz定时任务" class="headerlink" title="Spring集成Quartz定时任务"></a>Spring集成Quartz定时任务</h1><p>Spring集成Quartz可以使用直接在spring中配置的，也可以将任务放在database中，通过数据库中的而数据来读取。 那么，简单一点的定时任务，一个两个，不经常改动，需求不多的，可以直接配置spring的XML中。</p>
<h3 id="直接在Spring-Bean配置文件中配置定时任务-它会随项目的启动自动启动工作任务"><a href="#直接在Spring-Bean配置文件中配置定时任务-它会随项目的启动自动启动工作任务" class="headerlink" title="直接在Spring Bean配置文件中配置定时任务,它会随项目的启动自动启动工作任务"></a>直接在Spring Bean配置文件中配置定时任务,它会随项目的启动自动启动工作任务</h3><p>先添加Maven依赖</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
    &lt;artifactId&gt;quartz&lt;/artifactId&gt;
    &lt;version&gt;2.3.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
    &lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt;
    &lt;version&gt;2.3.0&lt;/version&gt;
&lt;/dependency&gt;</code></pre><ol>
<li><p>首先定义一个工作任务类，我们需要定义一个工作类实现org.quartz.Job接口,并实现execute方法。</p>
<p>public class TestJob implements Job {</p>
<pre><code>@Override
public void execute(JobExecutionContext context) throws JobExecutionException &#123;
    System.out.println(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date()));
&#125;</code></pre><p>}</p>
</li>
</ol>
<ol start="2">
<li><p>Spring Bean配置，完成后启动，它就会自动执行TestJob类的execute方法</p>
<!--jobDetail配置-->
<bean id="jobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    <property name="name" value="test1"/>
    <property name="group" value="group1"/>
    <property name="jobClass" value="com.fsats.axis.scheduler.TestJob"/>
</bean>

<!--Cron表达式触发器-->
<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    <property name="cronExpression" value="0/5 * * * * ?"/>
    <property name="jobDetail" ref="jobDetail"/>
</bean>

<!--配置调度工厂-->
<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    <property name="triggers">
        <list>
            <ref bean="cronTrigger"/>
        </list>
    </property>
</bean>


</li>
</ol>
<p><strong>另外还有一种更简单的方式，也是无敌的。需要添加task命名空间，ref引用的类需要注入到spring bean中，设置要执行的方法，以及cron表达式。</strong></p>
<pre><code>&lt;task:scheduled-tasks&gt;
    &lt;task:scheduled ref=&quot;newJob&quot; method=&quot;execute&quot; cron=&quot;0/5 * * * * ?&quot;/&gt;
&lt;/task:scheduled-tasks&gt;</code></pre><h3 id="通过数据库存储工作任务"><a href="#通过数据库存储工作任务" class="headerlink" title="通过数据库存储工作任务"></a>通过数据库存储工作任务</h3><ol>
<li><p>先添加数据库配置的表，在官网的最新版tar.gz包里有关于所有数据库的建表语句<a href="http://www.quartz-scheduler.org/downloads/">下载地址</a> 路径在/docs/dbTables下,只<strong>需要将他建到数据库当中</strong>。这个建表所在的包版本建议跟依赖的版本一致，万一有什么改动呢。尤其是1.x和2.x绝对不能混用。</p>
</li>
<li><p>数据库存储定时任务，只需要添加properties配置文件，并为SchedulerFactoryBean配置dataSource属性，autoStartup属性，configLocation属性。</p>
</li>
</ol>
<pre><code>&lt;bean id=&quot;schedulerFactoryBean&quot; class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
    &lt;property name=&quot;autoStartup&quot; value=&quot;true&quot;/&gt;
    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:quartz.properties&quot;/&gt;
&lt;/bean&gt;</code></pre><p>属性配置文件如下:</p>
<pre><code># Default Properties file for use by StdSchedulerFactory
# to create a Quartz Scheduler Instance, if a different
# properties file is not explicitly specified.
#
#============================================================================
# Configure Main Scheduler Properties
#============================================================================
org.quartz.scheduler.instanceName = DefaultQuartzScheduler
org.quartz.scheduler.rmi.export = false
org.quartz.scheduler.rmi.proxy = false
org.quartz.scheduler.wrapJobExecutionInUserTransaction = false
#============================================================================
# Configure ThreadPool
#============================================================================
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 10
org.quartz.threadPool.threadPriority = 5
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true
#============================================================================
# Configure JobStore
#============================================================================
#org.quartz.scheduler.classLoadHelper.class=org.quartz.simpl.CascadingClassLoadHelper
org.quartz.jobStore.misfireThreshold = 60000
org.quartz.jobStore.useProperties = true
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#havent cluster spring
#org.quartz.jobStore.dataSource = myDS
org.quartz.jobStore.tablePrefix = qrtz_
org.quartz.jobStore.isClustered = false  
org.quartz.jobStore.maxMisfiresToHandleAtATime=1
#==============================================================
#Non-Managed Configure Datasource  if you don&apos;t use spring cluster
#==============================================================
#org.quartz.dataSource.myDS.driver = com.mysql.jdbc.Driver
#org.quartz.dataSource.myDS.URL = jdbc\:mysql\://localhost\:3306/qrtz
#org.quartz.dataSource.myDS.user = root
#org.quartz.dataSource.myDS.password = root
#org.quartz.dataSource.myDS.maxConnections =10</code></pre><p>数据库连接这个已经注释了，不需要，因为你可以直接通过dataSource引用。 完成这些之后，启动项目，添加一个定时任务。</p>
<pre><code>@Component
public class QuartzManager &#123;

    @Autowired
    private Scheduler scheduler;

    public void addJob() &#123;
        try &#123;
            //构建一个名称为test1的工作，组为group1
            JobDetail detail = JobBuilder.newJob(TestJob.class).withIdentity(&quot;test1&quot;, &quot;group1&quot;).build();
            //表达式调度构建器
            CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(&quot;*/5 * * * * ?&quot;);
            //按cronExcepress构建CronTrigger
            CronTrigger trigger = TriggerBuilder.newTrigger().withIdentity(&quot;test1&quot;, &quot;group1&quot;).withSchedule(scheduleBuilder).build();
            scheduler.scheduleJob(detail, trigger);
            JobKey key = new JobKey(&quot;test1&quot;, &quot;group1&quot;);
            if (scheduler.isShutdown()) &#123;
                scheduler.start();
            &#125;
        &#125; catch (SchedulerException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;
&#125;</code></pre><p>这里，我没有使用参数，传递，直接将任务类写成了TestJob.class，你可以创建一个实体类，来存储JobDetail，Trigger，和name，group这些属性信息。这个方法是在一个专门的管理类里，要添加的话，需要通过页面调用这个方法。若添加成功可到数据库中看JobDetail等信息。 待关闭项目，重新开启项目后，任务自动进行调度。</p>
<h3 id="scheduler对象可调用的一些方法"><a href="#scheduler对象可调用的一些方法" class="headerlink" title="scheduler对象可调用的一些方法"></a>scheduler对象可调用的一些方法</h3><pre><code>@Component
public class QuartzManager &#123;

    @Autowired
    private Scheduler scheduler;

    public void addJob() &#123;
        try &#123;
            //构建一个名称为test1的工作，组为group1
            JobDetail detail = JobBuilder.newJob(TestJob.class).withIdentity(&quot;test1&quot;, &quot;group1&quot;).build();
            //表达式调度构建器
            CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(&quot;*/5 * * * * ?&quot;);
            //按cronExcepress构建CronTrigger
            CronTrigger trigger = TriggerBuilder.newTrigger().withIdentity(&quot;test1&quot;, &quot;group1&quot;).withSchedule(scheduleBuilder).build();
            scheduler.scheduleJob(detail, trigger);
            JobKey key = new JobKey(&quot;test1&quot;, &quot;group1&quot;);
            if (scheduler.isShutdown()) &#123;
                scheduler.start();
            &#125;
        &#125; catch (SchedulerException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;

    /**
     * 暂停任务
     */
    public void pauseJob() &#123;
        try &#123;
            JobKey jobKey = new JobKey(&quot;test1&quot;, &quot;group1&quot;);
            scheduler.pauseJob(jobKey);
            if (scheduler.isShutdown()) &#123;
                scheduler.start();
            &#125;
        &#125; catch (SchedulerException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;

    /**
     * 恢复任务
     */
    public void resumeJob() &#123;
        try &#123;
            JobKey jobKey = new JobKey(&quot;test1&quot;, &quot;group1&quot;);
            scheduler.resumeJob(jobKey);
            if (scheduler.isShutdown()) &#123;
                scheduler.start();
            &#125;
        &#125; catch (SchedulerException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;

    /**
     * 立即执行一次
     */
    public void triggerJob() &#123;
        try &#123;
            JobKey jobKey = new JobKey(&quot;test1&quot;, &quot;group1&quot;);
            scheduler.triggerJob(jobKey);
            if (scheduler.isShutdown()) &#123;
                scheduler.start();
            &#125;
        &#125; catch (SchedulerException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;

    /**
     * 删除定时任务
     */
    public void deleteJob() &#123;
        try &#123;
            JobKey jobKey = new JobKey(&quot;test1&quot;, &quot;group1&quot;);
            scheduler.deleteJob(jobKey);
        &#125; catch (SchedulerException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;

    /**
     * 修改触发器CronExpress表达式
     */
    public void modifyCron(String name, String group, String cronExpression) &#123;
        try &#123;
            TriggerKey triggerKey = TriggerKey.triggerKey(name, group);
            CronTrigger newCron = TriggerBuilder.newTrigger().withIdentity(triggerKey).withSchedule(CronScheduleBuilder.cronSchedule(cronExpression)).build();
            scheduler.rescheduleJob(triggerKey, newCron);
        &#125; catch (SchedulerException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;

    /**
     * 获得所有工作任务
     */
    public void getAllJob() &#123;
        try &#123;
            GroupMatcher&lt;JobKey&gt; jobGroupMatcher = GroupMatcher.anyJobGroup();
            Set&lt;JobKey&gt; jobKeys = scheduler.getJobKeys(jobGroupMatcher);
            System.out.println(&quot;所有工作数量&quot; + jobKeys.size());
        &#125; catch (SchedulerException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;

    /**
     * 获得所有运行中的任务
     */
    public void getRunningJob()&#123;
        try &#123;
            List&lt;JobExecutionContext&gt; jobExecutionContexts = scheduler.getCurrentlyExecutingJobs();
            System.out.println(&quot;运行中的任务个数&quot; + jobExecutionContexts.size());
        &#125; catch (SchedulerException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;

    /**
     * 验证cron表达式
     */
    public void validationCron(String cron)&#123;
        CronExpression.isValidExpression(cron);
    &#125;
&#125;</code></pre><p>除了这些，还有其它方法在scheduler中，等等,都可以通过scheduler获得的对象来得到信息。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>任务调度</tag>
      </tags>
  </entry>
  <entry>
    <title>axis2的简单集成Spring服务部署</title>
    <url>/2018/11/26/Spring/axis2%E7%9A%84%E7%AE%80%E5%8D%95%E9%9B%86%E6%88%90Spring%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="axis2的简单集成Spring服务部署"><a href="#axis2的简单集成Spring服务部署" class="headerlink" title="axis2的简单集成Spring服务部署"></a>axis2的简单集成Spring服务部署</h1><p>在本篇文章里，我们无需下载bin包，war包，arr，jar之类的什么东西。只需要添加依赖，配置services即可。</p>
<h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h3><pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.apache.axis2&lt;/groupId&gt;
    &lt;artifactId&gt;axis2-kernel&lt;/artifactId&gt;
    &lt;version&gt;1.7.9&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.axis2&lt;/groupId&gt;
    &lt;artifactId&gt;axis2-ant-plugin&lt;/artifactId&gt;
    &lt;version&gt;1.7.9&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.axis2&lt;/groupId&gt;
    &lt;artifactId&gt;axis2-corba&lt;/artifactId&gt;
    &lt;version&gt;1.7.9&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.axis2&lt;/groupId&gt;
    &lt;artifactId&gt;axis2-jaxws&lt;/artifactId&gt;
    &lt;version&gt;1.7.9&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.axis2&lt;/groupId&gt;
    &lt;artifactId&gt;axis2-spring&lt;/artifactId&gt;
    &lt;version&gt;1.7.9&lt;/version&gt;
&lt;/dependency&gt;</code></pre><h3 id="2-配置web-xml-AxisServlet"><a href="#2-配置web-xml-AxisServlet" class="headerlink" title="2. 配置web.xml AxisServlet"></a>2. 配置web.xml AxisServlet</h3><pre><code>&lt;servlet&gt;
    &lt;servlet-name&gt;AxisServlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.apache.axis2.transport.http.AxisServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;AxisServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/services/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</code></pre><h3 id="3-配置axis的ApplicationContextHolder"><a href="#3-配置axis的ApplicationContextHolder" class="headerlink" title="3. 配置axis的ApplicationContextHolder"></a>3. 配置axis的ApplicationContextHolder</h3><p>在spring配置文件中配置</p>
<pre><code>&lt;bean name=&quot;applicationContext&quot; class=&quot;org.apache.axis2.extensions.spring.receivers.ApplicationContextHolder&quot;/&gt;</code></pre><h3 id="4-配置配置服务类"><a href="#4-配置配置服务类" class="headerlink" title="4. 配置配置服务类"></a>4. 配置配置服务类</h3><p>本类以简单服务为例</p>
<pre><code>package com.fsats.axis;

import org.springframework.stereotype.Component;

@Component
public class NameService &#123;
    public String getName(String name)&#123;
        return &quot;你的名字是&quot; + name;
    &#125;
&#125;</code></pre><h3 id="5-配置services-xml"><a href="#5-配置services-xml" class="headerlink" title="5. 配置services.xml"></a>5. 配置services.xml</h3><p>在WEB-INF目录下创建【services】-【conf】-【META-INF】-【services.xml】,结构如下:</p>
<p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/11/20181126112545.png?x-oss-process=image/resize,m_fill,w_296,h_300" alt=""></p>
<p>文件配置为:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;serviceGroup&gt;
    &lt;service name=&quot;nameService&quot;&gt;
        &lt;parameter name=&quot;ServiceObjectSupplier&quot;&gt;
            org.apache.axis2.extensions.spring.receivers.SpringServletContextObjectSupplier
        &lt;/parameter&gt;
        &lt;parameter name=&quot;SpringBeanName&quot;&gt;nameService&lt;/parameter&gt;
        &lt;messageReceivers&gt;
            &lt;messageReceiver mep=&quot;http://www.w3.org/ns/wsdl/in-only&quot; class=&quot;org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver&quot;&gt;&lt;/messageReceiver&gt;
            &lt;messageReceiver mep=&quot;http://www.w3.org/ns/wsdl/in-out&quot; class=&quot;org.apache.axis2.rpc.receivers.RPCMessageReceiver&quot;&gt;&lt;/messageReceiver&gt;
        &lt;/messageReceivers&gt;
&lt;/service&gt;
&lt;/serviceGroup&gt;</code></pre><ul>
<li>其中，serviceGroup表示服务组，里面配置多个service</li>
<li>service的name为服务名称</li>
<li>parameter的name值为SpringBeanName，表示服务类的bean实例名称，这个服务类需要注入到spring容器中</li>
<li>其他的默认就好</li>
</ul>
<h3 id="6-启动web项目，访问-项目地址-项目名称-services-服务名-wsdl"><a href="#6-启动web项目，访问-项目地址-项目名称-services-服务名-wsdl" class="headerlink" title="6.启动web项目，访问 项目地址/项目名称/services/服务名?wsdl"></a>6.启动web项目，访问 项目地址/项目名称/services/服务名?wsdl</h3><p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/11/20181126113215.png" alt=""></p>
<p>此处，我这里使用IDEA，没有配置项目名。你可以访问方法</p>
<p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/11/20181126113331.png" alt=""></p>
<h3 id="7-使用RPC方式调用服务端接口-远程wsdl"><a href="#7-使用RPC方式调用服务端接口-远程wsdl" class="headerlink" title="7. 使用RPC方式调用服务端接口,远程wsdl"></a>7. 使用RPC方式调用服务端接口,远程wsdl</h3><p>调用服务端接口，需要注意的是，注意创建Options对象，需要通过RPCServiceClient创建，不要new，否则就不会关联，这是容易出错的。<br>命名空间，默认命名空间是当前类所属的包名倒过来，比如:服务类为com.fsats.axis.NameService,则明命名空间默认为<a href="http://axis.fsats.com">http://axis.fsats.com</a></p>
<pre><code>String address = &quot;http://localhost:8080/services/nameService?wsdl&quot;;
try &#123;
    RPCServiceClient client = new RPCServiceClient();
    EndpointReference reference = new EndpointReference(address);
    Options options = client.getOptions();
    options.setTo(reference);
    QName qname = new QName(&quot;http://axis.fsats.com&quot;,&quot;getName&quot;);
    //指定参数
    Object[] parameters = new Object[] &#123; &quot;chen&quot; &#125;;
    //指定返回类型
    Class[] returnTypes = new Class[] &#123; String.class &#125;;
    Object[] response = client.invokeBlocking(qname, parameters, returnTypes);
    System.out.println(response[0]);
&#125; catch (AxisFault axisFault) &#123;
    axisFault.printStackTrace();
&#125;</code></pre><h3 id="8-调用请求服务端接口，用HttpURLConnection，以HTTP-XML的方式实现SOAP的请求"><a href="#8-调用请求服务端接口，用HttpURLConnection，以HTTP-XML的方式实现SOAP的请求" class="headerlink" title="8. 调用请求服务端接口，用HttpURLConnection，以HTTP+XML的方式实现SOAP的请求"></a>8. 调用请求服务端接口，用HttpURLConnection，以HTTP+XML的方式实现SOAP的请求</h3><pre><code>@Test
public void client3() throws IOException &#123;
    URL url = new URL(&quot;http://localhost:8080/b&quot;);
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    String xml = &quot;&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;\n&quot; +
        &quot;&lt;soapenv:Envelope xmlns:soapenv=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot;&gt;\n&quot; +
        &quot;    &lt;soapenv:Header/&gt;\n&quot; +
        &quot;    &lt;soapenv:Body&gt;\n&quot; +
        &quot;        &lt;getAge xmlns=\&quot;http://axis.fsats.com\&quot;&gt;\n&quot; +
        &quot;            &lt;arg0 xmlns=\&quot;\&quot;&gt;chen&lt;/arg0&gt;\n&quot; +
        &quot;            &lt;arg1 xmlns=\&quot;\&quot;&gt;18&lt;/arg1&gt;\n&quot; +
        &quot;        &lt;/getAge&gt;\n&quot; +
        &quot;    &lt;/soapenv:Body&gt;\n&quot; +
        &quot;&lt;/soapenv:Envelope&gt;&quot;;
    byte[] buf = xml.getBytes(&quot;UTF-8&quot;);
    //connection.setRequestProperty(&quot;Content-Length&quot;,String.valueOf(buf.length));
    connection.setRequestProperty(&quot;Content-Type&quot;,&quot;text/xml; charset=utf-8&quot;);
    connection.setRequestMethod(&quot;GET&quot;);
    //设置输入输出参数
    connection.setDoOutput(true);
    connection.setDoInput(true);
    OutputStream out = connection.getOutputStream();
    out.write(buf);
    out.close();

    System.out.println(IOUtils.toString(connection.getInputStream()));
&#125;</code></pre><p>以上是客户端的请求代码，我们通过URL创建路径，设置请求头(必须的),设置XML，其中xml字符串包含了soap的版本信息，及服务端的命名空间。<br>那么服务端接收到的就是这写出的XML，那么服务端解析后返回的依然是SOAP。</p>
<pre><code>@RequestMapping(&quot;/b&quot;)
public void getB(HttpServletRequest request, HttpServletResponse response)&#123;
    try &#123;
        request.setCharacterEncoding(&quot;UTF-8&quot;);
        response.setContentType(&quot;application/soap+xml; charset=utf-8&quot;);
        //response.setContentType(&quot;text/xml; charset=utf-8&quot;);
        BufferedReader reader = request.getReader();
        SAXReader saxReader = new SAXReader();
        Document document = saxReader.read(reader);
        String value = document.getRootElement().selectNodes(&quot;//arg0&quot;).get(0).getText();
        String a= &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;&quot; +
            &quot;&lt;soap:Envelope xmlns:soap=\&quot;http://www.w3.org/2003/05/soap-envelope\&quot;&gt;&quot; +
            &quot;&lt;soap:Body&gt;&quot; +
            &quot;&lt;response xmlns=\&quot;http://axis.fsats.com\&quot;&gt;你的名字是:&quot;+ value +&quot;&lt;/response&gt;&quot; +
            &quot;&lt;/soap:Body&gt;&quot; +
            &quot;&lt;/soap:Envelope&gt;&quot;;

        System.out.println(a);
        response.getWriter().write(a);
    &#125; catch (IOException e) &#123;
        e.printStackTrace();
    &#125; catch (DocumentException e) &#123;
        e.printStackTrace();
    &#125;
&#125;</code></pre><h3 id="9-使用RPC进行远程SOAP请求，该请求地址为url请求路径，但无法获得返回值"><a href="#9-使用RPC进行远程SOAP请求，该请求地址为url请求路径，但无法获得返回值" class="headerlink" title="9. 使用RPC进行远程SOAP请求，该请求地址为url请求路径，但无法获得返回值"></a>9. 使用RPC进行远程SOAP请求，该请求地址为url请求路径，但无法获得返回值</h3><pre><code>public void client2()&#123;
    String address = &quot;http://localhost:8080/a&quot;;
    try &#123;
        RPCServiceClient client = new RPCServiceClient();
        EndpointReference reference = new EndpointReference(address);
        Options options = client.getOptions();
        options.setTo(reference);
        QName qname = new QName(&quot;http://axis.fsats.com&quot;,&quot;getAge&quot;);
        //指定参数
        Object[] parameters = new Object[] &#123; 18 &#125;;
        //指定返回类型
        Class[] returnTypes = new Class[] &#123; String.class &#125;;
        //client.invokeRobust(qname, parameters);
        Object[] objects = client.invokeBlocking(qname,parameters,returnTypes);
        client.cleanupTransport();
        System.out.println(objects[0]);
    &#125; catch (AxisFault axisFault) &#123;
        axisFault.printStackTrace();
    &#125;
&#125;</code></pre><p>将EndpointReference的地址设为服务方法，请求路径，以http的方式，请求，命名空间设置是一样的。需要注意client.invokeBlocking方法，若有返回值则使用这个，没有则使用client.invokeRobust();但尽管使用了有返回值的方法，也不会有返回值，因为PRC以http请求，虽然服务端已经写出去了，但因为是http，所以client.invokeBlocking无法接收到值。只要使用了http，则wsdl就不会再使用，所以，返回结果无法接受到。</p>
<h3 id="10-问题描述-org-apache-axis2-AxisFault-com-ctc-wstx-exc-WstxEOFException-Unexpected-EOF-in-prolog-at-row-col-unknown-source-1-0"><a href="#10-问题描述-org-apache-axis2-AxisFault-com-ctc-wstx-exc-WstxEOFException-Unexpected-EOF-in-prolog-at-row-col-unknown-source-1-0" class="headerlink" title="10. 问题描述:org.apache.axis2.AxisFault: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog at [row,col {unknown-source}]: [1,0]"></a>10. 问题描述:org.apache.axis2.AxisFault: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog at [row,col {unknown-source}]: [1,0]</h3><p>出现此问题，可能是，服务端并没有返回值，而客户却使用client.invokeBlocking(qname,parameters,returnTypes);来获取返回值，所以导致可能的错误。如果确定没有返回值，应使用client.invokeRobust(qname, parameters);</p>
<h3 id="11-问题描述-Transport-level-information-does-not-match-with-SOAP-Message-namespace-URI"><a href="#11-问题描述-Transport-level-information-does-not-match-with-SOAP-Message-namespace-URI" class="headerlink" title="11. 问题描述: Transport level information does not match with SOAP Message namespace URI"></a>11. 问题描述: Transport level information does not match with SOAP Message namespace URI</h3><p>这个错误是因为响应头的设置错误导致的，应根据soap1.1或1.2设置响应的命名空间和content-Type</p>
<pre><code>SOAP 1.2使用“application/soap+xml”作为内容类型，SOAP 1.1使用“text/xml”。
SOAP 1.2 不使用 SOAP Action 标题行。
SOAP 1.2 使用 &quot;http://www.w3.org/2003/05/soap-envelope&quot; 作为envolope命名空间。
SOAP 1.1 使用 &quot;http://schemas.xmlsoap.org/soap/envelope/&quot;作为命名空间。</code></pre><p>这两个地方需要搞清楚，否则客户端虽然请求成功，服务端能到的数据，但是服务响应的时候，因为响应的可能不正确，并非soap报文，那么客户端就会报错。</p>
<h1 id="Spring-Boot与Axis2的集成"><a href="#Spring-Boot与Axis2的集成" class="headerlink" title="Spring Boot与Axis2的集成"></a>Spring Boot与Axis2的集成</h1><p>jar包的依赖是相同的，注意，一定要1.7以上版本，否则1.6只可可能造成axis操作时生成大量的临时文件占用空间。</p>
<p>在Spring Boot中直接配置servlet和services.xml文件就好。此处注意添加servlet的init参数，定义axis2的services.xml文件位置</p>
<pre><code>@Configuration
public class WebConfig &#123;

    /**
     * 配置servlet的Bean，添加axis2
     * @return
     */
    @Bean
    public ServletRegistrationBean myServletBean()&#123;
        ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new AxisServlet(),&quot;/services/*&quot;);
        servletRegistrationBean.addInitParameter(&quot;axis2.repository.path&quot;,this.getClass().getResource(&quot;/WEB-INF&quot;).getPath().toString());
        return servletRegistrationBean;
    &#125;
&#125;</code></pre><p>这里的services.xml文件放在resource/下，新建WEB-INF/service/conf/META-INF/services.xml文件。</p>
<p>然后就是定义service服务了，注意要注入Bean，与service.xml对应就好。</p>
<h3 id="springboot与axis2的打包war-jar后启动问题"><a href="#springboot与axis2的打包war-jar后启动问题" class="headerlink" title="springboot与axis2的打包war,jar后启动问题"></a>springboot与axis2的打包war,jar后启动问题</h3><p>关于war包的打包方式可以在<a href="http://www.fsats.com/2019/03/01/499/">http://www.fsats.com/2019/03/01/499/</a></p>
<p>对于war包，在部署的时候，通过war包解压，对于访问axis服务没有太大问题。但应注意的是，可能在编译的时候使用1.8，使用tomcat7的时候可能会出现问题，至少在8.0以上。</p>
<p>当打包的是jar包的时候，启动后没有问题，但访问axis2的服务地址页面，就会出现问题了。它会给一个如下的错误:</p>
<pre><code>org.apache.axis2.deployment.DeploymentException: The system cannot locate the specified repository location: file:/C:/Users/chen/Desktop/hsdzj/hsdzjservice-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/WEB-INF</code></pre><p>该错误指出找不到存储库，在这个目录下，因为是直接运行jar包，所以地址栏中出现的!可能就表示一层解压。但是axis2不能通过该地址访问到services.xml文件。因此需要更改AxisServlet的axis2.repository.path参数配置。这个发现也是通过 <a href="https://blog.csdn.net/qq133328114/article/details/84957219">https://blog.csdn.net/qq133328114/article/details/84957219</a> 发现的。因此更改axisServlet的配置成如下</p>
<pre><code>@Bean
public ServletRegistrationBean myServletBean()&#123;
    ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new AxisServlet(),&quot;/services/*&quot;);
    String path = this.getClass().getResource(&quot;/WEB-INF&quot;).getPath().toString();
    System.out.println(path);
    //去除路径前面的file:
    if(path.indexOf(&quot;file:&quot;)==0)&#123;
        path = path.substring(5);
    &#125;
    //去除解压包的!符号
    if (path.indexOf(&quot;!&quot;)!=-1)&#123;
        //将services.xml文件拷贝到jar包同级目录下
        try &#123;
            FileCopyUtils.copy(&quot;WEB-INF/services/conf/META-INF/services.xml&quot;);
        &#125; catch (IOException e) &#123;
            e.printStackTrace();
        &#125;
        path = path.substring(0, path.lastIndexOf(&quot;/&quot;, path.indexOf(&quot;!&quot;))) + &quot;/WEB-INF&quot;;
    &#125;
    System.out.println(&quot;最终path:&quot;+path);
    servletRegistrationBean.addInitParameter(&quot;axis2.repository.path&quot;,path);
    return servletRegistrationBean;
&#125;</code></pre><p>该代码表示更改axis2.repository.path的路径，将services.xml拷贝的jar包的同级目录下。但其实路径还是发布的路径<code>this.getClass().getResource(&quot;/WEB-INF&quot;).getPath().toString()</code>,但是却把<code>!符号和file:</code>给去掉了，这样在执行jar的时候，这个地址是和在idea运行项目时的地址是一样的。</p>
<p>最终测试，发现是真的可以的。</p>
<p>FileCopyUtils的代码如下:</p>
<pre><code>public class FileCopyUtils &#123;

    private static InputStream getResource(String location) throws IOException &#123;
        PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
        InputStream in = resolver.getResource(location).getInputStream();
        byte[] byteArray = IOUtils.toByteArray(in);
        in.close();
        return new ByteArrayInputStream(byteArray);
    &#125;

    /**
     * 获取项目所在文件夹的绝对路径
     * @return
     */
    private static String getCurrentDirPath() &#123;
        URL url = FileCopyUtils.class.getProtectionDomain().getCodeSource().getLocation();
        String path = url.getPath();
        if(path.startsWith(&quot;file:&quot;)) &#123;
            path = path.replace(&quot;file:&quot;, &quot;&quot;);
        &#125;
        if(path.contains(&quot;.jar!/&quot;)) &#123;
            path = path.substring(0, path.indexOf(&quot;.jar!/&quot;)+4);
        &#125;

        File file = new File(path);
        path = file.getParentFile().getAbsolutePath();
        return path;
    &#125;

    private static Path getDistFile(String path) throws IOException &#123;
        String currentRealPath = getCurrentDirPath();
        Path dist = Paths.get(currentRealPath + File.separator + path);
        Path parent = dist.getParent();
        if(parent != null) &#123;
            Files.createDirectories(parent);
        &#125;
        Files.deleteIfExists(dist);
        return dist;
    &#125;

    /**
     * 复制classpath下的文件到jar包的同级目录下
     * @param location 相对路径文件,例如kafka/kafka_client_jaas.conf
     * @return
     * @throws IOException
     */
    public static String copy(String location) throws IOException &#123;
        InputStream in = getResource(&quot;classpath:&quot;+location);
        Path dist = getDistFile(location);
        Files.copy(in, dist);
        in.close();
        return dist.toAbsolutePath().toString();
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>axis2</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中关于Jackson的配置</title>
    <url>/2018/11/25/SpringBoot/SpringBoot%E4%B8%AD%E5%85%B3%E4%BA%8EJackson%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="SpringBoot中关于Jackson的配置"><a href="#SpringBoot中关于Jackson的配置" class="headerlink" title="SpringBoot中关于Jackson的配置"></a>SpringBoot中关于Jackson的配置</h1><h3 id="可能出现Jackson少注解的情况"><a href="#可能出现Jackson少注解的情况" class="headerlink" title="可能出现Jackson少注解的情况"></a>可能出现Jackson少注解的情况</h3><p>在创建项目的时候，选中web，会自带jackson的包，但携带的注解并不全，因为其缺少了jackson-dataformat-xml依赖，如果maven项目有的话，就不必添加，如果没有就去Maven中查找依赖，如下</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;
    &lt;artifactId&gt;jackson-dataformat-xml&lt;/artifactId&gt;
    &lt;version&gt;2.9.7&lt;/version&gt;
&lt;/dependency&gt;

compile group: &apos;com.fasterxml.jackson.dataformat&apos;, name: &apos;jackson-dataformat-xml&apos;, version: &apos;2.9.7&apos;</code></pre><h3 id="xml转换器配置-通过jackson，以application-xml方式请求，返回xml"><a href="#xml转换器配置-通过jackson，以application-xml方式请求，返回xml" class="headerlink" title="xml转换器配置,通过jackson，以application/xml方式请求，返回xml"></a>xml转换器配置,通过jackson，以application/xml方式请求，返回xml</h3><p>首先需要添加com.fasterxml.jackson.dataformat依赖的，同时需要设置转换配置</p>
<pre><code>/**
 * xml消息转换器
 */
@Configuration
public class MessageConverterConfig extends WebMvcConfigurationSupport &#123;

    @Override
    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;
        Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.xml();
        builder.indentOutput(true);
        converters.add(new MappingJackson2XmlHttpMessageConverter(builder.build()));
    &#125;
&#125;</code></pre><p>其次，为实体类添加类注解@JacksonXmlRootElement,为每个属性添加@JacksonXmlProperty注解。 随后需要为请求方法配置PostMapping的consumes和produces为MediaType.APPLICATION_XML_VALUE的Media</p>
<pre><code>@PostMapping(value = &quot;/user&quot;,
             consumes = MediaType.APPLICATION_XML_VALUE,
             produces = MediaType.APPLICATION_XML_VALUE)
@ResponseBody
public User create(@RequestBody User user) &#123;
    user.setId(user.getId());
    user.setName(user.getName());
    return user;
&#125;</code></pre><p>最后，可以通过POSTMAN请求,需要在请求时设置请求头content-Type,值为Application/xml，你可以直接点Body，点raw，右边选择XML(application/xml),然后请求即可。 XML消息转换器一定是要配置的。 此方式若配置XML消息转换器，则所有返回的json都被转换为xml。这个问题还没解决。….</p>
<h3 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h3><p>首先请求参数设置对象属性，需要将字符串转换为日期，所以属性上需要<strong>标注@DateTimeFormat注解，并配置pattern属性</strong>。 然后需要再添加一个@JsonFormat注解，是Jackson显示日期的转换，<strong>pattern设置格式，一定要设置timezone时区属性</strong>，中国则设置为timezone=”GMT+8”。 或者不使用注解，直接在yml上配置也可以。但此情况只有返回json格式才是有效的。若使用了XML消息转换配置，则此配置无效。</p>
<h3 id="不序列化属性为null或””"><a href="#不序列化属性为null或””" class="headerlink" title="不序列化属性为null或””"></a>不序列化属性为null或””</h3><p>在实体类上添加@JsonInclude注解</p>
<pre><code>@JsonInclude(JsonInclude.Include.NON_EMPTY)     表示NULL和&quot;&quot;都不序列化
@JsonInclude(JsonInclude.Include.NON_NULL)      表示为NUll的不序列化
还有其他配置</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot中的lombok使用</title>
    <url>/2018/11/25/SpringBoot/Spring%20Boot%E4%B8%AD%E7%9A%84lombok%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Spring-Boot中的lombok使用"><a href="#Spring-Boot中的lombok使用" class="headerlink" title="Spring Boot中的lombok使用"></a>Spring Boot中的lombok使用</h1><p>lombok也是我在学java并发和SpringBoot中知道的。这个东西可一方百年Java开发者减少代码的冗长，尤其对POJO等，它都通过注解来解决这个问题 如果你要在IDEA中使用它的话，不管要添加依赖，还需要在IDEA的plugin中添加lombok插件，才能不报错。 对于gradle和Maven的引用是</p>
<pre><code>compileOnly(&apos;org.projectlombok:lombok&apos;)

&lt;dependency&gt;
    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
    &lt;artifactId&gt;lombok&lt;/artifactId&gt;
    &lt;version&gt;$&#123;lombok.version&#125;&lt;/version&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</code></pre><p>对于他的注解，如:</p>
<ol>
<li>@Data 标注在POJO类上，可以免去setter，getter的编写,toString，构造函数等，它包括了这几个注解{@Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode}</li>
<li>@Getter 标注在POJO类上，可以免去getter的编写</li>
<li>@Setter 标注在POJO类上，可以免去setter的编写</li>
<li>@RequiredArgsConstructor 生成具有必须参数的构造函数,具有标注了@NonNull注解的属性</li>
<li>@ToString 生成toString()实现，具有打印属性的功能</li>
<li>@EqualsAndHashCode 生成equals和hashcode实现</li>
<li>@Value 生成大量代码，包括@Data,以及有参，无参构造等等。</li>
<li>@AllArgsConstructor 生成包含所有属性的构造函数,参数顺序与属性定义顺序一致</li>
<li>@NoArgsConstructor 生成无参构造函数</li>
<li>@NonNull 标注在属性，方法，参数，本地变量上，会对其进行空检查。</li>
<li>@Slf4j 标注在类上，可直接使用logger对象 .info,error</li>
<li>@Cleanup 放置在流上，以自动化关闭流</li>
</ol>
<p>更多的可以参看文档，以上是常用注解。 关于使用@Data注解后，编译检查报错说没有getId等，但却没有划线，说明你正常引入了，在IDEA里你需要enable Annotation Processors，【Settings】-【搜索Annotation Processors】-选中enable Annotation Processors。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot统一异常处理</title>
    <url>/2018/11/25/SpringBoot/SpringBoot%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="SpringBoot统一异常处理"><a href="#SpringBoot统一异常处理" class="headerlink" title="SpringBoot统一异常处理"></a>SpringBoot统一异常处理</h1><p>在SpringBoot中默认提供了一个异常的映射/error,当处理中抛出异常之后，会转到该请求中处理，并且该请求有一个全局的错误页面用来展示异常内容。</p>
<pre><code>server:
  error:
    path: /error</code></pre><h4 id="1-我们配置一个全局的异常类，处理异常-定义GlobalExceptionHandler类并添加注解-ControllerAdvice。"><a href="#1-我们配置一个全局的异常类，处理异常-定义GlobalExceptionHandler类并添加注解-ControllerAdvice。" class="headerlink" title="1. 我们配置一个全局的异常类，处理异常,定义GlobalExceptionHandler类并添加注解@ControllerAdvice。"></a>1. 我们配置一个全局的异常类，处理异常,定义GlobalExceptionHandler类并添加注解@ControllerAdvice。</h4><p>该注解是一个@Compoment,用于定义@ExceptionHandler,@InitBinder,@ModelAttribute方法，适用于所有使用@RequestMapping的方法。 如果我们仅使用ExceptionHandler，则只能在当前Controller中定义错误异常，若使用@ControllerAdvice则不受这个限制。</p>
<pre><code>@ControllerAdvice
public class GlobalExceptionHandler &#123;
&#125;</code></pre><h4 id="2-配置一个方法，添加-ExceptionHandler注解，value值为需要捕获的异常类的class-并在参数中添加对应要捕获的异常类-然后返回到映射页面。"><a href="#2-配置一个方法，添加-ExceptionHandler注解，value值为需要捕获的异常类的class-并在参数中添加对应要捕获的异常类-然后返回到映射页面。" class="headerlink" title="2. 配置一个方法，添加@ExceptionHandler注解，value值为需要捕获的异常类的class,并在参数中添加对应要捕获的异常类,然后返回到映射页面。"></a>2. 配置一个方法，添加@ExceptionHandler注解，value值为需要捕获的异常类的class,并在参数中添加对应要捕获的异常类,然后返回到映射页面。</h4><p>因为默认给异常类的映射路径是/error，则我们在templates下创建error文件夹，添加一个html文件，我们使用thymeleaf来渲染页面。</p>
<pre><code>@ExceptionHandler(value = Exception.class)
public String defaultException(Exception e, Model model,HttpServletRequest request)&#123;
    model.addAttribute(&quot;exception&quot;,e);
    model.addAttribute(&quot;url&quot;,request.getRequestURL());
    return &quot;/error/default&quot;;
&#125;</code></pre><h4 id="3-在HelloController中定义一个方法，让它throw一个运行时异常来测试，比如RuntimeException，Exception是最大的异常类，所以如果没有匹配的，则都匹配它"><a href="#3-在HelloController中定义一个方法，让它throw一个运行时异常来测试，比如RuntimeException，Exception是最大的异常类，所以如果没有匹配的，则都匹配它" class="headerlink" title="3. 在HelloController中定义一个方法，让它throw一个运行时异常来测试，比如RuntimeException，Exception是最大的异常类，所以如果没有匹配的，则都匹配它"></a>3. 在HelloController中定义一个方法，让它throw一个运行时异常来测试，比如RuntimeException，Exception是最大的异常类，所以如果没有匹配的，则都匹配它</h4><pre><code>@RequestMapping(&quot;/&quot;)
public String index(Model model)&#123;
    //model.addAttribute(&quot;host&quot;,&quot;http://www.fsats.com&quot;);
    throw new RuntimeException(&quot;执行/错误&quot;);
&#125;</code></pre><h4 id="4-启动项目，访问页面完毕，出现定义的错误页面"><a href="#4-启动项目，访问页面完毕，出现定义的错误页面" class="headerlink" title="4. 启动项目，访问页面完毕，出现定义的错误页面"></a>4. 启动项目，访问页面完毕，出现定义的错误页面</h4><h4 id="5-若我们再为-ExceptionHandler注解的方法添加-ResponseBody注解-则我们返回的就是不是页面了，而是返回的数据。"><a href="#5-若我们再为-ExceptionHandler注解的方法添加-ResponseBody注解-则我们返回的就是不是页面了，而是返回的数据。" class="headerlink" title="5. 若我们再为@ExceptionHandler注解的方法添加@ResponseBody注解,则我们返回的就是不是页面了，而是返回的数据。"></a>5. 若我们再为@ExceptionHandler注解的方法添加@ResponseBody注解,则我们返回的就是不是页面了，而是返回的数据。</h4><h4 id="6-接下里测试一下Exception子类的配置-定义一个算术异常"><a href="#6-接下里测试一下Exception子类的配置-定义一个算术异常" class="headerlink" title="6. 接下里测试一下Exception子类的配置,定义一个算术异常"></a>6. 接下里测试一下Exception子类的配置,定义一个算术异常</h4><pre><code>@ExceptionHandler(value = ArithmeticException.class)
public String ArithmeticExecption(ArithmeticException arich, Model model,HttpServletRequest request)&#123;
    model.addAttribute(&quot;exception&quot;,arich);
    model.addAttribute(&quot;url&quot;,request.getRequestURL());
    return &quot;/error/default&quot;;
&#125;

@RequestMapping(&quot;/&quot;)
public String index(Model model)&#123;
    //model.addAttribute(&quot;host&quot;,&quot;http://www.fsats.com&quot;);
    int a = 54/0;
    return &quot;index&quot;;
&#125;</code></pre><p>则，默认会先匹配子类，返回zero异常。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot属性配置文件Application.yml</title>
    <url>/2018/11/25/SpringBoot/SpringBoot%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6Application.yml/</url>
    <content><![CDATA[<h1 id="SpringBoot属性配置文件Application-yml"><a href="#SpringBoot属性配置文件Application-yml" class="headerlink" title="SpringBoot属性配置文件Application.yml"></a>SpringBoot属性配置文件Application.yml</h1><p>默认情况下，当创建完SpringBoot项目后，resources下有两个文件夹和一个文件，一个时static，一个是templates，另一个是application.properties文件。这个文件是项目属性配置文件，在Spring中是XML，SpringBoot中被简化为properties,而properties文件或许还是比较麻烦的，所以SpringBoot允许修改后缀为.YML，以此方式设置更加简便。 只需修改后缀为.yml。以yml结尾的文件，属性配置类似树结构，每个节点，如果有值，则冒号后面需要有一个空格再添加值。每个父节点和子节点缩进两个空格 让我们看一下属性配置的常规设置: 每个选项再写的时候，都会有自动提示，一部分属性都有默认值</p>
<h3 id="1-配置项目的端口和上下文路径"><a href="#1-配置项目的端口和上下文路径" class="headerlink" title="1. 配置项目的端口和上下文路径"></a>1. 配置项目的端口和上下文路径</h3><pre><code>server:
  port: 8081
  servlet:
    context-path: /springboot</code></pre><p>还有server下的其他许多配置</p>
<h3 id="2-不同环境的属性文件配置"><a href="#2-不同环境的属性文件配置" class="headerlink" title="2. 不同环境的属性文件配置"></a>2. 不同环境的属性文件配置</h3><p>项目都是分为开发环境和生产环境的，那么为了方便两者切换，可以配置另外两个文件，分别为:</p>
<ul>
<li><p>application-pord.yml</p>
</li>
<li><p>application-dev.yml</p>
<p>spring:<br>  profiles:</p>
<pre><code>active: pord</code></pre></li>
</ul>
<p>active的属性值为那个值，就使用那个配置文件。另外在编译后，若要执行项目，则需要再jar命令后添加参数，如下:</p>
<pre><code>java -jar xxx项目名-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev</code></pre><h3 id="3-自定义配置"><a href="#3-自定义配置" class="headerlink" title="3. 自定义配置"></a>3. 自定义配置</h3><p>尽管可以在yml配置项目属性，也可以自己定义属性，yml遵循yml的格式，properties使用properties的格式，不要混了，yml中不能出现xx.xxx。 再yml中可以尽管使用树级结构值，或单个一级结构值,另外可以<strong>通过${属性名}的方式</strong>来引用某个属性，如下</p>
<pre><code>name: chen
sex: 男
context: 我的名字是$&#123;name&#125;,性别是$&#123;sex&#125;</code></pre><p>如果要使用这些值，可以直接使用@Value(“${属性名}”)即可标注在属性上,并不需要想spring中麻烦的配置。 在yml中还有些默认的引用值，可以直接通过${属性名}来引用其内部自定义的值。如random对象，可以返回多各类型的随机数</p>
<pre><code>random:
  randomInt: $&#123;random.int&#125;
  randomIntMax: $&#123;random.int(10,8)&#125;
  randomUUID: $&#123;random.uuid&#125;</code></pre><p>不仅这些随机数，只要输入了${符号，就出现很多可以引用的，比如已经定义的配置，引用他就可以获得值，笔记jvm的属性，jdk的属性，ide的属性，等等。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>yml</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle构建Spring Boot</title>
    <url>/2018/11/25/SpringBoot/Gradle%E6%9E%84%E5%BB%BASpring%20Boot/</url>
    <content><![CDATA[<h1 id="Gradle构建Spring-Boot项目"><a href="#Gradle构建Spring-Boot项目" class="headerlink" title="Gradle构建Spring Boot项目"></a>Gradle构建Spring Boot项目</h1><h4 id="1-https-start-spring-io-创建Spring-Boot项目"><a href="#1-https-start-spring-io-创建Spring-Boot项目" class="headerlink" title="1. https://start.spring.io/创建Spring Boot项目"></a>1. <a href="https://start.spring.io/创建Spring">https://start.spring.io/创建Spring</a> Boot项目</h4><ul>
<li>选择创建一个Gradle Project with Java</li>
<li>点击下方的Switch to the full version，选择更多的Spring Boot依赖</li>
</ul>
<h4 id="2-若电脑没有gradle，则下载gradle"><a href="#2-若电脑没有gradle，则下载gradle" class="headerlink" title="2. 若电脑没有gradle，则下载gradle"></a>2. 若电脑没有gradle，则下载gradle</h4><p>去<a href="http://services.gradle.org/distributions/中下载稳定版的bin版本包，解压到本地,在Windows系统变量中配置PAHT变量，添加Gradle的bin目录">http://services.gradle.org/distributions/中下载稳定版的bin版本包，解压到本地,在Windows系统变量中配置PAHT变量，添加Gradle的bin目录</a></p>
<h4 id="3-IDEA导入Gradle项目"><a href="#3-IDEA导入Gradle项目" class="headerlink" title="3. IDEA导入Gradle项目"></a>3. IDEA导入Gradle项目</h4><p>将下载下来的Spring Boot包解压到相应位置,IDEA 打开，Open当前项目，设置Gradle为本地的Gradle，设置Auto Import为自动勾选。 完毕后OK，系统自动下载依赖。</p>
<h4 id="4-运行项目"><a href="#4-运行项目" class="headerlink" title="4. 运行项目"></a>4. 运行项目</h4><p>运行SpringbootApplication类 若运行失败，显示Failed to configure a DataSource: ‘url’ attribute is not specified and no embedded datasource could be configured.等信息，表示您可能添加了类似Mybatis或JPA等启动SpringBoot需要DataSource，而当前却没有配置。需要添加如下配置</p>
<pre><code>spring:
  jpa:
    database: oracle
  datasource:
    driver-class-name: oracle.jdbc.driver.OracleDriver
    url: jdbc:oracle:thin:@localhost:1521:orcl
    username: spring
    password: spring</code></pre><p>若spring.jpa.database显示不出来，则需添加jpa的依赖,因在创建Spring Boot时没有Oracle的依赖包，则你可以拿到本地ojdbc6.jar的jar包，进行设置。 【File】- 【Project Structure】 - 【Module】 - 【选择项目_main_】- 【Dependencies选项卡】 - 【右侧加号】 - 【Library】 - 【New Library】-【选择jar】- 【Add Selected】</p>
<h4 id="5-构建项目"><a href="#5-构建项目" class="headerlink" title="5. 构建项目"></a>5. 构建项目</h4><p>IDEA 打开项目后，并勾选Auto Import后会自动构建项目。 若直接解压后，通过命令构建，可能会出现Task:test失败的情况，则去除test的任务，使用如下命令</p>
<pre><code>gradle build -x test</code></pre><p>构建后项目结构如下: <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/11/20181125002444.png?x-oss-process=style/400" alt="目录结构"></p>
<ul>
<li>build.gradle: 构建命令的脚本<ul>
<li>ext : 定义动态属性，可以在后面被引用</li>
<li>repositories: 仓库，默认中央仓库</li>
<li>dependences: 依赖,如Springboot插件</li>
<li>apply plugin:应用插件</li>
<li>group:项目组</li>
<li>version: 版本</li>
<li>sourceCompatibity: 源码编译的jdk版本</li>
<li>dependencies: 具体的依赖对象，多个生命周期，包括implementation,compileOnly,providedRuntime,testImplementation等</li>
<li>gradle.bat: Windows下的gradle脚本，可执行gradle命令</li>
<li>build目录: 运行gradle命令构建项目后生成的</li>
<li>gradle: wrapper指定了gradle task是基于那种版本的gradle进行编译的。将gradle配置为使用本地的环境，同时会下载一个gradle环境。引入这个本地的即可。便于在团队开发过程中统一Gradle构建的版本号</li>
<li>setting.gradle: 用于初始化以及工程树的配置的，放在根工程目录下</li>
</ul>
</li>
</ul>
<h4 id="6-配置中央仓库"><a href="#6-配置中央仓库" class="headerlink" title="6. 配置中央仓库"></a>6. 配置中央仓库</h4><p>在build.gradle中进行如下配置</p>
<pre><code>buildscript &#123;
    repositories &#123;
        maven&#123; url &apos;http://maven.aliyun.com/nexus/content/groups/public/&apos;&#125;
    &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>Java</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat启动项目，不能及时相应页面，必须按enter</title>
    <url>/2018/11/20/%E4%B8%AD%E9%97%B4%E4%BB%B6/tomcat%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%B8%8D%E8%83%BD%E5%8F%8A%E6%97%B6%E7%9B%B8%E5%BA%94%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%BF%85%E9%A1%BB%E6%8C%89enter/</url>
    <content><![CDATA[<p>此问题是因为tomcat窗口的【快速编辑模式】，为解决此问题需要 窗口右击-》【属性】-》取消勾选【快速编辑模式】，此为当前窗口，若所有窗口通用，则右击点默认值，取消勾选快速编辑模式</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC中可能需要用到的</title>
    <url>/2018/11/18/Spring/Spring%20MVC%E4%B8%AD%E5%8F%AF%E8%83%BD%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0%E7%9A%84/</url>
    <content><![CDATA[<ol>
<li>再Filter中获得Spring Bean的实例</li>
</ol>
<p>让自定义的Filter实现import javax.servlet.Filter类，编写init方法</p>
<pre><code>ServletContext servletContext = filterConfig.getServletContext();
WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(servletContext);
commonUtils = (CommonUtils) context.getBean(&quot;commonUtils&quot;);//获得Bean实例</code></pre>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库操作问题总结</title>
    <url>/2018/11/15/Oracle/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><a href="#1">1. 归档日志满出现的问题</a></p>
<h1 id="1-归档日志满出现的问题"><a href="#1-归档日志满出现的问题" class="headerlink" title="1. 归档日志满出现的问题"></a>1. 归档日志满出现的问题</h1><pre><code>ERROR:
ORA-01034: ORACLE not available
ORA-27101: shared memory realm does not exist
进程 ID: 0
会话 ID: 0 序列号: 0</code></pre><p>该代码可能是pl/sql登录时爆出的问题，重点在ORACLE not available，你需要进入sqlplus尝试sys as sysdba登录,并alter database open打开数据库。可能出现的依然是上面的错误，但会有一个进程ID，，只要报出<strong>ORA-01034: ORACLE not available</strong>此错，设法找到进程ID，找到类似下面的这个目录</p>
<pre><code>F:\app\XXHA\diag\rdbms\racdb\racdb\trace</code></pre><p>racdb是实例名，找到trace中文件名包含进程ID的文件trc文件，使用编辑器打开</p>
<pre><code>*** 2018-11-15 20:34:42.764
*** SESSION ID:(5.3) 2018-11-15 20:34:42.764
*** CLIENT ID:() 2018-11-15 20:34:42.764
*** SERVICE NAME:() 2018-11-15 20:34:42.764
*** MODULE NAME:(sqlplus.exe) 2018-11-15 20:34:42.764
*** ACTION NAME:() 2018-11-15 20:34:42.764

ORA-19815: 警告: db_recovery_file_dest_size 字节 (共 10737418240 字节) 已使用 100.00%, 尚有 0 字节可用。
************************************************************************
You have following choices to free up space from recovery area:
1. Consider changing RMAN RETENTION POLICY. If you are using Data Guard,
   then consider changing RMAN ARCHIVELOG DELETION POLICY.
2. Back up files to tertiary device such as tape using RMAN
   BACKUP RECOVERY AREA command.
3. Add disk space and increase db_recovery_file_dest_size parameter to
   reflect the new space.
4. Delete unnecessary files using RMAN DELETE command. If an operating
   system command was used to delete files, then use RMAN CROSSCHECK and
   DELETE EXPIRED commands.
************************************************************************
ORA-19809: 超出了恢复文件数的限制
ORA-19804: 无法回收 30321664 字节磁盘空间 (从 10737418240 限制中)
*** 2018-11-15 20:34:42.780 4132 krsh.c
ARCH: Error 19809 Creating archive log file to &apos;F:\APP\XXHA\FLASH_RECOVERY_AREA\RACDB\ARCHIVELOG\2018_11_15\O1_MF_1_1136_%U_.ARC&apos;</code></pre><p>可以确定是归档日志满 最快解决的方法是删除归档日志，如果你愿意的话,使用rman target sys/密码 进入rman管理工具,执行删除归档日志命令</p>
<pre><code>delete archivelog until time &apos;sysdate&apos;; --删除所有日志</code></pre><p>重启数据库。 更改归档日志大小</p>
<pre><code>alter system set db_recovery_file_dest_size=35G;</code></pre><p>将归档日志改为非归档</p>
<pre><code>shutdown immediate;-- 关闭数据库
startup mount;-- 启动数据库到mount状态
alter database noarchivelog;-- 修改数据库为非归档模式，再改为归档就是取消单词前面的no
alter database open;-- 打开数据库</code></pre>]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>在使用Spring整合Mybatis出现的问题</title>
    <url>/2018/11/01/Spring/%E5%9C%A8%E4%BD%BF%E7%94%A8Spring%E6%95%B4%E5%90%88Mybatis%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li>没有扫描到xml</li>
</ol>
<p>所某个接口的方法not found，则说明没有找到xml或出现后面的情况 如果是当前错误，没有扫描到xml</p>
<pre><code>在pom.xml中build标签中添加
&lt;resources&gt;
    &lt;resource&gt;
        &lt;directory&gt;src/main/java&lt;/directory&gt;
        &lt;includes&gt;
            &lt;include&gt;**/*.xml&lt;/include&gt;
        &lt;/includes&gt;
    &lt;/resource&gt;
&lt;/resources&gt;</code></pre><ol start="2">
<li>配置@Mapper注解</li>
</ol>
<p>不要忘了在Mapper接口上配置，这与spring MVC上是不一致的，一个是mybatis的注解，一个是spring的注解</p>
<ol start="3">
<li><p>SqlSessionFactoryBean 和MapperScannerConfigurer配置是否完整</p>
</li>
<li><p>无Spring MVC核心控制器的，只使用Spring框架的情况下获取bean实例，需要先获得ApplicationContext,然后getBean</p>
</li>
</ol>
<p>applicationContext=new ClassPathXmlApplicationContext(“classpath:applicationContext.xml”);</p>
<ol start="5">
<li>执行myabtis插入语句时ORA-00933: SQL 命令未正确结束</li>
</ol>
<p>可能出现的问题是，你插入的不带主键</p>
<pre><code>&lt;insert id=&quot;insert_&quot; useGeneratedKeys=&quot;false&quot;&gt;
&lt;/insert&gt;</code></pre><p>所以要显示设置useGeneratedKeys=false才可以正常插入</p>
<ol start="6">
<li>执行mybatis插入语句时，出现; uncategorized SQLException; SQL state [99999]; error code [17090]; 不允许的操作; nested exception is jav 类似</li>
</ol>
<p>可能出现的原因是，频繁批量插入，没有主键，跟上面的一样的意思，</p>
<pre><code>&lt;insert id=&quot;insert_&quot; useGeneratedKeys=&quot;false&quot;&gt;
&lt;/insert&gt;</code></pre><ol start="7">
<li>spring jdbc访问数据库问题java.lang.NoSuchMethodError: org.apache.commons.pool2.impl.GenericObjectPool</li>
</ol>
<p>你使用的是dbcp2的数据源，使用pool2，这个以前用的时候就没发现问题，现在突然有了，网上说是版本问题，就算是最高版本也不行，所以如果可以的话改用c3p0也行</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.mchange&lt;/groupId&gt;
    &lt;artifactId&gt;c3p0&lt;/artifactId&gt;
    &lt;version&gt;0.9.5.2&lt;/version&gt;
&lt;/dependency&gt;


&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
        &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;user.driver&#125;&quot;/&gt;
        &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;user.url&#125;&quot;/&gt;
        &lt;property name=&quot;user&quot; value=&quot;$&#123;user.username&#125;&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;$&#123;user.password&#125;&quot;/&gt;
    &lt;/bean&gt;</code></pre>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库DM导入报错ORA-14460: 只能指定一个 COMPRESS 或 NOCOMPRESS 子句</title>
    <url>/2018/11/01/Oracle/%E6%95%B0%E6%8D%AE%E5%BA%93DM%E5%AF%BC%E5%85%A5%E6%8A%A5%E9%94%99ORA-14460-%20%E5%8F%AA%E8%83%BD%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%20COMPRESS%20%E6%88%96%20NOCOMPRESS%20%E5%AD%90%E5%8F%A5/</url>
    <content><![CDATA[<p>解决办法: 需要在这个导入语句中加入transform=segment_attributes:n参数。该参数可与忽略expdp导出时附带的相关表空间和存储子句约束</p>
<pre><code>impdp xxx/xxx dumpfile=xxx.dmp transform=segment_attributes:n directory=xxx</code></pre>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle分析统计函数GROUPROLL、GROUPING、CUBE函数</title>
    <url>/2018/10/25/Oracle/Oracle%E5%88%86%E6%9E%90%E7%BB%9F%E8%AE%A1%E5%87%BD%E6%95%B0GROUPROLL%E3%80%81GROUPING%E3%80%81CUBE%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="分析统计函数和其他函数"><a href="#分析统计函数和其他函数" class="headerlink" title="分析统计函数和其他函数"></a>分析统计函数和其他函数</h1><h2 id="一、-substr截取函数"><a href="#一、-substr截取函数" class="headerlink" title="一、 substr截取函数"></a>一、 substr截取函数</h2><p>substr(string,a[,b])</p>
<ul>
<li>string表示被截取的字符串</li>
<li>a表示开始截取的位置，默认截取到末尾，返回被截取的字符串，当值为0/1都是第一位</li>
<li>b表示结束截取的位置，返回被截取的字符串</li>
</ul>
<h2 id="二、-DECODE"><a href="#二、-DECODE" class="headerlink" title="二、 DECODE"></a>二、 DECODE</h2><p>DECODE(条件，值1，返回值1，值2，返回值2，值3，返回值3,…..) 当条件值等于值1时返回返回值1，为值2时，返回返回值2。类似于if..else语句</p>
<h2 id="三、-NVL函数、NVL2函数、NULLIF函数、COALESCE函数"><a href="#三、-NVL函数、NVL2函数、NULLIF函数、COALESCE函数" class="headerlink" title="三、 NVL函数、NVL2函数、NULLIF函数、COALESCE函数"></a>三、 NVL函数、NVL2函数、NULLIF函数、COALESCE函数</h2><ol>
<li>NVL(exp1,exp2)</li>
</ol>
<p>如果exp1为空则返回exp2的值，否则返回exp1的值，如果两者都为空则返回空。</p>
<ol start="2">
<li>NVL2(exp1,exp2,ep3)</li>
</ol>
<p>如果exp1为空则返回exp2，否则返回exp3</p>
<ol start="3">
<li>NULLIF(exp1,exp2)</li>
</ol>
<p>如果exp1等于exp2，则返回空，否则返回exp1</p>
<ol start="4">
<li>COALESCE(exp1,exp2,exp3,…)</li>
</ol>
<p>返回表达式中第一个非空的表达式。所有exp都必须是同一种类型或可以隐式转换为同一种类型。</p>
<h2 id="四、-ROLLUP、GROUPBY、GROUPING、GROUPING-SET"><a href="#四、-ROLLUP、GROUPBY、GROUPING、GROUPING-SET" class="headerlink" title="四、 ROLLUP、GROUPBY、GROUPING、GROUPING SET"></a>四、 ROLLUP、GROUPBY、GROUPING、GROUPING SET</h2><pre><code>create table group_test (group_id int, job varchar2(10), name varchar2(10), salary int);

insert into group_test values (10,&apos;Coding&apos;,    &apos;Bruce&apos;,1000);
insert into group_test values (10,&apos;Programmer&apos;,&apos;Clair&apos;,1000);
insert into group_test values (10,&apos;Architect&apos;, &apos;Gideon&apos;,1000);
insert into group_test values (10,&apos;Director&apos;,  &apos;Hill&apos;,1000);

insert into group_test values (20,&apos;Coding&apos;,    &apos;Jason&apos;,2000);
insert into group_test values (20,&apos;Programmer&apos;,&apos;Joey&apos;,2000);
insert into group_test values (20,&apos;Architect&apos;, &apos;Martin&apos;,2000);
insert into group_test values (20,&apos;Director&apos;,  &apos;Michael&apos;,2000);

insert into group_test values (30,&apos;Coding&apos;,    &apos;Rebecca&apos;,3000);
insert into group_test values (30,&apos;Programmer&apos;,&apos;Rex&apos;,3000);
insert into group_test values (30,&apos;Architect&apos;, &apos;Richard&apos;,3000);
insert into group_test values (30,&apos;Director&apos;,  &apos;Sabrina&apos;,3000);

insert into group_test values (40,&apos;Coding&apos;,    &apos;Samuel&apos;,4000);
insert into group_test values (40,&apos;Programmer&apos;,&apos;Susy&apos;,4000);
insert into group_test values (40,&apos;Architect&apos;, &apos;Tina&apos;,4000);
insert into group_test values (40,&apos;Director&apos;,  &apos;Wendy&apos;,4000);

commit;</code></pre><ol>
<li><p>GROUP BY 分组，查询列除了聚合函数之外，都要在GROUP BY子句中出现，除了grouping函数</p>
<p>select group_id,sum(salary) from group_test group by group_id;</p>
<p>  GROUP_ID SUM(SALARY)</p>
<hr>
<pre><code>30       12000
20        8000
40       16000
10        4000</code></pre></li>
</ol>
<p>以group_by，分组，查询每组的总薪资。</p>
<ol start="2">
<li>ROLLUP 分组，不仅进行分组，还对每组进行聚合统计，所有组进行聚合统计</li>
</ol>
<p><strong>ROLLUP统计一列的</strong></p>
<pre><code>select group_id,sum(salary) from group_test group by  rollup(group_id);

  GROUP_ID SUM(SALARY)
---------- -----------
        10        4000
        20        8000
        30       12000
        40       16000
                 40000</code></pre><p><strong>ROLLUP统计两列的</strong></p>
<pre><code>select group_id,job,sum(salary) from group_test group by rollup(group_id,job);

  GROUP_ID JOB                  SUM(SALARY)
---------- -------------------- -----------
        10 Coding                      1000
        10 Director                    1000
        10 Architect                   1000
        10 Programmer                  1000
        10                             4000
        20 Coding                      2000
        20 Director                    2000
        20 Architect                   2000
        20 Programmer                  2000
        20                             8000
        30 Coding                      3000
        30 Director                    3000
        30 Architect                   3000
        30 Programmer                  3000
        30                            12000
        40 Coding                      4000
        40 Director                    4000
        40 Architect                   4000
        40 Programmer                  4000
        40                            16000
                                      40000</code></pre><ol>
<li><p>GROUPING函数</p>
<p>select group_id,grouping(GROUP_ID),grouping(JOB),sum(salary) from group_test group by rollup(group_id, job);</p>
<p>  GROUP_ID GROUPING(GROUP_ID) GROUPING(JOB) SUM(SALARY)</p>
<hr>
<pre><code>10                  0             0        1000
10                  0             0        1000
10                  0             0        1000
10                  0             0        1000
10                  0             1        4000
20                  0             0        2000
20                  0             0        2000
20                  0             0        2000
20                  0             0        2000
20                  0             1        8000
30                  0             0        3000
30                  0             0        3000
30                  0             0        3000
30                  0             0        3000
30                  0             1       12000
40                  0             0        4000
40                  0             0        4000
40                  0             0        4000
40                  0             0        4000
40                  0             1       16000
                    1             1       40000</code></pre></li>
</ol>
<h2 id="五、-GROUP-BY、ROLLUP、CUBE、GROUPING的规则"><a href="#五、-GROUP-BY、ROLLUP、CUBE、GROUPING的规则" class="headerlink" title="五、 GROUP BY、ROLLUP、CUBE、GROUPING的规则"></a>五、 GROUP BY、ROLLUP、CUBE、GROUPING的规则</h2><h3 id="GROUP-by"><a href="#GROUP-by" class="headerlink" title="GROUP by"></a>GROUP by</h3><p>对于GROUP BY 排序，group by a或group by a,b 依据a分组，或依据a和b分组。这个是ROLLUP、CUBE的基础 按例子来说就是，按某个字段进行分组的到每组的数量，或者按某个字段分组，再按某个字段分组的数量，也就是某列中某列的数量。</p>
<h3 id="GROUP-BY-后的ROLLUP-group-by-与rollup之间没有任何内容"><a href="#GROUP-BY-后的ROLLUP-group-by-与rollup之间没有任何内容" class="headerlink" title="GROUP BY 后的ROLLUP,group by 与rollup之间没有任何内容"></a>GROUP BY 后的ROLLUP,group by 与rollup之间没有任何内容</h3><p><strong>如:GROUP BY ROLLUP(A)，其规则可分为GROUP BY 分组，包含</strong></p>
<pre><code>select group_id,sum(salary) from group_test group by rollup(group_id);</code></pre><ul>
<li>GROUP BY A:select group_id,sum(salary) from group_test group by(group_id);</li>
<li>GROUP BY NULL:select NULL,sum(salary) from group_test group by(NULL);</li>
</ul>
<p>其中的GRUOP BY NULL,是指，所有符合条件的进行sum，也就是全部，那么null列就是NULL，按NULL分组就是按全部分一组。 那么也就是GROUP BY ROLLUP(A)等于这个两个GROUP BY的UNION ALL。 <strong>如果有两个列分组GROUP BY ROLLUP(A,B)则包含:</strong></p>
<pre><code>select group_id,job,sum(salary) from group_test group by rollup(group_id,job);</code></pre><ul>
<li>GROUP BY A,B</li>
<li>GROUP BY A,NULL</li>
<li>GROUP BY NULL,NULL</li>
</ul>
<p>三个则是</p>
<pre><code>select group_id,job,name,sum(salary) from group_test group by rollup(group_id,job,name);</code></pre><ul>
<li>A,B,C</li>
<li>A,B,NULL</li>
<li>A,NULL,NULL</li>
<li>NULL,NULL,NULL</li>
</ul>
<blockquote>
<p><strong>也就是说分组列由多向少，由前向后递减的。也就是说组合的总数始终是列数N(列数量)+1(NULL)</strong><br><strong>有一点需要注意，对于分组的列而言，与顺序无关，也就是说A在前或者B在前都是一样的结果。</strong></p>
</blockquote>
<h3 id="GROUP-BY-后的ROLLUP，group-by-与ROLLUP之间有列的关系"><a href="#GROUP-BY-后的ROLLUP，group-by-与ROLLUP之间有列的关系" class="headerlink" title="GROUP BY 后的ROLLUP，group by 与ROLLUP之间有列的关系"></a>GROUP BY 后的ROLLUP，group by 与ROLLUP之间有列的关系</h3><ol>
<li><p>GROUP BY 后的列与ROLLUP中的列有相同的</p>
<p>select group_id,job,sum(salary) from group_test group by group_id rollup(group_id,job);</p>
</li>
</ol>
<p>则产生的分组有以下三种</p>
<ul>
<li>GROUP BY A,A,B——等价于GROUP BY A,B——对应GROUP BY为select group_id,job,sum(salary) from group_test group by group_id,job</li>
<li>GROUP BY A,A,NULL——等价于GROUP BY A</li>
<li>GROUP BY A,NULL,NULL——等价于GROUP BY A</li>
</ul>
<ol start="2">
<li><p>GROUP BY 后的列与ROLLUP中的列不同</p>
<p>select A, B, C,sum(salary) from group_test group by C rollup(A,B);</p>
</li>
</ol>
<p>则分为以下三种:</p>
<ul>
<li>GROUP BY C,A,B</li>
<li>GROUP BY C,A</li>
<li>GROUP BY C</li>
</ul>
<blockquote>
<p>那么由此而知，如果GROUP BY 后有列，并且还进行ROLLUP则其组合是M(GROUP BY 列数)+N(ROLLUP列数)</p>
</blockquote>
<h3 id="group-by-后跟CUBE"><a href="#group-by-后跟CUBE" class="headerlink" title="group by 后跟CUBE**"></a>group by 后跟CUBE**</h3><p>ROLLUP与CUBE有些区别。查询数据排序相反 当分组列为一个时，查询的数据一样，当多一个job后，不仅有ROLLUP的这21列数据，还多出了每个工作的总薪资,多了4行数据。 带CUBE的子句会产生更多的数据,cube后面的列有多少种组合就有多少种分组，例如两列，则有A、B、A,B、NULL四种，分别对应了数据中的</p>
<ul>
<li>A,NULL—— 30 _ 12000:每组的总薪资:select group_id,null,sum(salary) from group_test group by(group_id,null);</li>
<li>B,NULL—— _ coding 10000:每种工作的总薪资:select null,job,sum(salary) from group_test group by(null,job);</li>
<li>A,B,NULL—— 40 coding 4000:每组种每种工作的总薪资:select group_id,job,sum(salary) from group_test group by(group_id,job);</li>
<li>NULL,NULL—— _ _ 40000:所有总薪资:select null,null,sum(salary) from group_test group by(null,null);</li>
</ul>
<p>这四种group by组成了cube，而rollup少了第二种(B,NULL)，每种工作的总薪资，因为ROLLUP是从左往右依次减少的嘛。而如若cube有3列，可组成8种,那么就组成了</p>
<ul>
<li>a对应为a,null,null</li>
<li>b对应为b,null,null</li>
<li>c对应为c,null,null</li>
<li>ab对应为a,b,null</li>
<li>ac对应为a,c,null</li>
<li>bc对应为b,c,null</li>
<li>abc对应为a,b,c</li>
<li>null对应为null,null,null</li>
</ul>
<h3 id="与ROLLUP组合的几个函数"><a href="#与ROLLUP组合的几个函数" class="headerlink" title="与ROLLUP组合的几个函数"></a>与ROLLUP组合的几个函数</h3><ol>
<li>GTOUPING函数</li>
</ol>
<p>必须且只能接受一列作为参数。参数列值为NULL则返回1，参数列值非空则返回0。这个在上面的示例中已经证明了。</p>
<ol start="2">
<li>GROUP_ID函数</li>
</ol>
<p>不接受任何参数，返回值为某个特定的分组出现的重复次数(GROUP BY后和ROLLUP后都有分组列时),重复次数重0开始，第一次出现为0，第二次为1，第n次为N-1。以下三段代码很好的说明了这个函数的作用</p>
<pre><code>--按group_id分组，不存在重复
select group_id,sum(salary),group_id() from group_test group by group_id;
--按group_id分组，且rollup分组，会重复出现上个语句查出的数据
select group_id,sum(salary),group_id() from group_test group by group_id,rollup(group_id);
--与前一情况类似
select group_id,job,sum(salary),group_id() from group_test group by group_id,rollup(group_id,job);</code></pre><ol start="3">
<li>GROUPING_ID函数</li>
</ol>
<p>必须传入一列或多列作为其参数。返回值为按参数排列顺序，依次对各个参数使用grouping()函数，并将结果值依次串成一串二进制数然后再转化为十进制所得到的值。 例如：</p>
<pre><code>grouping(A) = 0 ; grouping(B) = 1;
则：grouping_id(A,B)  =  (01)2  = 1;
grouping_id(B,A)  =  (10)2  =2;</code></pre>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle归档日志管理操作</title>
    <url>/2018/10/24/Oracle/Oracle%E5%BD%92%E6%A1%A3%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="归档日志"><a href="#归档日志" class="headerlink" title="归档日志"></a>归档日志</h1><p><strong>查看归档日志存放位置以及空间大小</strong></p>
<pre><code>select * from v$recovery_file_dest;</code></pre><p><strong>查看你归档日志使用情况,空间占用率,percent_space_used为使用百分比</strong></p>
<pre><code>select * from v$flash_recovery_area_usage;</code></pre><p><strong>更改归档日志使用空间大小(20_1024_1024*1024)</strong></p>
<pre><code>alter system set db_recovery_file_dest_size=21474836480;</code></pre><h2 id="归档日志备份操作"><a href="#归档日志备份操作" class="headerlink" title="归档日志备份操作"></a>归档日志备份操作</h2><p><strong>列出归档日志</strong></p>
<pre><code>list archivelog all;</code></pre><p><strong>列出归档日志的备份</strong></p>
<pre><code>list backup of archivelog all;</code></pre><p><strong>检查所有归档日志</strong></p>
<pre><code>crosscheck archivelog all;</code></pre><p><strong>备份所有归档日志</strong></p>
<pre><code>backup archivelog all;</code></pre><p>删除过期归档日志</p>
<pre><code>delete expired archivelog all;</code></pre><h2 id="归档日志的删除"><a href="#归档日志的删除" class="headerlink" title="归档日志的删除"></a>归档日志的删除</h2><p><strong>删除当前系统7天前的归档日志</strong>，如果使用闪回功能，则也会删除闪回的数据</p>
<pre><code>DELETE ARCHIVELOG ALL COMPLETED BEFORE &apos;SYSDATE-7&apos;;</code></pre><p><strong>删除七天前到现在的归档日志</strong></p>
<pre><code>DELETE ARCHIVELOG FROM TIME &apos;SYSDATE-7&apos;;</code></pre><p><strong>删除所有日志</strong></p>
<pre><code>delete archivelog until time &apos;sysdate&apos;;</code></pre><p><strong>删除过期日志</strong></p>
<pre><code>delete expired archivelog all;</code></pre><p>做完操作后建议立即全备份</p>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>查看过期备份</p>
<pre><code>report obsolete;</code></pre><p>删除过期备份</p>
<pre><code>delete obsolete;</code></pre>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle Sqlplus相关操作</title>
    <url>/2018/10/23/Oracle/Oracle%20Sqlplus%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Oracle-sqlplus"><a href="#Oracle-sqlplus" class="headerlink" title="Oracle sqlplus"></a>Oracle sqlplus</h1><h2 id="shutdown命令的参数"><a href="#shutdown命令的参数" class="headerlink" title="shutdown命令的参数"></a>shutdown命令的参数</h2><p>有四种 NORMAL / TRANSACTIONAL / IMMEDIATE / ABORT</p>
<ul>
<li>SHUTDOWN NORMAL：不允许新的连接、等待会话结束、等待事务结束、做一个检查点并关闭数据文件。启动时不需要实例恢复。</li>
<li>SHUTDOWN TRANSACTIONAL：不允许新的连接、不等待会话结束、等待事务结束、做一个检查点并关闭数据文件。启动时不需要实例恢复。</li>
<li>SHUTDOWN IMMEDIATE：不允许新的连接、不等待会话结束、不等待事务结束、做一个检查点并关闭数据文件。没有结束的事务是自动rollback的。启动时不需要实例恢复。</li>
<li>SHUTDOWN ABORT：不允许新的连接、不等待会话结束、不等待事务结束、不做检查点且没有关闭数据文件。启动时自动进行实例恢复。非正常关闭</li>
</ul>
<p>关闭数据库的时间从长到短，相反，开启的时候是从短到长。</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p><strong>cmd连接sqlplus</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlplus sys&#x2F;system@hsbdc as sysdba</span><br></pre></td></tr></table></figure>

<p><strong>控制台启动关闭数据库服务,需要管理员方式打开cmd</strong></p>
<pre><code>net stop oracleserviceorcl;
net start oracleserviceorcl;</code></pre><p><strong>查看数据库状态</strong></p>
<pre><code>select status from v$instance;</code></pre><p><strong>设置sqlplus的时间格式</strong></p>
<pre><code>alter session set nls_date_format=&apos;yyyy-mm-dd hh24:mi:ss&apos;;</code></pre><p><strong>查看角色被授予的权限</strong></p>
<pre><code>select * from dba_sys_privs where grantee=&apos;RESOURCE&apos;;</code></pre><p><strong>查看数据库是否运行在归档模式</strong></p>
<pre><code>select log_mode from v$database;
archive log list;</code></pre><p><strong>查看数据库参数信息</strong></p>
<pre><code>select * from nls_database_parameters;</code></pre><p><strong>查看行对应数据库地址</strong></p>
<pre><code>select empno,ename,rowid,dbms_rowid.rowid_relative_fno(rowid) || &apos;_&apos; ||dbms_rowid.rowid_block_number (rowid) || &apos;_&apos; || dbms_rowid.rowid_row_number(rowid) location from emp;</code></pre><p><strong>返回当前会话用户</strong></p>
<pre><code>select user,uid from dual;</code></pre><p><strong>查看闪存恢复区使用情况,也包括归档空间</strong></p>
<pre><code>select * from v$flash_recovery_area_usage;</code></pre><p><strong>查看用户索引建立在那些字段上</strong></p>
<pre><code>select i.owner,i.table_name,i.index_name,c.column_name from dba_indexes i,dba_ind_columns c where i.owner=c.index_owner and i.index_name=c.index_name and i.table_owner=&apos;SCOTT&apos;;</code></pre><p><strong>查看当前SCN</strong></p>
<pre><code>select dbms_flashback.get_system_change_number scn from dual;</code></pre>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle触发器</title>
    <url>/2018/10/23/Oracle/Oracle%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
    <content><![CDATA[<h1 id="简单DML触发器"><a href="#简单DML触发器" class="headerlink" title="简单DML触发器"></a>简单DML触发器</h1><h2 id="DML触发器"><a href="#DML触发器" class="headerlink" title="DML触发器"></a>DML触发器</h2><p>一个DML触发器实在任一个表或视图创建的，并且他的触发器是由DML语句DELETE、INSERT、UPDATE。要创建响应merge语句而触发的触发器。请在操作分解的INSERT和UPDATE语句上创建触发器MERGE。 DML触发器是简单触发器或符合触发器 一个 简单的DML触发器恰好触发其中一个触发器时间点:</p>
<ul>
<li>在触发语句运行之前<br>触发器称为BEFORE 语句触发器或语句级 BEFORE 触发器。</li>
<li>触发语句运行后<br>触发器称为AFTER 语句触发器或语句级 AFTER 触发器。</li>
<li>在触发语句影响的每一行之前<br>触发器称为BEFORE 每行触发器或行级 BEFORE 触发器。</li>
<li>在触发语句影响的每一行之后<br>触发器称为AFTER 每行触发器或行级 AFTER 触发器。</li>
</ul>
<p>在表或编辑视图上创建的复合DML触发器可以在前一个，一些或所有时间点触发。复合DML触发器有助于编写一种方法，您希望为各种时序点实现的操作共享公共数据。</p>
<h3 id="触发条件谓词"><a href="#触发条件谓词" class="headerlink" title="触发条件谓词"></a>触发条件谓词</h3><p>条件谓词</p>
<p>当且仅当</p>
<p>INSERTING</p>
<p>一个INSERT声明触发了触发器</p>
<p>UPDATING</p>
<p>一个UPDATE声明触发了触发器</p>
<p>UPDATING(‘column’)</p>
<p>UPDATE影响指定列的语句触发了触发器。</p>
<p>DELETING</p>
<p>一个DELETE声明触发了触发器</p>
<p>示例1:简单DML触发器</p>
<pre><code>CREATE OR REPLACE TRIGGER t
  BEFORE
    INSERT OR
    UPDATE OF sal, deptno OR
    DELETE
  ON emp
BEGIN
  CASE
    WHEN INSERTING THEN
      DBMS_OUTPUT.PUT_LINE(&apos;Inserting&apos;);
    WHEN UPDATING(&apos;sal&apos;) THEN
      DBMS_OUTPUT.PUT_LINE(&apos;Updating salary&apos;);
    WHEN UPDATING(&apos;deptno&apos;) THEN
      DBMS_OUTPUT.PUT_LINE(&apos;Updating department ID&apos;);
    WHEN DELETING THEN
      DBMS_OUTPUT.PUT_LINE(&apos;Deleting&apos;);
  END CASE;
END;</code></pre><p>sqldeveloper请点击菜单栏【查看】，点击【DBMS 输出】，查看DBMS输出结果。</p>
<h3 id="触发器的相关名"><a href="#触发器的相关名" class="headerlink" title="触发器的相关名"></a>触发器的相关名</h3><p>在进行<strong>行级简单DML触发器和具有行级别时间点部分的</strong>复合DML触发器时可通过相关名获得操作的原数据。 在一个视图或表上创建触发器，然后使用OLD和NEW来参考原数据，可引用被触发表的当前行。PARENT引用父表的当前行。 OLD，NEW和PARENT也被称为伪记录，因为它们具有记录结构，伪记录的结构是table_name%ROWTYPE，因为是%ROWTYPE,所以可以“.列名” 对于新旧相关名的字段值</p>
<p>触发声明</p>
<p>旧字段值</p>
<p>新字段值</p>
<p>INSERT</p>
<p>NULL</p>
<p>插入后的值</p>
<p>UPDATE</p>
<p>更新前的值</p>
<p>更新后的值</p>
<p>DELETE</p>
<p>预删除的值</p>
<p>NULL</p>
<p>需要注意的是:</p>
<ul>
<li>触发器无法更改OLD字段值。</li>
<li>如果触发语句是DELETE，则触发器不能更改NEW字段值。</li>
<li>一个AFTER触发器不能更改NEW字段值，因为触发语句触发器触发之前运行。</li>
<li>一个BEFORE触发器可以改变NEW触发之前的字段值INSERT或UPDATE语句将它们在表中。</li>
<li>如果语句同时BEFORE触发触发器和AFTER触发器，并且BEFORE触发器更改了NEW字段值，则AFTER触发器“看到”该更改。</li>
</ul>
<p>示例2:使用相关名的行触发器</p>
<pre><code>DROP TABLE Emp_log;
CREATE TABLE Emp_log (
  Emp_id     NUMBER,
  Log_date   DATE,
  New_salary NUMBER,
  Action     VARCHAR2(20));

CREATE OR REPLACE TRIGGER log_salary_increase
  AFTER UPDATE OF sal ON emp
  FOR EACH ROW
BEGIN
  INSERT INTO Emp_log (Emp_id, Log_date, New_salary, Action)
  VALUES (:NEW.empno, SYSDATE, :NEW.sal, &apos;New Salary&apos;);
END;</code></pre><p>此语句表示，创建一个emp的日志表，通过更新触发emp表的sal字段,且为行级触发器,:NEW.empno即表示获得新的empno，那么就是更新后的值，依然是原来的值。 注意，在使用相关名时，触发器<strong>必须是行级别的</strong>触发器，否则无法创建,那么就需要添加for each row语句 示例3:含when语句的行触发器</p>
<pre><code>----- 触发器，含when条件
CREATE OR REPLACE TRIGGER print_salary_changes
  BEFORE DELETE OR INSERT OR UPDATE ON emp
  FOR EACH ROW
  WHEN (NEW.job &lt;&gt; &apos;MANAGER&apos;)  -- do not print information about President
DECLARE
  sal_diff  NUMBER;
BEGIN
  sal_diff  := :NEW.sal  - :OLD.sal;
  DBMS_OUTPUT.PUT(:NEW.ename || &apos;: &apos;);
  DBMS_OUTPUT.PUT(&apos;Old salary = &apos; || :OLD.sal || &apos;, &apos;);
  DBMS_OUTPUT.PUT(&apos;New salary = &apos; || :NEW.sal || &apos;, &apos;);
  DBMS_OUTPUT.PUT_LINE(&apos;Difference: &apos; || sal_diff);
END;

UPDATE emp SET sal = sal* 1.05</code></pre><p>该更新语句，在执行后，表中所有数据行都进行了更新，但只有符合when条件的才执行begin end中的语句。 示例4:触发器修改LOB列</p>
<pre><code>-- 修改lob字段触发器
DROP TABLE tab1;
CREATE TABLE tab1 (c1 CLOB);
INSERT INTO tab1 VALUES (&apos;&lt;h1&gt;HTML Document Fragment&lt;/h1&gt;&lt;p&gt;Some text.&apos;);

CREATE OR REPLACE TRIGGER trg1
  BEFORE UPDATE ON tab1
  FOR EACH ROW
BEGIN
  DBMS_OUTPUT.PUT_LINE(&apos;Old value of CLOB column: &apos;||:OLD.c1);
  DBMS_OUTPUT.PUT_LINE(&apos;Proposed new value of CLOB column: &apos;||:NEW.c1);

  :NEW.c1 := :NEW.c1 || TO_CLOB(&apos;&lt;hr&gt;&lt;p&gt;Standard footer paragraph.&apos;);

  DBMS_OUTPUT.PUT_LINE(&apos;Final value of CLOB column: &apos;||:NEW.c1);
END;

SET SERVEROUTPUT ON;
UPDATE tab1 SET c1 = &apos;&lt;h1&gt;Different Document Fragment&lt;/h1&gt;&lt;p&gt;Different text.&apos;;

SELECT * FROM tab1;</code></pre><p>LOB类型的，与DML行触发器类似 示例5:当表名与相关名重复时</p>
<pre><code>CREATE TABLE new (
  field1  NUMBER,
  field2  VARCHAR2(20)
);

CREATE OR REPLACE TRIGGER Print_salary_changes
BEFORE UPDATE ON new
REFERENCING new AS newest
FOR EACH ROW
BEGIN
  :newest.Field2 := TO_CHAR (:newest.field1);
END;</code></pre><p>当表名与相关名重复时，使用REFERENCING关键字重命名相关名，重命名new为newest。</p>
<h3 id="OBJECT-VALUE-伪列"><a href="#OBJECT-VALUE-伪列" class="headerlink" title="OBJECT_VALUE 伪列"></a>OBJECT_VALUE 伪列</h3><p>对象表上的触发器可以引用SQL伪列 OBJECT_VALUE，返回<strong>对象表的列的系统生成的名称</strong>。触发器还可以调用PL / SQL子程序，该子程序具有IN数据类型为的形式参数OBJECT_VALUE。 示例6:将某表作为object类型，做为表的字段值</p>
<pre><code>-- object_value
CREATE OR REPLACE TYPE t AS OBJECT (n NUMBER, m NUMBER);--创建类型
CREATE TABLE tbl OF t;  --创建表
BEGIN --设置值
  FOR j IN 1..5 LOOP
    INSERT INTO tbl VALUES (t(j, 0));
  END LOOP;
END;
SELECT * FROM tbl ORDER BY n;

CREATE TABLE tbl_history ( d DATE, old_obj t, new_obj t);--创建历史表，包含的数据类型时t
CREATE OR REPLACE TRIGGER Tbl_Trg --创建触发器,更新，通过相关名OLD,NEW的OBJECT_VALUE将整个对象值插入进来
  AFTER UPDATE ON tbl
  FOR EACH ROW
BEGIN
  INSERT INTO tbl_history (d, old_obj, new_obj)
  VALUES (SYSDATE, :OLD.OBJECT_VALUE, :NEW.OBJECT_VALUE);
END Tbl_Trg;

UPDATE tbl SET tbl.n = tbl.n+1</code></pre><p>OBJECT_VALUE伪列，通过OLD，NEW获得伪列，将自定义object类型值插入。 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/10/20181023160804.png" alt=""> 那么如果tbl表不是自定义的t类型，而是普通表呢？ 经过实验发现，如果将tbl表改为普通数据类型表的话，触发器是失效的,:OLD.OBJECT_VALUE就会报错,所以要想使用它，前提是被触发表必须市自定义类型。</p>
<h3 id="INSTEAD-OF-DML触发器"><a href="#INSTEAD-OF-DML触发器" class="headerlink" title="INSTEAD OF DML触发器"></a>INSTEAD OF DML触发器</h3><p>一个 INSTEAD OF DML 触发器是在<strong>非编辑视图或非编辑视图的嵌套表列上创建的DML触发器</strong>。数据库触发INSTEAD OF触发器而不是运行触发DML语句。一个INSTEAD OF触发不能是有条件的。</p>
<ul>
<li>一个INSTEAD OF触发器始终是一个行级触发器。一个INSTEAD OF触发器可以读取OLD和NEW值，但不能改变它们。</li>
<li>INSTEAD OF只能用在视图中，或者视图的嵌套表上</li>
</ul>
<p>示例7:当向视图插入数据时，基表同时插入，可使用INSTEAD OF触发器</p>
<pre><code>CREATE OR REPLACE VIEW order_info AS
   SELECT c.customer_id, c.cust_last_name, c.cust_first_name,
          o.order_id, o.order_date, o.order_status
   FROM customers c, orders o
   WHERE c.customer_id = o.customer_id;

CREATE OR REPLACE TRIGGER order_info_insert
   INSTEAD OF INSERT ON order_info
   DECLARE
     duplicate_info EXCEPTION;
     PRAGMA EXCEPTION_INIT (duplicate_info, -00001);
   BEGIN
     INSERT INTO customers
       (customer_id, cust_last_name, cust_first_name)
     VALUES (
     :new.customer_id,
     :new.cust_last_name,
     :new.cust_first_name);
   INSERT INTO orders (order_id, order_date, customer_id)
   VALUES (
     :new.order_id,
     :new.order_date,
     :new.customer_id);
   EXCEPTION
     WHEN duplicate_info THEN
       RAISE_APPLICATION_ERROR (
         num=&gt; -20107,
         msg=&gt; &apos;Duplicate customer or order ID&apos;);
   END order_info_insert;</code></pre><p>首先order_info视图表示，两个表为基表创建的视图，一般情况下再多基表创建的视图下插入不太可能。 order_info_insert为order_info的触发器,当视图表执行插入时，执行begin end。当你向视图插入时，:new相关名可直接获得对象列进行插入。 示例8：视图嵌套表的列上的触发器 <a href="https://docs.oracle.com/cd/E11882_01/appdev.112/e25519/triggers.htm#LNPLS2005">视图嵌套表的列上的触发器</a></p>
<pre><code>与视图触发器有些许类似
--触发器创建
CREATE OR REPLACE TRIGGER dept_emplist_tr
  INSTEAD OF INSERT ON NESTED TABLE emplist OF dept_view --为dept_view视图的嵌套表emplist注册触发器
  REFERENCING NEW AS Employee       --重命名相关名为Employee
              PARENT AS Department  --重命名，parent即为父,Department相当于嵌套表的父表dept_view视图
  FOR EACH ROW</code></pre><h2 id="系统触发器"><a href="#系统触发器" class="headerlink" title="系统触发器"></a>系统触发器</h2><p>基于Oracle系统事件(如LOGON和STARTUP等)所建立的触发器,通过使用系统事件触发器，提供了跟踪系统或数据库变化的机制常用事件属性函数。</p>
<pre><code>ora_client_ip_address:用于返回客户端的ip地址
ora_database_name:返回当前数据库的名称
ora_dict_obj_name:返回DLL操作所对应的数据库对象名
ora_dict_obj_owner:返回DLL操作所对应的数据库所有者名
ora_dict_obj_type:返回DLL操作所对应的数据库对象的类型
ora_instance_num:返回例程号
ora_login_user:返回登陆用户名
ora_sysevent:返回触发触发器的系统事件名
等等


--只有特权用户才能创建,创建开启数据库触发器,必需使用after
create or replace trigger tr_startup
after startup on DATABASE
--只有特权用户才能创建,创建关闭数据库触发器,必需使用begore
create or replace trigger tr_shudown
before shutdown on DATABASE
--如果该scott对象上执行了DLL操作将被触发
create or replace trigger tr_dll
after DLL on scott.schema</code></pre><h2 id="管理触发器"><a href="#管理触发器" class="headerlink" title="管理触发器"></a>管理触发器</h2><h3 id="查询触发器"><a href="#查询触发器" class="headerlink" title="查询触发器"></a>查询触发器</h3><pre><code>select trigger_name,status from user_triggers where table_name=&apos;EMP&apos;</code></pre><h3 id="启用禁用"><a href="#启用禁用" class="headerlink" title="启用禁用"></a>启用禁用</h3><p>要启用或禁用单个触发器:</p>
<pre><code>ALTER TRIGGER [ schema.] trigger_name &#123;ENABLE | DISABLE&#125;;</code></pre><p>要启用或禁用在特定表上创建的所有触发器:</p>
<pre><code>ALTER TABLE table_name &#123; ENABLE | DISABLE &#125; ALL TRIGGERS;</code></pre><h3 id="重新编译，当表结构发生变化时使触发器转为INVALID状态，为使触发器继续生效，要重新编译"><a href="#重新编译，当表结构发生变化时使触发器转为INVALID状态，为使触发器继续生效，要重新编译" class="headerlink" title="重新编译，当表结构发生变化时使触发器转为INVALID状态，为使触发器继续生效，要重新编译"></a>重新编译，当表结构发生变化时使触发器转为INVALID状态，为使触发器继续生效，要重新编译</h3><pre><code>alter trigger trigger_name compile;</code></pre><h3 id="删除触发器：使用drop-trigger，注意：当表上触发器越多，对于DML操作的影响越大"><a href="#删除触发器：使用drop-trigger，注意：当表上触发器越多，对于DML操作的影响越大" class="headerlink" title="删除触发器：使用drop trigger，注意：当表上触发器越多，对于DML操作的影响越大"></a>删除触发器：使用drop trigger，注意：当表上触发器越多，对于DML操作的影响越大</h3><pre><code>drop trigger trigger_name;</code></pre>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle 定时任务Job</title>
    <url>/2018/10/15/Oracle/Oracle%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1Job/</url>
    <content><![CDATA[<h1 id="Oracle定时任务"><a href="#Oracle定时任务" class="headerlink" title="Oracle定时任务"></a>Oracle定时任务</h1><p>创建的定时任务都存储在DBMS_JOB中，通过dba_jobs表可以查询。</p>
<pre><code>select * from dba_jobs;
select * from user_jobs;</code></pre><ol>
<li><p>创建语法</p>
<p>DECLARE<br>  JOB_ID PLS_INTEGER;<br>BEGIN<br>  SYS.DBMS_JOB.SUBMIT(JOB =&gt; JOB_ID, – 自动生成JOB_ID</p>
<pre><code>WHAT =&gt; &apos;PRO_JOB;&apos;, -- 执行的存储过程或sql语句
next_date =&gt; sysdate -- 第一次执行时间
INTERVAL =&gt; &apos;TRUNC(SYSDATE) + 1 + 3 / (24)&apos;);--间隔</code></pre><p>  COMMIT;<br>END;</p>
</li>
</ol>
<p>或物化视图刷新</p>
<pre><code>begin
  sys.dbms_job.submit(job =&gt; :job,
                      what =&gt; &apos;dbms_refresh.refresh(&apos;&apos;&quot;BDCCXTJ&quot;.&quot;MV_QZRQ_DJQK_FWYT_TBLB&quot;&apos;&apos;);&apos;,
                      next_date =&gt; to_date(&apos;08-09-2018 13:47:40&apos;, &apos;dd-mm-yyyy hh24:mi:ss&apos;),
                      interval =&gt; &apos;TO_DATE(CONCAT(TO_CHAR(SYSDATE+1,&apos;&apos;DD-MM-YYYY&apos;&apos;),&apos;&apos;13:47:40&apos;&apos;),&apos;&apos;DD-MM-YYYY HH24:MI:SS&apos;&apos;)&apos;);
  commit;
end;</code></pre><p>当interval为null时，该job执行结束后，就会被从队列中删除。</p>
<ol start="2">
<li><p>手动执行</p>
<p>begin<br>  DBMS_JOB.RUN(JOB_ID);–手动执行，参数为job_id<br>  COMMIT;<br>end</p>
</li>
</ol>
<ol start="3">
<li><p>停止job</p>
<p>begin<br>  DBMS_JOB.broken(JOB_ID,true,next_date);<br>  –job编号，是否停止，停止时间(可以为sysdate)<br>  COMMIT;<br>end;</p>
</li>
</ol>
<ol start="4">
<li><p>删除job</p>
<p>begin<br>  dbms_job.remove(JOB_ID); /<em>删除自动执行的job,参数是 job_id</em>/<br>  commit;<br>end;</p>
</li>
</ol>
<ol start="5">
<li><p>修改job的间隔时间</p>
<p>begin<br>  dbms_job.interval(job_id，interval);<br>  /<em>参数为job的ID;interval: 计算下一次任务执行的时间表达式</em>/<br>  commit;<br>end;</p>
</li>
</ol>
<ol start="6">
<li><p>修改job要执行的任务</p>
<p>begin</p>
<pre><code>dbms_job.what(&apos;newProcedures();&apos;);
/*newProcedures(); 要更改的新操作名称*/</code></pre><p>  commit;<br>end;</p>
</li>
</ol>
<p>注意存储过程后的分毫不要遗漏;</p>
<ol start="7">
<li>运行时间表达式</li>
</ol>
<p>描述</p>
<p>表达式</p>
<p>每秒钟执行</p>
<p>SYSDATE + 1 /(60_24_60)</p>
<p>每分钟执行</p>
<p>TRUNC(sysdate,’mi’) + 1/ (24*60)</p>
<p>每10分钟执行</p>
<p>SYSDATE+10/(60*24)</p>
<p>每天0点执行</p>
<p>select TRUNC(sysdate+ 1)+0/(24)</p>
<p>每周一0点执行</p>
<p>TRUNC(next_day(sysdate,’星期一’))+0/24</p>
<p>每月一日0点执行</p>
<p>TRUNC(LAST_DAY(SYSDATE))+1+0/24</p>
<p>注意：如果带trunc函数和参数的话将会执行到某个整点，而不带的话每次以当前日期为准</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle RMAN命令总结</title>
    <url>/2018/10/15/Oracle/Oracle%20RMAN%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/john2017/p/6364546.html">https://www.cnblogs.com/john2017/p/6364546.html</a></p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库备份及RMAN命令</title>
    <url>/2018/10/15/Oracle/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E5%8F%8ARMAN%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Oracle数据库数据备份"><a href="#Oracle数据库数据备份" class="headerlink" title="Oracle数据库数据备份"></a>Oracle数据库数据备份</h1><ol>
<li><p>数据库归档模式由非归档模式改为归档模式 命令窗口中通过此命令查看</p>
<p>archive log list;</p>
</li>
</ol>
<p>改为归档模式</p>
<pre><code>shutdown immediate;-- 关闭数据库
startup mount;-- 启动数据库到mount状态
alter database archivelog;-- 修改数据库为归档模式
alter database open;-- 打开数据库</code></pre><h2 id="实例恢复与介质恢复"><a href="#实例恢复与介质恢复" class="headerlink" title="实例恢复与介质恢复"></a>实例恢复与介质恢复</h2><p>实例的恢复</p>
<pre><code>startup nomount；--读取pfile，没有实例恢复
altert mount database;--读取控制文件，没有实例回复
alter database open;--检查控制文件，数据文件头(检查数据库完整性)，发生实例恢复</code></pre><p>直接startup，将默认执行这三个命令 实例恢复的过程</p>
<pre><code>--前滚 
rolling forward
--读取状态为current和active状态的日志(redo log)，将发生crash时，没有来得及写道磁盘上的数据块，使用redo的信息来回复
--打开数据库
alter database open
--回滚
rolling back 数据库打开之后做</code></pre><p>当实例恢复无法恢复时，使用介质恢复。基于备份 需要介质恢复:</p>
<ul>
<li>数据文件丢失，损坏</li>
<li>在线日志文件丢失，损坏</li>
</ul>
<h2 id="exp-imp导入导出"><a href="#exp-imp导入导出" class="headerlink" title="exp/imp导入导出"></a>exp/imp导入导出</h2><p>导出具体分为：导出表，导出方案，导出数据库三种方式。 导出使用exp命令完成，该命令常用选项有:</p>
<ul>
<li>userid:用户名/口令</li>
<li>tables:导出指定的表名列表</li>
<li>owner:导出指定的所有者用户名列表</li>
<li>full:导出全部内容，默认n，可设置为y</li>
<li>file:输出文件</li>
<li>ROWS：导出数行，默认y</li>
<li>INDEXES：导出索引，默认y</li>
</ul>
<p>full=y和owner能同时使用，会导致报错，EXP-00026：指定了冲突模式,需要删除full=y full为全库导出，owner=导出指定用户下的所有objects 导出导入命令在cmd中执行，不能在sqlplus中，exp帮助执行命令,exp help=y</p>
<h2 id="RMAN备份"><a href="#RMAN备份" class="headerlink" title="RMAN备份"></a>RMAN备份</h2><p>在RMAN工具中，同样可以使用sql语句（管理类）,如在rman中开启数据库alter database open; RMAN使用<strong>服务器</strong>会话来完成备份操作，从RMAN客户端连接到服务器将产生一个服务器会话 RMAN备份内容包括：整个数据库,表空间,数据文件,指定的数据文件,控制文件,归档日志文件,参数文件等 RMAN备份类型分为:</p>
<ul>
<li>完整备份(full)或增量备份(incremental)</li>
<li>一致性备份(consistent)或不一致性备份(inconsistent)</li>
<li>热备份(open)或冷备份(closed)，冷备份时数据库必须处于mount状态，冷备份可以为一致性备份或非一致性备份</li>
</ul>
<h3 id="全备份"><a href="#全备份" class="headerlink" title="全备份"></a>全备份</h3><p>一般总是备份数据文件，控制文件，归档日志。参数文件和密码文件可选备份 进入恢复管理器</p>
<pre><code>rman target sys/password@连接字符串</code></pre><p>备份全库</p>
<pre><code>backup database;--备份全库，包括数据文件，控制文件，归档文件</code></pre><p>备份完毕后显示文件位置,同时备份了控制文件和SPFILE 表空间备份</p>
<pre><code>backup tablespace users;--users为表空间名称</code></pre><p>文件备份</p>
<pre><code>backup datafile 9;--这个数字表示数据文件的文件号</code></pre><p>备份集列表查看</p>
<pre><code>list backupset;</code></pre><p>归档文件全备份</p>
<pre><code>backup archivelog all;</code></pre><p>还原备份文件,restore表示还原</p>
<pre><code>restore database;</code></pre><p>介质恢复(还原备份之后，需要进行介质恢复)</p>
<pre><code>recover database;</code></pre><p>当介质无法恢复，且报错时，确认是否备份完整(肯定没问题的)rman中还原备份,重新启动oracle服务，此时依然是mounted状态，重新alter database open,查看报错信息，进行介质恢复recover database，然后重新open。 还原表空间</p>
<pre><code>restore tablespace users;--users</code></pre><p>还原数据文件</p>
<pre><code>restore datafile 4;--4为文件号</code></pre><p>如果数据文件丢失，那么如果强制启动，不对数据文件表空间做一致性检查，则</p>
<pre><code>alter database datafile 4 offline;--4表示当前缺失文件的文件号</code></pre><p>如果文件恢复完毕，那么文件依然是offline状态，所以需要进行online</p>
<pre><code>select file#,status from v$datafile;

alter database datafile 4 online;


delete backupset;--删除所有备份集,全部删除


delete obsolete;--删除过期的，依据保留策略</code></pre><p>检查数据库文件中出现的物理损坏的数据库</p>
<pre><code>backup check logical validate database;</code></pre><h4 id="SHOW-ALL配置"><a href="#SHOW-ALL配置" class="headerlink" title="SHOW ALL配置"></a>SHOW ALL配置</h4><pre><code>CONFIGURE RETENTION POLICY TO REDUNDANCY  --配置保留冗余备份集数量
CONFIGURE RETENTION POLICY TO REDUNDANCY 2;--配置数量为2

CONFIGURE BACKUP OPTIMIZATION OFF;--配置备份优化为关闭,可设置为ON

CONFIGURE CONTROLFILE AUTOBACKUP ON;--配置控制文件自动备份，ON为是，否则为OFF</code></pre><h4 id="控制文件"><a href="#控制文件" class="headerlink" title="控制文件"></a>控制文件</h4><pre><code>list backup of controlfile;--rman查看所有控制文件


alter system set control_file_record_keep_time=30;--设置控制文件保存时间天数


backup current controlfile;备份当前控制文件</code></pre><h4 id="归档日志"><a href="#归档日志" class="headerlink" title="归档日志"></a>归档日志</h4><pre><code>backup archivelog all;--备份所有归档日志


list archivelog all;--列出归档日志


list backup of archivelog all;--列出归档日志的备份


delete expired archivelog all;--删除过期归档日志


select * from v$recovery_file_dest;--查看归档日志存放位置以及空间大小


select * from v$flash_recovery_area_usage;--查看你归档日志使用情况,空间占用率,percent_space_used为使用百分比


alter system set db_recovery_file_dest_size=21474836480;--更改归档日志使用空间大小(20*1024*1024*1024)</code></pre><h4 id="report命令"><a href="#report命令" class="headerlink" title="report命令"></a>report命令</h4><pre><code>report need backup;--列出需要备份的，依据配置的保留策略

report need backup days 2 database;--列出超过两天没有备份的

report obsolete;--查看过期的，依据保留策略</code></pre><h4 id="crosscheck-检查命令"><a href="#crosscheck-检查命令" class="headerlink" title="crosscheck 检查命令"></a>crosscheck 检查命令</h4><pre><code>crosscheck backup of tablespace tb_name;检查表空间备份

crosscheck archivelog all;--检查所有归档日志

crosscheck backup of database;--检查数据库备份

crosscheck backup of controlfile;--检查控制文件备份

crosscheck backup of spfile；--检查备份spfile</code></pre><h4 id="检查与恢复"><a href="#检查与恢复" class="headerlink" title="检查与恢复"></a>检查与恢复</h4><pre><code>validate backupset 16;--检查备份集16的有效性

restore database validate;--还原并校验

restore database preview;--还原备份文件预览</code></pre><h3 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h3><p>差异增量:节约备份时间，但是恢复时间长 累计增量:多占用磁盘空间，恢复时间短 备份级别:(0,1,2,3) 增量备份 等级为1，0表示全库备份</p>
<pre><code>backup incremental level 1 database;--默认为差异增量</code></pre><p>当为1时，先全库备份level 0，在备份level 1。首先会检查是否由父备份，也就是level 0，没有就备份level 0，然后再备份level 1；如果有则直接备份level 1 当进行增量后，list backupset时，显示的备份集列表，类型不再时FULL，而是Incr，并且有lv等级。</p>
<ul>
<li>还原时，有多少备份集使用多少，最后使用归档。</li>
<li>原则:最近一次0级备份+最近一次1级备份+最近一次2级备份(如果有)+归档+online redo。</li>
<li>备份还原和会比归档要快。</li>
<li>当增量时，restore database会还原备份文件，而recover database则会恢复增量数据，并非之前的介质恢复</li>
</ul>
<h4 id="策略配置"><a href="#策略配置" class="headerlink" title="策略配置"></a>策略配置</h4><p>参考网址:<a href="https://blog.csdn.net/liqfyiyi/article/details/7017087">https://blog.csdn.net/liqfyiyi/article/details/7017087</a> 基于时间备份保留策略</p>
<pre><code>CONFIGURE RETENTION POLICY TO RECOVERY WINDOW OF n DAYS;</code></pre><p>取消备份保留策略</p>
<pre><code>CONFIGURE RETENTION POLICY TO NONE;</code></pre>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>RMAN</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle修改表空间大小、表空间查询</title>
    <url>/2018/10/15/Oracle/Oracle%E4%BF%AE%E6%94%B9%E8%A1%A8%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F%E3%80%81%E8%A1%A8%E7%A9%BA%E9%97%B4%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h1 id="Oracle修改表空间大小"><a href="#Oracle修改表空间大小" class="headerlink" title="Oracle修改表空间大小"></a>Oracle修改表空间大小</h1><p>对于创建表空间时，设置表空间过大或表空间过小已占满最大大小,对表空间进行修改大小操作，以节省磁盘空间</p>
<ol>
<li><p>查看所有表空间及表空间数据文件位置</p>
<p>select tablespace_name,file_name from dba_data_files;</p>
</li>
</ol>
<ol start="2">
<li><p>查看所有表空间及表空间大小</p>
<p>select tablespace_name ,sum(bytes) / 1024 / 1024 as MB　from dba_data_files group by tablespace_name;</p>
</li>
</ol>
<ol start="3">
<li><p>查看表空间使用情况</p>
<p>SELECT tbs 表空间名,</p>
<pre><code>sum(totalM) 总共大小M,
sum(usedM) 已使用空间M,
sum(remainedM) 剩余空间M,
sum(usedM)/sum(totalM)*100 已使用百分比,
sum(remainedM)/sum(totalM)*100 剩余百分比
FROM(
 SELECT b.file_id ID,
 b.tablespace_name tbs,
 b.file_name name,
 b.bytes/1024/1024 totalM,
 (b.bytes-sum(nvl(a.bytes,0)))/1024/1024 usedM,
 sum(nvl(a.bytes,0)/1024/1024) remainedM,
 sum(nvl(a.bytes,0)/(b.bytes)*100),
 (100 - (sum(nvl(a.bytes,0))/(b.bytes)*100))
 FROM dba_free_space a,dba_data_files b
 WHERE a.file_id = b.file_id
 GROUP BY b.tablespace_name,b.file_name,b.file_id,b.bytes
 ORDER BY b.tablespace_name
)
GROUP BY tbs;</code></pre></li>
</ol>
<ol start="4">
<li><p>修改表空间大小</p>
<p>alter database datafile ‘D:\APP\CGQ_R\ORADATA\ORCL\BAOWEN.DBF’ RESIZE 10240M;</p>
</li>
</ol>
<ol start="5">
<li><p>设置自增长</p>
<p>alter database datafile ‘D:\APP\CGQ_R\ORADATA\ORCL\BAOWEN.DBF’ autoextend on next 50m maxsize 500m;</p>
</li>
</ol>
<ol start="6">
<li><p>增加数据文件</p>
<p>alter tablespace BAOWEN add datafile ‘D:\APP\CGQ_R\ORADATA\ORCL\BAOWEN2.DBF’ size 500m;</p>
</li>
</ol>
<ol start="7">
<li><p>查询当前用户中表所属表空间</p>
<p>select table_name,tablespace_name from user_tables;</p>
</li>
</ol>
<ol start="8">
<li><p>查询表空间所属文件</p>
<p>select * from dba_data_files where tablespace_name=’BAOWEN’;</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>表空间</tag>
      </tags>
  </entry>
  <entry>
    <title>使用javax.mail包操作邮箱发送邮件</title>
    <url>/2018/10/11/Java/%E4%BD%BF%E7%94%A8javax.mail%E5%8C%85%E6%93%8D%E4%BD%9C%E9%82%AE%E7%AE%B1%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="使用javax-mail包操作邮箱发送邮件"><a href="#使用javax-mail包操作邮箱发送邮件" class="headerlink" title="使用javax.mail包操作邮箱发送邮件"></a>使用javax.mail包操作邮箱发送邮件</h1><h2 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h2><pre><code>&lt;dependency&gt;
    &lt;groupId&gt;javax.mail&lt;/groupId&gt;
    &lt;artifactId&gt;mail&lt;/artifactId&gt;
    &lt;version&gt;1.4.7&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;javax.activation&lt;/groupId&gt;
    &lt;artifactId&gt;activation&lt;/artifactId&gt;
    &lt;version&gt;1.1.1&lt;/version&gt;
&lt;/dependency&gt;</code></pre><h2 id="简单的不带附件及图片的邮件发送"><a href="#简单的不带附件及图片的邮件发送" class="headerlink" title="简单的不带附件及图片的邮件发送"></a>简单的不带附件及图片的邮件发送</h2><p>普通文本发送，分为text方式和HTML方式，一个不支持html标签，一个支持html标签。</p>
<pre><code>/**
     * 发送简单的邮件
     * @param mailBody 邮件信息实体类
     * @param type 发送的类型，text还是html
     * @return
     */
    public boolean sendSimpleMail(MailBody mailBody,String type) &#123;
        //邮件属性设置
        Properties prop = new Properties();
        prop.setProperty(&quot;mail.host&quot;, &quot;smtp.qq.com&quot;);
        prop.setProperty(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);
        prop.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;);

        // 使用JavaMail发送邮件的5个步骤
        // 1、创建session
        Session session = Session.getInstance(prop);
        // 开启Session的debug模式，这样就可以查看到程序发送Email的运行状态
        session.setDebug(true);
        // 2、通过session得到transport对象
        Transport ts;
        try &#123;
            ts = session.getTransport();
            // 3、使用邮箱的用户名和密码连上邮件服务器，发送邮件时，发件人需要提交邮箱的用户名和密码给smtp服务器，用户名和密码都通过验证之后才能够正常发送邮件给收件人。
            ts.connect(mailBody.getMailServerHost(), mailBody.getFromAddress(), mailBody.getPassword());
            // 4、创建邮件
            Message message = createSimpleMail(session,mailBody,type);
            // 5、发送邮件
            ts.sendMessage(message, message.getAllRecipients());
            ts.close();
        &#125; catch (NoSuchProviderException e) &#123;
            // TODO Auto-generated catch block
            e.printStackTrace();
        &#125; catch (MessagingException e) &#123;
            // TODO Auto-generated catch block
            e.printStackTrace();
        &#125; catch (Exception e) &#123;
            // TODO Auto-generated catch block
            e.printStackTrace();
        &#125;
        return true;
    &#125;


/**
     * 创建邮件发送对象及主体
     * @param session 邮件回话
     * @param mailBody 邮件主体
     * @param type 发送内容类型，text或html
     * @return
     * @throws Exception
     */
    public static MimeMessage createSimpleMail(Session session,MailBody mailBody,String type) throws Exception &#123;
        // 创建邮件对象
        MimeMessage message = new MimeMessage(session);
        // 指明邮件的发件人
        message.setFrom(new InternetAddress(mailBody.getFromAddress()));
        // 指明邮件的收件人，现在发件人和收件人是一样的，那就是自己给自己发
        message.setRecipient(Message.RecipientType.TO, new InternetAddress(mailBody.getToAddress()));
        // 邮件的标题
        message.setSubject(mailBody.getSubject());
        // 邮件的文本内容
        if(type.equals(&quot;html&quot;)) &#123;
            message.setContent(mailBody.getContent(), &quot;text/html;charset=UTF-8&quot;);
        &#125;else if(type.equals(&quot;text&quot;)) &#123;
            message.setText(mailBody.getContent());
        &#125;
        // 返回创建好的邮件对象
        return message;
    &#125;</code></pre>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mail</tag>
      </tags>
  </entry>
  <entry>
    <title>ArcGIS for Javascript搭建及HelloWorld</title>
    <url>/2018/09/29/Activiti/ArcGIS%20for%20Javascript%E6%90%AD%E5%BB%BA%E5%8F%8AHelloWorld/</url>
    <content><![CDATA[<h1 id="ArcGIS-for-Javascript搭建及HelloWorld"><a href="#ArcGIS-for-Javascript搭建及HelloWorld" class="headerlink" title="ArcGIS for Javascript搭建及HelloWorld"></a>ArcGIS for Javascript搭建及HelloWorld</h1><p>首先去官网下载ArcGIS for Javascript SDK,下载前必须要登录的。 <a href="https://developers.arcgis.com/downloads/apis-and-sdks?product=javascript">下载地址</a>,下载3.x版本。因为3.x版本和4.x版本结构会不太一样。</p>
<ol>
<li>下载完成后解压，将此文件夹放入tomcat webapps下</li>
</ol>
<p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180929170547.png?x-oss-process=style/600" alt=""></p>
<ol start="2">
<li>修改build，构建配置选项</li>
</ol>
<p>打开arcgis_js_api/library/3.26/下的install_api_windows.html文件，进行谷歌翻译,然后找到此处 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180929170936.png?x-oss-process=style/600" alt=""> 然后进行修改，将arcgis_js_api/library/3.26/3.26/下的init.js进行修改，打开文本编辑器，搜索[HOSTNAME_AND_PATH_TO_JSAPI],并将其替换为localhost:8080/arcgis_js_api/library/3.26/3.26/dojo,注意前面的https改成http。 同样将arcgis_js_api/library/3.26/3.26/dojo/下的dojo.js进行修改，一样搜索[HOSTNAME_AND_PATH_TO_JSAPI]，并进行替换。 注意这两个路径一定要和此arcgis_js_api放在tomcat中的路径一致，否则404。</p>
<h2 id="HelloWorld示例"><a href="#HelloWorld示例" class="headerlink" title="HelloWorld示例"></a>HelloWorld示例</h2><p>首先废话不多说，在webapps下创建一个文件夹test，并创建文件index.html,贴上示例代码</p>
<pre><code>&lt;html&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
  &lt;title&gt;Page Title&lt;/title&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;http://localhost:8080/arcgis_js_api/library/3.26/3.26/esri/css/esri.css&quot;&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;http://localhost:8080/arcgis_js_api/library/3.26/3.26/dijit/themes/tundra/tundra.css&quot;&gt;
  &lt;style&gt;
    html, body, #mapDiv&#123;
      padding: 0;
      margin: 0;
      height: 100%;
      width: 100%;
    &#125;
  &lt;/style&gt;
  &lt;script src=&quot;http://localhost:8080/arcgis_js_api/library/3.26/3.26/init.js&quot;&gt;&lt;/script&gt;
  &lt;script&gt;
    require([&quot;esri/map&quot;,&quot;dojo/domReady!&quot;],
        function(Map)&#123;
            var myMap = new Map(&quot;mapDiv&quot;,&#123;
                basemap:&quot;topo&quot;
            &#125;);
        &#125;)
  &lt;/script&gt;
&lt;/head&gt;
&lt;body class=tundra&gt;
  &lt;div id=&quot;mapDiv&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><p>这个，你仍需要注意的时，就是你的script引用地址是否正确。 通过localhost:8080/test访问即可，或者不需要tomcat，直接任意创建html文件也可以。 如果打开后出现4个框或空白，则表示可能script引入错误，F12控制台查看一下。 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180929172144.png?x-oss-process=style/600" alt=""></p>
]]></content>
      <categories>
        <category>arcgis</category>
      </categories>
      <tags>
        <tag>arcgis</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软快速入门与报表设计</title>
    <url>/2018/09/28/%E5%B8%86%E8%BD%AF/%E5%B8%86%E8%BD%AF%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%8E%E6%8A%A5%E8%A1%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="填报报表"><a href="#填报报表" class="headerlink" title="填报报表"></a>填报报表</h1><h2 id="1-创建模板-报表设计"><a href="#1-创建模板-报表设计" class="headerlink" title="1. 创建模板(报表设计)"></a>1. 创建模板(报表设计)</h2><p>就以Oracle最简单的emp和dept为例把。 模板设计如下 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180927173659.png?x-oss-process=style/400" alt="模板示例"></p>
<h2 id="2-添加控件"><a href="#2-添加控件" class="headerlink" title="2. 添加控件"></a>2. 添加控件</h2><p>右击单元格，选择控件设置 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180927175318.png?x-oss-process=style/400" alt="控件设置"> 选择对应的属性</p>
<h2 id="3-设置填报属性"><a href="#3-设置填报属性" class="headerlink" title="3. 设置填报属性"></a>3. 设置填报属性</h2><p>菜单栏选择模板=》填表填报属性 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180927175449.png?x-oss-process=style/400" alt="填表填报"> 打开后按顺序设置 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180927175708.png?x-oss-process=style/400" alt="设置"> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180927175903.png?x-oss-process=style/400" alt="智能添加字段"> 点击智能添加单元格，随后根据字段进行点击 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180927180008.png?x-oss-process=style/400" alt="智能添加单元格"> 再复选框中，设置勾选主键</p>
<h2 id="4-填报录取"><a href="#4-填报录取" class="headerlink" title="4. 填报录取"></a>4. 填报录取</h2><p>点击填报预览 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180927180912.png?x-oss-process=style/400" alt="点击填报预览"> 点击后就如图所示，填写完成后，点击提交 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180927180747.png?x-oss-process=style/400" alt="提交"></p>
<h2 id="在其中关于下拉设置和单选以及外键字段设置"><a href="#在其中关于下拉设置和单选以及外键字段设置" class="headerlink" title="在其中关于下拉设置和单选以及外键字段设置"></a>在其中关于下拉设置和单选以及外键字段设置</h2><h3 id="下拉控件设置"><a href="#下拉控件设置" class="headerlink" title="下拉控件设置"></a>下拉控件设置</h3><p>我们以上级姓名为范例。上级姓名，既然是上级自然也是员工，再emp表中，所以对于页面显示值和存储实际值而言一个是ename，一个是empno。 所以设置数据字典如下所展示 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180927182529.png?x-oss-process=style/400" alt="数据字典"></p>
<h3 id="外键字段设置"><a href="#外键字段设置" class="headerlink" title="外键字段设置"></a>外键字段设置</h3><p>对于<strong>外键字段</strong>设置，在填报属性中不能设置为Dept表的Name，而应该是Emp表的deptno。如果你设置了Dept表，那么它将会把它作为一个下拉值保存到dept表中，可能会导致数据表数据重复。因此它的<strong>填报属性需要设置为emp表的deptno</strong>，而<strong>控件属性的数据字典设置为Dept表</strong>，因为他就是一个全部的数据集。 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180927184410.png?x-oss-process=style/400" alt="外键字段的设置"></p>
<h3 id="单选按钮设置"><a href="#单选按钮设置" class="headerlink" title="单选按钮设置"></a>单选按钮设置</h3><p>对于单选而言,看一下示例。这里的emp没有sex字段的，那么先在表中为emp添加一个sex字段，就设置男和女把，那么<strong>控件设置中实际值和显示值都是sex字段</strong> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928084122.png?x-oss-process=style/400" alt="单选控件设置"> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928084542.png?x-oss-process=style/400" alt="设置单选填报属性"> 最后就是这样子 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928084726.png?x-oss-process=style/400" alt="预览"> 那么如果单选按钮，男女是一个数据字典，在数据字典表里，那么就可以跟外键字段一样设置。 然而还可以通过类型设置的自定义设置，如果数据比较少的话，就如男女，就这样，根据你的显示值和实际值设置 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928085059.png?x-oss-process=style/400" alt="自定义下拉"> 在实际过程中，最常用的就是填报报表，对于合同，资料来说用于填写，很方便，直接点提交就自动提交到数据库。而有时候也会需要到数据展示，比如季度报表，财务报表，工资条，等等各种需要展示数据的时候。</p>
<h1 id="分页预览"><a href="#分页预览" class="headerlink" title="分页预览"></a>分页预览</h1><h2 id="报表设计"><a href="#报表设计" class="headerlink" title="报表设计"></a>报表设计</h2><h3 id="单元格拓展"><a href="#单元格拓展" class="headerlink" title="单元格拓展"></a>单元格拓展</h3><p>单元格拓展就是模板中只有一个单元格，在显示时显示一列数据，拓展出多个单元格，当然拓展是由方向的而且只能是一个方向 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/2018092809100001.png?x-oss-process=style/400" alt="示例"> 查看一下这个示例 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928091339.png?x-oss-process=style/400" alt="range"> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928091355.png?x-oss-process=style/400" alt="纵向拓展"> 该示例中，使用了=range(1,5)这个函数，边框，居中，设置了纵向拓展。 如果设置不拓展，则点击左边的禁止按钮即可。那么输出的1，2，3，4，5就显示在一个单元格内。</p>
<h3 id="父子格设置"><a href="#父子格设置" class="headerlink" title="父子格设置"></a>父子格设置</h3><h4 id="什么是父子格"><a href="#什么是父子格" class="headerlink" title="什么是父子格"></a>什么是父子格</h4><p>既然是父子格，两单元格必存在某种关系，使单元格存在数据过滤关系，并且跟随拓展。如图所示，前面的使父格，后面的是子格，子格会根据父格的数据进行过滤显示，并随父格拓展方向拓展。 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928092702.png?x-oss-process=style/400" alt="父子格示例"></p>
<h4 id="父子格关系"><a href="#父子格关系" class="headerlink" title="父子格关系"></a>父子格关系</h4><p>父子格之间有两种关系，一个是过滤，一个是跟随。父格就是相邻的左，上单元格，但也可能是自定义的任意单元格。</p>
<h5 id="1-过滤关系是指子格会默认将父格数据作为过滤条件进行过滤，使父子格之间的数据能对应的显示"><a href="#1-过滤关系是指子格会默认将父格数据作为过滤条件进行过滤，使父子格之间的数据能对应的显示" class="headerlink" title="1. 过滤关系是指子格会默认将父格数据作为过滤条件进行过滤，使父子格之间的数据能对应的显示"></a>1. 过滤关系是指子格会默认将父格数据作为过滤条件进行过滤，使父子格之间的数据能对应的显示</h5><p><img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928093510.png?x-oss-process=style/400" alt="过滤关系"> 在这里需注意，父子格来自不同数据集，则不存在过滤关系，子格随父格重复显示，只有当在同一数据集中才存在过滤。</p>
<h5 id="2-跟随关系是指子格会默认跟随父格的拓展方向进行分组，即父格纵向，子格也会随父格纵向，当然子格仍然可以改变自己的拓展方向"><a href="#2-跟随关系是指子格会默认跟随父格的拓展方向进行分组，即父格纵向，子格也会随父格纵向，当然子格仍然可以改变自己的拓展方向" class="headerlink" title="2. 跟随关系是指子格会默认跟随父格的拓展方向进行分组，即父格纵向，子格也会随父格纵向，当然子格仍然可以改变自己的拓展方向"></a>2. 跟随关系是指子格会默认跟随父格的拓展方向进行分组，即父格纵向，子格也会随父格纵向，当然子格仍然可以改变自己的拓展方向</h5><p><img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928094001.png?x-oss-process=style/400" alt="跟随关系"></p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>那么我们根据emp和dept看一下示例</p>
<h5 id="1-非相同数据集，无过滤关系，显示所有"><a href="#1-非相同数据集，无过滤关系，显示所有" class="headerlink" title="1. 非相同数据集，无过滤关系，显示所有"></a>1. 非相同数据集，无过滤关系，显示所有</h5><p><img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928094519.png?x-oss-process=style/400" alt="示例模板"> 我们设置了两个数据集，一个是emp的select *,一个是dept的select *。而且B4是C4的左父格，并且B4左侧有一个向下的蓝箭头，说明是也有跟随关系，而且是跟随向下。因为不存在过滤关系，所以每个部门都显示所有的员工。</p>
<h5 id="2-相同数据集，过滤关系，显示各部门对应员工"><a href="#2-相同数据集，过滤关系，显示各部门对应员工" class="headerlink" title="2. 相同数据集，过滤关系，显示各部门对应员工"></a>2. 相同数据集，过滤关系，显示各部门对应员工</h5><p><img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928095125.png?x-oss-process=style/400" alt="示例模板"> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928095138.png?x-oss-process=style/400" alt="示例结果"> 看，都是从emp数据集中出来的，所以，进行的过滤。</p>
<h5 id="3-跟随关系，子格默认随父格拓展方向进行分组"><a href="#3-跟随关系，子格默认随父格拓展方向进行分组" class="headerlink" title="3. 跟随关系，子格默认随父格拓展方向进行分组"></a>3. 跟随关系，子格默认随父格拓展方向进行分组</h5><p><img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928095415.png?x-oss-process=style/400" alt="示例模板"> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928095448.png?x-oss-process=style/400" alt="示例结果"> 来看示例，B4是B5的上父格，父子格都是来自同一数据集，所以是存在过滤关系的，父格横向拓展，子格纵向拓展，那么子格会依据父格进行分组过滤。因此出现了这个结果。</p>
<h5 id="4-自定义父格"><a href="#4-自定义父格" class="headerlink" title="4. 自定义父格"></a>4. 自定义父格</h5><p>在右边的单元格属性列表中有左父格，上父格选项，那默认就是当前单元格相邻的上边，左边的单元格，而无就表示没有父格，就不存在跟随和过滤两种关系。然当，你可以选择自定义，根据你自己的情况。 那么我们就依据官网的样式，进行自定义单元格 首先设计模板，ename和deptno在对斜角的方向，所以两者不存在父子格关系。那么我们就可以选中ename单元格，点击右边的左父格，选择自定义，可以填写单元格位置，也可以点右边的套索选中单元格。然后，你选中ename的时候，deptno就出现了蓝色的箭头。 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928100616.png" alt="示例模板"> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928100749.png?x-oss-process=style/400" alt="示例结果"> 当然对于这些简单的而言，还有更复杂点的，需要对每个单元格检查父子格及拓展方向，以便不会扰乱模板显示。</p>
<h5 id="5-拓展后，顺序的显示"><a href="#5-拓展后，顺序的显示" class="headerlink" title="5. 拓展后，顺序的显示"></a>5. 拓展后，顺序的显示</h5><p>在右侧单元格属性中，最下边就有那个设置，叫拓展后，可以选择正序还是倒序</p>
<h3 id="交叉报表"><a href="#交叉报表" class="headerlink" title="交叉报表"></a>交叉报表</h3><p>交叉表是最常见的基本报表类型，交叉表中包含数据的横向拓展和数据的纵向拓展。为了描述数据的复杂性，我们就先以emp为例 <a href="http://help.finereport.com/doc-view-2107.html">官网操作步骤在这里</a> emp中并没有交叉横纵向的，所以只有纵向，和进行求和。那么我们的示例就是显示每个部门的员工的薪资以及和部门的合计以及所有合计 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928112408.png?x-oss-process=style/400" alt="示例"></p>
<h4 id="emp示例"><a href="#emp示例" class="headerlink" title="emp示例"></a>emp示例</h4><p>对于像这种稍微复杂的，就是要捋清部门与员工，员工与薪资，合计之间的关系，以及左上父格的而设置，最后就是合计所对应的上左父格。</p>
<h5 id="1-设置表头，设置部门，员工姓名，薪资，提成。后跟一个合计，指为公式，计算C2和D2，-sum-C2-D2-。其余父格默认"><a href="#1-设置表头，设置部门，员工姓名，薪资，提成。后跟一个合计，指为公式，计算C2和D2，-sum-C2-D2-。其余父格默认" class="headerlink" title="1. 设置表头，设置部门，员工姓名，薪资，提成。后跟一个合计，指为公式，计算C2和D2，=sum(C2,D2)。其余父格默认"></a>1. 设置表头，设置部门，员工姓名，薪资，提成。后跟一个合计，指为公式，计算C2和D2，=sum(C2,D2)。其余父格默认</h5><p><img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928113301.png?x-oss-process=style/400" alt="示例"></p>
<h5 id="2-添加总合计"><a href="#2-添加总合计" class="headerlink" title="2. 添加总合计"></a>2. 添加总合计</h5><ul>
<li>A3,B3合并单元格命名总合计，C3设置为=sum(C2),D3设置为=sum(D2),E3设置为=sum(E2)</li>
<li>其余默认</li>
</ul>
<p>对于为何这么做，第一行为标题，死文字，不会变，第二行均为纵向拓展，第三行也是死文字，只不过和合计是通过第二行得来的，所以要合计第二行对应的数值，第二行拓展，第三行依然在最后一行。 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928113935.png?x-oss-process=style/400" alt="示例"></p>
<h5 id="3-为每个部门添加部门合计"><a href="#3-为每个部门添加部门合计" class="headerlink" title="3. 为每个部门添加部门合计"></a>3. 为每个部门添加部门合计</h5><ul>
<li>我们在第三行，右击插入一行，该行变为第四行，空出一个第三行。</li>
<li>依旧是A3，B3合并命名为部门合计,C3,D3,E3均设置为对应的=sum(C2),=sum(D2),=sum(E2)</li>
<li>我们将部门合计的左父格设置为A2，也就是部门那个单元格，这就有了过滤的性质了，每个部门进行合计，后面三个小合计也是左父格设置为它</li>
</ul>
<p><img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928115401.png?x-oss-process=style/400" alt="示例"> 这就完成了，我们来看这个图，发现，它与开始展示的是有一点区别的，就是标题头，首次展示的是每个部门一个标题头，这个展示的是只有一个标题头。</p>
<ul>
<li>然后你要取消总合计行中后三单元格的上父格为无，以免总合计行跑到第一部门合计后面</li>
<li>最后你的第一行表头都要把上父格设置为A2部门单元格,这就使每个部门都有一个标题</li>
</ul>
<p>看起来如果使一个标题还是比较见到的，而且更容易看啊。 文件地址:<a href="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/file/emp%E6%8C%89%E9%83%A8%E9%97%A8%E5%91%98%E5%B7%A5%E5%90%88%E8%AE%A1%E7%A4%BA%E4%BE%8B.cpt">emp示例文件地址</a> 因为这些都是父子格和拓展方向的问题，以及单元格关系，只要看怎么设置了。那么就不讲官网的案例的。</p>
<h3 id="行式报表"><a href="#行式报表" class="headerlink" title="行式报表"></a>行式报表</h3><h4 id="1-行式报表也就是最常用最简单的表格，都是以列表的形式向下显示的。图例我就不再演示了。"><a href="#1-行式报表也就是最常用最简单的表格，都是以列表的形式向下显示的。图例我就不再演示了。" class="headerlink" title="1. 行式报表也就是最常用最简单的表格，都是以列表的形式向下显示的。图例我就不再演示了。"></a>1. 行式报表也就是最常用最简单的表格，都是以列表的形式向下显示的。图例我就不再演示了。</h4><p>因为父子格的关系，默认如果是同一数据集，会出现过滤分组情况，在右上角，数据设置，默认是分组的。所以会依据部门进行分组合并单元格。 把该单元格设置为列表形式，那么就会不合并单元格，每条数据一一对应，以列表的形式显示下来。</p>
<h4 id="2-另外就是单元格样式的设置"><a href="#2-另外就是单元格样式的设置" class="headerlink" title="2. 另外就是单元格样式的设置"></a>2. 另外就是单元格样式的设置</h4><p>对于单元格样式，就犹如Excel表格一样的单元格设置，不过帆软的是在右下角的单元格设置的第二个选项卡，格式中，默认是常规，可以选择数字，货币，百分数，日期，时间等格式。另外还有对齐、字体、边框、背景设置，不过这几个在工具栏里有就更方便了。</p>
<h3 id="分组报表"><a href="#分组报表" class="headerlink" title="分组报表"></a>分组报表</h3><p>也就是普通的依据父子格进行分组，不过通常都会遇到数据设置，也就是刚才说的，除了<strong>分组</strong>默认的，还有上面讲的行式报表的<strong>列表</strong>格式,最后一个就是统计了。我们看下官方的例子就很明白 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928134855.png?x-oss-process=style/400" alt="示例"> 安顺放置，什么都不设置，没有什么不正常的，那么结果就如下，再正常不过了 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928135102.png?x-oss-process=style/400" alt="示例"> 那么把销量改成汇总求和，右上角的<strong>数据设置</strong>中设置汇总，于是求和就变成了这样 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180928135302.png?x-oss-process=style/400" alt="示例"> 为什么成这样，大家应该很明白，如果是默认分组，将显示每个产品对应的销量，而设置为汇总，就是求一个值。为什么这样说，因为如果你把产品这个字段也放上去，你就发现出来了，这个销量就是把每个员工的所有产品销量做一个汇总。 不光可以求和，还有其他的选项，如平均值，最值之类的。</p>
<h3 id="自由报表"><a href="#自由报表" class="headerlink" title="自由报表"></a>自由报表</h3><p>自由报表可以说就是填报报表,因为填报是自由的，对于列表的情况，我不想多写了，看一下文档吧<a href="http://help.finereport.com/finereport8.0/doc-view-147.html">自由报表</a> 还有其他的纵向的我也不多说了，还是那句话，无非就单元格字段本身关系和父子格关系<a href="http://help.finereport.com/finereport8.0/doc-view-149.html">分组汇总</a></p>
<h3 id="最后一点就是，还是单元格属性设置，右下角的，第三个选项，形态，这里面可以设置数据字典，也就是显示值和实际值。"><a href="#最后一点就是，还是单元格属性设置，右下角的，第三个选项，形态，这里面可以设置数据字典，也就是显示值和实际值。" class="headerlink" title="最后一点就是，还是单元格属性设置，右下角的，第三个选项，形态，这里面可以设置数据字典，也就是显示值和实际值。"></a>最后一点就是，还是单元格属性设置，右下角的，第三个选项，形态，这里面可以设置数据字典，也就是显示值和实际值。</h3><h1 id="参数入门"><a href="#参数入门" class="headerlink" title="参数入门"></a>参数入门</h1><p>FineReport报表中的参数按照其使用范围可以分为：模板参数和全局参数；按照其使用方式不同可以分为：模板参数和数据集参数。</p>
<h2 id="模板参数"><a href="#模板参数" class="headerlink" title="模板参数"></a>模板参数</h2><p>模板参数，在模板–》模板参数中定义，只有当前报表可以使用，且必须与过滤结合才能筛选数据。</p>
<h3 id="模板参数示例"><a href="#模板参数示例" class="headerlink" title="模板参数示例"></a>模板参数示例</h3><h4 id="1-首先放置emp数据集"><a href="#1-首先放置emp数据集" class="headerlink" title="1. 首先放置emp数据集"></a>1. 首先放置emp数据集</h4><h4 id="2-点击菜单栏【模板】，【模板参数】，设置一个参数"><a href="#2-点击菜单栏【模板】，【模板参数】，设置一个参数" class="headerlink" title="2. 点击菜单栏【模板】，【模板参数】，设置一个参数"></a>2. 点击菜单栏【模板】，【模板参数】，设置一个参数</h4><p><img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180929112202.png?x-oss-process=style/600" alt="示例"></p>
<h4 id="3-选中过滤的单元格emp-deptno-点击右上角的过滤-注意可选列设置正确，然后是操作符后面的下拉框，一定要点击下拉框前的小下拉框，选择参数，然后默认就显示出来你刚设置的参数，然后确定。"><a href="#3-选中过滤的单元格emp-deptno-点击右上角的过滤-注意可选列设置正确，然后是操作符后面的下拉框，一定要点击下拉框前的小下拉框，选择参数，然后默认就显示出来你刚设置的参数，然后确定。" class="headerlink" title="3. 选中过滤的单元格emp.deptno,点击右上角的过滤;注意可选列设置正确，然后是操作符后面的下拉框，一定要点击下拉框前的小下拉框，选择参数，然后默认就显示出来你刚设置的参数，然后确定。"></a>3. 选中过滤的单元格emp.deptno,点击右上角的过滤;注意可选列设置正确，然后是操作符后面的下拉框，一定要点击下拉框前的小下拉框，选择参数，然后默认就显示出来你刚设置的参数，然后确定。</h4><p><img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180929112228.png?x-oss-process=style/600" alt="示例"></p>
<h4 id="4-设置控件，点击上面灰色的笔，然后双击右下角的参数，就是你刚设置的参数；然后带你那个扳手选择下拉，或者在上面点击下拉拖过去"><a href="#4-设置控件，点击上面灰色的笔，然后双击右下角的参数，就是你刚设置的参数；然后带你那个扳手选择下拉，或者在上面点击下拉拖过去" class="headerlink" title="4. 设置控件，点击上面灰色的笔，然后双击右下角的参数，就是你刚设置的参数；然后带你那个扳手选择下拉，或者在上面点击下拉拖过去"></a>4. 设置控件，点击上面灰色的笔，然后双击右下角的参数，就是你刚设置的参数；然后带你那个扳手选择下拉，或者在上面点击下拉拖过去</h4><p><img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180929112646.png?x-oss-process=style/600" alt="示例"> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180929112703.png?x-oss-process=style/600" alt="示例"> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180929112907.png?x-oss-process=style/600" alt="示例"> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180929112922.png?x-oss-process=style/600" alt="示例"></p>
<h4 id="5-设置下拉框数据字典-选中下拉控件，查看右边属性中的数据字典属性，点击进行设置字典值，这与单元格属性-形态是一样的"><a href="#5-设置下拉框数据字典-选中下拉控件，查看右边属性中的数据字典属性，点击进行设置字典值，这与单元格属性-形态是一样的" class="headerlink" title="5. 设置下拉框数据字典,选中下拉控件，查看右边属性中的数据字典属性，点击进行设置字典值，这与单元格属性-形态是一样的"></a>5. 设置下拉框数据字典,选中下拉控件，查看右边属性中的数据字典属性，点击进行设置字典值，这与单元格属性-形态是一样的</h4><p><img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180929113119.png?x-oss-process=style/600" alt="示例"> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180929113143.png?x-oss-process=style/600" alt="示例"></p>
<h3 id="数据集参数"><a href="#数据集参数" class="headerlink" title="数据集参数"></a>数据集参数</h3><p>如果使用模板参数，需要先去出所有数据，然后再进行过滤，取数+过滤，将消耗大量时间。 所以你可以在定义数据集时直接<strong>使用where条件进行过滤需要的数据</strong>，而这个条件就作为一个数据集参数，而后面的操作与模板参数操作一模一样。 还可以在${}中使用带公式的。</p>
<pre><code>SELECT * FROM 订单 where 1=1 $&#123;if(len(area) == 0,&quot;&quot;,&quot;and 货主地区 = &apos;&quot; + area + &quot;&apos;&quot;)&#125; $&#123;if(len(province) == 0,&quot;&quot;,&quot;and 货主省份 = &apos;&quot; + province + &quot;&apos;&quot;)&#125;</code></pre><p>那我们就简单一点 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180929142840.png?x-oss-process=style/600" alt="示例"> 剩下的，只需要跟模板参数操作一样，对字段进行过滤一下，然后设置控件即可。</p>
<h3 id="全局参数"><a href="#全局参数" class="headerlink" title="全局参数"></a>全局参数</h3><p>顾名思义，就是作用于全局的参数，使用方式仍然是一模一样的。 全局参数的设置需要在【服务器】=》【全局参数】中设置，其他的就和模板参数一样了。</p>
<h3 id="参数过滤"><a href="#参数过滤" class="headerlink" title="参数过滤"></a>参数过滤</h3><p>用户在参数查询界面的控件中输入参数值，点击查询按钮，就将相应的数据查询出来了，这就是参数的过滤。 参数过滤就是在参数上做手脚，原原本本的参数，然后为参数做一些事情。 参数过滤也是分模板和数据集的。对于模板，在点击过滤按钮弹出过滤窗口时，将等号右表的值改为公式，也就是从之前的参数改为公式，那么就可以拿着$deptno参数，对这个参数做事情，比如减10，公式就是”=$deptno-10”。其他的就不用更改。 而数据集参数志记载${}中进行操作，也就是加减乘除都可以，或者放帆软函数，这与数据集参数是一样的。</p>
<h3 id="参数界面设置"><a href="#参数界面设置" class="headerlink" title="参数界面设置"></a>参数界面设置</h3><p>在点击控件后，右上角的属性设置，有一系列的属性值，进行设置</p>
<h3 id="动态表和动态条件"><a href="#动态表和动态条件" class="headerlink" title="动态表和动态条件"></a>动态表和动态条件</h3><p><a href="http://help.finereport.com/finereport8.0/doc-view-165.html"><strong>官网</strong></a> 也就是说对数据过滤的条件时不固定的，有时候用A列，有时候B列。这么做的话就要把where条件作为一个模板参数了。 数据集定义语句 SELECT * FROM TableName ${Condition} 而你添加控件时，设置文本控件，填写where colName=xxx就可以进行过滤。</p>
<h3 id="参数引用"><a href="#参数引用" class="headerlink" title="参数引用"></a>参数引用</h3><p>参数不光可以用来过滤，前面也说了，也可以通过函数操作，那当让，公式也是在所难免的，你可以对一个标题进行修改，点击哪个下拉值，列表就显示哪个标题 你只需要在单元格中通过公式的方式，在公式中例如: =$地区+“销售额”,这样值就会通过参数，自动改变了</p>
]]></content>
      <categories>
        <category>报表</category>
      </categories>
      <tags>
        <tag>帆软</tag>
        <tag>报表</tag>
      </tags>
  </entry>
  <entry>
    <title>easypoi操作excel导入导出</title>
    <url>/2018/09/27/Javascript/easypoi%E6%93%8D%E4%BD%9Cexcel%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<h1 id="easypoi"><a href="#easypoi" class="headerlink" title="easypoi"></a>easypoi</h1><p>easypoi是简易的excel导入导出等多项操作，MIT开源。封装了POI，使用注解方式更简洁的操作。 <a href="https://http://www.afterturn.cn/doc/easypoi.html">文档</a> Excel自适应xls和xlsx两种格式,word只支持docx模式。</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ol>
<li>@Excel:简单的注解，用于简单基本属性，其内容设置包括基础，图片处理，事件处理，合并处理。</li>
<li>@ExcelTarget:限定实体,3.3.0里好像没啥意思，但在集合的导出时需要设置到实体类上并设置name值，与类名相同就好</li>
<li>@ExcelEntity:该注解标注在属性对象上，如果对象内属性设置了导出，则依次每属性导出。</li>
<li>@ExcelCollection:该注解标注在属性集合上，常为list集合,设置name值表示对该集合的标题</li>
</ol>
<h2 id="导出示例"><a href="#导出示例" class="headerlink" title="导出示例"></a>导出示例</h2><h3 id="简单对象示例"><a href="#简单对象示例" class="headerlink" title="简单对象示例"></a>简单对象示例</h3><pre><code>//这是Student类的属性，这里我不复制getter/setter和构造
private String id;
@Excel(name = &quot;学生姓名&quot;,height = 10,width = 20,isImportField = &quot;true&quot;)
private String name;
@Excel(name = &quot;性别&quot;,height = 10,width = 20,isImportField = &quot;true&quot;)
private String sex;
@Excel(name = &quot;出生日期&quot;,height = 10,width = 20,format = &quot;yyyy-MM-dd&quot;)
private Date date;


Workbook workbook = ExcelExportUtil.exportExcel(new ExportParams(&quot;学生列表&quot;,&quot;学生&quot;),
        Teacher.class, list);
OutputStream outputStream = new FileOutputStream(new File(&quot;D:/a.xls&quot;));
workbook.write(outputStream);</code></pre><p>只需要在Main测试中，设置list，然后指定一个地址，即可输出 <strong>图示:</strong> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180926181440.png" alt="图示"> 简单的导出，只不过标题和列名没有类似加粗和背景色以及宽高并非自适应，而需要在注解中设置。</p>
<h3 id="集合定义"><a href="#集合定义" class="headerlink" title="集合定义"></a>集合定义</h3><pre><code>//teacher，我们把teacher的属性设置的和student一样，同样是id，name，sex，date
//并且为stuent类和teacher类上添加@ExcelTarget(&quot;teacher&quot;)，@ExcelTarget(&quot;student&quot;)注解,并且实现Serializable

//Course中,也要添加@ExcelTarget(&quot;course&quot;)注解
private String id;
@Excel(name = &quot;课程名称&quot;,orderNum = &quot;1&quot;,width = 15)
private String courseName;
@ExcelEntity private Teacher teacher;
@ExcelCollection(name=&quot;学生&quot;,orderNum = &quot;4&quot;)
private List&lt;Student&gt; student;


List stuList = new ArrayList();
stuList.add(new Student(&quot;1&quot;,&quot;学生1&quot;,&quot;男&quot;,new Date()));
stuList.add(new Student(&quot;2&quot;,&quot;学生2&quot;,&quot;女&quot;,new Date()));
stuList.add(new Student(&quot;3&quot;,&quot;学生3&quot;,&quot;女&quot;,new Date()));
stuList.add(new Student(&quot;4&quot;,&quot;学生4&quot;,&quot;男&quot;,new Date()));
List list = new ArrayList();
list.add(new Course(&quot;1&quot;,&quot;生物&quot;,new Teacher(&quot;1&quot;,&quot;老师1&quot;,&quot;男&quot;,new Date()),stuList));

Workbook workbook = ExcelExportUtil.exportExcel(new ExportParams(&quot;课程表&quot;,  &quot;课程表&quot;),
        Course.class, list);
OutputStream outputStream = new FileOutputStream(new File(&quot;D:/a.xls&quot;));
workbook.write(outputStream);</code></pre><p>同样，以同种方式导出，在ExportParams类中设置导出参数，如标题之类的，而个参数的构造表示标题和sheet名称，三个参数表示标题，副标题，sheet名称。 <strong>图示:</strong> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180926181629.png" alt="图示"> 这样看来，对于老师与学生并不能合并对应，可以添加needMessage为ture设置合并单元格,但是他的坏处是，并不能在@ExcelEntity上设置属性，而只能在@Excel上设置。那么我们为教师类的每个属性设置,以及courseName上 <strong>图示:</strong> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180926182009.png" alt="图示"></p>
<h3 id="图片导出"><a href="#图片导出" class="headerlink" title="图片导出"></a>图片导出</h3><ol>
<li><p>图片的导出，需要设置@Excel的两个参数,type和imageType。</p>
</li>
<li><p>type表示导出类型，设置为2是图片。imageType表示图片类型，是通过1:file还是2:数据库流读取，如果是1则String类型设置地址，2则设置类型为byte数组。</p>
</li>
<li><p>要设置width和height，图片会依据设置的宽高来百分之百缩放，并不会理会图片自身的分辨率大小。</p>
<p>@Excel(name = “照片”,type = 2,width = 40,height = 40,imageType = 1)<br>private String photo;</p>
<p>list.add(new Teacher(“1”,”你”,”男”,new Date(),”IMG_20171209_091639.jpg”));</p>
</li>
</ol>
<p><strong>图示:</strong> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180926183615.png" alt="图示"> 图片较大，可能加载缓慢</p>
<h2 id="导入示例"><a href="#导入示例" class="headerlink" title="导入示例"></a>导入示例</h2><h3 id="导入excel"><a href="#导入excel" class="headerlink" title="导入excel"></a>导入excel</h3><pre><code>ImportParams importParams = new ImportParams();
importParams.setTitleRows(1);
importParams.setHeadRows(1);
List&lt;Teacher&gt; list = ExcelImportUtil.importExcel(new File(&quot;a.xlsx&quot;),Teacher.class,importParams);
for (Teacher t:list) &#123;
    System.out.println(t.toString());
&#125;</code></pre><p>注意模板中列名一定要和属性值段上设置的name值相同，否则报模板错误</p>
<ol>
<li>@Excel的isImportField属性表示检测这个字段在导入时模板中是否有，目前3.3.0版本是false。一些取值具体还是需要看源码的，因为文档可能更新并不及时。那么为false的话就不检测模板中是否有没有，即使没有也不会报错，而有的话会自动导入到对象中。</li>
<li>ImportParams导入参数对象的设置</li>
</ol>
<ul>
<li>titleRows:表格标题的行数，标题为跨列的，几行就是几行</li>
<li>headRows：表头行数，就是列名，默认为1</li>
<li>startRows：字段真正值和列标题之间的距离 默认0</li>
<li>startSheetIndex：开始sheet索引，默认0</li>
<li>sheetNum：导入时，默认导入的数量，1，也就是只有第一个</li>
<li>readRows：手动控制读取行数，默认0,以0开始</li>
<li>lastOfInvalidRow：最后无效的行数，不读的行数</li>
<li>importFields:检验合法模板，字符串数组，为每个属性名,至少包含的字段</li>
<li>needSave：是否需要保存导入的excel，默认false,默认保存的路径为upload/excelUpload/Test/yyyyMMddHHmss_***** 保存名称上传时间_五位随机数。所以你需要设置SaveUrl属性，表示保存的位置。</li>
</ul>
<p>其他的看文档或源码。</p>
<h3 id="图片导入"><a href="#图片导入" class="headerlink" title="图片导入"></a>图片导入</h3><p>图片导入需要在excel中，图片与单元格绑定，否则无法获取到该单元格。 在ImportParam对象设置属性</p>
<ul>
<li>saveUrl属性设置上传excel文件保存位置</li>
<li>needSave表示是否保存</li>
<li>图片保存，3.3.0默认在/excel/upload/img，可以在@Excel中的savePath中设置保存路径</li>
</ul>
<p>其他的就没什么设置，只要图片和单元格绑定，就能成功读取。否则是读不到的。一定要选中单元格，但后再点插入图片，然后设置大小。 如果项目不是web项目的话，/excel/upload/img这种路径无法获取到，如果测试使用junit，则将地址改为某个盘符的固定目录。 如果你的图片属性是字节数组，则读出后直接是字节数组。</p>
<h2 id="使用ExcelExportEntity自由导出"><a href="#使用ExcelExportEntity自由导出" class="headerlink" title="使用ExcelExportEntity自由导出"></a>使用ExcelExportEntity自由导出</h2><p>该类表示对某Cell的设置，如名称，是否合并，等等,一个对象表示一个列，而一个列对应一个属性。</p>
<pre><code>List&lt;ExcelExportEntity&gt; list = new ArrayList&lt;ExcelExportEntity&gt;();

list.add(new ExcelExportEntity(&quot;教师姓名&quot;,&quot;name&quot;));//如需设置Cell的其他属性，必须使用该对象.属性 
list.add(new ExcelExportEntity(&quot;性别&quot;, &quot;sex&quot;));
list.add(new ExcelExportEntity(&quot;出生日期&quot;, &quot;date&quot;));

List&lt;Teacher&gt; dataList = new ArrayList&lt;Teacher&gt;();
dataList.add(new Teacher(&quot;1&quot;,&quot;你&quot;,&quot;男&quot;,new Date()));
dataList.add(new Teacher(&quot;2&quot;,&quot;我&quot;,&quot;男&quot;,new Date()));
dataList.add(new Teacher(&quot;3&quot;,&quot;它&quot;,&quot;男&quot;,new Date()));
dataList.add(new Teacher(&quot;4&quot;,&quot;他&quot;,&quot;男&quot;,new Date()));
dataList.add(new Teacher(&quot;5&quot;,&quot;她&quot;,&quot;女&quot;,new Date()));

Workbook workbook = ExcelExportUtil.exportExcel(new ExportParams(&quot;教师列表&quot;, &quot;教师列表&quot;), list,dataList);
FileOutputStream fos = new FileOutputStream(&quot;D:/a.xls&quot;);
workbook.write(fos);
fos.close();</code></pre><p>该案例可能有问题，官方文档中，示例没有数据，是空的，而插入了数据则导致失败,报错具体位置在ExportCommonService类的getCellValue方法中，entity.getMethod()获取为空,导致失败。这个以后再说把，先不使用。</p>
]]></content>
      <categories>
        <category>Excel</category>
      </categories>
      <tags>
        <tag>poi</tag>
      </tags>
  </entry>
  <entry>
    <title>帆软报表简单非完整记录</title>
    <url>/2018/09/26/%E5%B8%86%E8%BD%AF/%E5%B8%86%E8%BD%AF%E6%8A%A5%E8%A1%A8%E7%AE%80%E5%8D%95%E9%9D%9E%E5%AE%8C%E6%95%B4%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>父子格，(左父格，上父格，自定义父格)，跟对父格拓展 拓展方向 报表类型（分组，自由，交叉，多源，主子） 多源:需要设置过滤 首次进入激活码:f7d8b945-732d44d2c-87e3-cee441db2168</p>
<h2 id="快速入门，第一张模板"><a href="#快速入门，第一张模板" class="headerlink" title="快速入门，第一张模板"></a>快速入门，第一张模板</h2><p>查看文档</p>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>新建数据 新建模板与数据集 模板设计—报表设计—参数设计—图标设计—填报设计 模板预览</p>
<h3 id="报表设计"><a href="#报表设计" class="headerlink" title="报表设计"></a>报表设计</h3><p>四种基础模板:网格式报表，分组报表，交叉报表，自由报表</p>
<h4 id="单元格拓展"><a href="#单元格拓展" class="headerlink" title="单元格拓展"></a>单元格拓展</h4><p>单元格内左上角的灰色箭头表示拓展方向，分为不拓展，横向拓展和纵向拓展。在界面右下角的单元格属性表，拓展方向</p>
<h4 id="父子格设置"><a href="#父子格设置" class="headerlink" title="父子格设置"></a>父子格设置</h4><p>当报表中绑定了多个单元格的时候，单元格间会天然存在某种关系，使单元格间存在过滤关系或跟随关系，这就是父子格。前面的单元格称为父格，后面的单元格称为子格。也就是说子格的数据会根据父格的数据进行过滤分组显示，并且还会跟随父格的扩展方向而扩展。 <strong>1. 父子格关系</strong> 父子格关系包括两种：过滤关系和跟随关系 过滤关系是指_子格会默认将父格的数据作为过滤条件进行过滤，使<strong>父子格之间的数据能对应的显示出来</strong>_。但是这个默认的过滤关系仅限于两个单元格的字段均来自同一格数据集。当来自同一数据集时，子格会根据父格过滤或者说条件来显示，而当不同数据集的两个字段，子格会将跟随父格将所有数据重复显示。 <strong>2. 跟随关系</strong> 跟随关系是指子格会根据父格的拓展方向进行分组，即父格纵向扩展，子格跟随父格默认纵向扩展。单元格中数据集的字段都是默认纵向拓展。 <strong>3. 父子格分类</strong> 父子格包括左父格和上父格，以及自定义父格。 1) 左父格 是指跟随父格单元格纵向拓展，即表示父格是纵向拓展，一般来说，左父格均在单元格的左侧，单元格将其相邻的左侧纵向单元格默认为左父格，并且当鼠标选中子单元格时，左父格会显示一个蓝色向下的箭头。 2)上父格 上父格是指跟随父格单元格横向扩展，即表示其父格是横向扩展，一般来说，上父格均在单元格的上方，单元格将其相邻的上方横向扩展单元格默认为上父格，并且当鼠标选中子单元格时，上父格会显示一个蓝色向右的箭头 <strong>4. 父子格设置</strong> 三种设置：不设置，默认和自定义 无：表示该单元格没有父格 默认：将数据列拖拽至单元格中时，该单元格会默认将其相邻上方横向扩展或者左侧纵向扩展的单元格当做上父格或者左父格。 自定义：自己指定那个单元格为该单元格的父格。 填报报表 ，首先设置自由模板，设置控件，报表填报属性(关联数据库表),模板web属性–&gt;填报页面设置–&gt;为该模板单独设置</p>
<h4 id="报表样式设计"><a href="#报表样式设计" class="headerlink" title="报表样式设计"></a>报表样式设计</h4><p><strong>1. 数据显示方式</strong> 单元格数据设置:分组，列表，汇总(求和，平均等)。默认分组</p>
<ol start="2">
<li>改变显示值</li>
</ol>
<p>当数据显示时，关联显示的往往是id编号，如订单中的客户，存储是id，那么要显示成客户名称的话，就需要改变其形态。 选中被引用的客户编号单元格，右下角单元格属性——形态，形态设置为数据字典。设置数据库和数据库表，表为客户，设置实际值和显示值。</p>
<ol start="3">
<li>数据显示格式，样式</li>
</ol>
<p>右下角的单元格属性，样式，可为单元格可是格式，日期，货币等格式</p>
<h3 id="参数入门"><a href="#参数入门" class="headerlink" title="参数入门"></a>参数入门</h3><p>种类与区别： 范围划分为：模板参数和全局参数 使用方式划分：模板参数和数据集参数 单元格条件属性 动态格间运算 单元格超级链接 新增：点击新增按钮，进入模板，路径不传入id参数,随后点击提交将进行增加记录 修改：点击修改按钮，进入模板，路径传入id参数，并且模板已经绑定了数据集的引用，当有参数传来时，sql将会查询，并将结果显示在模板中,点击修改，会根据id值进行修改，前提是该模板必须在报表填报属性中设置了主键字段，且值为参数类型，并选择参数。 如果想要在新增时，自动添加id，那么需要将报表填报属性的id的值设置为公式，那么就需要新增和修改操作是两个模板了。 一个新增模板设置id为uuid，一个修改设置id为参数。</p>
]]></content>
      <categories>
        <category>报表</category>
      </categories>
      <tags>
        <tag>帆软</tag>
        <tag>报表</tag>
      </tags>
  </entry>
  <entry>
    <title>quartz任务调度Triggers详解</title>
    <url>/2018/09/26/%E4%B8%AD%E9%97%B4%E4%BB%B6/quartz%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6Triggers%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="Triggers简单介绍"><a href="#Triggers简单介绍" class="headerlink" title="Triggers简单介绍"></a>Triggers简单介绍</h2><p>Trigger是一个触发器，用于设置循环时间和执行时间等。其类型常用的有SimpleTrigger和CronTrigger。</p>
<h3 id="Trigger的公共属性"><a href="#Trigger的公共属性" class="headerlink" title="Trigger的公共属性"></a>Trigger的公共属性</h3><ul>
<li>TriggerKey：表示trigger的身份</li>
<li>jobKey：当trigger触发时，执行job的身份</li>
<li>startTime：设置trigger第一次触发的时间，改属性值为java.util.Date，表示某个指定的时间点</li>
<li>endTime：表示trigger的失效的时间点</li>
</ul>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>++如果你的trigger很多(或者Quartz线程池的工作线程太少)，Quartz可能没有足够的资源同时触发所有的trigger++；这种情况下，你可能希望控制哪些trigger优先使用Quartz的工作线程。<strong>设置withPriority属性</strong>，只有同时触发的trigger之间才会比较优先级。trigger的默认优先级时5，可以为任意整数、正数、负数。</p>
<h3 id="错过触发"><a href="#错过触发" class="headerlink" title="错过触发"></a>错过触发</h3><p>trigger还有一个重要的属性misfire；如果scheduler关闭了，或者Quartz线程池中没有可用的线程来执行job，此时持久性的trigger就会错过(miss)其触发时间，即错过触发(misfire)。不同类型的trigger，有不同的misfire机制。它们默认都使用“智能机制(smart policy)”，即根据trigger的类型和配置动态调整行为。当scheduler启动的时候，<strong>查询所有错过触发(misfire)的持久性trigger</strong>。然后根据它们各自的misfire机制更新trigger的信息。</p>
<h3 id="日历示例"><a href="#日历示例" class="headerlink" title="日历示例"></a>日历示例</h3><p>Quartz的Calendar对象(不是java.util.Calendar对象)可以在定义和存储trigger的时候与trigger进行关联。Calendar用于从trigger的调度计划中排除时间段。</p>
<pre><code>HolidayCalendar cal = new HolidayCalendar();
cal.addExcludedDate( someDate );
cal.addExcludedDate( someOtherDate );

sched.addCalendar(&quot;myHolidays&quot;, cal, false);</code></pre><h2 id="SimpleTrigger"><a href="#SimpleTrigger" class="headerlink" title="SimpleTrigger"></a>SimpleTrigger</h2><p>SimpleTrigger可以满足的调度需求是：在具体的时间点执行一次，或者在具体的时间点执行，并且以指定的间隔重复执行若干次。</p>
<pre><code>Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();
            JobDetail jobDetail = newJob(SimpleTriggerJobTest.class).withIdentity(&quot;job1&quot;, &quot;group1&quot;).build();
            SimpleTrigger trigger = (SimpleTrigger) newTrigger().withIdentity(&quot;trigger1&quot;, &quot;group1&quot;)
                    .startAt(new Date())//设置开始时间
                    .withSchedule(simpleSchedule().withIntervalInSeconds(1).withRepeatCount(10)).build();//执行每一秒一次，共10次
            scheduler.scheduleJob(jobDetail,trigger);
            scheduler.start();

            scheduler.shutdown();


 trigger = (SimpleTrigger) newTrigger() 
        .withIdentity(&quot;trigger5&quot;, &quot;group1&quot;)
        .startAt(futureDate(5, IntervalUnit.MINUTE)) // 5分钟之后触发
        .build();


trigger = newTrigger()
        .withIdentity(&quot;trigger7&quot;, &quot;group1&quot;)
        .withSchedule(simpleSchedule()
        .withIntervalInMinutes(5)
        .repeatForever())
        .endAt(dateOf(22, 0, 0))//每5分钟触发，知道22点结束
        .build();


trigger = newTrigger()
        .withIdentity(&quot;trigger8&quot;) 
        .startAt(evenHourDate(null))
        .withSchedule(simpleSchedule()
        .withIntervalInHours(2)
        .repeatForever())//下一个整点触发，每两小时触发，evenHourDate静态方法时DateBuilder类中的
        .build();</code></pre><h3 id="Misfire策略"><a href="#Misfire策略" class="headerlink" title="Misfire策略"></a>Misfire策略</h3><p>在SimpleScheduleBuilder类中包含众多的misfire策略 <strong>MISFIRE_INSTRUCTION_SMART_POLICY:</strong>默认且是Trigger中定义,把处理逻辑交给Quartz去决定</p>
<ol>
<li>如果是只执行一次的调度，使用MISFIRE_INSTRUCTION_FIRE_NOW</li>
<li>如果是无限次的调度(repeatCount是无限的)，使用MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT</li>
<li>否则，使用MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT</li>
</ol>
<p><strong>MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY:</strong>Trigger中定义，这个不是忽略已经错失的触发的意思，而是说忽略MisFire策略。它会在资源合适的时候，重新触发所有的MisFire任务，并且不会影响现有的调度时间 <strong>MISFIRE_INSTRUCTION_FIRE_NOW:</strong>忽略已经MisFire的任务，并且立即执行调度。这通常只适用于只执行一次的任务。 <strong>MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT:</strong>在下一次调度时间点，重新开始调度任务，包括的MisFire的 <strong>MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT:</strong>在下一次调度时间点执行，但会忽略已经MisFire的任务。 <strong>MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT:</strong>将startTime设置当前时间，立即重新调度任务，包括的MisFire的 <strong>MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT:</strong>将startTime设置当前时间，立即重新调度任务，不包括的MisFire的 后5个策略都是SimpleTrigger类中的。</p>
<h2 id="CronTrigger"><a href="#CronTrigger" class="headerlink" title="# CronTrigger"></a># CronTrigger</h2><p>基于日历概念，使用CronTrigger，您可以指定号时间表，例如“每周五中午”或“每个工作日和上午9:30”，甚至“每周一至周五上午9:00至10点之间每5分钟”和1月份的星期五“。</p>
<h3 id="Cron-Expressions"><a href="#Cron-Expressions" class="headerlink" title="Cron Expressions"></a>Cron Expressions</h3><p>Cron Expressions是由七个子表达式组成的字符串，用于描述日程表的各个细节。</p>
<p>顺序</p>
<p>时间值</p>
<p>允许值</p>
<p>特殊值</p>
<p>1</p>
<p>Seconds秒</p>
<p>0-59</p>
<p>, - * /</p>
<p>2</p>
<p>Minutes分</p>
<p>0-59</p>
<p>, - * /</p>
<p>3</p>
<p>Hours小时</p>
<p>0-23</p>
<p>, - * /</p>
<p>4</p>
<p>Day-of-Month日期</p>
<p>1-31</p>
<p>, - * ? / L W C</p>
<p>5</p>
<p>Month月份</p>
<p>1-12</p>
<p>, - * /</p>
<p>6</p>
<p>Day-of-Week星期</p>
<p>1-7</p>
<p>, - * ? / L C #</p>
<p>7</p>
<p>Year年份(可选)</p>
<p>, - * /</p>
<p>例如:““0 0 12？* WED”表示每个星期三12点，按顺序，从左往右依次表示0秒，0分，12点，日期无特定值，月份所有(对应每个月份)，星期三。星期可以使用英文简写。 单个表达式支持范围和/或列表，如星期可以使用“MON-FRI”,“MON,WED,FRI”甚至“MON-WED,SAT”这些表示范围和列表。</p>
<ul>
<li><strong>星号(*):</strong>表示在当前时间域中，对应每个允许值，例如month处为*，表示每个月.</li>
<li><strong>问号(?):</strong>允许的日期或星期字段，表示无特定值，就如上面的示例，日期就相当于一个占用，星期三12点，自然与日期挂不上太大关系。</li>
<li><strong>减号(-):</strong>表示一个范围，如小时，10-12，月份2-6等等</li>
<li><strong>逗号(,):</strong>表示一个列表，如小时 1,2,3，以及上面的星期等</li>
<li><strong>斜杠(/):</strong>指定值的增量,如果在分钟输入“0/15”,则表示“从0开始，每隔15分钟”;“3/15”表示“从3开始，每隔15分钟”</li>
<li><strong>L:</strong>用于日期和星期字段，表示Last的意思。如果在月中使用表示31日，而非闰年的28；如果用在星期中表示星期六等同于7。如果L出现星期字段里，且前面有一个数值X，表示“这个月的最后一个星期几”，如6L表示该月最后一个星期五。</li>
<li><strong>W:</strong>出现在日期中，表示离该日期最近的工作日，如果15W表示离该月15号最近的工作日，如果15号是星期六，则匹配14号星期五；如果15号是星期二，那就是星期二。</li>
<li><strong>井号(#):</strong>只在星期中使用。表示本月的“第几个星期几”,如“6#3”或“FRI#3”,表示本月的第三个星期五。</li>
</ul>
<p>示例:</p>
<p>示例</p>
<p>说明</p>
<p>0 0/5 * * * ？</p>
<p>每5分钟就会触发一次</p>
<p>0 30 10-13？* WED，FRI</p>
<p>每个星期三和星期五的10:30，11:30，12:30和13:30</p>
<p>0 0/30 8-9 5,20 *？</p>
<p>每个月5日和20日上午8点至10点之间每半小时触发一次</p>
<p>0 15 10 L * ?</p>
<p>每月最后一天10:15分运行。</p>
<p>0 15 10 ? * 6L</p>
<p>每月最后一个星期五10:15分运行。</p>
<p>0 15 10 ? * 6#3</p>
<p>每月第三个星期五的10:15分运行。</p>
<p>0 15 10 ? * 6L 2007-2009</p>
<p>在2007,2008,2009年每个月的最后一个星期五的10:15分运行。</p>
<p>0 0/5 14,18 * * ?</p>
<p>每天14点到15点每5分钟运行一次，此外每天18点到19点每5钟也运行一次。</p>
<p>另外有些虽意思上不复杂，但书写复杂不易理解的，可以使用N个简单的触发器同时运行作业。</p>
<h3 id="构建CronTriggers"><a href="#构建CronTriggers" class="headerlink" title="构建CronTriggers"></a>构建CronTriggers</h3><p>CronTrigger实例使用TriggerBuilder（用于触发器的主要属性）和CronScheduleBuilder（对于CronTrigger特定的属性）构建. 需要静态导入</p>
<pre><code>import  static org.quartz.TriggerBuilder.*; 
import  static org.quartz.CronScheduleBuilder.*; 
import  static org.quartz.DateBuilder.*:


trigger = newTrigger()
    .withIdentity(&quot;trigger3&quot;, &quot;group1&quot;)
    .withSchedule(cronSchedule(&quot;0 0/2 8-17 * * ?&quot;))//每天8点到17点中，每个2分钟执行一次
    .forJob(&quot;myJob&quot;, &quot;group1&quot;)
    .build();


trigger = newTrigger()
    .withIdentity(&quot;trigger3&quot;, &quot;group1&quot;)
    .withSchedule(dailyAtHourAndMinute(10, 42))//每天10点42触发
    .forJob(myJobKey)
    .build();
或
trigger = newTrigger()
    .withIdentity(&quot;trigger3&quot;, &quot;group1&quot;)
    .withSchedule(cronSchedule(&quot;0 42 10 * * ?&quot;))
    .forJob(myJobKey)
    .build();


trigger = newTrigger()
    .withIdentity(&quot;trigger3&quot;, &quot;group1&quot;)
    .withSchedule(weeklyOnDayAndHourAndMinute(DateBuilder.WEDNESDAY, 10, 42))
    .forJob(myJobKey)
    .inTimeZone(TimeZone.getTimeZone(&quot;America/Los_Angeles&quot;))
    .build();//每周三10点42分执行</code></pre>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>任务调度</tag>
        <tag>quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>任务调度Quartz的简单使用以及JobDataMap的数据</title>
    <url>/2018/09/26/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6Quartz%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8AJobDataMap%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="quartz任务调度框架"><a href="#quartz任务调度框架" class="headerlink" title="quartz任务调度框架"></a>quartz任务调度框架</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol>
<li>Quartz 是一个完全由 Java 编写的开源作业调度框架，为在 Java 应用程序中进行作业调度提供了简单却强大的机制。</li>
<li>Quartz 可以与J2EE与 J2SE 应用程序相结合也可以单独使用。</li>
<li>Quartz 允许程序开发人员根据时间的间隔来调度作业。</li>
<li>Quartz 实现了作业和触发器的多对多的关系，还能把多个作业与不同的触发器关联。</li>
</ol>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ol>
<li><p>Job:Job表示一个工作，要执行的具体内容，该接口只有一个方法</p>
<p>void execute(JobExecutionContext context)</p>
</li>
<li><p>JobDetail:表示一个具体可执行的调度程序，Job是这个可执行调度程序所需要执行的内容，另外JobDetail还包括任务调度的方案和策略</p>
</li>
<li><p>Trigger代表一个调度参数的配置，什么时候去调度，多长时间。</p>
</li>
<li><p>Scheduler代表一个调度容器，一个容器中可以注册多个JobDetail和Trigger，当JobDetail与Trigger组合，就可以被Scheduler容器调度了。</p>
</li>
</ol>
<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ol>
<li>Quartz 可以运行嵌入在另一个独立式应用程序。</li>
<li>Quartz 可以在应用程序服务器(或 servlet 容器)内被实例化，并且参与 XA 事务。</li>
<li>Quartz 可以作为一个独立的程序运行(其自己的 Java 虚拟机内)，可以通过 RMI 使用</li>
<li>Quartz 可以被实例化，作为独立的项目集群(负载平衡和故障转移功能)，用于作业的执行</li>
</ol>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="配置maven和properties"><a href="#配置maven和properties" class="headerlink" title="配置maven和properties"></a>配置maven和properties</h3><p>maven:</p>
<pre><code>&lt;dependency&gt;
  &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
  &lt;artifactId&gt;quartz&lt;/artifactId&gt;
  &lt;version&gt;2.3.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;
  &lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt;
  &lt;version&gt;2.3.0&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p>properties: 以quartz为文件名的properties文件是quartz的配置文件</p>
<pre><code># 此调度程序的名称将为“MyScheduler”
org.quartz.scheduler.instanceName = MyScheduler
# 线程池中有3个线程，这意味着最多可以同时运行3个job。
org.quartz.threadPool.threadCount = 3
# quartz的所有数据，包括job和trigger的配置，都会存储在内存中（而不是数据库里）
org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore</code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>QuartzTest.java文件如下：</p>
<pre><code>import static org.quartz.DateBuilder.*;
import static org.quartz.JobBuilder.*;
import static org.quartz.SimpleScheduleBuilder.*;
import static org.quartz.TriggerBuilder.*;

public static void main(String[] args) &#123;
    try &#123;
        Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();
        scheduler.start();

        JobDetail job = newJob(HelloJob.class).withIdentity(&quot;job1&quot;,&quot;group1&quot;).build();
        Trigger trigger = newTrigger().withIdentity(&quot;trigger1&quot;, &quot;group1&quot;).startNow().
                withSchedule(simpleSchedule().withIntervalInSeconds(2).repeatForever()).build();
        scheduler.scheduleJob(job, trigger);
        Thread.sleep(10000);
        scheduler.shutdown();
    &#125; catch (SchedulerException e) &#123;
        e.printStackTrace();
    &#125; catch (InterruptedException e) &#123;
        e.printStackTrace();
    &#125;
&#125;</code></pre><p>注意其导入的静态方法，导入了Builder类的所有静态方法。 HelloJob.java文件如下</p>
<pre><code>public class HelloJob implements Job &#123;
    @Override
  public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123;
        System.out.println(&quot;--------This is Job&quot;);
    &#125;
&#125;</code></pre><h2 id="Quartz-API"><a href="#Quartz-API" class="headerlink" title="Quartz API"></a>Quartz API</h2><p>关键接口</p>
<ul>
<li>Scheduler:与调度程序交互的主要API</li>
<li>Job:由调度组件执行的组件实现的接口</li>
<li>JobDetail:用于定义作业的实例</li>
<li>Trigger:定义执行给定作业的计划的组件</li>
<li>JobBuilder:构建JobDetail实例</li>
<li>TriggerBuilder:构建Trigger实例</li>
</ul>
<h2 id="JobDetail的JobDataMap与JobExecutionContext类"><a href="#JobDetail的JobDataMap与JobExecutionContext类" class="headerlink" title="JobDetail的JobDataMap与JobExecutionContext类"></a>JobDetail的JobDataMap与JobExecutionContext类</h2><p><strong>问题描述?</strong> 我们每次传给scheduler一个JobDetail实例，都会将要执行Job类名传递给JobDetail，scheduler就知道要执行何种类型的job，每当scheduler执行job时，在调用execute方法之前会创建该类的新实例，执行完毕后对该实例的引用被丢弃，实例会垃圾回收。 <strong>结果:</strong> 这样的后果是，job必须有一个无参的构造函数(别说你没有定义，其实是默认的构造)；另一个后果是在job类中，不应该定义有状态的数据属性，因为在job的多次执行中，这些属性的值不会保留。 <strong>解决</strong> 那么如果给Job添加实例属性，需要用到JobDetail类的属性JobDataMap对象,这个对象封装了对数据的存储，且间接实现Map接口。只需要使用usingJobData方法即可调用对象设置属性值。</p>
<pre><code>JobDetail job = newJob(DumbJob.class)
      .withIdentity(&quot;myJob&quot;, &quot;group1&quot;) // name &quot;myJob&quot;, group &quot;group1&quot;
      .usingJobData(&quot;jobSays&quot;, &quot;Hello World!&quot;)
      .usingJobData(&quot;myFloatValue&quot;, 3.141f)
      .build();</code></pre><p>那么提取数据就可以通过execute方法中JobExecutionContext参数获得JobDetail实例，再获得JobDataMap对象即可获得值。 <strong>另一种方法</strong> JobExecutionContext类也可以获得JobDataMap对象，此类是JobDetail中的JobDataMap和Trigger中的JobDataMap的并集，但是如果存在相同的数据，则后者会覆盖前者的值。</p>
<pre><code>public void execute(JobExecutionContext context)throws JobExecutionException&#123;
    JobKey key = context.getJobDetail().getKey();

    JobDataMap dataMap = context.getMergedJobDataMap();  // Note the difference from the previous example

    String jobSays = dataMap.getString(&quot;jobSays&quot;);
    float myFloatValue = dataMap.getFloat(&quot;myFloatValue&quot;);
    ArrayList state = (ArrayList)dataMap.get(&quot;myStateData&quot;);
    state.add(new Date());

    System.err.println(&quot;Instance &quot; + key + &quot; of DumbJob says: &quot; + jobSays + &quot;, and val is: &quot; + myFloatValue);
&#125;</code></pre><p>当然还可以通过为属性定义set方法，实现自动注入。Quartz的默认JobFactory实现在job被实例化的时候会自动调用这些set方法，这样你就不需要在execute()方法中显式地从map中取数据了。不需要获得JobDataMap，直接打印属性。</p>
<pre><code>public class HelloJob implements Job &#123;
    String name;
    public void setName(String name) &#123;
        this.name = name;
    &#125;
    @Override
    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException &#123;
        /*JobDataMap jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();
        String name = jobDataMap.getString(&quot;name&quot;);*/
        //JobDataMap jobDataMap = jobExecutionContext.getMergedJobDataMap();
        System.out.println(&quot;--------This is Job name:&quot; + name);
    &#125;
&#125;</code></pre><h3 id="Job状态与并发"><a href="#Job状态与并发" class="headerlink" title="Job状态与并发"></a>Job状态与并发</h3><p><strong>@DisallowConcurrentExecution</strong>:将该注解加到job类上，告诉Quartz不要并发地执行同一个job定义（这里指特定的job类）的多个实例 <strong>@PersistJobDataAfterExecution</strong>：将该注解加在job类上，告诉Quartz在成功执行了job类的execute方法后（没有发生任何异常），更新JobDetail中JobDataMap的数据，使得该job（即JobDetail）在下一次执行的时候，JobDataMap中是更新后的数据，而不是更新前的旧数据 如果使用了@PersistJobDataAfterExecution建议也加上@DisallowConcurrentExecution，因为当同一个job（JobDetail）的两个实例被并发执行时，由于竞争，JobDataMap中存储的数据很可能是不确定的。</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Editor.md插件作为markdown编辑器</title>
    <url>/2018/09/25/Javascript/%E4%BD%BF%E7%94%A8Editor.md%E6%8F%92%E4%BB%B6%E4%BD%9C%E4%B8%BAmarkdown%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<h1 id="使用Editor-md插件作为markdown编辑器"><a href="#使用Editor-md插件作为markdown编辑器" class="headerlink" title="使用Editor.md插件作为markdown编辑器"></a>使用Editor.md插件作为markdown编辑器</h1><p><a href="http://pandao.github.io/editor.md/examples/index.html">官网示例地址</a></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
  &lt;title&gt;simple测试&lt;/title&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;editor.md/css/style.css&quot; /&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;editor.md/css/editormd.css&quot; /&gt;
  &lt;link rel=&quot;shortcut icon&quot; href=&quot;https://pandao.github.io/editor.md/favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=&quot;layout&quot;&gt;
    &lt;header&gt;
      &lt;h1&gt;Simple example&lt;/h1&gt;
    &lt;/header&gt;
    &lt;div id=&quot;test-editormd&quot;&gt;
      &lt;textarea style=&quot;display:none;&quot;&gt;&lt;/textarea&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;editor.md/src/editormd.js&quot;&gt;&lt;/script&gt;
  &lt;script type=&quot;text/javascript&quot;&gt;
    var testEditor;

    $(function () &#123;
      testEditor = editormd(&quot;test-editormd&quot;, &#123;
        width: &quot;90%&quot;,
        height: 640,
        syncScrolling: &quot;single&quot;,
        path: &quot;editor.md/lib/&quot;
      &#125;);

      /*
      // or
      testEditor = editormd(&#123;
          id      : &quot;test-editormd&quot;,
          width   : &quot;90%&quot;,
          height  : 640,
          path    : &quot;../lib/&quot;
      &#125;);
      */
    &#125;);
  &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre><h1 id="插件部分解析"><a href="#插件部分解析" class="headerlink" title="插件部分解析"></a>插件部分解析</h1><h2 id="settings属性"><a href="#settings属性" class="headerlink" title="settings属性"></a>settings属性</h2><ol>
<li><p>务必更改settings设置的path属性，否则lib下的资源无法找到</p>
</li>
<li><p>saveHTMLToTextarea属性设置为true才能使用getHTML()方法获得markdown的HTML字符串</p>
</li>
<li><p>placeholder:编辑器无文本时，默认文字</p>
</li>
<li><p>syncScrolling:同步滚动</p>
</li>
<li><p>autoHeight:高度自动增长，跟随行数增长</p>
</li>
<li><p>toolbarAutoFixed,boolean,工具栏自动固定定位的开启与禁用</p>
</li>
<li><p>appendMarkdown:追加markdown，将此值设置为markdown内容,markdown属性是初始时设置</p>
</li>
<li><p>delay:延迟解析预览,值越大解析越慢，越小解析越快</p>
</li>
<li><p>searchReplace:内容搜索替换</p>
</li>
<li><p>readonly:只读模式</p>
</li>
<li><p>codeFold:代码折叠，如js代码</p>
</li>
<li><p>syncScrolling:同步滚动，true为左右双向同时滚动，false为非同时滚动，single为单向滚动</p>
</li>
</ol>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法</p>
<p>说明</p>
<p>getHTML()</p>
<p>获得html</p>
<p>getMarkdown()</p>
<p>获得markdown</p>
<p>show()</p>
<p>显示编辑器</p>
<p>hide()</p>
<p>隐藏编辑器</p>
<p>watch()</p>
<p>显示实时预览</p>
<p>unwatch()</p>
<p>关闭实时预览</p>
<p>previewing()</p>
<p>完全预览显示</p>
<p>fullscreen()</p>
<p>全屏</p>
<p>setToolbarAutoFixed(boolean)</p>
<p>工具栏自动固定定位的开启与禁用</p>
<p>getCursor()</p>
<p>获得光标位置</p>
<p>setCursor({line:1,ch:2})</p>
<p>设置光标位置</p>
<p>focus()</p>
<p>获得焦点</p>
<p>setSelection({line:1, ch:0}, {line:5, ch:100})</p>
<p>选中区域内容</p>
<p>getSelection()</p>
<p>获得区域内容</p>
<p>replaceSelection(str)</p>
<p>选中替换</p>
<p>insertValue(str)</p>
<p>插入</p>
<h2 id="动态创建Editor-md"><a href="#动态创建Editor-md" class="headerlink" title="动态创建Editor.md"></a>动态创建Editor.md</h2><pre><code>$(function () &#123;
      $(&quot;#create-btn&quot;).click(function () &#123;
        $.getScript(&quot;editor.md/editormd.js&quot;, function () &#123;
          $(&quot;#layout&quot;).append(&quot;&lt;div id=\&quot;test-editormd\&quot;&gt;&lt;/div&gt;&quot;);

          testEditormd = editormd(&quot;test-editormd&quot;, &#123;
            width: &quot;90%&quot;,
            height: 640,
            markdown: &quot;### 动态创建 Editor.md\r\n\r\nDynamic create Editor.md&quot;,
            path: &apos;editor.md/lib/&apos;
          &#125;);
        &#125;);
      &#125;);

      $(&quot;#remove-btn&quot;).click(function () &#123;
        testEditormd.editor.remove();
      &#125;);
    &#125;);</code></pre><h2 id="自定义工具栏"><a href="#自定义工具栏" class="headerlink" title="自定义工具栏"></a>自定义工具栏</h2><p>参考自定义工具栏html toolbarIcons方法用于定义工具栏的图标，该方法返回值为数组，数组内<strong>每个字符都为图标名称</strong>，“|”符号表示分割 toolbarIconsClass属性用于定义每个图标的class类，通过图标名:class名设置 toolbarIconTexts属性定义没有图标时显示的文本 toolbarCustomIcons属性用于自定义图标，key为图标名，值为html，可以显示一个按钮，图标等。 toolbarHandlers属性定义工具栏按钮事件处理,为每个图标定义方法都含有4个参数</p>
<ul>
<li>cm:分别表示CodeMirror对象</li>
<li>icon:图标按钮jQuery元素对象</li>
<li>cursor:CodeMirror的光标对象</li>
<li>selection:可获取光标所在行和位置，编辑器选中的文本</li>
</ul>
<p>toolbarIcons定义的是图标名称，toolbarIconsClass定义图标class,toolbarIconTexts定义无图标时文本,toolbarCustomIcons自定义图标名对应html,toolbarHandlers定义工具栏按钮事件处理。</p>
<h2 id="将md文件内容载入editor编辑器中"><a href="#将md文件内容载入editor编辑器中" class="headerlink" title="将md文件内容载入editor编辑器中"></a>将md文件内容载入editor编辑器中</h2><p>通过ajax获得内容，设置settings.appendMarkdown属性为ajax返回的数据。</p>
<h2 id="多editor编辑器"><a href="#多editor编辑器" class="headerlink" title="多editor编辑器"></a>多editor编辑器</h2><p>定义不同id即可</p>
<h2 id="自定义编辑器样式主题"><a href="#自定义编辑器样式主题" class="headerlink" title="自定义编辑器样式主题"></a>自定义编辑器样式主题</h2><p>theme: 工具栏主题,default|dark previewTheme: 预览主题,default|dark editorTheme: 编辑器主题,editormd.editorThemes[‘theme-name’],可取主题在最后 function:</p>
<pre><code>editor.setTheme(&apos;theme-name&apos;);
editor.setEditorTheme(&apos;theme-name&apos;);
editor.setPreviewTheme(&apos;theme-name&apos;);</code></pre><h3 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h3><ul>
<li>ambiance</li>
<li>eclipse</li>
<li>mdn-like</li>
<li>mbo</li>
<li>monokai</li>
<li>neat</li>
<li>pastel-on-dark</li>
</ul>
<h3 id="Editor-area-themes"><a href="#Editor-area-themes" class="headerlink" title="Editor area themes"></a>Editor area themes</h3><ul>
<li>default</li>
<li>3024-day</li>
<li>3024-night</li>
<li>ambiance</li>
<li>ambiance-mobile</li>
<li>base16-dark</li>
<li>base16-light</li>
<li>blackboard</li>
<li>cobalt</li>
<li>eclipse</li>
<li>elegant</li>
<li>erlang-dark</li>
<li>lesser-dark</li>
<li>mbo</li>
<li>mdn-like</li>
<li>midnight</li>
<li>monokai</li>
<li>neat</li>
<li>neo</li>
<li>night</li>
<li>paraiso-dark</li>
<li>paraiso-light</li>
<li>pastel-on-dark</li>
<li>rubyblue</li>
<li>solarized</li>
<li>the-matrix</li>
<li>tomorrow-night-eighties</li>
<li>twilight</li>
<li>vibrant-ink</li>
<li>xq-dark</li>
<li>xq-light</li>
</ul>
<h2 id="光标位置，文本获取，文本插入替换"><a href="#光标位置，文本获取，文本插入替换" class="headerlink" title="光标位置，文本获取，文本插入替换"></a>光标位置，文本获取，文本插入替换</h2><pre><code>testEditormd.setCursor(&#123;line:1,ch:2&#125;);//设置光标line:行,ch:字符数
testEditormd.focus();//获得焦点


testEditormd.setSelection(&#123;line:1, ch:0&#125;, &#123;line:5, ch:100&#125;);//选中区域内容
testEditormd.focus();//获得焦点


testEditormd.replaceSelection(&quot;$$$$$$$$$&quot;);
testEditormd.focus();


testEditormd.insertValue(&quot;????&quot;);
testEditormd.focus();</code></pre><h2 id="mode模型更改"><a href="#mode模型更改" class="headerlink" title="mode模型更改"></a>mode模型更改</h2><p>设置toolbar为false,mode为text/html,php,java等，具体操作需要看示例</p>
<h2 id="识别和解析HTML标签"><a href="#识别和解析HTML标签" class="headerlink" title="识别和解析HTML标签"></a>识别和解析HTML标签</h2><p>使用一般html都可以不被过滤而直接解析。 style样式，可直接使用style标签，且内部可包含样式 event事件，也可直接通过标签设置。</p>
<h3 id="可直接插入Flash和视频"><a href="#可直接插入Flash和视频" class="headerlink" title="可直接插入Flash和视频"></a>可直接插入Flash和视频</h3><p>如Flash和</p>
<h4 id="插入Flash"><a href="#插入Flash" class="headerlink" title="插入Flash"></a>插入Flash</h4><pre><code>&lt;embed src=&quot;http://player.youku.com/player.php/sid/XMzA0MzIwMDgw/v.swf&quot; allowFullScreen=&quot;true&quot; quality=&quot;high&quot; width=&quot;480&quot; height=&quot;400&quot; align=&quot;middle&quot; allowScriptAccess=&quot;always&quot; type=&quot;application/x-shockwave-flash&quot;&gt;&lt;/embed&gt;</code></pre><h5 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h5><p>李健《最好不相见》</p>
<pre><code>&lt;iframe height=498 width=510 src=&quot;http://player.youku.com/embed/XMzA0MzIwMDgw&quot; frameborder=0 allowfullscreen&gt;&lt;/iframe&gt;</code></pre><h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2><p>settings需设置 imageUpload:是否图片上传 imageFormats:接受图片格式 imageUploadURL:图片上传路径 后台需返回数据: success:0|1 message:提示信息 url:图片地址，上传成功时才返回</p>
<h2 id="弹出层对话框"><a href="#弹出层对话框" class="headerlink" title="弹出层对话框"></a>弹出层对话框</h2><pre><code>dialogLockScreen : false,   // 设置弹出层对话框不锁屏，全局通用，默认为 true
dialogShowMask : false,     // 设置弹出层对话框显示透明遮罩层，全局通用，默认为 true
dialogDraggable : false,    // 设置弹出层对话框不可拖动，全局通用，默认为 true
dialogMaskOpacity : 0.4,    // 设置透明遮罩层的透明度，全局通用，默认值为 0.1
dialogMaskBgColor : &quot;#000&quot;, // 设置透明遮罩层的背景颜色，全局通用，默认为 #fff</code></pre>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn运行mapreduce examples示例</title>
    <url>/2018/09/23/Hadoop/yarn%E8%BF%90%E8%A1%8Cmapreduce%20examples%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="yarn运行mapreduce-examples示例"><a href="#yarn运行mapreduce-examples示例" class="headerlink" title="yarn运行mapreduce examples示例"></a>yarn运行mapreduce examples示例</h2><h3 id="为yarn-env-sh和mapreduce-env-sh配置javahome"><a href="#为yarn-env-sh和mapreduce-env-sh配置javahome" class="headerlink" title="为yarn-env.sh和mapreduce-env.sh配置javahome"></a>为yarn-env.sh和mapreduce-env.sh配置javahome</h3><p>将JAVA_HOME注释解开，并设置路径,yarn-env.sh和mapred-env.sh都需要配置</p>
<h3 id="配置yarn-site-xml"><a href="#配置yarn-site-xml" class="headerlink" title="配置yarn-site.xml"></a>配置yarn-site.xml</h3><pre><code>&lt;property&gt;
        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;
        &lt;value&gt;**master**&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;
        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;
&lt;/property&gt;
//以下，将IP需改为你自己的master的ip
&lt;property&gt;
        &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;
        &lt;value&gt;192.168.135.100:8032&lt;/value&gt;
    &lt;/property&gt;

    &lt;property&gt;
        &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;
        &lt;value&gt;192.168.135.100:8030&lt;/value&gt;
    &lt;/property&gt;

    &lt;property&gt;
        &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;
        &lt;value&gt;192.168.135.100:8031&lt;/value&gt;
    &lt;/property&gt;

    &lt;property&gt;
        &lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;
        &lt;value&gt;192.168.135.100:8033&lt;/value&gt;
    &lt;/property&gt;

    &lt;property&gt;
        &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;
        &lt;value&gt;192.168.135.100:8088&lt;/value&gt;
    &lt;/property&gt;</code></pre><p>master为你的主机名，因为当前是伪分布式，就一台机子，就填的主机名</p>
<h3 id="配置mapred-site-xml-将mapred-site-xml-template重命名为mapred-site-xml"><a href="#配置mapred-site-xml-将mapred-site-xml-template重命名为mapred-site-xml" class="headerlink" title="配置mapred-site.xml,将mapred-site.xml.template重命名为mapred-site.xml"></a>配置mapred-site.xml,将mapred-site.xml.template重命名为mapred-site.xml</h3><pre><code>&lt;property&gt;
        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;
        &lt;value&gt;yarn&lt;/value&gt;
&lt;/property&gt;
&lt;!--配置历史job--&gt;
&lt;property&gt;
        &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;
        &lt;value&gt;master:10020&lt;/value&gt;
&lt;/property&gt;
&lt;!--配置地址--&gt;
&lt;property&gt;
        &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;
        &lt;value&gt;master:19888&lt;/value&gt;
&lt;/property&gt;</code></pre><h3 id="目前配置已经完成，开始启动"><a href="#目前配置已经完成，开始启动" class="headerlink" title="目前配置已经完成，开始启动"></a>目前配置已经完成，开始启动</h3><p>命令都在hadoop_home/sbin目录下</p>
<pre><code>start-hdfs.sh
//以上命令也可以通过如下方式
hadoop-daemon.sh start namenode
hadoop-daemon.sh start datanode

start-yarn.sh
//以上命令也可以通过如下方式
yarn-daemon.sh start resourcemanager
yarn-daemon.sh start nodemanager
//jobhistory的守护进程
mr-jobhistory-daemon.sh start historyserver

最后通过jps查看是否少了守护进程
10449 DataNode
11351 Jps
10585 ResourceManager
10842 NodeManager
10362 NameNode
//DataNode有hdfs启动，resourcemanager和nodemanager由yarn启动，一定注意不能缺少datanode，非则无法打开web</code></pre><p>没问题后,访问master:8088。 <strong>如果访问不成功</strong></p>
<ol>
<li>查看logs中是否有报错</li>
<li>查看jps是否少了某个守护进程</li>
<li>查看8088是否被监听, ls0f -i:8088,如果有listener则可以。</li>
<li>ipv6的问题，如果以上不行,则看lsof -i:8088,中显示v6,则是以ipv6的，要改成ipv4端口，网上搜索禁用ipv6</li>
</ol>
<p>注意yarn-site.xml除了前两个property设置，后半部分必须要加，否则可能就算监听成功了也无法访问，最后一定要看jps是否有守护进程。</p>
<h3 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h3><pre><code>hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.9.1.jar wordcount /input /output</code></pre><h3 id="查看示例"><a href="#查看示例" class="headerlink" title="查看示例"></a>查看示例</h3><p>期间可以在master:8088的<a href="http://master:8088/cluster/apps下，查看你的应用程序，就是刚执行的，后面的进入条显示进度。">http://master:8088/cluster/apps下，查看你的应用程序，就是刚执行的，后面的进入条显示进度。</a></p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04虚拟机互通之后该做的配置</title>
    <url>/2018/09/22/Linux/Ubuntu18.04%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BA%92%E9%80%9A%E4%B9%8B%E5%90%8E%E8%AF%A5%E5%81%9A%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装ssh-openssh-server-vsftpd"><a href="#安装ssh-openssh-server-vsftpd" class="headerlink" title="安装ssh,openssh-server,vsftpd"></a>安装ssh,openssh-server,vsftpd</h2><ol>
<li><p>设置root密码</p>
<p>sudo passwd root<br>提示输入当前主机密码<br>输入root新密码<br>再次输入root新密码</p>
</li>
</ol>
<p>一共输入3次密码。</p>
<ol start="2">
<li>关于apt锁怎么怎么，无法获得锁，无法对状态列表目录加锁 问题?</li>
</ol>
<p>首先看是否说让root用户执行，然后如果行不通，则使用命令把锁删掉</p>
<pre><code>如/var/lib/dpkg/lock     //这个lock就是一个锁文件

rm -r /var/lib/dpkg/lock        //把它删了

如果还有类似 /var/cache/apt/archive/lock  //同样把lock文件删了</code></pre><ol start="3">
<li><p>安装ssh</p>
<p>sudo apt install ssh</p>
</li>
</ol>
<ol start="4">
<li><p>安装openssh-server</p>
<p>sudo apt install openssh-server</p>
</li>
</ol>
<p>如果安装之后连接xshell时，总是说密码不对,则设置</p>
<pre><code>sudo vi /etc/ssh/sshd_config

找到第32行左右的PermitRootLogin ，把它后面的字符串删了，改成yes，然后去掉前面的#符号

/etc/init.d/ssh restart //重启服务</code></pre><ol start="5">
<li><p>安装vsftpd</p>
<p>sudo apt install vsftpd</p>
</li>
</ol>
<p>修改配置文件</p>
<pre><code>sudo vi /etc/vsftpd.conf

把write_enable=YES前的#符号去掉</code></pre><p>修改ftpusers文件</p>
<pre><code>sudo vi /etc/ftpusers

再root前添加#//注释root

service vsftpd restart  //最后修改完成过后重启服务</code></pre><h2 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h2><pre><code>sudo vi /etc/hosts

在ip     主机名对应行下添加当前主机的静态ip和主机名，以及从主机slave的静态ip和主机名

192.168.135.100     master
192.168.135.101     slave1</code></pre><p>尝试master中ping slave1,slave1中ping master</p>
<h2 id="实现ssh免密登陆"><a href="#实现ssh免密登陆" class="headerlink" title="实现ssh免密登陆"></a>实现ssh免密登陆</h2><ol>
<li><p>master安装ssh</p>
<p>apt install ssh</p>
</li>
</ol>
<p>2.实现免密命令</p>
<pre><code>root@master:/home/master# **ssh-keygen -t rsa**
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa):    //enter
Created directory &apos;/root/.ssh&apos;.
Enter passphrase (empty for no passphrase):                 //enter
Enter same passphrase again:                                //enter
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:7SXnZWtdsmdD5bze0HGjuN80zBV8jw0mvKosdqEphWU root@master
The key&apos;s randomart image is:
+---[RSA 2048]----+
|                 |
|           .  .  |
|            o ooo|
|      E  .   + *=|
|     +  S o + =+O|
|    . . .. *.o=*B|
|     . o .o...=B=|
|    . =...  ..+++|
|     o oo  ... o.|
+----[SHA256]-----+</code></pre><p>输入3次回车。随后.ssh文件夹中生成两个文件id_rsa id_rsa.pub</p>
<ol start="3">
<li><p>拷贝公钥</p>
<p>cat id_rsa.pub &gt;&gt; authorized_keys   //拷贝文件<br>chmod 600 authorized_keys    —-修改文件权限可读写,必需要设置</p>
</li>
</ol>
<ol start="4">
<li><p>slave中ssh localhost测试，如果成功会在home下出现.ssh文件夹</p>
</li>
<li><p>将master的公钥传输到所有的slave上，实现无密码登录</p>
</li>
</ol>
<pre><code>scp authorized_keys root@slave1:~/.ssh/</code></pre><p>完成后master尝试连接slave，ssh slave直接登录。</p>
<h2 id="jdk和hadoop环境安装"><a href="#jdk和hadoop环境安装" class="headerlink" title="jdk和hadoop环境安装"></a>jdk和hadoop环境安装</h2><ol>
<li><p>jdk安装</p>
<p>tar -zxf jdkxxxxxxxxx.tar.gz    //解压包</p>
<p>vim etc/profile     /编辑配置环境变量</p>
<p>export JAVA_HOME=你的jdk路径<br>export PATH=$JAVA_HOME/bin:$PATH</p>
<p>source /etc/profile     //编辑完成后，执行命令，刷新文件环境变量<br>java -version   //jdk安装测试</p>
</li>
</ol>
<ol start="2">
<li><p>hadoop安装</p>
<p>tar -zxf hadoop包        //解压包</p>
<p>cd hadoop/etc/hadoop        //进入hadoop配置目录</p>
<p>vi hadoop-env.sh            //编辑文件</p>
<p>export JAVA_HOME=/root/app/jdk      //设置你的jdk目录</p>
<p>export HADOOP_CONF_DIR=/root/app/hadoop/etc/hadoop  //设置你的hadoop的配置文件目录，就在hadoop安装目录的etc下的hadoop下</p>
</li>
</ol>
<p>环境变量</p>
<pre><code>vi /etc/profile

export HADOOP_HOME=/root/app/hadoop
export PATH=$HADOOP_HOME/bin:$PATH

source /etc/profile</code></pre><h2 id="伪分布式搭建"><a href="#伪分布式搭建" class="headerlink" title="伪分布式搭建"></a>伪分布式搭建</h2><ol>
<li><p>配置etc/hadoop下的core-site.xml</p>
<property>
    <name>fs.defaultFS</name>
    <value>hdfs://master:9000</value>   //hdfs必须配置的
</property>
<property>
    <name>hadoop.tmp.dir</name>
    <value>/root/app/hadoop/tmp</value>     //临时文件存储目录，默认在/tmp/hadoop-${user.name}
</property>


</li>
</ol>
<p>注意路径不要写错</p>
<ol start="2">
<li><p>hdfs-site.xml</p>
<property>
    <name>dfs.replication</name>
    <value>1</value>    //设置副本的个数，该案例为为分布式只有一台机器
</property>


</li>
</ol>
<ol start="3">
<li>启动hdfs</li>
</ol>
<p>hdfs命令，前提是你已经在环境变量配置了hadoop/bin，可能你还需要配置一下sbin</p>
<pre><code>hdfs namenode -format   //首次启动格式化，仅第一次，将会格式化hdfs

sbin/start-dfs.sh       //启动NameNode守护程序和DataNode守护程序
或
sbin/hadoop-daemon.sh start namenode    //启动namenode守护进程,非集群方式
sbin/hadoop-daemon.sh start datanode    //启动datanode守护进程，非集群方式


jsp     //查看守护进程</code></pre><p>hadoop守护程序日志输出将写入$ HADOOP_LOG_DIR目录（默认为$ HADOOP_HOME / logs）。 不报错后，访问http://{hostname|静态ip}:<strong>50070</strong>/ ,此处localhost改成自己的ip或hostname 如果启动后访问不成功，或出现信息，stop什么之类的，则擦好看logs下的日志${hadoop_home}/logs/hadoop-{username}-namenode-master.log</p>
<ol start="3">
<li><p>常用的日志查看</p>
<p>hadoop-{username}-datanode-{hostname}.log<br>hadoop-{username}-datanode-{hostname}.out<br>hadoop-{username}-namenode-{hostname}.log<br>hadoop-{username}-namenode-{hostname}.out</p>
</li>
</ol>
<ol start="4">
<li><p>hdfs操作</p>
<p>hdfs dfs -mkdir /input      //创建一个文件夹，在/目录下名称为input,多级目录加-p参数</p>
<p>hdfs dfs -put ~/testhello.txt /input    //上传一个testhello.txt到input文件夹下,前提是有这个文件,并且此文件有数据，用于计算每个单词的数量</p>
<p>hdfs dfs -ls /input //查看目录</p>
<p>hdfs dfs -cat /input/testhello.txt  //查看文件</p>
</li>
</ol>
<ol start="5">
<li><p>运行mapreduce的wordcount</p>
<p>hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.9.1.jar wordcount /input /output<br>//  /input为输入的目录，下面有一个testhello.txt,/output为输出目录，为执行结果，此文件不能先创建。随后/output下生成两个文件，一个是_SUCCESS和part-r-00000</p>
<p>dhfs dfs -cat /output/part-r-00000  //查看结果，可能每个生成的part都不一样</p>
</li>
</ol>
<ol start="6">
<li><p>常用命令</p>
<p>-mkdir  hdfs dfs -mkdir /input<br>-put    hdfs dfs -put ~/testhello.txt /input<br>-ls     hdfs dfs -ls /output                    //  -lsr表示递归<br>-cat    hdfs dfs -cat /output/part-r-00000<br>-get    hdfs dfs -get /output/part-r-00000 ./       //将dfs中的文件下载到本地文件夹下<br>-rm     hdfs dfs -rm /input/testhello.txt       //  -rmr表示递归删除</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0项目结构与模块</title>
    <url>/2018/09/21/Vue/Vue2.0%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="项目结构与模块"><a href="#项目结构与模块" class="headerlink" title="项目结构与模块"></a>项目结构与模块</h2><p>Vuex并不限制代码结构，但如果你的store文件太大，getters和mutations这些对象里的东西太多，就搞得特别复杂，就像是多个业务模块冗余在一起。于是就有了模块。而它规定了一些规则。</p>
<ol>
<li><p>应用层级的状态应该集中到单个 store 对象中。也就是说像是全局的数据之类的可以放在一个根store里，最后所有的module模块放在store里导出。</p>
</li>
<li><p>提交mutation是更改状态的唯一方法，并且这个过程是同步的。就是说你的数据更改必须要提交到mutation里修改，这样能保持过程同步，且更容易监视这个流程。</p>
</li>
<li><p>异步逻辑都应该封装到 action 里面。就如ajax或其他事件方法等需要放在action里。</p>
</li>
</ol>
<p>那么官方的结构</p>
<pre><code>├── index.html
├── main.js
├── api
│   └── ... # 抽取出API请求
├── components
│   ├── App.vue
│   └── ...
└── store
    ├── index.js          # 我们组装模块并导出 store 的地方
    ├── actions.js        # 根级别的 action
    ├── mutations.js      # 根级别的 mutation
    └── modules
        ├── cart.js       # 购物车模块
        └── products.js   # 产品模块</code></pre><p>store文件夹下，action.js,mutations.js,actions.js就是用来放共用的或应用级的东西，最后在index.js中组装，而modules中都是些模块，cart.js和products.js里，都有action,mutations,actions，他们组成了单个模块。那么么他们也需要在index.js中组装并导出，所以就提供了一个modules的选项。</p>
<pre><code>const moduleA = &#123;
  state: &#123; ... &#125;,
  mutations: &#123; ... &#125;,
  actions: &#123; ... &#125;,
  getters: &#123; ... &#125;
&#125;

const store = new Vuex.Store(&#123;
  modules: &#123;
    a: moduleA,
    b: moduleB
  &#125;
&#125;)</code></pre><p>modules选项中a,b代表模块名,moduleA和moduleB代表模块引用。 ** 导出js代码**</p>
<pre><code>//模块里的导出
export default &#123;
  state,
  getters,
  actions,
  mutations
&#125;


//index.js
import Vue from &apos;vue&apos;
import Vuex from &apos;vuex&apos;
import action from &apos;./actions&apos;
import getters from &apos;./getters&apos;
import mutations from &apos;./mutations&apos;
import user from &apos;./modules/user&apos;

Vue.use(Vuex)

export default new Vuex.Store(&#123;
  action,
  getters,
  mutations,
  modules: &#123;
    user
  &#125;
&#125;)


//main.js,一定不要忘记设置store到Vue实例里
import store from &apos;./store/index&apos;</code></pre><p>你可以参考官网指出来的例子:<a href="https://github.com/vuejs/vuex/tree/dev/examples/shopping-cart">购物车示例</a></p>
<h3 id="模块的局部状态"><a href="#模块的局部状态" class="headerlink" title="模块的局部状态"></a>模块的局部状态</h3><ol>
<li><p>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象。也就是说在模块里js文件中,你获取的状态，参数都是局部的，也就是当前模块里的参数数据。</p>
</li>
<li><p>而对于模块里的actions,获取根节点状态则通过context.rootState</p>
</li>
<li><p>对于getters,根节点状态会作为第三个参数暴露出来</p>
</li>
</ol>
<pre><code>getters: &#123;
    sumWithRootCount (state, getters, rootState) &#123;
      return state.count + rootState.count
    &#125;
  &#125;</code></pre><h3 id="表单处理，双向绑定的计算属性"><a href="#表单处理，双向绑定的计算属性" class="headerlink" title="表单处理，双向绑定的计算属性"></a>表单处理，双向绑定的计算属性</h3><pre><code>&lt;input v-model=&quot;message&quot;&gt;


// ...
computed: &#123;
  message: &#123;
    get () &#123;
      return this.$store.state.obj.message
    &#125;,
    set (value) &#123;
      this.$store.commit(&apos;updateMessage&apos;, value)
    &#125;
  &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0-Vuex插件学习</title>
    <url>/2018/09/21/Vue/Vue2.0-Vuex%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 按其他vue友所说,就是集中管理数据的，例如父子组件数据之间传递，如果项目很大复杂，那么这个就是一个问题，就需要用到它。可以说是一个数据共享的一个中心仓库。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>每个vuex的核心是store，意思上是一个容器，包含应用中大部分的状态。Vuex和单纯的全局对象的不同点:</p>
<ul>
<li>Vuex的状态存储是响应式的。</li>
<li>不能直接改变store中的状态</li>
</ul>
<h3 id="安装vuex"><a href="#安装vuex" class="headerlink" title="安装vuex"></a>安装vuex</h3><pre><code>cnpm install vuex -S</code></pre><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>既然是集中式管理，那么数据就存储在store中。 <img src="https://vuex.vuejs.org/vuex.png" alt="vuex"> 该图片解释了vuex的核心过程。</p>
<ul>
<li>首先通过组件调度发出(Dispatch)一个动作(Actions)</li>
<li>随后动作提交到变化对象(Mutations)</li>
<li>然后变化对象改变数据，数据都在State对象中</li>
<li>数据改变后，重新渲染到组件中。</li>
</ul>
<p>Vuex的核心是Store(仓库)，相当于一个容器，一个store容器中包含如下属性的方法</p>
<p>核心概念</p>
<p>释义</p>
<p>State</p>
<p>定义属性(状态、数据)</p>
<p>Getter</p>
<p>获取属性数据</p>
<p>Action</p>
<p>定义动作方法</p>
<p>commit</p>
<p>提交变化</p>
<p>Mutation</p>
<p>真正的变化</p>
<h3 id="一、设置属性数据-关键state-getters"><a href="#一、设置属性数据-关键state-getters" class="headerlink" title="一、设置属性数据(关键state,getters)"></a>一、设置属性数据(关键state,getters)</h3><h4 id="1-创建store-js并将store设置到main-js的Vue实例的store属性中"><a href="#1-创建store-js并将store设置到main-js的Vue实例的store属性中" class="headerlink" title="1. 创建store.js并将store设置到main.js的Vue实例的store属性中"></a>1. 创建store.js并将store设置到main.js的Vue实例的store属性中</h4><pre><code>import store from &apos;./store.js&apos;

new Vue(&#123;
  store
&#125;);</code></pre><h4 id="2-编辑App-vue"><a href="#2-编辑App-vue" class="headerlink" title="2. 编辑App.vue"></a>2. 编辑App.vue</h4><p>定义两个button和一个count</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
  &lt;p&gt;&#123; &#123;count&#125;&#125;&lt;/p&gt;
  &lt;button&gt;增加&lt;/button&gt;
  &lt;button&gt;减小&lt;/button&gt;
&lt;/div&gt;</code></pre><h4 id="3-编辑store，设置state-将state设置到store实例，并导出"><a href="#3-编辑store，设置state-将state设置到store实例，并导出" class="headerlink" title="3. 编辑store，设置state,将state设置到store实例，并导出"></a>3. 编辑store，设置state,将state设置到store实例，并导出</h4><pre><code>// 引入组件
import Vue from &apos;vue&apos;
import Vuex from &apos;vuex&apos;
// 将vuex设置进来
Vue.use(Vuex)

// 设置state对象
const state = &#123;
  count: 6
&#125;
// 创建state对象
const store = new Vuex.Store(&#123;
  state // 设置state属性
&#125;)
// 导出store
export default store</code></pre><h4 id="4-App-vue中在computed选项中设置count，并通过this-store-state-count返回数据"><a href="#4-App-vue中在computed选项中设置count，并通过this-store-state-count返回数据" class="headerlink" title="4. App.vue中在computed选项中设置count，并通过this.$store.state.count返回数据"></a>4. App.vue中在computed选项中设置count，并通过this.$store.state.count返回数据</h4><pre><code>computed: &#123;
  count () &#123;
    return this.$store.state.count
  &#125;
&#125;</code></pre><p>然后count值就出来了。 简洁的来说就是:</p>
<ol>
<li><p>创建store.js文件，并引入到main.js文件中，作为store选项的值</p>
</li>
<li><p>在App.vue组件中设置要展示的数据</p>
</li>
<li><p>在store中引入vue和vuex,创建state对象，在其中设置共享数据。并创建store对象并设置state，然后导出</p>
</li>
<li><p>App.vue中设置计算属性，通过this.$store.state.count获得值</p>
</li>
</ol>
<p>** 我们还可以通过mapGetters,mapActions辅助函数,mapGetters用来获取属性数据，mapActions用来获取方法动作的。**</p>
<h4 id="1-要想使用，需要导入这两个函数-定义在App-vue的script标签中"><a href="#1-要想使用，需要导入这两个函数-定义在App-vue的script标签中" class="headerlink" title="1. 要想使用，需要导入这两个函数,定义在App.vue的script标签中"></a>1. 要想使用，需要导入这两个函数,定义在App.vue的script标签中</h4><pre><code>import &#123;mapGetters&#125; from &apos;vuex&apos;</code></pre><h4 id="2-然后设置computed选项-设置为mapGetters函数，参数为数组，值为要获取的属性数据"><a href="#2-然后设置computed选项-设置为mapGetters函数，参数为数组，值为要获取的属性数据" class="headerlink" title="2. 然后设置computed选项,设置为mapGetters函数，参数为数组，值为要获取的属性数据"></a>2. 然后设置computed选项,设置为mapGetters函数，参数为数组，值为要获取的属性数据</h4><pre><code>computed: mapGetters([
  &apos;count&apos;
])</code></pre><h4 id="3-那么这个count的值从哪里来，这就通过store的另一个概念getter。store文件中设置getters"><a href="#3-那么这个count的值从哪里来，这就通过store的另一个概念getter。store文件中设置getters" class="headerlink" title="3. 那么这个count的值从哪里来，这就通过store的另一个概念getter。store文件中设置getters"></a>3. 那么这个count的值从哪里来，这就通过store的另一个概念<strong>getter</strong>。store文件中设置getters</h4><pre><code>// 设置getters对象
var getters = &#123;
  count (state) &#123;
    return state.count
  &#125;
&#125;

// 然后添加到store选项中</code></pre><p>计算属性中的count值就与getters中的count名称对应，与state.count的count无关，他只是数据属性而已。</p>
<h3 id="二、事件方法-关键action"><a href="#二、事件方法-关键action" class="headerlink" title="二、事件方法(关键action)"></a>二、事件方法(关键action)</h3><p>组件调度action去提交更改,action是定义方法的。所以需要action</p>
<h4 id="1-为App-vue中的button定义单击事件"><a href="#1-为App-vue中的button定义单击事件" class="headerlink" title="1. 为App.vue中的button定义单击事件"></a>1. 为App.vue中的button定义单击事件</h4><pre><code>&lt;button @click=&quot;increment&quot;&gt;增加&lt;/button&gt;
&lt;button @click=&quot;decrement&quot;&gt;减小&lt;/button&gt;</code></pre><h4 id="2-在store中设置actions-并添加到store中"><a href="#2-在store中设置actions-并添加到store中" class="headerlink" title="2. 在store中设置actions,并添加到store中"></a>2. 在store中设置actions,并添加到store中</h4><pre><code>const actions = &#123;
  increment (context) &#123;
    console.log(context)
  &#125;,
  decrement (context) &#123;
    console.log(context)
  &#125;
&#125;</code></pre><h4 id="3-在App-vue中定义methods-需要通mapGetters一样导入mapActions"><a href="#3-在App-vue中定义methods-需要通mapGetters一样导入mapActions" class="headerlink" title="3. 在App.vue中定义methods,需要通mapGetters一样导入mapActions"></a>3. 在App.vue中定义methods,需要通mapGetters一样导入mapActions</h4><pre><code>import &#123;mapGetters, mapActions&#125; from &apos;vuex&apos;


methods: mapActions([
    &apos;increment&apos;,
    &apos;decrement&apos;
  ])</code></pre><p>actions中事件方法的参数context包含多个函数或对象，包括commit函数，dispath函数,getters对象,state对象等。 commit函数就用来提交改数据，actions指定定义事件方法，而更改在Mutations。</p>
<h3 id="三、更改数据-关键，mutations"><a href="#三、更改数据-关键，mutations" class="headerlink" title="三、更改数据(关键，mutations)"></a>三、更改数据(关键，mutations)</h3><h4 id="1-提交名称变化"><a href="#1-提交名称变化" class="headerlink" title="1. 提交名称变化"></a>1. 提交名称变化</h4><pre><code>const actions = &#123;
  increment (context) &#123;
    context.commit(&apos;increment&apos;) // 提交标识
  &#125;,
  decrement (context) &#123;
    context.commit(&apos;decrement&apos;)
  &#125;
&#125;</code></pre><h4 id="2-mutations"><a href="#2-mutations" class="headerlink" title="2. mutations"></a>2. mutations</h4><pre><code>const mutations = &#123;
  increment (state) &#123;
    state.count++
  &#125;,
  decrement (state) &#123;
    state.count--
  &#125;
&#125;</code></pre><p>mutations中的方法的参数就是state对象，可以通过state操作属性数据。 在这里，我们需要注意的是，mutations中的increment与actions中的commit函数的参数increment相同，他俩的值要相同不能更改.而actions中的increment方法名要和App.Vue中的methods中的mapActions里的值相同。 其实在actions中也是可以改state中的数据的，因为他的方法参数有state对象，但是并不建议这么做，而是把它放在mutations中做，它是专门做这件事的，而且这样更有利于devtools的查看，也符合vuex的设计思想。而actions中state要做的是什么?可以是对值的一个判断，是否去提交这个更改。 而getters，前面说了Getter是获取属性数据，所以i你可以定义方法来返回一个值，参数依然是state，然后你把方法名放在mapGetters中，就可以直接在模板中显示。 还有state，它通getters和actions一样，也有个mapState,可以放在Vue实例中。</p>
<h4 id="3-提交载荷和对象风格的提交方式"><a href="#3-提交载荷和对象风格的提交方式" class="headerlink" title="3. 提交载荷和对象风格的提交方式"></a>3. 提交载荷和对象风格的提交方式</h4><p>在和就是commit的参数，你在commit时，不仅可以传递一个type,还可以有一个附加参数。这个载荷会在devtools中显示出来.但大多数情况下载荷都是对象。</p>
<pre><code>store.commit(&apos;increment&apos;, 10)

mutations: &#123;
  increment (state, n) &#123;
    state.count += n
  &#125;
&#125;</code></pre><p>对象风格的提交就是，你可以直接在commit()中放置一个对象，而且是一个包含type属性的对象</p>
<pre><code>store.commit(&#123;
  type: &apos;increment&apos;,
  amount: 10
&#125;)

mutations: &#123;
  increment (state, payload) &#123;
    state.count += payload.amount
  &#125;
&#125;</code></pre><h4 id="4-使用常量代替Mutations事件类型"><a href="#4-使用常量代替Mutations事件类型" class="headerlink" title="4. 使用常量代替Mutations事件类型"></a>4. 使用常量代替Mutations事件类型</h4><p>意思就是mutations中increment方法名需要改成一个常量，这个常量从专门定义的一个文件中获取</p>
<pre><code>//type.js
const INCRENTMT = &apos;increment&apos;
const DECREMENT = &apos;decrement&apos;

export default&#123;
  INCRENTMT,
  DECREMENT
&#125;


//store.js
import types from &apos;../type&apos;
const mutations = &#123;
  [types.INCREMENT] (state) &#123;
    //...
  &#125;
&#125;
//或者
const actions = &#123;
  increment (&#123;commit,state&#125;) &#123;
    commit(types.INCREMENT)
  &#125;
&#125;</code></pre><h4 id="5-mutation必须是同步的"><a href="#5-mutation必须是同步的" class="headerlink" title="5. mutation必须是同步的"></a>5. mutation必须是同步的</h4><p>一条重要的原则就是要记住 mutation 必须是同步函数。 在devtools观察mutations时，会记录每一条mutations，能捕捉到前一状态后后一状态。而假如使用异步时:当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。</p>
]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0-自定义全局组件(插件)</title>
    <url>/2018/09/21/Vue/Vue2.0-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6(%E6%8F%92%E4%BB%B6)/</url>
    <content><![CDATA[<h2 id="自定义全局组件"><a href="#自定义全局组件" class="headerlink" title="自定义全局组件"></a>自定义全局组件</h2><p>组件可分为两种:</p>
<ul>
<li>全局组件:使用Vue.use()全局引入，如:vue-router</li>
<li>普通组件:需要每次引用组件,如:axios</li>
</ul>
<p>插件通常会为 Vue 添加全局功能。插件的范围没有限制 Vue.js 的插件应该有一个公开方法 install。这个方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象。</p>
<pre><code>export default&#123;
  data()&#123;
    return &#123;
      msg:&apos;one&apos;
    &#125;
  &#125;,
  install: function (Vue) &#123;
    Vue.component(&apos;one&apos;, this)
  &#125;
&#125;</code></pre><p>上面的代码是带当前vue文件中编写的install方法，所以Vue.component中使用了this关键字 可以单独定义index.js中写</p>
<pre><code>import one from &apos;./one.vue&apos;

export default&#123;
  install:function(Vue)&#123;
    Vue.component(&apos;one&apos;,one);
  &#125;
&#125;</code></pre><p>引入后直接通过名称one 你可以在其中定义全局方法或属性、全局资源，实例方法等,就官网所说</p>
<pre><code>MyPlugin.install = function (Vue, options) &#123;
  // 1. 添加全局方法或属性
  Vue.myGlobalMethod = function () &#123;
    // 逻辑...
  &#125;

  // 2. 添加全局资源
  Vue.directive(&apos;my-directive&apos;, &#123;
    bind (el, binding, vnode, oldVnode) &#123;
      // 逻辑...
    &#125;
    ...
  &#125;)

  // 3. 注入组件
  Vue.mixin(&#123;
    created: function () &#123;
      // 逻辑...
    &#125;
    ...
  &#125;)

  // 4. 添加实例方法
  Vue.prototype.$myMethod = function (methodOptions) &#123;
    // 逻辑...
  &#125;
&#125;</code></pre>]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0——vue-cli脚手架及模块化开发</title>
    <url>/2018/09/21/Vue/Vue2.0%E2%80%94%E2%80%94vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6%E5%8F%8A%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="vue-cli脚手架"><a href="#vue-cli脚手架" class="headerlink" title="vue-cli脚手架"></a>vue-cli脚手架</h2><p>vue-cli就是快速搭建环境的，它有几个模板，webpack的，browserify的，pwa的等等。都是使用npm来操作的。通常使用较多的时webpack吧。</p>
<ol>
<li>安装</li>
</ol>
<p>cnpm安装</p>
<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><p>vue-cli安装</p>
<pre><code>cnpm install vue-cli -g     //-g为全局安装</code></pre><ol start="2">
<li><p>查看命令</p>
<p>vue     //vue命令<br>vue -V  //版本<br>vue list //可用的模板</p>
</li>
</ol>
<ol start="3">
<li><p>初始化项目</p>
<p>//初始化 模板名 项目名<br>vue init webpack vue-cli-demo</p>
</li>
</ol>
<p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180921111006.png?x-oss-process=image/resize,m_fill,w_300,h_174" alt=""> 首先这个流程，如果你项目名称不符合规范，比如长度，那么么第一条就让你重新定义项目名，然后是项目描述，作者，然后是运行时编译，vue-router不安装，ESLint是代码格式规范，unit test为单元测试，e2e test也是测试，最后一个npm install 选择no最后一项。</p>
<ol start="4">
<li>安装模块</li>
</ol>
<p>就是流程完后，后面提示的黄色代码,但是我们不使用npm，而使用cnpm</p>
<pre><code>cd vue-demo-test
cnpm install    //安装依赖，虽然已经初始化项目了，但是依赖是没有安装的。</code></pre><ol start="5">
<li><p>运行示例</p>
<p>npm run dev     //启用测试服务，开发环境下<br>npm rum build   //构建项目，生产环境，将项目打包输出到dist目录下。</p>
</li>
</ol>
<h2 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h2><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><ol>
<li><p>vue-router模块化开发</p>
<p>cnpm install vue-router -S  //–save,写入dependencies，用于生产环境</p>
</li>
</ol>
<ol start="2">
<li><p>编辑main.js 导入vue-router组件，并使用</p>
<p>import VueRouter from ‘vue-router’</p>
<p>Vue.use(VueRouter)</p>
</li>
</ol>
<ol start="2">
<li>创建components文件夹，下面放所有的组件</li>
</ol>
<p>创建router.config.js文件，用于配置路由js，专门配置路由的。引入组件并进行配置</p>
<ol start="3">
<li>main.js中创建router示例,并在Vue示例中设置</li>
</ol>
<p><strong>路由守卫</strong> 监视路由</p>
<pre><code>watch:&#123;
    $route:function(newVal,oldVal)&#123;

    &#125;
&#125;</code></pre><p>newVal和oldVal分表表示路由的新状态和前一个状态。</p>
<h3 id="axios模块"><a href="#axios模块" class="headerlink" title="axios模块"></a>axios模块</h3><pre><code>cnpm install axios -S</code></pre><p>和vue-router不一样，axios不能使用Vue.use()来引入形成全局的 所以有两种方式的引入:</p>
<ul>
<li><p>每个组件都引入这个组件</p>
</li>
<li><p>在main.js中引入，并将组件添加到Vue的原型上</p>
<p>Vue.prototype.axios = axios;</p>
</li>
</ul>
<h2 id="为自定义组件添加事件"><a href="#为自定义组件添加事件" class="headerlink" title="为自定义组件添加事件"></a>为自定义组件添加事件</h2><p>当你在根组件定义事件，根组件模板中的按钮可以触发事件。自定义组件时，无法绑定其事件，需要.native修饰符</p>
<h2 id="Element-UI的引入，由饿了么开发的Vue-UI框架"><a href="#Element-UI的引入，由饿了么开发的Vue-UI框架" class="headerlink" title="Element UI的引入，由饿了么开发的Vue UI框架"></a>Element UI的引入，由饿了么开发的Vue UI框架</h2><ol>
<li><p>安装</p>
<p>cnpm install element-ui -S</p>
</li>
</ol>
<ol start="2">
<li><p>引入</p>
<p>//main.sj中引入<br>import ElementUI from ‘element-ui’<br>import ‘element-ui/lib/theme-chalk/index.css’</p>
</li>
</ol>
<p>注意，elementui 2.0的版本index.css位置已经变了</p>
<ol start="3">
<li><p>配置style-loader</p>
<p>//安装前首先确认style-loader和css-loader是否下载<br>cnpm install stype-loader -D<br>cnpm install stype-loader -D</p>
</li>
</ol>
<ol start="4">
<li>安装less</li>
</ol>
<p>安装loader,less、less-loader</p>
<pre><code>cnpm install less less-loader -D</code></pre><p>build/webpack.base.conf.js下rules添加</p>
<pre><code>&#123;
    test: /\.less$/,
    loader: &apos;less-loader&apos;
&#125;</code></pre>]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>闪回技术:闪回表,闪回删表,闪回查询</title>
    <url>/2018/09/20/Oracle/%E9%97%AA%E5%9B%9E%E6%8A%80%E6%9C%AF-%E9%97%AA%E5%9B%9E%E8%A1%A8,%E9%97%AA%E5%9B%9E%E5%88%A0%E8%A1%A8,%E9%97%AA%E5%9B%9E%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h1 id="闪回技术"><a href="#闪回技术" class="headerlink" title="闪回技术"></a>闪回技术</h1><h2 id="闪回表-Flashback-Table"><a href="#闪回表-Flashback-Table" class="headerlink" title="闪回表(Flashback Table)"></a>闪回表(Flashback Table)</h2><p>闪回表是利用UNDO表空间的撤销数据，所以能把表闪回到多久之前 受到<strong>undo_retention</strong>，<strong>UNDO表空间的数据文件是否启动自动增长功能</strong>，<strong>是否设置guarantee</strong>等三种因素的影响。 被闪回的表必须启动行移动功能，且该表必须存在</p>
<pre><code>alter table dept enable row movement;</code></pre><p><strong>1. 闪回到具体时间</strong></p>
<pre><code>flashback table scott.emp to timestamp to_timestamp(&apos;2018-09-10 09:00:00&apos;,&apos;yyyy-mm-dd hh24:mi:ss&apos;)</code></pre><ol start="2">
<li><p>闪回到10分钟之前</p>
<p>flashback table scott.emp to timestamp(systimestamp-interval ‘10’ minute)</p>
</li>
</ol>
<ol start="3">
<li><p>将scott.emp闪回到SCN为10086000的时候</p>
<p>flashback table scott.emp to scn 1086000;</p>
<p>select dbms_flashback.get_system_change_number scn from dual;—查看当前SCN值</p>
</li>
</ol>
<p><strong>使用闪回表注意事项:</strong></p>
<ul>
<li>被闪回的表必须启动行移动功能,alter table dept enable row movement;</li>
<li>“FLASHBACK TABLE”命令的执行者必须有“FLASHBACK ANY TABLE”系统权限或者在被闪回的表上具有“FLASHBACK”对象权限。</li>
<li>“FLASHBACK TABLE”属于DDL命令，隐式提交。</li>
<li>SYS用户的任何表无法使用此功能。</li>
</ul>
<h2 id="闪回删表-Flashback-Drop"><a href="#闪回删表-Flashback-Drop" class="headerlink" title="闪回删表(Flashback Drop)"></a>闪回删表(Flashback Drop)</h2><p>闪回删表指的是撤销“DROP TABLE”的效果。 <strong>1. 闪回被删掉的表scott.emp</strong></p>
<pre><code>flashback table scott.emp to before drop;</code></pre><p>当表被删掉后，由新建了一个同名表，如果视图使用上面的闪回原表，则会报ORA-38312: original name is used by an existing object错误，可重新命名。 <strong>2. 闪回是可指被恢复的回收站对象</strong></p>
<pre><code>flashback table &quot;BIN$AyId7ZbBjWngUKjADQIIuA==$0&quot; to before drop;</code></pre><p><strong>闪回删表的工作原理</strong>是:当“DROP TABLE”命令执行时，表和索引并没有真正意义的删除，其所占空间只是分配给了<strong>回收站对象</strong> 注意：表空间在自动增长的压力下会按照先入先出的规则将回收站对象的空间分配给需要空间的段，在将回收站对象耗尽之前数据文件是不会自动增长的。 <strong>3. 禁用回收站功能</strong></p>
<pre><code>alter system set recyclebin=&apos;OFF&apos; scope=spfile;</code></pre><p><strong>4. 删除当前用户回收站的所有对象</strong></p>
<pre><code>pruge recyclebin;</code></pre><h2 id="闪回查询"><a href="#闪回查询" class="headerlink" title="闪回查询"></a>闪回查询</h2><p>以表为单位查询过去的数据称为闪回查询，主要有两种方式：</p>
<ul>
<li>闪回时间点查询:利用select 命令的“as of”子句PL/SQL包dbms_flashback在过去的时间点上的查询。</li>
<li>闪回版本查询:利用select命令的“version between”子句在过去的一段时间范围内的查询。</li>
</ul>
<h3 id="闪回时间点查询"><a href="#闪回时间点查询" class="headerlink" title="闪回时间点查询"></a>闪回时间点查询</h3><p><strong>利用as of语句</strong></p>
<ol>
<li><p>查询7900号员工在具体时间的工资</p>
<p>select sal from emp as of timestamp to_timestamp(‘2018-09-13 10:02:30’,’yyyy-mm-dd,hh24:mi:ss’) where empno=7900;</p>
</li>
</ol>
<ol start="2">
<li><p>查询7900号员工在5分钟之前的工资</p>
<p>select sal from emp as  of timestamp(systimestamp-interval ‘5’ minute) where empno=7900;</p>
</li>
</ol>
<p><strong>利用dbms_flashback包</strong> 利用dbms_flashback包的<strong>enable_at_time或enable_at_scn</strong>存储过程锁定一个会话级别的闪回时间目标，即进入闪回模式，随后的查询命令可以省略“as of”，直到调用dbms_flashback_disable存储过程将其关闭为止。 比如：将闪回模式回话定格在15分钟之前:</p>
<pre><code>exec dbms_flashback.enable_at_time(systimestamp - interval &apos;15&apos; minute);</code></pre><p>现在进行查询，注意，此时查询的是15分钟之前的表。</p>
<pre><code>select sal from emp where empno=7900;   --忽略了“as of”子句</code></pre><p>此时若访问SYSDATE、SYSTIMESTAMP等日期函数，它们的返回值仍是当前值，而不是15分钟之前的值。 处于闪回会话模式时，执行dml和ddl将报错</p>
<pre><code>SQL&gt; update emp set sal=2000 where empno=7900;
update emp set sal=2000 where empno=7900
       *
第 1 行出现错误:
ORA-08182: 在闪回模式下操作不受支持</code></pre><p>如果查询完毕，可调用disable存储过程关闭闪回会话模式。</p>
<pre><code>exec dbms_flashback.disable;</code></pre><p><strong>闪回版本查询</strong> 闪回版本查询可以贯穿一定长度的时间窗口，通过只使用一条查询命令就能<strong>返回该时间窗口内不同时间点上的数据。</strong> 比如，首先通过3个事务将7900号员工的工资进行修改。</p>
<pre><code>SQL&gt; update emp set sal=3000 where empno=7900;
已更新 1 行。
SQL&gt; commit;
提交完成。
SQL&gt; update emp set sal=4000 where empno=7900;
已更新 1 行。
SQL&gt; commit;
提交完成。
SQL&gt; update emp set sal=5000 where empno=7900;
已更新 1 行。
SQL&gt; commit;
提交完成。
SQL&gt; update emp set sal=6000 where empno=7900;
已更新 1 行。
SQL&gt; commit;
提交完成。</code></pre><p><strong>执行闪回版本查询</strong></p>
<pre><code>SQL&gt; select empno,sal from emp versions between timestamp(systimestamp -interval &apos;15&apos; minute) and maxvalue where empno=7900;

     EMPNO        SAL
---------- ----------
      7900       6000
      7900       5000
      7900       4000
      7900       3000
      7900        950</code></pre><p>通过“versions between”，我们可以看到在15分钟之内，7900号员工的工资用5个值，说明共有4个事务对其进行过修改。 为了能看清这些事务的先后顺序，可以在查询列表中使用伪字段。</p>
<pre><code>SQL&gt; select versions_xid,versions_startscn,versions_endscn,empno,sal from emp versions between timestamp(systimestamp - interval &apos;15&apos; minute) and maxvalue where empno=7900 order by 2 nulls first;

VERSIONS_XID     VERSIONS_STARTSCN VERSIONS_ENDSCN      EMPNO        SAL
---------------- ----------------- --------------- ---------- ----------
                                           5482877       7900        950
0E00180005020000           5482877         5482880       7900       3000
17000D00E7010000           5482880         5482882       7900       4000
0F00140002020000           5482882         5482885       7900       5000
16000700C2020000           5482885                       7900       6000</code></pre><ul>
<li>versions_xid为事物号</li>
<li>versions_startscn是事物开始时的SCN</li>
<li>version_endscn时修改该行的下一个事物开始时的SCN</li>
</ul>
<p>首尾衔接这两个字段的SCN号很容易得出真实的修改顺序。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>闪回</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Ubuntu18.04和VirtualBox虚拟软件使虚拟机之间互通和与宿主互通</title>
    <url>/2018/09/18/Linux/%E4%BD%BF%E7%94%A8Ubuntu18.04%E5%92%8CVirtualBox%E8%99%9A%E6%8B%9F%E8%BD%AF%E4%BB%B6%E4%BD%BF%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B9%8B%E9%97%B4%E4%BA%92%E9%80%9A%E5%92%8C%E4%B8%8E%E5%AE%BF%E4%B8%BB%E4%BA%92%E9%80%9A/</url>
    <content><![CDATA[<h1 id="使用Ubuntu18-04通过VirtualBox虚拟实现虚拟机之间和宿主之间的互通访问"><a href="#使用Ubuntu18-04通过VirtualBox虚拟实现虚拟机之间和宿主之间的互通访问" class="headerlink" title="使用Ubuntu18.04通过VirtualBox虚拟实现虚拟机之间和宿主之间的互通访问"></a>使用Ubuntu18.04通过VirtualBox虚拟实现虚拟机之间和宿主之间的互通访问</h1><p>直接切入操作，不讲废话，毕竟也是参考别人并尝试出来的。 1. 新建适配器网卡 首先你需要配置一个【虚拟适配器】，再【设置】，【主机网络管理器】，新建一个网络，下面【网卡选项】选择手动配置，好像创建完之后，文本框里就已经有值了，【取消启用HDCP服务器】。 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180918152356.png" alt=""> 每个机子的网段IP可能是不一样的，我的是192.168.135.1,你的135这个网段会变，另外第四位设置为1就好。 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180918152611.png" alt=""> 此时你的网络中会多出一个适配器。</p>
<ol start="2">
<li>配置网络网卡</li>
</ol>
<p>点击你已经虚拟好的机子，点击设置，配置【网络】，【网卡1】配置【网络地址转换NAT】 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180918153019.png" alt=""> 【网卡2】配置，点击【启用连接】复选框，设置连接方式为【仅主机Host-Only网络】，【界面名称就是刚才创建的网络适配器，选中】 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180918153046.png" alt=""> 你有两个虚拟机，你的两个虚拟机都要这样设置。如果之后你连接不上，一定要确认你的虚拟机这两个网卡的网络设置是否正确。 可以还在这个设置中看，还可以在虚拟机启动后，右下角的工具栏中显示的网络配置。</p>
<ol start="3">
<li>简单说一下这么配置的原因，也是引用源博主的文章。</li>
</ol>
<p>首先引一下图片 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/201809181536120.png" alt=""> 随后，看他说的，两个网卡分别有什么作用。 【网卡1，网络地址转换NAT】的目的是用上<strong>虚拟机与主机之间通讯</strong>，并且可以上外网。由于VirtualBox 的 NAT方式，只允许<strong>虚拟机与主机之间单向通讯</strong>（因为VirtualBox只虚拟了一个网卡，所以主机是ping不通虚拟机的。 而按图例中，虚拟机之间可以通过Host-Only和桥接方式，所以你要设置一个Host-Only，它不是刚设置的嘛，有ip4，所以它用来<strong>给两台虚拟机设置静态IP</strong>,而网卡1就是连接宿主的，可以访问网络，IP4和HDCP都是自动获取的，而且IP地址是类似10.10.x.x的。 这样的话，又能访问宿主网络，ping宿主(宿主不能ping虚拟机)，又能虚拟机之间访问，而且是静态的IP。</p>
<ol start="4">
<li>进入Ubuntu18.4中设置网络</li>
</ol>
<p>到linux里，这两个配置的网卡就变名字了，enp0s3和enp0s8，当然每个机子可能都是不一样的，也可能一样。但是有一点就是再做这个操作之前，我也分不清哪个用来虚拟机互通的，那个是用来连接虚拟机自动获取网络的。 所以先拿一台虚拟机尝试,配置 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/T20180918155055.png" alt=""> <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/T20180918155233.png" alt=""></p>
<ol>
<li>0s3我配置的是自动连接，就是自动获取ip，DHCP，用于连接宿主，访问网络的。【身份选项】，mac地址就选择当前配置的enp0s3,ip4和ip6中都是自动，这间完成自动获取宿主连接了。</li>
</ol>
<p>对于enp0s8是虚拟机之间的通信，设置静态ip,【身份选项】mac选择当前对应网卡的地址enp0s8,ip4设置如下，ip6自动(文章中说NAT是无法设置IP6的) <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180918155503.png" alt=""></p>
<ol start="2">
<li>这个IP4的配置，ip4选手动单选，地址:192.168.x.x,第三位是创建适配器时的默认给你的，第四位就是当前机子的ip号，这个号肯定是当前ip端唯一的。子网掩码:255.255.255.0这个是不用更改的，【网关】就是创建时默认的192.168.x.1。</li>
</ol>
<p>好，这样一台虚拟机就配置完成了，你可以ping一下百度网址<a href="http://www.baidu.com或者宿主ip地址，如果响应没问题就说明OK了。如果有问题，那么你就得把两个网卡的配置反过来试试吧。。。。。。。">www.baidu.com或者宿主ip地址，如果响应没问题就说明OK了。如果有问题，那么你就得把两个网卡的配置反过来试试吧。。。。。。。</a> 对于虚拟机之间的ping，就得把另一个虚拟机也配置了之后，在相互ping，如果通了，那就完成了。 该案例也是秩序配置，不需要修改什么配置文件，上午改了配置文件，改yaml文件，始终编译不成功。 参考的博客: <a href="https://blog.csdn.net/techsupporter/article/details/51810649">https://blog.csdn.net/techsupporter/article/details/51810649</a> <a href="https://yq.aliyun.com/articles/149551">https://yq.aliyun.com/articles/149551</a> 那么我这么做，虚拟机互相ping时干什么，恩，大数据搭建环境，额虽然大数据已经很火爆很完善了现在，但是我还在开始学啊。看后面大数据环境的配置把。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>在JS中关于ajax回调success函数的时间点问题和对话框内部调用外部方法问题</title>
    <url>/2018/09/16/Javascript/%E5%9C%A8JS%E4%B8%AD%E5%85%B3%E4%BA%8Eajax%E5%9B%9E%E8%B0%83success%E5%87%BD%E6%95%B0%E7%9A%84%E6%97%B6%E9%97%B4%E7%82%B9%E9%97%AE%E9%A2%98%E5%92%8C%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%86%85%E9%83%A8%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8%E6%96%B9%E6%B3%95%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="关于js-ajax方法的success函数执行问题"><a href="#关于js-ajax方法的success函数执行问题" class="headerlink" title="关于js ajax方法的success函数执行问题"></a>关于js ajax方法的success函数执行问题</h2><p>首先对于ajax的success和post，get的回调函数都是同一中，都是成功后要执行的函数，这时肯定的。 那问题是什么？ 在执行ajax的success回调函数时，可能你会由返回值，由外部去获得这个值，但是外部却无法获得这个值，也不是说无法获得，只是时间点不对。当调用包含ajax方法时得到的返回值是undefined,随后执行后面的代码，当所有代码执行完成后它才返回你需要的那个返回值。 你可以写个简单的示例：</p>
<ul>
<li>定义一个普通方法来调用带有ajax的方法</li>
<li>然后在该普通方法调用ajax方法之后输出这个返回值</li>
<li>然后在ajax的方法中，在回调方法success里输出你ajax请求操作成功后返回的result值。</li>
</ul>
<p>通过执行你会发现，先弹出你的 返回值，而且返回值是undefined的，随后再弹出你的result值，有值。 那为什么会这样，通过js调试发现，当你执行到$.post(…),$.get(…),$.ajax({…})这行之后，它会直接跳到ajax末尾的”}”去，也就是说回掉函数没有执行，随后返回到上一级输出你的返回值，导致是未定义的变量，随后当代码执行完之后，代码又进入jquery.min.js中，弹出了回掉函数中的result的弹框。 就是这样一种情况，如果你想要获得ajax回调的返回结果，并对结果进行判断或其他操作，它是得不到值的。 那么么为什么会这样，一篇博客中说出了道理，起始也是一个ajax底层的问题，也不是多困难。 答:ajax默认是异步传递的。<strong>它不会暂停它之后代码的执行。在后面代码执行时，ajax肯定还没有返回数据</strong>。如果不理解异步传递。请记住，ajax()之后不要写需要用到ajax返回数据的代码。<strong>所有需要用到ajax返回数据的代码都要放到success回调函数中</strong>。 将后面需要用到的都放在success中，这个确实是一个方法，但可能可用性不太好。但是如果你把async设置为false，好像仍然能解决问题。 这样就引出了后面的第二个问题，因为当你在同一页面或同一层窗口中不太需要success的返回值或其他返回值，因为既然在同一页面你可以再success中判断并直接调用其他方法。所以没不要获得返回值。而另一种情况就是通过对话框做form表单操作，也就是把form的增该不单独放页面中，而是放在弹出框里，这样就相当于是一个iframe，多个一层框架，有一个父子窗口的关系。</p>
<h2 id="父窗口与子窗口函数的互相调用"><a href="#父窗口与子窗口函数的互相调用" class="headerlink" title="父窗口与子窗口函数的互相调用"></a>父窗口与子窗口函数的互相调用</h2><p>对于这个问题，也就是刚才引出的话题。只需要调用就好。 <strong>对于子窗口调用父窗口的方法:</strong></p>
<pre><code>window.parent.xxx;//xxx就是父窗口的的方法</code></pre><p>我为什么会用到这个，因为我需要再父窗口弹出一个右下角的提示小窗，所以如果再子窗口里，窗口大小太小，也不好看，所以操作完成后再父窗口中显示。 <strong>对于父窗口调用子窗口的方法</strong></p>
<pre><code>document.getElementById(&quot;#iframe&quot;).contentWindow.xxx;</code></pre><p>document.getElementById(“#iframe”)就是获得子窗口的iframe Document对象，然后通过contentWindow来调用方法。 <strong>对于兄弟级别的窗口</strong> 需要先获得父级dom，再获得子窗口的dom。也相当于子窗口转到父窗口再转到另一个子窗口。</p>
<pre><code>window.parent.$(&quot;#childFrm&quot;)[0].contentWindow.xxx;</code></pre>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>XML XSTL技术笔记 XML样式表</title>
    <url>/2018/09/14/XML/XML%20XSTL%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0%20XML%E6%A0%B7%E5%BC%8F%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="XML-XSLT"><a href="#XML-XSLT" class="headerlink" title="XML XSLT"></a>XML XSLT</h1><p>XSLT 是一种用于将 XML 文档转换为 XHTML 文档或其他 XML 文档的语言。 XPath 是一种用于在 XML 文档中进行导航的语言。 在学习XSTL之前要了解XPath。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>one.xsl文件</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;
    &lt;xsl:template match=&quot;/&quot;&gt;
        &lt;html&gt;
            &lt;body&gt;
                &lt;h2&gt;My CD Collection&lt;/h2&gt;
                &lt;table border=&quot;1&quot;&gt;
                    &lt;tr bgcolor=&quot;#9acd32&quot;&gt;
                        &lt;th&gt;Title&lt;/th&gt;
                        &lt;th&gt;Artist&lt;/th&gt;
                    &lt;/tr&gt;
                    &lt;xsl:for-each select=&quot;catalog/cd&quot;&gt;
                        &lt;tr&gt;
                            &lt;td&gt;&lt;xsl:value-of select=&quot;title&quot;/&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;xsl:value-of select=&quot;artist&quot;/&gt;&lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/table&gt;
            &lt;/body&gt;
        &lt;/html&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</code></pre><p>a.xml文件</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;?xml-stylesheet  type=&quot;text/xsl&quot;  href=&quot;one.xsl&quot;?&gt; &lt;catalog&gt;
    &lt;cd&gt;
        &lt;title&gt;Empire Burlesque&lt;/title&gt;
        &lt;artist&gt;Bob Dylan&lt;/artist&gt;
        &lt;country&gt;USA&lt;/country&gt;
        &lt;company&gt;Columbia&lt;/company&gt;
        &lt;price&gt;10.90&lt;/price&gt;
        &lt;year&gt;1985&lt;/year&gt;
    &lt;/cd&gt;
&lt;/catalog&gt;</code></pre><p>使用浏览器预览a.xml文件。</p>
<h3 id="xsl-template元素"><a href="#xsl-template元素" class="headerlink" title="xsl:template元素"></a>xsl:template元素</h3><p>XSL 样式表由一个或多套被称为模板（template）的规则组成。 每个模板含有当某个指定的节点被匹配时所应用的规则。 xls:templdate元素用于构建模板，match属性用于关联XML元素和模板。match元素也可以用于为整个XML文档定义模板。match属性的值是XPath表达式。 先来简单介绍一下这个模板的示例</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;
&lt;xsl:template match=&quot;/&quot;&gt;
  &lt;html&gt;
  &lt;body&gt;
  &lt;h2&gt;My CD Collection&lt;/h2&gt;
  &lt;table border=&quot;1&quot;&gt;
    &lt;tr bgcolor=&quot;#9acd32&quot;&gt;
      &lt;th&gt;Title&lt;/th&gt;
      &lt;th&gt;Artist&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.&lt;/td&gt;
      &lt;td&gt;.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  &lt;/body&gt;
  &lt;/html&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</code></pre><p>第一行为XML声明，第二行xml:stylesheet元素定义此文档是XSTL样式表文档(连同版本号和命名空间)。 xsl:template元素表示定义一个模板，而match属性值为“/”表示将此模板与整个XML源文档的根关联。 而模板内部内容定义了html代码。</p>
<h3 id="xls-value-of"><a href="#xls-value-of" class="headerlink" title="xls:value-of"></a>xls:value-of</h3><p>xls:value-of元素元用于提取某个 XML 元素的值，并把值添加到转换的输出流中：</p>
<pre><code>&lt;tr&gt;
    &lt;td&gt;&lt;xsl:value-of select=&quot;catalog/cd/title&quot;/&gt;&lt;/td&gt;
    &lt;td&gt;&lt;xsl:value-of select=&quot;catalog/cd/artist&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;</code></pre><p>select元素中的值为XPath表达式，该示例中的值表示，获取catalog下的cd下的所有title元素，其中“/”代表一个子目录级。 此元素将获取title元素包含的文本值转换输出到此处。</p>
<h3 id="xls-for-each元素"><a href="#xls-for-each元素" class="headerlink" title="xls:for-each元素"></a>xls:for-each元素</h3><p>由名字可见，此标签元素用于循环</p>
<pre><code>&lt;xsl:for-each select=&quot;catalog/cd&quot;&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;xsl:value-of select=&quot;title&quot;/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;xsl:value-of select=&quot;artist&quot;/&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/xsl:for-each&gt;</code></pre><p>该元素和Java jstl表达式的for-each一个意思。select属性也是XPath值，表示获得catalog下的所有cd元素。 此示例将对所有的cd元素进行循环,而每次循环，value-of都可以从中得到cd的子元素。 当然，还可以对select进行过滤筛选</p>
<pre><code>&lt;xsl:for-each select=&quot;catalog/cd[artist=&apos;Xiao Duo&apos;]&quot;&gt;
&lt;/xsl:for-each&gt;</code></pre><p>过滤运算符:</p>
<ul>
<li>等于：=</li>
<li>不等于：!=</li>
<li>小于：&lt;</li>
<li>大于：&gt;</li>
</ul>
<p>该示例表明，将筛选出artist元素值等于“Xiao Duo”的cd元素。</p>
<h3 id="xsl-sort"><a href="#xsl-sort" class="headerlink" title="xsl:sort"></a>xsl:sort</h3><p>用于对输出结果进行排序。 只需要简单的在xsl:for-each元素中放入此元素即可，select的值为要排序的元素名称。</p>
<pre><code>&lt;xsl:for-each select=&quot;catalog/cd&quot;&gt;
    &lt;xsl:sort select=&quot;artist&quot;/&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;xsl:value-of select=&quot;title&quot;/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;xsl:value-of select=&quot;artist&quot;/&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/xsl:for-each&gt;</code></pre><h3 id="xsl-if"><a href="#xsl-if" class="headerlink" title="xsl:if"></a>xsl:if</h3><p>用于对数据进行条件筛选。</p>
<pre><code>&lt;xsl:for-each select=&quot;catalog/cd&quot;&gt;
    &lt;xsl:if test=&quot;price &gt; 10&quot;&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;xsl:value-of select=&quot;title&quot;/&gt;&lt;/td&gt;
            &lt;td&gt;&lt;xsl:value-of select=&quot;artist&quot;/&gt;&lt;/td&gt;
            &lt;td&gt;&lt;xsl:value-of select=&quot;price&quot;/&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/xsl:if&gt;
&lt;/xsl:for-each&gt;</code></pre><p>该示例表示价格大于10的数据进行显示。</p>
<h3 id="xls-choose-xls-when-xls-otherwise"><a href="#xls-choose-xls-when-xls-otherwise" class="headerlink" title="xls:choose xls:when xls:otherwise"></a>xls:choose xls:when xls:otherwise</h3><p>语法：</p>
<pre><code>&lt;xsl:choose&gt;
&lt;xsl:when test=&quot;_expression_&quot;&gt;
... some output ...
&lt;/xsl:when&gt;
&lt;xsl:otherwise&gt;
... some output ....
&lt;/xsl:otherwise&gt;
&lt;/xsl:choose&gt;</code></pre><h3 id="xls-attribute"><a href="#xls-attribute" class="headerlink" title="xls:attribute"></a>xls:attribute</h3><p>该元素放置在html元素内部，表示为当前父级html节点元素设置一个属性，其name属性值(非XPath)为html的属性名，而xls:attribute文本值则为html元素的对应属性值。</p>
<pre><code>&lt;td&gt;
    &lt;xsl:attribute name=&quot;price&quot;&gt;
      &lt;xsl:value-of select=&quot;price&quot;/&gt;
    &lt;/xsl:attribute&gt;
    &lt;xsl:value-of select=&quot;title&quot;/&gt;
&lt;/td&gt;</code></pre><p>该示例表示，为td标签元素设置一个属性，名称为price,值为value-of获得的值，选取了price的xml节点元素值。显示如下:</p>
<pre><code>&lt;td price=&quot;10.90&quot;&gt;Empire Burlesque&lt;/td&gt;</code></pre><h3 id="xls-element"><a href="#xls-element" class="headerlink" title="xls:element"></a>xls:element</h3><p>表示自定义一个元素，name属性值为自定义的元素名称。</p>
<pre><code>&lt;xsl:element name=&quot;singer&quot;&gt;
    &lt;xsl:attribute name=&quot;a&quot;&gt;a&lt;/xsl:attribute&gt;
    &lt;xsl:attribute name=&quot;b&quot;&gt;b&lt;/xsl:attribute&gt;
    &lt;xsl:value-of select=&quot;artist&quot; /&gt;
&lt;/xsl:element&gt;
展示:
&lt;singer a=&quot;a&quot; b=&quot;b&quot;&gt;Bob Dylan&lt;/singer&gt;</code></pre><h3 id="xls-import-xls-include"><a href="#xls-import-xls-include" class="headerlink" title="xls:import,xls:include"></a>xls:import,xls:include</h3><p>xls:import表示把一个样式表中的内容<strong>导入</strong>到另一个样式表中。被导入的样式表的优先级低于当前的样式表。 xls:include表示把一个样式表的内容包含到另一个样式表中。被包含的样式表用于与包含的样式表优先级相同。 href属性指定被导入或被包含的样式表路径，相对路径。</p>
<h3 id="xls-text"><a href="#xls-text" class="headerlink" title="xls:text"></a>xls:text</h3><p>用于向输出写文本，即通过样式表生成文本节点。</p>
<pre><code>&lt;xsl:template match=&quot;/&quot;&gt;
    &lt;xls:text&gt;你好&lt;/xls:text&gt;
&lt;/xsl:template&gt;</code></pre><p>可直接在标签内写值或value-of元素,属性disable-output-escaping表示是否对文本不进行转义，默认no，也就是转义。</p>
<h3 id="xsl-comment"><a href="#xsl-comment" class="headerlink" title="xsl:comment"></a>xsl:comment</h3><p>在结果树中创建注释节点</p>
<pre><code>&lt;xsl:comment&gt;This is a comment!&lt;/xsl:comment&gt;
&lt;xsl:comment&gt;&lt;xsl:value-of select=&quot;name&quot;/&gt;&lt;/xsl:comment&gt;</code></pre>]]></content>
      <categories>
        <category>XML</category>
      </categories>
      <tags>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>XML Schema技术笔记</title>
    <url>/2018/09/14/XML/XML%20Schema%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Schemas教程"><a href="#Schemas教程" class="headerlink" title="Schemas教程"></a>Schemas教程</h1><p>XML Schema 是基于 XML 的 DTD 替代者。 XML Schema 可描述 XML 文档的结构。 XML Schema 语言也可作为 XSD（XML Schema Definition）来引用。</p>
<h3 id="schema元素"><a href="#schema元素" class="headerlink" title="schema元素"></a>schema元素</h3><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
targetNamespace=&quot;http://www.runoob.com&quot;
xmlns=&quot;http://www.runoob.com&quot;
elementFormDefault=&quot;qualified&quot;&gt;
...
...
&lt;/xs:schema&gt;</code></pre><ul>
<li>xmlns:xs:显示schema中用到的元素和数据类型来自此命名空间，同时规定应该使用xs前缀</li>
<li>targetNamespace:显示被此schema定义的元素来自命名空间</li>
<li>xmlns:默认命名空间</li>
<li>elementFormDefault=“qualified“:指出任何XML实例必须被命名空间限定</li>
</ul>
<p>在XML中引用schema</p>
<pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;note xmlns=&quot;http://www.runoob.com&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xsi:schemaLocation=&quot;http://www.runoob.com note.xsd&quot;&gt;

&lt;to&gt;Tove&lt;/to&gt;
&lt;from&gt;Jani&lt;/from&gt;
&lt;heading&gt;Reminder&lt;/heading&gt;
&lt;body&gt;Don&apos;t forget me this weekend!&lt;/body&gt;
&lt;/note&gt;</code></pre><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><h3 id="简易元素"><a href="#简易元素" class="headerlink" title="简易元素"></a>简易元素</h3><p>仅包含文本的元素，不包含任何其他元素或属性。</p>
<ol>
<li><p><strong>语法:</strong></p>
<p>&lt;xs:element name=”xxx” type=”yyy”/&gt;</p>
</li>
</ol>
<p>name定义元素的名称，type定义元素的数据类型</p>
<ol start="2">
<li><strong>常用的类型:</strong></li>
</ol>
<ul>
<li>xs:string</li>
<li>xs:decimal</li>
<li>xs:integer</li>
<li>xs:boolean</li>
<li>xs:date</li>
<li>xs:time</li>
</ul>
<ol start="3">
<li><p><strong>示例:</strong></p>
<p>&lt;xs:element name=”lastname” type=”xs:string”/&gt;<br>&lt;xs:element name=”age” type=”xs:integer”/&gt;<br>&lt;xs:element name=”dateborn” type=”xs:date”/&gt;<br>对应实例<br><lastname>Refsnes</lastname><br><age>36</age><br><dateborn>1970-03-27</dateborn></p>
</li>
</ol>
<ol start="4">
<li><strong>定义默认值和固定值</strong></li>
</ol>
<p>当没有其他值被规定时，默认值就会自动分配给元素</p>
<pre><code>&lt;xs:element name=&quot;color&quot; type=&quot;xs:string&quot; default=&quot;red&quot;/&gt;</code></pre><p>如果name值未定义，省缺值为red。 固定值同样会自动分配给元素，并且无法定义另外的值</p>
<pre><code>&lt;xs:element name=&quot;color&quot; type=&quot;xs:string&quot; fixed=&quot;red&quot;/&gt;</code></pre><h4 id="元素属性定义"><a href="#元素属性定义" class="headerlink" title="元素属性定义"></a>元素属性定义</h4><p>简易元素无法拥有属性。假如某个元素拥有属性，它就会被当作某种复合类型。但是属性本身总是作为简易类型被声明的。</p>
<ol>
<li><p><strong>语法:</strong></p>
<p>&lt;xs:attribute name=”xxx” type=”yyy”/&gt;</p>
</li>
</ol>
<ol start="2">
<li><p>示例</p>
<p>&lt;xs:attribute name=”lang” type=”xs:string”/&gt;<br>实例<br><lastname lang="EN">Smith</lastname></p>
</li>
</ol>
<ol start="3">
<li>默认值固定值和必须属性</li>
</ol>
<p>同样可以使用default设置默认值，fixed设置固定值。 如需规定必须属性,使用use</p>
<pre><code>&lt;xs:attribute name=&quot;lang&quot; type=&quot;xs:string&quot; use=&quot;required&quot;/&gt;</code></pre><h4 id="对值的限定-Facets"><a href="#对值的限定-Facets" class="headerlink" title="对值的限定/Facets"></a>对值的限定/Facets</h4><p>为xml元素或者属性定义可接受的值。 也就是说可以定义男和女，数字大于多少小于多少，相当于一个校验。 在xs:element元素中使用<strong>xs:simpleType元素</strong>，然后在<strong>xs:restriction元素</strong>下定义每一类的限定。 而元素的type值类型将不在element中定义，而是在限定元素标签中定义，通过base来定义类型。如果你在element中定义了，那就会编译不通过。 <strong>1. 特定值的限定</strong> 限定元素的值，如男|女,使用元素<strong>xs:enumeration</strong>,前面有个enum，也就类似java的枚举类型。 该示例中，car的值仅接受Audi，Golf和BMW。否则编译不通过</p>
<pre><code>&lt;xs:element name=&quot;car&quot;&gt;
  &lt;xs:simpleType&gt;
    &lt;xs:restriction base=&quot;xs:string&quot;&gt;
      &lt;xs:enumeration value=&quot;Audi&quot;/&gt;
      &lt;xs:enumeration value=&quot;Golf&quot;/&gt;
      &lt;xs:enumeration value=&quot;BMW&quot;/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
&lt;/xs:element&gt;</code></pre><p><strong>2. 对区间范围限定</strong> 对数字进行限定，如限定身高最大多少最小多少，使用<strong>xs:minInclusive和xs:maxInclusive</strong>元素。 该示例中age元素只接受值为0到120</p>
<pre><code>&lt;xs:element name=&quot;age&quot;&gt;
  &lt;xs:simpleType&gt;
    &lt;xs:restriction base=&quot;xs:integer&quot;&gt;
      &lt;xs:minInclusive value=&quot;0&quot;/&gt;
      &lt;xs:maxInclusive value=&quot;120&quot;/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
&lt;/xs:element&gt;</code></pre><p><strong>3. 正则限定</strong> 使用正则表达式来限定取值。 使用<strong>xs:pattern</strong>元素来定义。该正则表达式与其他一样，包括[],{0,1},|,+等等，但不需要前符号和后符号。 该示例中letter值允许值为a-z</p>
<pre><code>&lt;xs:element name=&quot;letter&quot;&gt;
  &lt;xs:simpleType&gt;
    &lt;xs:restriction base=&quot;xs:string&quot;&gt;
      &lt;xs:pattern value=&quot;[a-z]&quot;/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
&lt;/xs:element&gt;</code></pre><p><strong>4. 对空白字符的限定</strong> 使用<strong>xs:whiteSpace</strong>元素指定 该值有3个，preserve，replace，collapse。标志着XML处理器对空白字符的处理</p>
<ul>
<li><p>preserve:不会移除任何空白字符</p>
</li>
<li><p>replace:移除所有空白字符（换行、回车、空格以及制表符）</p>
</li>
<li><p>collapse:移除所有空白字符（换行、回车、空格以及制表符会被替换为空格，开头和结尾的空格会被移除，而多个连续的空格会被缩减为一个单一的空格）</p>
<p>&lt;xs:element name=”address”&gt;<br>  <a href="xs:simpleType">xs:simpleType</a></p>
<pre><code>&lt;xs:restriction base=&quot;xs:string&quot;&gt;
  &lt;xs:whiteSpace value=&quot;preserve&quot;/&gt;
&lt;/xs:restriction&gt;</code></pre><p>  </xs:simpleType><br></xs:element></p>
</li>
</ul>
<p><strong>5. 对长度的限定</strong> 使用<strong>xs:length,xs:minLength,xs:maxLength</strong>这三个元素定义</p>
<pre><code>&lt;xs:element name=&quot;password&quot;&gt;
  &lt;xs:simpleType&gt;
    &lt;xs:restriction base=&quot;xs:string&quot;&gt;
      &lt;xs:length value=&quot;8&quot;/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
&lt;/xs:element&gt;

&lt;xs:element name=&quot;password&quot;&gt;
  &lt;xs:simpleType&gt;
    &lt;xs:restriction base=&quot;xs:string&quot;&gt;
      &lt;xs:minLength value=&quot;5&quot;/&gt;
      &lt;xs:maxLength value=&quot;8&quot;/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
&lt;/xs:element&gt;</code></pre><p><strong>6. 其他限定</strong></p>
<ul>
<li>xs:maxExclusive:定义数值的上限，所有允许的值都必须小于此值</li>
<li>xs:maxInclusive:定义数值的上限，所有允许的值都必须小于或等于此值</li>
<li>xs:minExclusive:定义数值的下限，所有允许的值都必须大于此值</li>
<li>xs:minInclusive:定义数值的下限，所有允许的值都必须大约或等于此值</li>
<li>xs:totalDigits:定义所允许的阿拉伯数字的精确位数，必须大于0</li>
</ul>
<p><strong>7. 对于多个元素都想使用这个限定获取后面的元素的定义</strong> 可以定义一个type，并让element来引用它</p>
<pre><code>&lt;xs:element name=&quot;password&quot; type=&quot;tsinfo&quot;&gt;
&lt;xs:element name=&quot;username&quot; type=&quot;tsinfo&quot;&gt;

&lt;xs:simpleType name=&quot;tsinfo&quot;&gt;
    &lt;xs:restriction base=&quot;xs:string&quot;&gt;
      &lt;xs:minLength value=&quot;6&quot;/&gt;
      &lt;xs:maxLength value=&quot;10&quot;/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;</code></pre><p>定义了之后，可以通过type来引用name属性的值，两个element都使用同一个限定，当然后面的符合元素等等都可以这样做，只需要把element后的那个标签元素拿出来即可。</p>
<h4 id="复合元素"><a href="#复合元素" class="headerlink" title="复合元素"></a>复合元素</h4><p>只有单个元素，它是简易元素，而如果有子元素，那么它就是复合元素。</p>
<ul>
<li>xs:complexType用于定义复杂类型</li>
<li>xs:simpleType用于定义简易类型</li>
<li>xs:extension拓展已有的simpleType和complexType元素</li>
<li>element中使用type属性引用一个complexType</li>
<li>attribute中使用type属性来引用一个simpleType</li>
<li>simpleType用于定义限定，注解等，属性base表示引用一个类型</li>
<li>complexType用于各种，name表示当前名称，用于被type引用</li>
</ul>
<p><strong>1. 示例:仅包含元素</strong></p>
<pre><code>&lt;xs:element name=&quot;employee&quot;&gt;
  &lt;xs:complexType&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&quot;firstname&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;lastname&quot; type=&quot;xs:string&quot;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</code></pre><p>对employee元素进行声明，包含两个子元素，并且顺序是按照声明的先后顺序。 <strong>2. 在已有的复合元素之上以某个复合元素为基础</strong></p>
<pre><code>&lt;xs:element name=&quot;employee&quot; type=&quot;fullpersoninfo&quot;/&gt;

&lt;xs:complexType name=&quot;personinfo&quot;&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element name=&quot;firstname&quot; type=&quot;xs:string&quot;/&gt;
    &lt;xs:element name=&quot;lastname&quot; type=&quot;xs:string&quot;/&gt;
  &lt;/xs:sequence&gt;
&lt;/xs:complexType&gt;

&lt;xs:complexType name=&quot;fullpersoninfo&quot;&gt;
  &lt;xs:complexContent&gt;
    &lt;xs:extension base=&quot;personinfo&quot;&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name=&quot;address&quot; type=&quot;xs:string&quot;/&gt;
        &lt;xs:element name=&quot;city&quot; type=&quot;xs:string&quot;/&gt;
        &lt;xs:element name=&quot;country&quot; type=&quot;xs:string&quot;/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:extension&gt;
  &lt;/xs:complexContent&gt;
&lt;/xs:complexType&gt;</code></pre><p>该示例首先是employee引用了类型为fullpersoninfo的xs:complexType ，而fullpersoninfo内部又延伸引用了personinfo。</p>
<ol start="3">
<li>带有混合内容的复合类型</li>
</ol>
<p>为了使字符数据可以出现在 “letter” 的子元素之间，<strong>mixed 属性必须被设置为 “true”</strong></p>
<pre><code>&lt;xs:element name=&quot;letter&quot;&gt;
  &lt;xs:complexType mixed=&quot;true&quot;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&quot;name&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;orderid&quot; type=&quot;xs:positiveInteger&quot;/&gt;
      &lt;xs:element name=&quot;shipdate&quot; type=&quot;xs:date&quot;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;</code></pre><h4 id="指示器"><a href="#指示器" class="headerlink" title="指示器"></a>指示器</h4><p>通过指示器，我们可以控制在文档中使用元素的方式。 <strong>Order指示器:定义元素的顺序。</strong></p>
<ul>
<li>All:规定子元素可以按照任意顺序出现,且每个子元素必须只出现一次</li>
<li>Chioce:规定可出现任意一个元素</li>
<li>Sequence:子元素必须按照特定的顺序出现</li>
</ul>
<p><strong>Occurrence 指示器：用于定义某个元素出现的频率。(作为element属性)</strong></p>
<ul>
<li><p>maxOccurs 以及 minOccurs 的默认值均为 1。</p>
</li>
<li><p>maxOccurs:可规定某个元素可出现的最大次数</p>
</li>
<li><p>minOccurs：某个元素能够出现的最小次数：</p>
<p>&lt;xs:element name=”person”&gt;<br>  <a href="xs:complexType">xs:complexType</a></p>
<pre><code>&lt;xs:sequence&gt;
  &lt;xs:element name=&quot;full_name&quot; type=&quot;xs:string&quot;/&gt;
  &lt;xs:element name=&quot;child_name&quot; type=&quot;xs:string&quot;
  maxOccurs=&quot;10&quot; minOccurs=&quot;0&quot;/&gt;
&lt;/xs:sequence&gt;</code></pre><p>  </xs:complexType><br></xs:element></p>
</li>
</ul>
<p><strong>Group 指示器：定义相关的组，可以引用</strong></p>
<ul>
<li><p>Group name:定义一组元素，在内部声明 all、choice 或者 sequence 元素，和一个name属性，则可通过group元素的ref属性调用这个group</p>
<p>&lt;xs:group name=”persongroup”&gt;<br>  <a href="xs:sequence">xs:sequence</a></p>
<pre><code>&lt;xs:element name=&quot;firstname&quot; type=&quot;xs:string&quot;/&gt;
&lt;xs:element name=&quot;lastname&quot; type=&quot;xs:string&quot;/&gt;
&lt;xs:element name=&quot;birthday&quot; type=&quot;xs:date&quot;/&gt;</code></pre><p>  </xs:sequence><br></xs:group></p>
<p>&lt;xs:element name=”person” type=”personinfo”/&gt;</p>
<p>&lt;xs:complexType name=”personinfo”&gt;<br>  <a href="xs:sequence">xs:sequence</a></p>
<pre><code>&lt;xs:group ref=&quot;persongroup&quot;/&gt;
&lt;xs:element name=&quot;country&quot; type=&quot;xs:string&quot;/&gt;</code></pre><p>  </xs:sequence><br></xs:complexType></p>
</li>
</ul>
<ul>
<li><p>attributeGroup name:定义一组属性</p>
<p>&lt;xs:attributeGroup name=”personattrgroup”&gt;<br>  &lt;xs:attribute name=”firstname” type=”xs:string”/&gt;<br>  &lt;xs:attribute name=”lastname” type=”xs:string”/&gt;<br>  &lt;xs:attribute name=”birthday” type=”xs:date”/&gt;<br></xs:attributeGroup></p>
<p>&lt;xs:element name=”person”&gt;<br>  <a href="xs:complexType">xs:complexType</a></p>
<pre><code>&lt;xs:attributeGroup ref=&quot;personattrgroup&quot;/&gt;</code></pre><p>  </xs:complexType><br></xs:element></p>
</li>
</ul>
<h4 id="元素替换"><a href="#元素替换" class="headerlink" title="元素替换"></a>元素替换</h4><p>举例说明：我们的用户来自英国和挪威。我们希望有能力让用户选择在 XML 文档中使用挪威语的元素名称还是英语的元素名称。 可以在element中定义<strong>substitutionGroup属性</strong>此属性声明当前元素为次元素，而值为需要被替换主元素的name属性的值。</p>
<pre><code>&lt;xs:element name=&quot;name&quot; type=&quot;xs:string&quot;/&gt;
&lt;xs:element name=&quot;navn&quot; substitutionGroup=&quot;name&quot;/&gt;

&lt;xs:complexType name=&quot;custinfo&quot;&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element ref=&quot;name&quot;/&gt;
  &lt;/xs:sequence&gt;
&lt;/xs:complexType&gt;

&lt;xs:element name=&quot;customer&quot; type=&quot;custinfo&quot;/&gt;
&lt;xs:element name=&quot;kunde&quot; substitutionGroup=&quot;customer&quot;/&gt;</code></pre><p>在示例中，complexType元素被引用的是customer元素，所以customer是根元素，子元素序列中element引用了name，所以子元素为name元素。 而name属性为navn的element中，定义了substitutionGroup为name，所以此次元素可以替代name子元素。 name属性为kunde的element中，定义了substitutionGroup为customer，所以此次元素可以替代customer元素。 所以可以有的值为</p>
<pre><code>&lt;customer&gt;
  &lt;name&gt;John Smith&lt;/name&gt;
&lt;/customer&gt;
或
&lt;kunde&gt;
  &lt;navn&gt;John Smith&lt;/navn&gt;
&lt;/kunde&gt;</code></pre><p>其实这种方式也可以使用Chioce指示器，可以任选一个。</p>
<h4 id="混合内容"><a href="#混合内容" class="headerlink" title="混合内容"></a>混合内容</h4><p>复合类型中，子元素前后带有其他文本 可在xs:complexType元素设置属性mixed=”true”</p>
<pre><code>&lt;xs:element name=&quot;letter&quot;&gt;
  &lt;xs:complexType mixed=&quot;true&quot;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&quot;name&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;orderid&quot; type=&quot;xs:positiveInteger&quot;/&gt;
      &lt;xs:element name=&quot;shipdate&quot; type=&quot;xs:date&quot;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:element&gt;
xml中
&lt;letter&gt;
  Dear Mr.&lt;name&gt;John Smith&lt;/name&gt;.
  Your order &lt;orderid&gt;1032&lt;/orderid&gt;
  will be shipped on &lt;shipdate&gt;2001-07-13&lt;/shipdate&gt;.
&lt;/letter&gt;</code></pre><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ol>
<li>字符型</li>
</ol>
<ul>
<li>string:包含字符串</li>
<li>token:不包含换行符、回车或制表符、开头或结尾空格或者多个连续空格的字符串</li>
<li>normalizedString:不包含换行符、回车或制表符的字符串</li>
</ul>
<ol start="2">
<li>日期类型</li>
</ol>
<ul>
<li>date:日期,可在日期后加上Z，使用世界调整时间UTC</li>
<li>time:时间</li>
<li>dateTime:日期时间</li>
</ul>
<ol start="3">
<li>数值型</li>
</ol>
<ul>
<li>decimal：十进制数</li>
<li>int:有正负的32位整数</li>
<li>integer:整数值</li>
<li>long:有正负的64位整数</li>
<li>nonNegativeInteger：仅包含非负值</li>
<li>nonPositiveInteger:仅包含非正值</li>
<li>negativeInteger：仅包含负值</li>
</ul>
<ol start="4">
<li>其他数据类型</li>
</ol>
<ul>
<li>boolean:可用值位true,false,1,0</li>
<li>hexBinary:二进制数据</li>
<li>anyURI:规定的UIR，如果有空格使用%20替换</li>
</ul>
<h4 id="其他XSD元素"><a href="#其他XSD元素" class="headerlink" title="其他XSD元素"></a>其他XSD元素</h4><ul>
<li><p>list元素:定义单个 simpleType 定义的集合。</p>
<p>&lt;xs:element name=”person” type=”valuelist”/&gt;</p>
<p>&lt;xs:simpleType name=”valuelist”&gt;</p>
<pre><code>&lt;xs:list itemType=&quot;xs:integer&quot;/&gt;</code></pre><p></xs:simpleType><br>xml</p>
<person>
  -1  <!-- 或 -234 234一起(中间需要空格分割) -->
</person>


</li>
</ul>
<p>该元素定义simpleType，其中list元素中itemType类型位integer，那么person中的值将只接受integer类型的数据,可以为1，-123，等整数。</p>
<ul>
<li><p>include:向一个文档添加带有相同目标命名空间的多个 schema。</p>
</li>
<li><p>import :向一个文档添加带有不同目标命名空间的多个 schema。</p>
<p>&lt;xs:include schemaLocation=”<a href="http://www.w3cschool.cc/schema/customer.xsd&quot;/&gt;">http://www.w3cschool.cc/schema/customer.xsd&quot;/&gt;</a><br>&lt;xs:include schemaLocation=”<a href="http://www.w3cschool.cc/schema/company.xsd&quot;/&gt;">http://www.w3cschool.cc/schema/company.xsd&quot;/&gt;</a></p>
<p>&lt;xs:import namespace=”<a href="http://www.w3cschool.cc/schema&quot;/&gt;">http://www.w3cschool.cc/schema&quot;/&gt;</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>XML</category>
      </categories>
      <tags>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle非正常关闭数据库，ORA-01034:ORACLE not available,Oracle-27101:shared memory realm does not exists</title>
    <url>/2018/09/12/Oracle/Oracle%E9%9D%9E%E6%AD%A3%E5%B8%B8%E5%85%B3%E9%97%AD%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="当数据库在执行命令操作时，非正常关闭oracle服务，导致无法启动oracle"><a href="#当数据库在执行命令操作时，非正常关闭oracle服务，导致无法启动oracle" class="headerlink" title="当数据库在执行命令操作时，非正常关闭oracle服务，导致无法启动oracle"></a>当数据库在执行命令操作时，非正常关闭oracle服务，导致无法启动oracle</h2><p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180912180430.png" alt=""> <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180912180543.png" alt=""> 网上的处理方法: 登陆时，谈给你错误的 ORA-01034:ORACLE not available,Oracle-27101:shared memory realm does not exists 后面由进程ID，回话ID，序列号。 去D:\app\cgq_r\diag\rdbms\orcl\orcl\trace位置找到你进程id对应的文件,orcl_ora_1460.trc 这个时错误日志，发现 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/09/20180912180948.png" alt=""> ORA-19815: 警告: db_recovery_file_dest_size 字节 (共 4102029312 字节) 已使用 100.00%, 尚有 0 字节可用。 ORA-19809: 超出了恢复文件数的限制 ORA-19804: 无法回收 42810368 字节磁盘空间 (从 4102029312 限制中) ORA-16038: 日志 1 sequence# 316 无法归档 <strong>db_recovery_file_dest_size也叫归档日志空间不足导致的。</strong> 解决途径:</p>
<ol>
<li><p>删除归档日志</p>
<p>在服务中启动oracle服务，或startup mount</p>
<p>rman target sys/orcl<br>delete archivelog until time ‘sysdate’; –删除所有日志<br>delete expired archivelog all;–删除过期日志</p>
</li>
</ol>
<p>重新关闭数据库服务，再开启</p>
<ol start="2">
<li><p>设置归档日志大小</p>
<p>select * from v$recovery_file_dest; —查询归档日志<br>db_recovery_file_dest_size=10737418240; –设置归档日志空间为10G</p>
</li>
</ol>
<p>参考： <a href="https://blog.csdn.net/zwk626542417/article/details/39667999">https://blog.csdn.net/zwk626542417/article/details/39667999</a> <a href="http://www.cnblogs.com/xwdreamer/p/3804509.html">http://www.cnblogs.com/xwdreamer/p/3804509.html</a></p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>XML定义Schema，定义xsd文件并使用xml文件引用它</title>
    <url>/2018/09/11/XML/XML%E5%AE%9A%E4%B9%89Schema%EF%BC%8C%E5%AE%9A%E4%B9%89xsd%E6%96%87%E4%BB%B6%E5%B9%B6%E4%BD%BF%E7%94%A8xml%E6%96%87%E4%BB%B6%E5%BC%95%E7%94%A8%E5%AE%83/</url>
    <content><![CDATA[<h2 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h2><p>xsd和xml文件都在本地同目录下 则引用为如下示例</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
    &lt;xs:element name=&quot;person&quot;&gt;
        &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
                &lt;xs:element name=&quot;name&quot; type=&quot;xs:string&quot;/&gt;
                &lt;xs:element name=&quot;age&quot; type=&quot;xs:int&quot;/&gt;
                &lt;xs:element name=&quot;sex&quot;&gt;
                    &lt;xs:simpleType&gt;
                        &lt;xs:restriction&gt;
                            &lt;xs:enumeration value=&quot;男&quot;/&gt;
                            &lt;xs:enumeration value=&quot;女&quot;/&gt;
                        &lt;/xs:restriction&gt;
                    &lt;/xs:simpleType&gt;
                &lt;/xs:element&gt;
                &lt;xs:element name=&quot;height&quot; type=&quot;xs:int&quot;/&gt;
            &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
&lt;/xs:schema&gt;


&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;person xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
      xsi:noNamespaceSchemaLocation=&quot;test.xsd&quot;&gt;
    &lt;name&gt;s&lt;/name&gt;
    &lt;age&gt;1&lt;/age&gt;
    &lt;sex&gt;&lt;/sex&gt;
    &lt;height&gt;2&lt;/height&gt;
&lt;/person&gt;</code></pre><p>本地情况下xsd文件仅定义xmlns:xs=”<a href="http://www.w3.org/2001/XMLSchema&quot;即可">http://www.w3.org/2001/XMLSchema&quot;即可</a> xml文件 根元素，引用xmlns:xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;">http://www.w3.org/2001/XMLSchema-instance&quot;</a> xsi:noNamespaceSchemaLocation=”test.xsd”,表示没有命名空间，引用地址为该xsd文件的相对路径。且仅可使用相对路径。</p>
<h2 id="如果你将xsd文件放在远程服务器上"><a href="#如果你将xsd文件放在远程服务器上" class="headerlink" title="如果你将xsd文件放在远程服务器上"></a>如果你将xsd文件放在远程服务器上</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
           targetNamespace=&quot;http://qxu1591340090.my3w.com&quot;
           xmlns=&quot;http://qxu1591340090.my3w.com&quot;
           elementFormDefault=&quot;qualified&quot;&gt;
    &lt;xs:element name=&quot;person&quot;&gt;
        &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
                &lt;xs:element name=&quot;name&quot; type=&quot;xs:string&quot;/&gt;
                &lt;xs:element name=&quot;age&quot; type=&quot;xs:int&quot;/&gt;
                &lt;xs:element name=&quot;sex&quot;&gt;
                    &lt;xs:simpleType&gt;
                        &lt;xs:restriction&gt;
                            &lt;xs:enumeration value=&quot;男&quot;/&gt;
                            &lt;xs:enumeration value=&quot;女&quot;/&gt;
                        &lt;/xs:restriction&gt;
                    &lt;/xs:simpleType&gt;
                &lt;/xs:element&gt;
                &lt;xs:element name=&quot;height&quot; type=&quot;xs:int&quot;/&gt;
            &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
&lt;/xs:schema&gt;


&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;person xmlns=&quot;http://qxu1591340090.my3w.com&quot;
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xsi:schemaLocation=&quot;http://qxu1591340090.my3w.com http://qxu1591340090.my3w.com/test2.xsd&quot;&gt;
    &lt;name&gt;s&lt;/name&gt;
    &lt;age&gt;1&lt;/age&gt;
    &lt;sex&gt;男&lt;/sex&gt;
    &lt;height&gt;2&lt;/height&gt;
&lt;/person&gt;</code></pre><p>需要为xsd文件添加targetNamespace=”<a href="http://qxu1591340090.my3w.com&quot;和xmlns=&quot;http://qxu1591340090.my3w.com&quot;，值都指向你的服务器地址。">http://qxu1591340090.my3w.com&quot;和xmlns=&quot;http://qxu1591340090.my3w.com&quot;，值都指向你的服务器地址。</a> xml文件中添加xmlns=”<a href="http://qxu1591340090.my3w.com&quot;以及">http://qxu1591340090.my3w.com&quot;以及</a> xsi:schemaLocation=”<a href="http://qxu1591340090.my3w.com">http://qxu1591340090.my3w.com</a> <a href="http://qxu1591340090.my3w.com/test2.xsd&quot;">http://qxu1591340090.my3w.com/test2.xsd&quot;</a> 第一个值为你的命名空间就是你的服务器地址，第二个值是你的xsd文件路径，如果你的xsd文件在本地，依然可以使用相对路径，这与命名空间似乎无关，如果文件在远程服务器，那么将地址改为你的远程服务器文件的路径即可。</p>
]]></content>
      <categories>
        <category>XML</category>
      </categories>
      <tags>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库ORA-19602 cannot backup or copy active file in NOARCHIVELOG mode</title>
    <url>/2018/09/07/Oracle/cannot%20backup%20or%20copy%20active%20file%20in%20NOARCHIVELOG%20mode/</url>
    <content><![CDATA[<p>此错误的起源再，使用了RMAN的backup database命令</p>
<pre><code>RMAN&gt; backup database;

Starting backup at 07-SEP-18
using channel ORA_DISK_1
channel ORA_DISK_1: starting full datafile backup set
channel ORA_DISK_1: specifying datafile(s) in backup set
RMAN-03009: failure of backup command on ORA_DISK_1 channel at 09/07/2018 09:00:21
ORA-19602: cannot backup or copy active file in NOARCHIVELOG mode
continuing other job steps, job failed will not be re-run
channel ORA_DISK_1: starting full datafile backup set
channel ORA_DISK_1: specifying datafile(s) in backup set
including current control file in backup set
including current SPFILE in backup set
channel ORA_DISK_1: starting piece 1 at 07-SEP-18
channel ORA_DISK_1: finished piece 1 at 07-SEP-18
piece handle=/data/oracle/flash_recovery_area/ORCL/backupset/2018_09_07/o1_mf_ncsnf_TAG20180907T090021_fs3mf6o4_.bkp tag=TAG20180907T090021 comment=NONE
channel ORA_DISK_1: backup set complete, elapsed time: 00:00:01
RMAN-00571: ===========================================================
RMAN-00569: =============== ERROR MESSAGE STACK FOLLOWS ===============
RMAN-00571: ===========================================================

RMAN-03009: failure of backup command on ORA_DISK_1 channel at 09/07/2018 09:00:21
ORA-19602: cannot backup or copy active file in NOARCHIVELOG mode</code></pre><p>​    </p>
<p>原因是该数据库运行再非归档模式。 我们知道Oracle中 重做日志文件被分为若干组，当一组重做日志被写满，ORACLE就开始写下一组，这叫做日志切换。切换是以循环的方式进行的，即当最后一组写满后又从第一 组开始写。所以如果只有重做日志，即oracle运行在非归档模式下，当遇到数据文件丢失或损坏时，oracle很难保证能够完全恢复数据库，因为可能所 需的重做记录因为因重做日志循环被覆盖掉了。但在归档方式下，归档日志进程会把切换后的重做日志文件复制到归档日志文件，我们可以把归档日志文件看成是重 做日志文件的备份，但归档日志文件是脱机的，即除了在进行复制时，ORACLE数据库在正常运行时是不会关注归档日志文件的。 所以我们应该把数据库改为归档模式。 需要将数据库运行在归档模式</p>
<pre><code>shutdown immediate;-- 关闭数据库
startup mount;-- 启动数据库到mount状态
alter database archivelog;-- 修改数据库为归档模式
alter database open;-- 打开数据库</code></pre><p>之后便可以备份了</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>关于使用BootStrap Table出现的一些问题</title>
    <url>/2018/08/28/Javascript/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8BootStrap%20Table%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="页面无法分页，传入多少就显示多少"><a href="#页面无法分页，传入多少就显示多少" class="headerlink" title="页面无法分页，传入多少就显示多少"></a><strong>页面无法分页，传入多少就显示多少</strong></h3><p>通常你会按照网上或官网的实例，map转json，返回rows和total，可是，前台始终无法得到这两个数据来显示。那么请检查你的</p>
<pre><code>sidePagination: &apos;server&apos;</code></pre><p>是否配置正确，且注意名称是否正确 如果设置了此方式，则每次点击，排序啊，等等将是通过server来实现，将params参数传递到后台服务器进行排序，而不是客户端(不请求)排序</p>
<h3 id="关于queryParams参数始终无法向后台传递参数"><a href="#关于queryParams参数始终无法向后台传递参数" class="headerlink" title="关于queryParams参数始终无法向后台传递参数"></a>关于queryParams参数始终无法向后台传递参数</h3><p>需要配置如下参数:</p>
<pre><code>contentType: &quot;application/x-www-form-urlencoded&quot;,//请求数据内容格式 默认是 application/json</code></pre><p>但是有些项目不写，依然能传递参数，这我就不知道为什么了，可能后台配置了什么吧</p>
<h3 id="queryParamType值为空字符串和limit的问题"><a href="#queryParamType值为空字符串和limit的问题" class="headerlink" title="queryParamType值为空字符串和limit的问题"></a>queryParamType值为空字符串和limit的问题</h3><ol>
<li>当设置为limit时,返回参数为limit, offset, search, sort, order</li>
</ol>
<p>其中: sort值在column属性中的列中设置，sortable:true,那么请求时sort值就是该字段的名称，如果超过1个设置了sortable，那么sort为undefined search表示当你在属性设置中设置了search:true时，显示搜索框，输入完毕后自动请求，而值就给了search参数。 order表示在设置了sortOrder:’asc’或值为desc时，将值传递导order参数中 limit表示请求数量，属性中设置的pageSize: 5，那么limit就是5，如果设置了pageList，那么选择多少页数，就将数传递到limit并立刻发起请求 offset表示偏移量的意思，就是当前页之前的数据量，包含当前页</p>
<ol start="2">
<li>当值设置为空字符串””时,返回参数为pageSize, pageNumber, searchText, sortName, sortOrder</li>
</ol>
<p>其中pageSize和pageNumber，以及searchText分别都是对应属性值，searchText与search一样，都是搜索框里的值。 sortName表示，属性设置sortName:’对象名’,设置什么，返回什么,设置值为name，则返回name sortOrder与值为limit时的order一样，属性设置sortOrder值为asc或desc时返回的值</p>
<h3 id="如果每个属性你设置了，并且功能不出来"><a href="#如果每个属性你设置了，并且功能不出来" class="headerlink" title="如果每个属性你设置了，并且功能不出来"></a>如果每个属性你设置了，并且功能不出来</h3><p>那么首先要看的就是属性名是否错误，在<a href="http://bootstrap-table.wenzhixin.net.cn/zh-cn/documentation/?tdsourcetag=s_pctim_aiomsg">Bootstrap Table文档中</a>，搜索一下(Ctrl+F)，没有这个这属性。 其次就是js文件的引入问题，可能是少了，可能是js的script标签少了结束标签，这中情况很小 还有一种就是某个关键属性错误，比如sidePagination:’server’设置错误，导致无法分页。以及网上搜索可能会遇到的问题。</p>
<h3 id="为表格添加增删改操作"><a href="#为表格添加增删改操作" class="headerlink" title="为表格添加增删改操作"></a>为表格添加增删改操作</h3><p>在table标签上定义toolbar</p>
<pre><code>&lt;div id=&quot;toolbar&quot;&gt;
    &lt;a id=&quot;add&quot; class=&quot;btn btn-primary&quot; onclick=&quot;add()&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-plus&quot;&gt;&lt;/i&gt; 新建&lt;/a&gt;
    &lt;button id=&quot;edit&quot; class=&quot;btn btn-success&quot; disabled&gt;
        &lt;i class=&quot;glyphicon glyphicon-edit&quot;&gt;&lt;/i&gt; 修改
    &lt;/button&gt;
    &lt;button id=&quot;remove&quot; class=&quot;btn btn-danger&quot; disabled&gt;
        &lt;i class=&quot;glyphicon glyphicon-remove&quot;&gt;&lt;/i&gt; 删除
    &lt;/button&gt;
&lt;/div&gt;</code></pre><p>并在bootStrapTable中设置toolbar属性值为toolbar的id。在column属性中，最前面添加一列(也就是{})，定义属性checkbox:true，表示为复选框。 对修改删除的操作是依据数据选中的数目判定，</p>
<ul>
<li><p>无选择则修改删除为禁用</p>
</li>
<li><p>当有且只有1个选中时修改按钮可用</p>
</li>
<li><p>当选中一个或一个以上时删除可用</p>
</li>
<li><p>当任何不选时，修改和删除又都被禁用。</p>
<p>//表示设置禁用/启用按钮<br>$(“#basic”).on(‘check.bs.table uncheck.bs.table ‘ +</p>
<pre><code>&apos;check-all.bs.table uncheck-all.bs.table&apos;, function () &#123;
$(&quot;#remove&quot;).prop(&apos;disabled&apos;, !$(&quot;#basic&quot;).bootstrapTable(&apos;getSelections&apos;).length);
$(&apos;#edit&apos;).prop(&apos;disabled&apos;, $(&apos;#basic&apos;).bootstrapTable(&apos;getSelections&apos;).length!=1);//false为可用</code></pre><p>});<br>//获得id选项行<br>function getIdSelections() {</p>
<pre><code>return $.map($(&quot;#basic&quot;).bootstrapTable(&apos;getSelections&apos;), function (row) &#123;
    return row.id//返回改行数据的id
&#125;);</code></pre><p>}</p>
</li>
</ul>
<p>每选中一个个复选框，都会执行在后台存储这条数据，而$(‘#basic’).bootstrapTable(‘getSelections’)可以获得所有选中的数据，那么就可以根据数量来判定是否禁用按钮，prop方法表示删除或返回一个属性，那么值为false表示删除该属性，true则使用该属性。 对新增自行定义方法 修改，删除，只需要自己定义click方法，然后在方法体里添加</p>
<pre><code>var ids = getIdSelections();</code></pre><p>获得所有数据对象，注意不是id数组，而是一个包含所有字段的object类型数组，你需要提取id。 另外还可以通过这个两个方法更新表格和按钮</p>
<pre><code>$(&quot;#basic&quot;).bootstrapTable(&apos;remove&apos;, &#123;//前台删除该数据
    field: &apos;id&apos;,
    values: ids
&#125;);
$(&quot;#remove&quot;).prop(&apos;disabled&apos;, true);//禁用按钮</code></pre><p>当然，前台删除可能不太保险，那么就再查一遍</p>
<pre><code>//刷新表格，将重新请求
$(&apos;#table&apos;).bootstrapTable(&apos;refresh&apos;);</code></pre><h3 id="对于字段值转换的情况可以使用formatter"><a href="#对于字段值转换的情况可以使用formatter" class="headerlink" title="对于字段值转换的情况可以使用formatter"></a>对于字段值转换的情况可以使用formatter</h3><p>对于日期如果有好的方法，可以直接前台json到后台Date类型，但如果前台没有好的方法解析，那么后台直接传到前台已经解析好的字符串，这种方式可以直接在查询数据库时转换为string类型，或通过其他定义的转换方法转换。 如果有图片的显示，如头像，可以使用此属性函数，其可用参数有value，row，index。通过img即可转成图片。</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>BootStrap Table</tag>
      </tags>
  </entry>
  <entry>
    <title>关于在Windows Server 2008中安装arcgis server的小问题</title>
    <url>/2018/08/27/Arcgis/%E5%85%B3%E4%BA%8E%E5%9C%A8Windows%20Server%202008%E4%B8%AD%E5%AE%89%E8%A3%85arcgis%20server%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="分配的是一个全新的虚拟机windows-server-2008"><a href="#分配的是一个全新的虚拟机windows-server-2008" class="headerlink" title="分配的是一个全新的虚拟机windows server 2008"></a>分配的是一个全新的虚拟机windows server 2008</h3><ol>
<li>外部无法ping通问题</li>
</ol>
<p>计算机右击【管理】，左侧栏找到【高级安全Windows防火墙】，【入站规则】，【文件和打印机共享(回显请求ICMPv4-In)】，右击【属性】，勾选【启用】</p>
<ol start="2">
<li>进行tomcat访问8080时，出现的问题</li>
</ol>
<p>首先，1.可能是端口未开放，2.可能是路径有问题 先说路径这个问题：路径有问题不是说ip有问题，而是外部浏览器无法监测到这个ip，解决：找到系统的hosts文件，添加对应信息,文件路径C:\Windows\System32\drivers\etc\hosts,添加如下，局域网ip改为你自己的</p>
<pre><code>127.0.0.1       localhost
192.168.0.65    localhost</code></pre><p>其次，如果第二中还没解决的话参考这个。可能是外部无法访问服务器端口，你需要在防火墙开启端口，打开【防火墙】，【入站规则】，右边【新建规则】，选择【端口】，【允许连接】，填写规则名称，如port8080。另外把出站规则也开开吧，尝试一下。为了安全起见你可以先尝试，需要哪个规则使用哪个规则，不需要就删了规则。</p>
<ol start="3">
<li>安装arcgis server时，出现需要安装.NET Framework 3.5</li>
</ol>
<p>这个在官网下载后，放到服务器里安装的话，是无法安装的，需要直接在服务器里操作，不用去官网下包 【计算机】右击，【管理】，【功能】，右侧【添加功能】，选择.NET Framework 3.5.1勾选，下一步，安装。无需重启服务器</p>
<ol start="4">
<li>安装arcgis server时，设置arcgis账号密码时，密码校验复杂度，总导致密码不符合复杂度，不让下一步</li>
</ol>
<p>win徽标+R，打开运行窗口，输入secpol.msc，进入【本地安全策略】，选择【账户策略】，【密码策略】，右侧【密码必须符合复杂性要求】，右击禁用</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>Arcgis</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库expdp,impdp命令数据库导入导出</title>
    <url>/2018/08/18/Oracle/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93expdp,impdp%E5%91%BD%E4%BB%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<h3 id="导入导出示例"><a href="#导入导出示例" class="headerlink" title="导入导出示例"></a>导入导出示例</h3><ol>
<li><p>查看管理理员目录（同时查看操作系统是否存在，因为Oracle并不关心该目录是否存在，如果不存在，则出错）</p>
<p>select * from dba_directories;</p>
</li>
<li><p>给你需要导入的用户赋予指定目录的操作权限</p>
<p>grant read,write on directory DATA_PUMP_DIR to 用户名;</p>
</li>
</ol>
<p>DATA_PUMP_DIR目录名默认值为当前oracle安装目录/orcl/dpdump/,DIRECTORY参数表示dmp文件放置的位置。导入导出的dmp文件都放在此目录下。</p>
<ol>
<li><p>导出用户数据(包含表结构，数据等)</p>
<p>expdp 用户名/密码@数据库实例名称 schemas=用户名 dumpfile=要导出的dmp文件名.dmp DIRECTORY=目录名称;<br>expdp scott/tiger@orcl schemas=scott dumpfile=scott.dmp DIRECTORY=DATA_PUMP_DIR;</p>
</li>
<li><p>导入用户</p>
<p>impdp 用户名/密码@orcl  DUMPFILE=dmp名称.dmp SCHEMAS=要导入库的用户名，逗号隔开 DIRECTORY=目录名称</p>
</li>
</ol>
<p>导入前，dmp文件放置在directory目录路径下。impdp和expdp命令后面的用户名密码为连接数据库的用户名密码，可以不和schemas用户名一样，但一定具有读写目录的权限。 数据导出可以设置只导出的数据，可以是表结构，或表空间 CONTENT=METADATA_ONLY 参数表示，导出时只导出所有指定用户下的表结构及其他视图，包，存储过程等对象，但不包括数据内容。 expdp -help和impdp-help可以查看参数。</p>
<ol start="3">
<li>只导出表</li>
</ol>
<p>如果要导出表，就是用tables属性，tables=(T1:P1)，T1指表名，P1指表的分区；多个表使用逗号分割。如果使用tables属性就能不使用schemas属性 对于导入的话，只需要库中存在这些表，不需要指定tables属性</p>
<h3 id="创建表空间用户示例"><a href="#创建表空间用户示例" class="headerlink" title="创建表空间用户示例"></a>创建表空间用户示例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">--登录sqlplus</span></span><br><span class="line">sqlplus sys/sys@smbdc as sysdba</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建表空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> bdcsde  </span><br><span class="line"><span class="keyword">logging</span>  </span><br><span class="line"><span class="keyword">datafile</span> <span class="string">&#x27;D:\app\Administrator\oradata\sm\bdcsde.dbf&#x27;</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> xxch  </span><br><span class="line"><span class="keyword">logging</span>  </span><br><span class="line"><span class="keyword">datafile</span> <span class="string">&#x27;D:\app\Administrator\oradata\smbdc\xxch.dbf&#x27;</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> archives   </span><br><span class="line"><span class="keyword">logging</span>  </span><br><span class="line"><span class="keyword">datafile</span> <span class="string">&#x27;D:\app\Administrator\oradata\smbdc\archives.dbf&#x27;</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> sde  </span><br><span class="line"><span class="keyword">logging</span>  </span><br><span class="line"><span class="keyword">datafile</span> <span class="string">&#x27;D:\app\Administrator\oradata\smbdc\sde.dbf&#x27;</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> bdcbiz  </span><br><span class="line"><span class="keyword">logging</span>  </span><br><span class="line"><span class="keyword">datafile</span> <span class="string">&#x27;D:\app\Administrator\oradata\smbdc\bdcbiz.dbf&#x27;</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> bdcqj  </span><br><span class="line"><span class="keyword">logging</span>  </span><br><span class="line"><span class="keyword">datafile</span> <span class="string">&#x27;D:\app\Administrator\oradata\smbdc\bdcqj.dbf&#x27;</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> bdcgx  </span><br><span class="line"><span class="keyword">logging</span>  </span><br><span class="line"><span class="keyword">datafile</span> <span class="string">&#x27;D:\app\Administrator\oradata\smbdc\bdcgx.dbf&#x27;</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">--创建临时表空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">tablespace</span> bdcsde_temp  </span><br><span class="line">tempfile <span class="string">&#x27;D:\app\Administrator\oradata\smbdc\bdcsde_temp.dbf&#x27;</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">tablespace</span> xxch_temp  </span><br><span class="line">tempfile <span class="string">&#x27;D:\app\Administrator\oradata\smbdc\xxch_temp.dbf&#x27;</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">tablespace</span> sde_temp  </span><br><span class="line">tempfile <span class="string">&#x27;D:\app\Administrator\oradata\smbdc\sde_temp.dbf&#x27;</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">tablespace</span> bdcbiz_temp  </span><br><span class="line">tempfile <span class="string">&#x27;D:\app\Administrator\oradata\smbdc\bdcbiz_temp.dbf&#x27;</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">tablespace</span> bdcqj_temp  </span><br><span class="line">tempfile <span class="string">&#x27;D:\app\Administrator\oradata\smbdc\bdcqj_temp.dbf&#x27;</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">tablespace</span> newarchives_temp_temp  </span><br><span class="line">tempfile <span class="string">&#x27;D:\app\Administrator\oradata\smbdc\newarchives_temp.dbf&#x27;</span> </span><br><span class="line"><span class="keyword">size</span> <span class="number">50</span>m  </span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span>  </span><br><span class="line"><span class="keyword">next</span> <span class="number">50</span>m <span class="keyword">maxsize</span> <span class="number">20480</span>m  </span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--创建用户并指定表空间（在新建的tb及 tmp-tb上建库）：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> bdcsde PROFILE <span class="string">&quot;DEFAULT&quot;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&quot;123456&quot;</span> <span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> <span class="string">&quot;BDCSDE&quot;</span>  <span class="keyword">ACCOUNT</span> <span class="keyword">UNLOCK</span> ;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> xxch PROFILE <span class="string">&quot;DEFAULT&quot;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&quot;123456&quot;</span> <span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> <span class="string">&quot;XXCH&quot;</span> <span class="keyword">ACCOUNT</span> <span class="keyword">UNLOCK</span>  ;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> archives PROFILE <span class="string">&quot;DEFAULT&quot;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&quot;123456&quot;</span> <span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> <span class="string">&quot;NEWARCHIVES&quot;</span>   <span class="keyword">ACCOUNT</span> <span class="keyword">UNLOCK</span>  ;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> bdcbiz PROFILE <span class="string">&quot;DEFAULT&quot;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&quot;123456&quot;</span> <span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> <span class="string">&quot;BDCBIZ&quot;</span>   <span class="keyword">ACCOUNT</span> <span class="keyword">UNLOCK</span>  ;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> bdcqj PROFILE <span class="string">&quot;DEFAULT&quot;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&quot;123456&quot;</span> <span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> <span class="string">&quot;BDCQJ&quot;</span>   <span class="keyword">ACCOUNT</span> <span class="keyword">UNLOCK</span>  ;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> bdcgx PROFILE <span class="string">&quot;DEFAULT&quot;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&quot;123456&quot;</span> <span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> <span class="string">&quot;BDCGX&quot;</span>  <span class="keyword">ACCOUNT</span> <span class="keyword">UNLOCK</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--给新建的用户授权</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">ANY</span> <span class="keyword">VIEW</span> <span class="keyword">TO</span> bdcsde;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ANY</span> <span class="keyword">TABLE</span> <span class="keyword">TO</span> bdcsde;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">TO</span> bdcsde;</span><br><span class="line"><span class="keyword">GRANT</span> DBA <span class="keyword">TO</span> bdcsde;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">ANY</span> <span class="keyword">VIEW</span> <span class="keyword">TO</span> xxch;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ANY</span> <span class="keyword">TABLE</span> <span class="keyword">TO</span> xxch;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">TO</span> xxch;</span><br><span class="line"><span class="keyword">GRANT</span> DBA <span class="keyword">TO</span> xxch;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">ANY</span> <span class="keyword">VIEW</span> <span class="keyword">TO</span> archives;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ANY</span> <span class="keyword">TABLE</span> <span class="keyword">TO</span> archives;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">TO</span> archives;</span><br><span class="line"><span class="keyword">GRANT</span> DBA <span class="keyword">TO</span> archives;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">ANY</span> <span class="keyword">VIEW</span> <span class="keyword">TO</span> bdcbiz;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ANY</span> <span class="keyword">TABLE</span> <span class="keyword">TO</span> bdcbiz;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">TO</span> bdcbiz;</span><br><span class="line"><span class="keyword">GRANT</span> DBA <span class="keyword">TO</span> bdcbiz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">ANY</span> <span class="keyword">VIEW</span> <span class="keyword">TO</span> bdcqj;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ANY</span> <span class="keyword">TABLE</span> <span class="keyword">TO</span> bdcqj;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">TO</span> bdcqj;</span><br><span class="line"><span class="keyword">GRANT</span> DBA <span class="keyword">TO</span> bdcqj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">ANY</span> <span class="keyword">VIEW</span> <span class="keyword">TO</span> bdcgx;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ANY</span> <span class="keyword">TABLE</span> <span class="keyword">TO</span> bdcgx;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">TO</span> bdcgx;</span><br><span class="line"><span class="keyword">GRANT</span> DBA <span class="keyword">TO</span> bdcgx;</span><br><span class="line"></span><br><span class="line"><span class="comment">--CMD直接导入数据库dmp文件</span></span><br><span class="line">imp bdcsde/123456@localhost/orcl file=&quot;C:\db\1126按用户执行备份\1126按用户备份\exp_backup\bdcsde_bf.dmp&quot; full=y ignore=y; </span><br><span class="line">imp xxch/123456@localhost/orcl file=&quot;C:\db\1126按用户执行备份\1126按用户备份\exp_backup\xxch_bf.dmp&quot; full=y ignore=y;</span><br><span class="line"></span><br><span class="line"><span class="comment">--数据泵导入</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">directory</span> dpdata1 <span class="keyword">as</span> <span class="string">&#x27;D:\db\jz\dump_dir&#x27;</span>;（数据库放置目录如:D:\DBback\sanheDB\dump_dir）(ok)</span><br><span class="line"><span class="keyword">Grant</span> <span class="keyword">read</span>,write <span class="keyword">on</span> <span class="keyword">directory</span> dpdata1 <span class="keyword">to</span> <span class="keyword">system</span>;(ok)</span><br><span class="line">impdp system/123456@smbdc DIRECTORY=dpdata1 DUMPFILE=20190329_FULLDP.DMP FULL=y log=impdpsmbdc.log;(ap不是数据泵导出的，所以不能用,三和可以)</span><br><span class="line">impdp system/system@smbdc DIRECTORY=dpdata1 DUMPFILE=QLFULLDB.DMP FULL=y log=qldb.log ignore=y;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--删除用户及级联关系也删除掉</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> xxch <span class="keyword">cascade</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> bdcsde <span class="keyword">cascade</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> archives <span class="keyword">cascade</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> bdcbiz <span class="keyword">cascade</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除表空间及物理文件（需要先删除用户）</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">tablespace</span> XXCH <span class="keyword">including</span> <span class="keyword">contents</span> <span class="keyword">and</span> <span class="keyword">datafiles</span> <span class="keyword">cascade</span> <span class="keyword">constraint</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">tablespace</span> BDCSDE <span class="keyword">including</span> <span class="keyword">contents</span> <span class="keyword">and</span> <span class="keyword">datafiles</span> <span class="keyword">cascade</span> <span class="keyword">constraint</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">tablespace</span> ARCHIVES <span class="keyword">including</span> <span class="keyword">contents</span> <span class="keyword">and</span> <span class="keyword">datafiles</span> <span class="keyword">cascade</span> <span class="keyword">constraint</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">tablespace</span> BDCBIZ <span class="keyword">including</span> <span class="keyword">contents</span> <span class="keyword">and</span> <span class="keyword">datafiles</span> <span class="keyword">cascade</span> <span class="keyword">constraint</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改用户名密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> bdcsde <span class="keyword">identified</span> <span class="keyword">by</span> <span class="number">123456</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> xxch <span class="keyword">identified</span> <span class="keyword">by</span> <span class="number">123456</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> archives <span class="keyword">identified</span> <span class="keyword">by</span> <span class="number">123456</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> bdcbiz <span class="keyword">identified</span> <span class="keyword">by</span> <span class="number">123456</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> sde <span class="keyword">identified</span> <span class="keyword">by</span> <span class="number">123456</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--无法分发客户机session或process数量不够用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> v$process; <span class="comment">--取得数据库目前的进程数。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">value</span> <span class="keyword">from</span> v$parameter <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">&#x27;processes&#x27;</span>;     <span class="comment">--取得进程数的上限。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> v$<span class="keyword">session</span>; <span class="comment">--取得数据库目前的会话数。 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">value</span> <span class="keyword">from</span> v$parameter <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">&#x27;sessions&#x27;</span>; <span class="comment">--取得会话数的上限。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> processes=<span class="number">1000</span> <span class="keyword">scope</span>=<span class="keyword">spfile</span>;   <span class="comment">--将process值改为1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> sessions=<span class="number">1105</span> <span class="keyword">scope</span>=<span class="keyword">spfile</span>;    <span class="comment">--将sessions值改为1105</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> pfile <span class="keyword">from</span> <span class="keyword">spfile</span>;   <span class="comment">--从spfile（运行时配置）创建pfile（系统配置）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--重启oracle</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Oracle在未删除用户时手动直接删除DBF文件引起的错误</title>
    <url>/2018/08/18/Oracle/%E5%85%B3%E4%BA%8EOracle%E5%9C%A8%E6%9C%AA%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7%E6%97%B6%E6%89%8B%E5%8A%A8%E7%9B%B4%E6%8E%A5%E5%88%A0%E9%99%A4DBF%E6%96%87%E4%BB%B6%E5%BC%95%E8%B5%B7%E7%9A%84%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>Oracle已经启动，可以登录，但是操作时说Oracle为打开 监听错误或者未初始化服务句柄，ORA-24324: 未初始化服务句柄， ORA-01041: 内部错误, hostdef 扩展名不存在 sqlplus命令 shutdown normal 数据库已经关闭。 已经卸载数据库。 ORACLE 例程已经关闭。 SQL&gt; startup mount ORA-12514: TNS: 监听程序当前无法识别连接描述符中请求的服务 SQL&gt; startup mount ORA-24324: 未初始化服务句柄 ORA-01041: 内部错误, hostdef 扩展名不存在 alter database open； ORA-01157: 无法标识/锁定数据文件 18 - 请参阅 DBWR 跟踪文件 ORA-01110: 数据文件 18: ‘D:\ORACLE\ORADATA\FLOW\GGSC\SYSCOM.ORA’ 此时说明，dbf数据文件已经被删除，无法启动数据库 alter database datafile ‘D:\ORACLE\ORADATA\FLOW\GGSC\SYSCOM.ORA’ offline drop 通过此解决,datafile后的路径改为上面报错的路径，然后尝试alter database open;命令，如果还有其他缺少文件错误，依然这样操作。最后就能开启。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7使用yum安装MySQL5.7命令</title>
    <url>/2018/08/08/Linux/CentOS7%E4%BD%BF%E7%94%A8yum%E5%AE%89%E8%A3%85MySQL5.7%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ol>
<li><p>下载repo源</p>
<p>//下载repo源<br>wget <a href="http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm">http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm</a><br>//安装源<br>rpm -ivh mysql57-community-release-el7-8.noarch.rpm</p>
</li>
<li><p>安装mysql-server</p>
<p>//安装mysql-server<br>yum install mysql-server</p>
</li>
</ol>
<p>可能报错</p>
<pre><code>Error: Package: 2:postfix-2.10.1-6.el7.x86_64 (@anaconda)
           Requires: libmysqlclient.so.18()(64bit)
           Removing: 1:mariadb-libs-5.5.44-2.el7.centos.x86_64 (@anaconda)
               libmysqlclient.so.18()(64bit)
           Obsoleted By: mysql-community-libs-5.7.16-1.el6.x86_64 (mysql57-community)
              ~libmysqlclient.so.20()(64bit)
           Updated By: 1:mariadb-libs-5.5.50-1.el7_2.x86_64 (updates)
               libmysqlclient.so.18()(64bit)
           Available: 1:mariadb-libs-5.5.47-1.el7_2.x86_64 (updates)
               libmysqlclient.so.18()(64bit)
Error: Package: 2:postfix-2.10.1-6.el7.x86_64 (@anaconda)
           Requires: libmysqlclient.so.18(libmysqlclient_18)(64bit)
           Removing: 1:mariadb-libs-5.5.44-2.el7.centos.x86_64 (@anaconda)
               libmysqlclient.so.18(libmysqlclient_18)(64bit)
           Obsoleted By: mysql-community-libs-5.7.16-1.el6.x86_64 (mysql57-community)
               Not found
           Updated By: 1:mariadb-libs-5.5.50-1.el7_2.x86_64 (updates)
               libmysqlclient.so.18(libmysqlclient_18)(64bit)
           Available: 1:mariadb-libs-5.5.47-1.el7_2.x86_64 (updates)
               libmysqlclient.so.18(libmysqlclient_18)(64bit)
 You could try using --skip-broken to work around the problem
 You could try running: rpm -Va --nofiles --nodigest</code></pre><p>解决办法</p>
<pre><code>//删除包依赖
yum remove mysql-libs</code></pre><p>然后再次安装</p>
<pre><code>yum install mysql-server</code></pre><p>报错:</p>
<pre><code>错误显示：

软件包：mysql-community-server-5.7.20-1.el6.x86_64 (mysql57-community)

需要：libsasl2.so.2()(64bit)

您可以尝试添加 --skip-broken 选项来解决该问题

您可以尝试执行：rpm -Va --nofiles --nodigest</code></pre><p>解决办法: 修改vim /etc/yum.repos.d/mysql-community.repo 源文件 [mysql57-community] name=MySQL 5.7 Community Server</p>
<h2 id="baseurl-http-repo-mysql-com-yum-mysql-5-7-community-el-6-basearch"><a href="#baseurl-http-repo-mysql-com-yum-mysql-5-7-community-el-6-basearch" class="headerlink" title="baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/6/$basearch/"></a>baseurl=<a href="http://repo.mysql.com/yum/mysql-5.7-community/el/6/$basearch/">http://repo.mysql.com/yum/mysql-5.7-community/el/6/$basearch/</a></h2><p><strong>baseurl=<a href="http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/">http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</a></strong> enabled=1 <strong>gpgcheck=0</strong> gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql 最后在重新安装</p>
<pre><code>yum install mysql-server</code></pre><p>有y/n提示则写y</p>
<pre><code>yum install mysql-devel</code></pre><p>默认配置文件路径： 配置文件：/etc/my.cnf 日志文件：/var/log/var/log/mysqld.log 服务启动脚本：/usr/lib/systemd/system/mysqld.service socket文件：/var/run/mysqld/mysqld.pid 配置mysql文件:</p>
<pre><code>cd /etc/my.cnf 
# 加入配置参数
&gt; character-set-server=utf8 </code></pre><p>启动服务</p>
<pre><code>service mysqld restart</code></pre><p>重置密码</p>
<pre><code>//获得随机密码
[root@localhost ~]# grep &quot;password&quot; /var/log/mysqld.log

mysql -u root -p //进入

//修改密码,包含字母数字特殊字符，至少有一个大写字母
alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;你的密码&apos;;

//刷新权限
flush privileges</code></pre>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>项目开发中遇到的问题</title>
    <url>/2018/08/08/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li><p>idea连接oracle数据库 首先不要忘了开启服务和监听程序，另外jdbc配置信息，driver不要写错，oracle.jdbc.driver.OracleDriver不要写成oracle.jdbc.OracleDriver</p>
</li>
<li><p>pl/sql工具，idea database，sqlplus都能连接成功，账号密码也是对的，配置也没问题，但是就是没法连接上数据库</p>
</li>
</ol>
<p>Cannot create PoolableConnectionFactory (ORA-01017: invalid username/password; logon denied 这个问题的最终结果以前也遇到过，没往这边想 首先就是一一核对配置信息和用户名密码。可能没有问题 然后就你的数据库配置文件了，在spring 中配置database bean，其中什么问题，${username}可能无法的到配置文件的值，所以你还是手写吧，或者jdbc.username=xxx解决</p>
<ol start="3">
<li>关于Bean装配的问题，Dao接口始终无法装配，不管是@Autowired还是Resource，都无法解决。</li>
</ol>
<p>但是有说接口不能装配，但是事实上可以装配，具体什么情况不太知道。然后查了applicationContext.xml配置，包括SqlSessionFactoryBean的配置和MapperScannerConfigurer的配置。 于是，当你认真发现时，MapperScannerConfigurer的basePackage属性的配置有些异样，因为你的包结构的问题，如果你不清楚basePackage设置什么，那么很可能将他设置成了mapper.xml所在的包。应该是dao的包。 所以basePackage配置有误，value设置到dao包</p>
<ol start="4">
<li>当有出现，无法找到mapper的方法时，例如:not find xxx.xxx.xxx.UserMapper.getUser()方法。</li>
</ol>
<p>查看是否配置了SqlSessionFactoryBean的mapperLocations参数,如果配置完成了，若再发现，找不到某某类，那么你的Mapper.xml文件里要注意实体类的名称，是别名还是完全限定名，可能着这个地方出现了问题。</p>
<ol start="5">
<li>java.sql.SQLSyntaxErrorException: ORA-00933: SQL 命令未正确结束</li>
</ol>
<p>初次使用mybatis时，可能犯的错误就是，sql语句后面的分号问题，在学数据库时一定要加分号，而在myabtis mapper中语句后加了分号就导致出现此问题。所以去掉分号就好了。</p>
<ol start="6">
<li>springmvc 引入静态资源文件，比如进入jquery.js，有时出现200，有时出现304，但无论如何不能通过$(function(){});函数中获得任何内容</li>
</ol>
<p>大部分网上都没有出现这种情况，都只是静态文件位置放错了，然后说三种进入静态文件的方法。 一个在web.xml，一个是mvc:resources，一个是mvc:deault-servlet-handler，这三种方法都对，配置任意一个都是正确的。 这时，<strong>你要检查引入js文件的script标签，它必须有一个开始标签和闭合标签，不能是自闭标签。否则，一定是无法使用的。这是新手不注意的错误。</strong></p>
<ol start="7">
<li>关于jstl库c标签的问题，c:if中test不能使用表达式，或c:xx标签怎么怎么不可用</li>
</ol>
<p>这个情况，你就要检查taglib标签是否引入错了，uri，一个是<a href="http://java.sun.com/jsp/jstl/core，一个是http://java.sun.com/jstl/core,一个有jsp一个没有jsp，我们需要引用的是有jsp的uri，对于不经常写这个标签很有可能发生这种错误">http://java.sun.com/jsp/jstl/core，一个是http://java.sun.com/jstl/core,一个有jsp一个没有jsp，我们需要引用的是有jsp的uri，对于不经常写这个标签很有可能发生这种错误</a></p>
<ol start="8">
<li>mybatis接口方法的重载问题</li>
</ol>
<p>在mybatis中，dao接口是不可以有重载方法的</p>
<ol start="9">
<li><p>在$(function(){});中定义js方法，外部或onclick，onfocus等标签中属性无法调用，因为它相当于匿名函数，不可调用里面的方法，而你又需要jquery选择器操作，所以你只能通过window.function_name=function(){}的方式定义，外部才能访问到。</p>
</li>
<li><p>防止表单重复提交</p>
</li>
</ol>
<p>网上大部分都是注解+拦截器。所有的几乎都是一个模板，但是设置完成后，重复提交的话只是会跳到空白页，没办法正常显示数据，我们想要的是，第一次正常请求提交，第二次之后再点击只是在请求前被拦截器拦截到，检查重复了，我们不管它。就相当于第二次点一下就跟没反应一样。但是网上还是没找到的。 除此之外，就是使用禁用按钮了，click事件后form submit()提交，时候就禁用按钮，也就提交了一次了。</p>
<ol start="11">
<li>Neither BindingResult nor plain target object for bean name ‘user’ available as request attribute</li>
</ol>
<p>此问题是spring form表单的问题，因为form标签的modelAttrubute属性在绑定之前必须有一个实例才能够绑定，所以进login之前需要把一个空实例传过去。 于是网上大部分处理这些问题的解决方案是：在进入登录页面的方法，参数加上对象User user，或者处理登录时，对象User添加@ModelAttribute注解，而且参数名和form表单的ModelAttribute值一致。但是经过这样的测试之后还是不行的。 最终谷歌了一下，发现不能直接放在参数上不管，而是手动把空对象放到model对象中传递到页面</p>
<ol start="12">
<li>数据校验，validator数据校验，对象前添加@Valid注解，这是必须的，但是其后紧跟的就是BindingResult对象，这个不能丢</li>
</ol>
<p>通过Errors对象的hasErrors判断是否有错误，有错误直接返回到页面去。 数据校验，spring-servlet.xml配置时，bean ReloadableResourceBundleMessageSource的baseName属性为classpath:ValidationMessages，classpath:要加上，后面的文件后缀去掉,如果你这样做的话IDEA会报错，不用管不妨碍项目启动</p>
<ol start="13">
<li>aop切面，环绕通知，环绕通知相当于前置通知、返回通知、异常通知的合体。但是在我的一个简单的项目中出现了问题</li>
</ol>
<p>说不能使用POST什么的，而其他的三个完全没问题，只有环绕，项目运行登录时调用了一个方法，就出现一行异常，该网页无法正常运作 如果问题仍然存在，请与网站所有者联系。 HTTP ERROR 405，然后请求地址是正确的登录请求地址。 问题的原因可能某处出现了错误，但是错误没有抛出,因为切面比较特殊，不想其他地方错误了直接抛出错误，所以需要在业务层，把操作try-catch起来 (废弃)问题位置在，环绕通知的返回值，它的joinPoint.proceed();方法是继续目标执行。你必须返回它的值，也就是说该方法必须有返回值的。所以，因为之前是无返回值void，才出现了问题。</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>项目问题</tag>
        <tag>开发问题</tag>
      </tags>
  </entry>
  <entry>
    <title>前端js插件技术整合</title>
    <url>/2018/08/01/Javascript/%E5%89%8D%E7%AB%AFjs%E6%8F%92%E4%BB%B6%E6%8A%80%E6%9C%AF%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h1 id="项目技术综合学习文档"><a href="#项目技术综合学习文档" class="headerlink" title="项目技术综合学习文档"></a>项目技术综合学习文档</h1><p><a href="https://github.com/markofrain/synthesis">GitHub地址</a> <strong>重点重点:主要看README!!!!</strong> <strong>重点重点:主要看README!!!!</strong> <strong>重点重点:主要看README!!!!</strong> 包含前端技术: jsp自定义标签 Mustache模板库 treeTable树形表 jquery validate校验 pagination 分页 WdatePicker日期插件 jquery jbox通知插件 zTree js 具体以目录为准!!! <strong>目录</strong> <a href="#a1">JS自定义标签</a><br>    <a href="#a2">自定义tld文件</a><br>    <a href="#a3">自定义tag文件</a><br><a href="#b1">Js Mustache模板引擎</a><br><a href="#c1">jQuery treeTable js</a><br><a href="#d1">jquery DateTimer jeDate时间控件</a><br><a href="#e1">jQuery validate校验框架</a><br>    <a href="#e2">默认标签校验规则</a><br>    <a href="#e3">js设置校验规则</a><br>    <a href="#e4">其他方法级问题</a><br><a href="#f1">zTree js框架</a><br>    <a href="#f2">基本json使用，一次性加载完毕</a><br>    <a href="#f3">异步加载</a><br><a href="#g1">Mybatis分页插件PageHelper</a><br><a href="#h1">stephanwagner jbox弹框插件</a><br>    <a href="#h2">基本提示框(全屏)</a><br>    <a href="#h3">移动弹框</a><br>    <a href="#h4">弹框内容由ajax发起请求并显示</a><br>    <a href="#h5">鼠标悬停显示信息</a>  </p>
<h2 id="JSP自定义标签"><a href="#JSP自定义标签" class="headerlink" title="JSP自定义标签"></a>JSP自定义标签</h2><p>jsp自定义标签可以通过定义tld文件和tag文件来完成 tld是自定义方法标签，可以调用类的静态方法 tag是自定义控件标签，可自定义标签，定义标签属性添加</p>
<h3 id="自定义tld文件"><a href="#自定义tld文件" class="headerlink" title="自定义tld文件"></a>自定义tld文件</h3><p>主要用于对java方法的静态都调用 引用示例: 对于自定义tld标签需要使用的依赖</p>
<pre><code>&lt;dependency&gt;
  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
  &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;
  &lt;version&gt;4.0.1&lt;/version&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
  &lt;artifactId&gt;jstl&lt;/artifactId&gt;
  &lt;version&gt;1.2&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p>tld文件内，主要是方法function，通过java类静态方法的定义和引用，在jsp中通过${}方式输出 例如: 则可以${stu:method(params)}的方式输出 tld文件的定义</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;

&lt;taglib xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot;
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd&quot;
        version=&quot;2.0&quot;&gt;

    &lt;description&gt;JSTL 1.1 Global library&lt;/description&gt;
    &lt;display-name&gt;JSTL Global&lt;/display-name&gt;
    &lt;tlib-version&gt;1.1&lt;/tlib-version&gt;
    &lt;short-name&gt;gbl&lt;/short-name&gt;
    &lt;uri&gt;http://java.sun.com/jsp/jstl/stu&lt;/uri&gt;

    &lt;function&gt;
        &lt;description&gt;获得学生名称&lt;/description&gt;
        &lt;name&gt;getStudentName&lt;/name&gt;
        &lt;function-class&gt;com.fsats.synthesis.customizetag.util.GlobalUtil&lt;/function-class&gt;
        &lt;function-signature&gt;java.lang.String getStudentName(int)&lt;/function-signature&gt;
        &lt;example&gt;$&#123;stu:getStudentName(index)&#125;&lt;/example&gt;
    &lt;/function&gt;
&lt;/taglib&gt;</code></pre><p>文件根标签头部是必须的，其次定义描述，显示名称，标签版本，短名称，uri。对于uri可以按示例格式定义，修改后面一个路径就好 然后是function标签，定义方法，依次是描述，名称，方法全类名，方法签名，示例。对于name就是${stu:name},需要正确定义，参数除基本数据类型外，均写完全限定名。可多参数传递。 可以为参数设置为对象类型，对象值可以通过model携带属性传递到jsp的，例如，项目中传递的student属性就是一个student对象，并直接作为参数，不必要再写${}了。 当然参数还可以是自定义的function，例如:${stu:getStudent(stu:getXxx(param))}。</p>
<h3 id="自定义tag文件"><a href="#自定义tag文件" class="headerlink" title="自定义tag文件"></a>自定义tag文件</h3><p>tag自定义文件主要用于对重复jsp代码的自定义，也可以进行其他操作 引用示例: 自定义标签需要使用tagdir属性，路径到tag文件的目录，通过 <strong>前缀:文件名</strong>的方式使用自定义标签 示例是通过id获得对应的Student对象,通过ajax请求返回数据并设置到页面，返回的json数据可进行处理，只是转json的时候中文出现乱码问题没有解决。 在tag文件中，可使用jsp指令，tag，attribute，taglib，include等，不可使用page。也可以添加标签元素和js代码，完全可以当作jsp页面。 另外，只要引用了tld文件，依然是可以用静态方法调用的。</p>
<blockquote>
<p>实例在customizetag包</p>
</blockquote>
<h2 id="Js-Mustache模板引擎"><a href="#Js-Mustache模板引擎" class="headerlink" title="Js Mustache模板引擎"></a>Js Mustache模板引擎</h2><p>Mustache模板引擎需要引入mustache.min.js的js文件，它的官网在<a href="https://github.com/janl/mustache.js">Mustache</a> 官网简单示例:</p>
<pre><code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body onload=&quot;loadUser()&quot;&gt;
&lt;div id=&quot;target&quot;&gt;Loading...&lt;/div&gt;
&lt;script id=&quot;template&quot; type=&quot;x-tmpl-mustache&quot;&gt;
Hello &#123; &#123; name &#125;&#125;!
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

function loadUser() &#123;
  var template = $(&apos;#template&apos;).html();
  var rendered = Mustache.render(template, &#123;name: &quot;Luke&quot;&#125;);
  $(&apos;#target&apos;).html(rendered);
&#125;</code></pre><p>定义script标签，为模板类型，通过{ {}}设置属性,如{ {name}},{ {emp.name}},与${}一个道理。 js代码，先获取模板html，然后如果想要显示列表，那么可以拼接字符串，通过json循环，追加html模板字符串。</p>
<pre><code>Mustache.render(template, &#123;name: &quot;Luke&quot;&#125;);</code></pre><p>该方法可以将模板转换，属性设置，在第二个参数，json格式，key为模板属性名称，值为模板属性值。第一个参数为模板转换的字符串。 翻看view下的mustache文件下的jsp文件以及mustache包下的controller。</p>
<h2 id="jQuery-TreeTable-js"><a href="#jQuery-TreeTable-js" class="headerlink" title="jQuery TreeTable js"></a>jQuery TreeTable js</h2><p>js文件包,statics文件夹下的treeTable文件夹，整个文件夹都是，少了文件可能就导致小三角显示不出来，不能打开关闭树。 默认表格样式不好看，所以添加了bootstrap的表格样式。 先得到list的json字符串，随后通过模板进行append，但要注意的是，模板的tr标签一定要有id和pid属性，一个是该实例id，一个是该实例的父级id。 另外需要通过addRow迭代方法按照顺序append显示，否则它不会自动排序</p>
<pre><code>function addRow(list,tpl,data,pid) &#123;
    for (var i=0;i&lt;data.length;i++)&#123;
        var row = data[i];//获得某一个实例
        //判断该实例的父级id是否是传递来的pid，是则是其子级元素，将追加到后面
        if(row.parentId==pid)&#123;
            $(list).append(Mustache.render(tpl,&#123;area:row,areatype:row.type,pid:pid&#125;));
            addRow(list,tpl,data,row.id);
        &#125;

    &#125;
&#125;</code></pre><p>该排序，简而言之就是，首先循环，判断该父级id是否是传递的父级id，是则是父子级关系，会追加到其父的后面，然后再循环。 按着这个格式写就好。所有完毕后，通过$(“#treeTable”).treeTable({ expandable: true ,expandLevel : 5});显示，expandLevel表示拓展几级。 后台手动创建area list，用gson转为json字符串传递到后台可直接循环。 java类在jquerytreetable包中，jsp在bst/bstable.jsp，最重要的就是statics中包文件的的齐全。</p>
<blockquote>
<p>如果console出现$(‘’).treetabl不是一个函数的话，注意js引入是否正确，以及statics包是否完全导入项目。<br>另外row.type为数值，使用tld静态类时，无法使用，完全被转化为空。</p>
</blockquote>
<h2 id="jquery-DateTimer-jeDate时间控件"><a href="#jquery-DateTimer-jeDate时间控件" class="headerlink" title="jquery DateTimer jeDate时间控件"></a>jquery DateTimer jeDate时间控件</h2><p>添加jeDate插件,添加包到静态文件夹，jsp引入js和css，以及一个test.js文件。test.js文件主要就是定义文本框中日期字符串格式的。自己定义，如果不定义则js中会弹框。并且test.js必须放在body中的随后位置，以保证得到日期文本框的id</p>
<pre><code>&lt;form:form id=&quot;deptForm&quot; action=&quot;$&#123;pageContext.request.contextPath&#125;/dept/save&quot; method=&quot;post&quot; modelAttribute=&quot;dept&quot;&gt;
    &lt;form:label path=&quot;name&quot;&gt;部门名称&lt;/form:label&gt;&lt;form:input path=&quot;name&quot;&gt;&lt;/form:input&gt;&lt;br/&gt;
    &lt;form:label path=&quot;area&quot;&gt;部门面积&lt;/form:label&gt;&lt;form:input path=&quot;area&quot;&gt;&lt;/form:input&gt;&lt;br/&gt;
    &lt;form:label path=&quot;address&quot;&gt;部门地址&lt;/form:label&gt;&lt;form:input path=&quot;address&quot;&gt;&lt;/form:input&gt;&lt;br/&gt;
    &lt;form:label path=&quot;phone&quot;&gt;部门电话&lt;/form:label&gt;&lt;form:input path=&quot;phone&quot;&gt;&lt;/form:input&gt;&lt;br/&gt;
    &lt;form:label path=&quot;establishDate&quot;&gt;成立日期&lt;/form:label&gt;
    &lt;input type=&quot;text&quot; name=&quot;establishDate&quot; value=&quot;&lt;fmt:formatDate value=&quot;$&#123;dept.establishDate&#125;&quot;/&gt;&quot; class=&quot;jeinput&quot; id=&quot;enYMD&quot; placeholder=&quot;YYYY-MM-DD&quot;/&gt;&lt;br/&gt;

    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;
&lt;/form:form&gt;</code></pre><p>对于日期控件，简单的日期，添加倒数第三行那一行就好，但是不能使用form:input控件当作日期文本框，因为这样会导致标签变成字符串。 此日期插件有更多的显示方式，如：面板主题颜色，区域范围，自定义格式，双击弹出，有效无效日期限制，直接显示日历等。 具体可查看jeDate包，也可以看官网<a href="http://www.jemui.com/index.html">JEUI</a>里的jeDate控件。 另外如果你发现引入后导致400 bad request，那么可以详细看看form及其属性标签定义的对不对，如果没问题，<strong>就看你是否有Date，String转换器，这是导致错误的最大可能。</strong>如果是其他报错则查看jsp也main与controller是否编写错误。 StringToDate转换器配置如下:</p>
<pre><code>&lt;mvc:annotation-driven conversion-service=&quot;myConversionService&quot;/&gt;

&lt;bean id=&quot;myConversionService&quot; class=&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;
    &lt;property name=&quot;converters&quot;&gt;
        &lt;set&gt;
            &lt;!-- 引入自己配置的自定义转换器，将String类型转换为Date日期 --&gt;
            &lt;bean class=&quot;com.fsats.synthesis.jqueryvalidate.converter.MyConversionDateToString&quot;&gt;
                &lt;constructor-arg name=&quot;patten&quot; value=&quot;yyyy-MM-dd&quot;/&gt;
            &lt;/bean&gt;
        &lt;/set&gt;
    &lt;/property&gt;
&lt;/bean&gt;</code></pre><blockquote>
<p>java文件在jqueryvalidate包，jsp在jvalidate文件夹下</p>
</blockquote>
<h2 id="jQuery-validate校验框架"><a href="#jQuery-validate校验框架" class="headerlink" title="jQuery validate校验框架"></a>jQuery validate校验框架</h2><p>引入js文件jquery.validate.min.js和messages_zh.js用于中文输出信息,还有必要的jquery.js文件 <a href="http://www.runoob.com/jquery/jquery-plugin-validate.html">jquery validate菜鸟教程</a> <a href="https://jqueryvalidation.org/">jquery validate官网</a>及<a href="https://jqueryvalidation.org/files/demo/">官网演示案例</a></p>
<h3 id="默认标签校验规则"><a href="#默认标签校验规则" class="headerlink" title="默认标签校验规则"></a>默认标签校验规则</h3><p>校验规则众多，许多规则名称，HTML5 Input标签都有。 像是取值为true的，如required、email、url、digits等，都可以直接写在class属性中，也可以单独写成一个属性。maxlength，range带值的这种，如果标签本来就有的就写上去，没有的也可以作为属性并赋值。 完成后，就可以进行校验,如:</p>
<pre><code>$.validator.setDefaults(&#123;
    //使用其他方式代替默认的submit
    submitHandler: function(form) &#123;
        alert(&quot;提交事件!&quot;);
        form.submit();
    &#125;
&#125;);
$(function()&#123;
    $(&quot;#deptForm&quot;).validate();
&#125;)</code></pre><p>测试后，如果不符合条件就会出现默认错误信息。</p>
<h3 id="js设置校验规则"><a href="#js设置校验规则" class="headerlink" title="js设置校验规则"></a>js设置校验规则</h3><p>刚才校验规则都是写在标签里的，可以使用js代码写 rules属性可以设置规则</p>
<pre><code>$(function()&#123;
    $(&quot;#deptForm&quot;).validate(&#123;
        submitHandler: function(form) &#123;
            alert(&quot;提交事件!&quot;);
        &#125;,
        rules:&#123;
            name:&quot;required&quot;,
            address:&quot;required&quot;,
            phone:&#123;
                required:true,
                maxlength:11
            &#125;,
            area:&#123;
                required:true,
                digits:true
            &#125;,
            establishDate:&quot;required&quot;
        &#125;
    &#125;);
&#125;)</code></pre><h3 id="其他方法级问题"><a href="#其他方法级问题" class="headerlink" title="其他方法级问题"></a>其他方法级问题</h3><ol>
<li>使用其他方式代替type=submit提交</li>
</ol>
<p>上面的示例代码是一种，注意:对于$.validator.setDefaults方法，只是设置默认和其他js校验代码，必须设置$(“#deptForm”).validate();才能校验，否则直接提交。 或者:</p>
<pre><code>$().ready(function() &#123;
 $(&quot;#signupForm&quot;).validate(&#123;
        submitHandler:function(form)&#123;
            alert(&quot;提交事件!&quot;);   
            form.submit();
        &#125;    
    &#125;);
&#125;);</code></pre><ol start="2">
<li><p>debug，只验证不提交表单</p>
<p>$(“#signupForm”).validate({</p>
<pre><code>debug:true</code></pre><p>});</p>
</li>
<li><p>errorContainer，错误容器</p>
</li>
</ol>
<p>显示或者隐藏验证信息，可以自动实现有错误信息出现时把容器属性变为显示，无错误时隐藏，用处不大。 errorContainer: “#messageBox1, #messageBox2” 没有太大用处</p>
<ol start="4">
<li>errorPlacement,更改错误信息显示的位置</li>
</ol>
<p>默认放在元素后面</p>
<pre><code>errorPlacement: function(error, element) &#123;  
    error.appendTo(element.parent());  
&#125;</code></pre><p>你可以修改，函数内的代码段</p>
<ol start="5">
<li><p>定义错误样式,定义类名为error的css即可</p>
</li>
<li><p>异步验证</p>
</li>
</ol>
<p>remote属性 示例:</p>
<pre><code>remote: &#123;
    url: &quot;dept/remote&quot;,     //后台处理程序
    type: &quot;post&quot;,               //数据发送方式
    dataType: &quot;json&quot;,           //接受数据格式   
    data: &#123;                     //要传递的数据
        name: function() &#123;
            return $(&quot;input[name=name]&quot;).val();
        &#125;
    &#125;
&#125;</code></pre><ol start="7">
<li>自定义验证 addMethod(name, method, message);</li>
</ol>
<p>示例:</p>
<pre><code>jQuery.validator.addMethod(&quot;checkPhone&quot;, function(value, element) &#123;
    var tel = /^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\d&#123;8&#125;$/;
    return this.optional(element) || (tel.test(value));
&#125;, &quot;请正确填写您的手机号&quot;);</code></pre><p>校验的话，只需要在rules对应属性中设置，checkPhone:true。或者标签中class=”checkPhone”,或标签属性,checkPhone=”true”。</p>
<h2 id="zTree-js框架"><a href="#zTree-js框架" class="headerlink" title="zTree js框架"></a>zTree js框架</h2><p>js包下载：<a href="https://github.com/zTree/zTree_v3.git">github地址</a> 包大小约3-3MB，可整个导入项目静态文件夹下</p>
<h3 id="基本json使用，一次性加载完毕"><a href="#基本json使用，一次性加载完毕" class="headerlink" title="基本json使用，一次性加载完毕"></a>基本json使用，一次性加载完毕</h3><p>必须要用到的初始化方法，用于初始化Tree</p>
<pre><code>$.fn.zTree.init($(&quot;#treedata&quot;),setting,zNodes);</code></pre><p>该方法第一个参数为要展示的对象，setting为Tree设置，zNodes就是要展示的数据。 而展示对象object，必须是一个ul标签，且具有id和class=”ztree”属性。 完整代码:</p>
<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;
    var zNodes=$&#123;data&#125;;
    var setting=&#123;
        data:&#123;
            simpleData:&#123;
                enable:true,
                idKey:&quot;id&quot;,
                pIdKey:&quot;pid&quot;,
                rootPId:&quot;&quot;
            &#125;
        &#125;
    &#125;
    $(function()&#123;
        $.fn.zTree.init($(&quot;#treedata&quot;),setting,zNodes);
    &#125;);
&lt;/script&gt;

&lt;div&gt;
    &lt;ul id=&quot;treedata&quot; class=&quot;ztree&quot;&gt;&lt;/ul&gt;
&lt;/div&gt;</code></pre><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><p>对于异步加载来说，可以说很简单，但是新手的话，别人的博客如果没有提出重点，而你的类属性和他的类属性设置的还不一样，那么你就可能会像我一样出错。 然而找了一上午，终于看了官方的demo和response数据，才发现问题。 那么，如果你的问题是:首次加载一级节点,之后再点击就没任何反应，并且图标是文件。那么你的问题就和我一样了。 出现问题的原因:就是少了isParent属性。无法确定是否是父节点，只能认为是子节点。而这个isParent属性可以是类属性，也可以是treeNode的属性。 所以依据正常情况，你需要<strong>为类设置一个isParent属性</strong>，这个转json时有这个属性。而这个属性会让ztree判断为是否为父级，为true则显示为文件夹，false显示为文件。而你的数据无法显示，可能就少了这个属性。 现在根据isParent情况，分为两类，一个是有此属性，一个是没有此属性。 <strong>1. 有isParent属性,那么只需要设置异步加载的选项(非常建议，省去很多不必要麻烦)</strong></p>
<pre><code>var setting = &#123;
    data: &#123;
        key: &#123;
            name: &quot;name&quot;,
        &#125;,
        simpleData: &#123;
            enable: true,
            idKey: &quot;id&quot;,
            pIdKey: &quot;pid&quot;,
            rootPId: 0
        &#125;
    &#125;,
    async:&#123;
        enable:true,
        autoParam:[&quot;id&quot;],
        type:&quot;post&quot;,
        url:&quot;$&#123;pageContext.request.contextPath&#125;/treedata/get&quot;
    &#125;
&#125;;

$(function()&#123;
    $.fn.zTree.init($(&quot;#treedata&quot;),setting);
&#125;)</code></pre><p>另外注意的时，初始化树，需要将init放在$(function(){})中，否则将报错</p>
<pre><code>Cannot read property &apos;style&apos; of null</code></pre><p>ztree会依据你的isParent属性为true还是false，来判断图标如何显示。 <strong>2. 数据库已经建好，且类属性不便更改(无法完整解决，图标都是文件夹)</strong> 如果你的数据库或属性有level字段，并且你的层级结构一致，并不存在有的一级节点下显示文件，有的二级节点下显示文件的情况。 那么你可以通过异步选项的dataFilter属性方法来解决，该方法用于过滤传来的数据</p>
<pre><code>dataFilter:function (treeId,parentNode,childNodes) &#123;
    for (var i=0, l=childNodes.length; i&lt;l; i++) &#123;
        if()
        childNodes[i].isParent = true;
    &#125;
    return childNodes;
&#125;</code></pre><p>参数分别为树容器的id值，父节点的treeNode对象，异步加载获得数据转换成树节点的集合。 treeNode对象的isParent属性表示是否为父级，与类中的isParent一样，是文件还是文件夹。 但是这样做出现的问题是，你的每一层每一项图标都是文件夹。</p>
<blockquote>
<p>本项目是由于isParent属性情况导致，所以新建TestArea类和TestAreaDao接口，重新解决的。</p>
</blockquote>
<h2 id="Mybatis分页插件PageHelper"><a href="#Mybatis分页插件PageHelper" class="headerlink" title="Mybatis分页插件PageHelper"></a>Mybatis分页插件PageHelper</h2><p><a href="https://github.com/pagehelper/Mybatis-PageHelper">GitHub地址</a> 一下示例为最基本示例，详细内容看github中文档，及其他博客。 此示例，href属性跳转后台获得数据，并非ajax异步，导航只有首页，尾页，上一页，下一页。分页导航请在其他地方查找。 添加pom依赖</p>
<pre><code>&lt;dependency&gt;
  &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;
  &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;
  &lt;version&gt;5.1.4&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p>service层设置</p>
<pre><code>/**
 * 使用pageHelper分页
 * @param pageNum 第几页
 * @param pageSize 每页显示条数
 * @return
 */
public PageInfo&lt;AreaTree&gt; pageList(Integer pageNum,Integer pageSize)&#123;
    PageHelper.startPage(pageNum, pageSize);
    List&lt;AreaTree&gt; areaTreeList = areaTreeDao.findAll();
    PageInfo&lt;AreaTree&gt; pageInfo = new PageInfo&lt;AreaTree&gt;(areaTreeList);
    return pageInfo;
&#125;</code></pre><p>controller设置</p>
<pre><code>@RequestMapping(&quot;list&quot;)
public String list(Model model, @RequestParam(defaultValue = &quot;1&quot;) Integer pageNum)&#123;
    //model.addAttribute(&quot;data&quot;, areaTreeService.findAll());
    PageInfo&lt;AreaTree&gt; pageInfo = areaTreeService.pageList(pageNum, 15);
    model.addAttribute(&quot;pageInfo&quot;, pageInfo);
    return &quot;pagination/page&quot;;
&#125;</code></pre><p>jsp设置</p>
<pre><code>&lt;body&gt;
    &lt;table&gt;
        &lt;c:forEach var=&quot;area&quot; items=&quot;$&#123;pageInfo.list&#125;&quot;&gt;
            &lt;tr&gt;
                &lt;td&gt;$&#123;area.id&#125;&lt;/td&gt;
                &lt;td&gt;$&#123;area.name&#125;&lt;/td&gt;
                &lt;td&gt;$&#123;area.pid&#125;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/c:forEach&gt;
    &lt;/table&gt;
&lt;ul&gt;
    &lt;a href=&quot;/pagination/list?pageNum=1&quot;&gt;首页&lt;/a&gt;
    &lt;a href=&quot;/pagination/list?pageNum=$&#123;pageInfo.prePage&lt;1?1:pageInfo.prePage&#125;&quot;&gt;上一页&lt;/a&gt;
    &lt;span&gt;$&#123;pageInfo.pageNum&#125;&lt;/span&gt;
    &lt;a href=&quot;/pagination/list?pageNum=$&#123;pageInfo.nextPage&gt;pageInfo.pages?pageInfo.pages:pageInfo.nextPage&#125;&quot;&gt;下一页&lt;/a&gt;
    &lt;a href=&quot;/pagination/list?pageNum=$&#123;pageInfo.pages&#125;&quot;&gt;尾页&lt;/a&gt;
&lt;/ul&gt;</code></pre><h2 id="stephanwagner-jbox弹框插件"><a href="#stephanwagner-jbox弹框插件" class="headerlink" title="stephanwagner jbox弹框插件"></a>stephanwagner jbox弹框插件</h2><p>stephanwagner jbox弹框插件可以说是很优美的弹框，与jquery jbox相比显得更有有活力一些。 <a href="https://github.com/StephanWagner/jBox">GitHub地址</a> <a href="https://stephanwagner.me/jBox/">Demo演示地址</a> 由于该弹框插件在github上star将近1k，但使用的还是很少，博客出来的更少,而对于某些文章博客讲述的并不完整。具体参数也不详细。少了一个参数就出不来正常效果。 所以下载源码包后，Demo下的示例，找到你需要的某个案例，进行拷贝。对应拷贝，包括html和demo.js里的实例化jbox对象。</p>
<blockquote>
<p>实例化jBox都应放在$(function(){})中</p>
</blockquote>
<h3 id="基本提示框-全屏"><a href="#基本提示框-全屏" class="headerlink" title="基本提示框(全屏)"></a>基本提示框(全屏)</h3><pre><code>//基本提示框
new jBox(&apos;Modal&apos;, &#123;
    attach: &apos;#baseShow&apos;,
    height: 200,
    overlay:false,//是否覆盖页面(界面只有弹框，背景为灰色)
    title: &apos;打开一个提示框&apos;,
    content: &apos;这是一个提示框，你可以按键Esc或点击关闭按钮关闭&apos;
&#125;);

&lt;%--基本提示弹框--%&gt;
&lt;div id=&quot;baseShow&quot; class=&quot;target-click&quot;&gt;Click me&lt;/div&gt;</code></pre><h3 id="移动弹框"><a href="#移动弹框" class="headerlink" title="移动弹框"></a>移动弹框</h3><p>依据示例拷贝，该移动弹框，toggle效果，点击一次出现，再点击消失，并且框内数据可以保留。</p>
<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;
    $(function()&#123;
        //移动弹框设置
        new jBox(&apos;Modal&apos;, &#123;
            attach: &apos;#show&apos;,
            width: 350,
            height: 200,
            blockScroll: false,
            animation: &apos;zoomIn&apos;,
            draggable: &apos;title&apos;,
            closeButton: true,
            content: $(&quot;#showBox&quot;),
            title: &apos;移动弹框&apos;,
            overlay: false,
            reposition: false,
            repositionOnOpen: false
        &#125;);
    &#125;);
&lt;/script&gt;

//移动弹框设置
&lt;div id=&quot;show&quot; class=&quot;target-click&quot;&gt;Click me&lt;/div&gt;
&lt;div id=&quot;showBox&quot; style=&quot;display: none&quot;&gt;
    &lt;form action=&quot;/jbox/save&quot; type=&quot;post&quot;&gt;
        &lt;input type=&quot;text&quot; name=&quot;id&quot; value=&quot;&quot;/&gt;
        &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&quot;/&gt;
        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;
    &lt;/form&gt;
&lt;/div&gt;</code></pre><ul>
<li>title属性为标题，</li>
<li>content属性是内容，可以引用容器，将某个div等引入。</li>
<li>attach属性是触发弹框的id或class选择器</li>
</ul>
<h3 id="弹框内容由ajax发起请求并显示"><a href="#弹框内容由ajax发起请求并显示" class="headerlink" title="弹框内容由ajax发起请求并显示"></a>弹框内容由ajax发起请求并显示</h3><p>点击后，通过ajax属性操作，完美移植了$.ajax的回掉函数。 弹框的文本和内容均可以在回掉函数中重新再次设置。</p>
<pre><code>//ajax弹框效果
new jBox(&apos;Modal&apos;, &#123;
    attach: &apos;#showAjax&apos;,
    width: 450,
    height: 250,
    closeButton: &apos;title&apos;,
    animation: false,
    title: &apos;Ajax请求弹框&apos;,
    ajax: &#123;
        url: &apos;get&apos;,
        data: &#123;
            id: &apos;1982&apos;,
        &#125;,
        reload: &apos;strict&apos;,
        setContent: false,
        beforeSend: function() &#123;
            this.setContent(&apos;&apos;);
            this.setTitle(&apos;&lt;div class=&quot;ajax-sending&quot;&gt;Ajax请求发送中...&lt;/div&gt;&apos;);
        &#125;,
        complete: function(response) &#123;
            this.setTitle(&apos;&lt;div class=&quot;ajax-complete&quot;&gt;AJAX请求完成&lt;/div&gt;&apos;);
        &#125;,
        success: function(response) &#123;
            this.setContent(&apos;&lt;div class=&quot;ajax-success&quot;&gt; 编号:&apos;+ response.id + &apos;&lt;br/&gt;城市:&apos; + response.name  + &apos;&lt;/tt&gt;&lt;/div&gt;&apos;);
        &#125;,
        error: function() &#123;
            this.setContent(&apos;&lt;div class=&quot;ajax-error&quot;&gt;抱歉，请求出现错误&lt;/div&gt;&apos;);
        &#125;
    &#125;
&#125;);

&lt;%--ajax弹框--%&gt;
&lt;div id=&quot;showAjax&quot; class=&quot;target-click&quot;&gt;Click me&lt;/div&gt;</code></pre><p>对于前台，可以使用线程睡眠，此时弹框中内容出现圆圈旋转，处于等待中。</p>
<h3 id="鼠标悬停显示信息"><a href="#鼠标悬停显示信息" class="headerlink" title="鼠标悬停显示信息"></a>鼠标悬停显示信息</h3><pre><code>&lt;%--鼠标悬停显示内容--%&gt;
&lt;span id=&quot;hover&quot; class=&quot;target&quot;&gt; hover me&lt;/span&gt;

//鼠标悬停显示内容
new jBox(&apos;Tooltip&apos;, &#123;
    attach: &apos;#hover&apos;,
    width: 300,
    pointer: &apos;right:80&apos;,
    animation: &apos;move&apos;,
    delayOpen: 0,
    delayClose: 100,
    content: &apos;此框触碰即可打开，移出鼠标后关闭&apos;,
    onOpen: function() &#123;
        this.source.removeClass(&apos;active&apos;).html(&apos;Open&apos;);
    &#125;,
    onClose: function() &#123;
        this.source.removeClass(&apos;active&apos;).html(&apos;Hover me&apos;);
    &#125;
&#125;);</code></pre><p>可设置宽度，高度依据内容自动增高，delayOpen表示打开所需要的时间，delayClose表示关闭所需要的时间。 pointer表示弹框的位置，块级元素和行级元素可能出书位置不一样，需要通过此属性进行调整，right和left，单位为像素。 onOpen回调函数表示当弹框显示的时候做的事情，可以更改内容等其他操作，onClose回调函数与之相反。 其他样式查看源码的Demo。</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Java使用独立部署的FineReport进行填报的增改操作</title>
    <url>/2018/07/31/%E5%B8%86%E8%BD%AF/Java%E4%BD%BF%E7%94%A8%E7%8B%AC%E7%AB%8B%E9%83%A8%E7%BD%B2%E7%9A%84FineReport%E8%BF%9B%E8%A1%8C%E5%A1%AB%E6%8A%A5%E7%9A%84%E5%A2%9E%E6%94%B9%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="帆软设计器生成报表"><a href="#帆软设计器生成报表" class="headerlink" title="帆软设计器生成报表"></a>帆软设计器生成报表</h3><p>帮助文档查看:<a href="http://help.finereport.com/finereport8.0/">http://help.finereport.com/finereport8.0/</a> 论坛社区查看:<a href="http://bbs.fanruan.com/">http://bbs.fanruan.com/</a> 官网查看:<a href="http://www.fanruan.com/finereport/">http://www.fanruan.com/finereport/</a> 对于报表的基础就不多说，直接开始吧。 步骤:</p>
<pre><code>+ 独立部署FineReport到tomcat
+ 设计填报报表
+ java后端引入报表链接</code></pre><p>事实上真正的增改操作都在填报模板上。</p>
<h3 id="独立部署FineReport到tomcat上"><a href="#独立部署FineReport到tomcat上" class="headerlink" title="独立部署FineReport到tomcat上"></a>独立部署FineReport到tomcat上</h3><p>首先，你需要安装一个帆软的客户端，设置必须的，它带有一个设计器，用于设计模板，且根目录下的WebReport就是独立项目，我们可以把整个文件夹直接拷贝到tomcat的webapps目录下。关于文件夹内的各文件及文件夹不再说明，都在帮助文档的集成部署选项中。 而设计的模板都放在了/WebReport/WEB-INF/reportlets下，其下可以放文件和文件夹。 到时候我们再设计器中做的模板，再其目录下拷贝，直接拷贝到tomcat下WebReport项目的reportlets目录下。就是与之对应呗。</p>
<h3 id="设计填报报表"><a href="#设计填报报表" class="headerlink" title="设计填报报表"></a>设计填报报表</h3><p>在设计填报报表前，需要了解基础教程的填报入门，以及参数入门。 连接你需要操作数据表的对应数据库，点击菜单栏 服务器，服务器定义，定义你的数据库服务器。</p>
<h4 id="新增用途的填报模板"><a href="#新增用途的填报模板" class="headerlink" title="新增用途的填报模板"></a>新增用途的填报模板</h4><p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180731110339.jpg" alt="新增模板"></p>
<ol>
<li><p>如图所示，我们需要设计一个自由报表，好不好看就看自己动手能力了。</p>
</li>
<li><p>随后，<strong>为单元格添加控件</strong>，右击，控件设置，根据情况对其进行设置，控件类型，是否为空，错误提示，校验规则等。</p>
</li>
<li><p>当全都完备后，需要设置 报表填报设置，点击菜单栏 模板，<strong>报表填报属性</strong>，新建一个内置SQL，选择<strong>提交类型</strong>，此为新增，选入插入提交即可，你可可以选择智能提交(根据是否含有主键判断，是否插入还是更新)。选择<strong>表</strong>,模式在oracle中就是用户名的意思。选择<strong>智能添加字段</strong>，选择你需要的字段，最好与报表中的属性一一对应。然后设置勾选主键。选择<strong>智能添加单元格</strong>，这样就可以字段绑定单元格了。</p>
</li>
<li><p>绑定完毕后，看报表填报属性框中的值，每个字段都会与单元格对应了，接下来就是设置主键了，主键的值通过UUID公式设置，双击值框，选择公式，设置公式为uuid(),确定，保存。当然，你可以设置其他的值，关于主键自增问题，我只知道可以使用uuid，和显示手动赋值的方式。其他方法自行尝试把。</p>
</li>
</ol>
<p>新增的填报报表就完成了。主要就是单元格和字段的绑定以及主键，才使得成功。 另外，新增，是不需要设置数据集的，只要表字段与其单元格数据绑定就好。</p>
<h4 id="修改用途的填报报表"><a href="#修改用途的填报报表" class="headerlink" title="修改用途的填报报表"></a>修改用途的填报报表</h4><p>对于修改而言，一定要有的就是主键id了。 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180731112656.jpg" alt=""> 如图上所示， 不光要<strong>设置控件，以及数据表字段绑定单元格</strong>，还需要的就是数据库查询了。</p>
<ol>
<li>左下角，新增 <strong>数据库查询</strong>，语句为where的id条件，根据自己的id字段名称修改 SELECT * FROM JEESITE.”JINRONG” where FINANCEORGAN_ID=’${id}’</li>
</ol>
<p>加上单引号表示是字符串，我的id就是字符串，${xxx}表示这是个参数，参数名为xxx。</p>
<ol start="2">
<li><p>然后就是把<strong>模板数据集中的字段，拖到对应的单元格</strong>了，这样才能完成引用数据的显示(此处与表字段绑定单元格不是一个概念)。</p>
</li>
<li><p>接下来需要设置一个模板参数，选择模板，模板参数，设置名称为id。之后第四步，选择是，才有id参数的选项。</p>
</li>
<li><p>设置主键的属性值，打开 模板，填报报表属性，<strong>设置主键的值为参数</strong>，参数就设置为刚才的参数名(这里是id)。这样这个模板就有了动态参数，依据参数进行更新了。</p>
</li>
</ol>
<p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180731113415.jpg" alt=""> 这下，就完毕了，依据后台传入的参数id，然后模板得到id后，就通过数据库查询的查询语句，查到一条数据，并通过单元格对模板数据集的引用，把值显示在模板上了。提交的话，因为有id，所以就进行提交。</p>
<h3 id="移动模板文件和数据源文件"><a href="#移动模板文件和数据源文件" class="headerlink" title="移动模板文件和数据源文件"></a>移动模板文件和数据源文件</h3><p>设计完毕后，就找到对应文件，移动或拷贝到tomcat的WebReport项目下的WEB-INF/reportlets目录下 然后，找到你的帆软安装路径下的WebReport，WEB-INF/resources目录下的datasource.xml文件，此文件记录了数据库连接信息，以及多个数据库连接信息(因为帆软是支持多数据库设计模板的)。将他拷贝到webapps下的，同样是对应目录下的文件，替换原来的文件。</p>
<h3 id="Java引入报表"><a href="#Java引入报表" class="headerlink" title="Java引入报表"></a>Java引入报表</h3><p>java后台只需要做一件事，就是设置超链接a标签，引入到该模板地址。 a标签href属性值如下</p>
<pre><code>/WebReport/ReportServer?reportlet=insertBankForm.cpt&amp;amp;op=write</code></pre><p>注意填报模板后需要跟参数op=write，否则它就成了分页模板。 你需要修改的就是reportlet= 后面的内容，可以是reportlet=/doc/Parameter/SelectReport.cpt&amp;op=write，doc就是reportlet下的文件夹。 另外，传递参数id，可直接拼接参数，&amp;id=${xxx.id}。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>帆软</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Delete命令误删记录的恢复问题</title>
    <url>/2018/07/28/Oracle/%E4%BD%BF%E7%94%A8Delete%E5%91%BD%E4%BB%A4%E8%AF%AF%E5%88%A0%E8%AE%B0%E5%BD%95%E7%9A%84%E6%81%A2%E5%A4%8D%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>简单的删除操作，误删很容易回复。但是对于alter drop之类的就比较难了。 本文讲解普通DELETE导致误删的回复办法。</p>
<pre><code>select * from temp as of timestamp to_timestamp(&apos;2018-07-28 12:30:00&apos;,&apos;yyyy-mm-dd hh24:mi:ss&apos;); </code></pre><p>该语句表示，查询某时间到现在时间的历史数据。如果你在35分时删除了一条数据，那么现在40分了。你可以设置成30分，这样可以查询出在30分时表数据。 该语句查的是2018-07-28 12:30:00的记录，这样变能查到35分时被删除掉的数据。如果再往以前，你可以设置时间往前。 得到数据后，你需要插入到表中</p>
<pre><code>insert into temp(select * from temp as of timestamp to_timestamp(&apos;2018-07-28 12:30:00&apos;,&apos;yyyy-mm-dd hh24:mi:ss&apos;) where financeorgan_code=&apos;70065114-6&apos;) ;</code></pre><p>使用此方式,insert into temp();恢复哪条，则设置为条件。这样便重新插入了。 对于表被删除的恢复查看下面文章 <a href="http://www.cnblogs.com/bolang100/p/6056515.html">ORACLE恢复数据</a></p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle更改已存在数据的列的数据类型</title>
    <url>/2018/07/28/Oracle/Oracle%E6%9B%B4%E6%94%B9%E5%B7%B2%E5%AD%98%E5%9C%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%97%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>对于已存在数据的列，要更改数据类型是不可行的。 你需要创建一个列，类型就是你想要的类型，当然，更改前和更改后的数据类型都可以完全存储这些数据。如果字符类型改Date就不可能了。 该案例是将Number类型转换为varchar2(64)类型 步骤:</p>
<pre><code>//创建一个新列
alter table temp add id varchar2(64);
//复制数据
update temp set temp.id=temp.STUDENTID;
//删除原列
alter table temp drop column STUDENTID;
//更改列名
alter table temp rename column id to STUDENTID;</code></pre><p><strong>非常建议，使用事物。并且操作前，一定备份表。</strong></p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Oracle的监听程序配置问题与excel文件导入数据库</title>
    <url>/2018/07/28/Oracle/%E5%85%B3%E4%BA%8EOracle%E7%9A%84%E7%9B%91%E5%90%AC%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98%E4%B8%8Eexcel%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="Oracle监听程序的错误问题"><a href="#Oracle监听程序的错误问题" class="headerlink" title="Oracle监听程序的错误问题"></a>Oracle监听程序的错误问题</h3><p>对于Oracle的监听程序，是客户端连接Oracle数据库额必经之路，当然sqlplus除外。 对于没有监听服务的情况，就是你注册表被删了，你可以网上搜索解决办法。<strong>此问题时对应于监听正常启动而客户端始终无法连接的问题。</strong> <strong>如果你监听无法正常启动那么请重新配置监听，没必要修改任何监听文件,开始菜单下，oracle目录下的Net configuration Assistant配置可以重新配置监听程序。</strong> 在启动监听时，经常有如下几种情况:</p>
<ol>
<li>监听启动不起来，一开启服务，下一秒就不带提示的自动关闭服务。</li>
<li>监听刚已启动，就弹框说因为某某原因自动关闭监听服务。</li>
<li>监听正常启动，可是客户端就是连接不起来。并伴随着客户端报错<strong>无监听程序</strong>或<strong>适配器错误</strong>。</li>
</ol>
<p>关于以上情况，网上有很多博客及论坛的描述，大多都是大庭相近的，说是要配置listener.ora和tnsnames.ora文件的host的值。并且有很多人改了，然而并没有发生正确结果。 对于客户端连接错误情况，无非是监听导致的，通常导致不可用的原因在网上归结于:</p>
<ol>
<li>防火墙</li>
<li>监听文件出错,listener.ora文件</li>
<li>以及说注册表的某个表少了imagePath关键值</li>
</ol>
<p>然而，关于这些解决办法对一些人有用，对一些人没用。关于防火墙，这点在windows时没用的，监听文件无非就是host值错了，对于注册表，只要不是使用什么清理工具，误把注册表删了，一般情况就没问题。 而对于我的情况，安装了卸载了数据库两次，最后通过其他人oracle配置才发现与之不一样的地方。 <strong>问题解决:</strong> 首先你不必管你的监听文件。打开开始菜单，oracle目录下的Net configuration Assistant配置,删除监听，并从新配置一个监听。 然后打开Net Manager配置，把配置的监听程序删掉。 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180728102647.png" alt="Net Manager配置"> 最后需重启Oracle服务和监听服务。 随后你尝试重新客户端登陆，应该可以登陆上。 如果仍然不可用，请重新配置监听，不再Net Manager删除监听，再次重新重启服务。 另外，实在不行,修改监听文件也是一种办法。 保证listener.ora和tnsnames.ora文件的host相同，可以都设置为机器名.lan,就是电脑右击–&gt;系统–&gt;计算机名</p>
<h3 id="通过Excel文件导入Oracle数据库，如xlsx等"><a href="#通过Excel文件导入Oracle数据库，如xlsx等" class="headerlink" title="通过Excel文件导入Oracle数据库，如xlsx等"></a>通过Excel文件导入Oracle数据库，如xlsx等</h3><ol>
<li><p>先把表格文件打开，另存为txt(制表符分隔)文件,注意你的列不能有任何空列(通常第一行是表名，之后是数据。不能整列都是空的，否则你需要把此列删除再另存txt)</p>
</li>
<li><p>你需要有pl/sql Developer软件,打开tool菜单下的Text Importer选项，如果你没有登录的话，是不能选中的。</p>
</li>
<li><p>打开后选择txt文件 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180728105257.png" alt=""></p>
</li>
<li><p>导入后出现如下界面，Result Preview中，第一行是表名，如果不是，则请注意你的excel文件，如果某列都是空的，请注意你的Excel文件 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180728105615.png" alt=""></p>
</li>
<li><p>然后打开Data to Oracle框,设置Owner，Table，为每个列填写field表名与下面的类型。前提是你得表应该是之前就被创建的，如果不是，请先看6 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180728110155.png" alt=""></p>
</li>
<li><p>先创建表 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180728110357.png" alt=""></p>
</li>
</ol>
<p>填写owner为那个用户的，Name为表名 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180728110443.png" alt=""> 点击column，设置owner和name，分别为用户和表名。设置列名，类型，非空，与注释(可以不写)。完毕后点击左下的apply，如果报错则重新修改。 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180728110649.png" alt=""> 如果点击apply后无提示，那么创建完毕，close。如果你的field都设置了，那么么import按钮才会可用。就点击import就好了。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Jeesite开源项目SSM基础搭建——前端js插件技术</title>
    <url>/2018/07/26/%E5%BC%80%E6%BA%90/Jeesite%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AESSM%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E5%89%8D%E7%AB%AFjs%E6%8F%92%E4%BB%B6%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="项目技术综合学习文档"><a href="#项目技术综合学习文档" class="headerlink" title="项目技术综合学习文档"></a>项目技术综合学习文档</h1><p>包含前端技术: jsp自定义标签 Mustache模板库 treeTable树形表 jquery validate校验 pagination 分页 WdatePicker日期插件 jquery jbox通知插件 <strong>目录</strong> <a href="#a1">JS自定义标签</a><br>    <a href="#a2">自定义tld文件</a><br>    <a href="#a3">自定义tag文件</a><br><a href="#b1">Js Mustache模板引擎</a><br><a href="#c1">jQuery treeTable js</a><br><a href="#d1">jquery DateTimer jeDate时间控件</a><br><a href="#e1">jQuery validate校验框架</a><br>    <a href="#e2">默认标签校验规则</a><br>    <a href="#e3">js设置校验规则</a><br>    <a href="#e4">其他方法级问题</a>  </p>
<h2 id="JSP自定义标签"><a href="#JSP自定义标签" class="headerlink" title="JSP自定义标签"></a>JSP自定义标签</h2><p>jsp自定义标签可以通过定义tld文件和tag文件来完成 tld是自定义方法标签，可以调用类的静态方法 tag是自定义控件标签，可自定义标签，定义标签属性添加</p>
<h3 id="自定义tld文件"><a href="#自定义tld文件" class="headerlink" title="自定义tld文件"></a>自定义tld文件</h3><p>主要用于对java方法的静态都调用 引用示例: 对于自定义tld标签需要使用的依赖</p>
<pre><code>&lt;dependency&gt;
  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
  &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;
  &lt;version&gt;4.0.1&lt;/version&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
  &lt;artifactId&gt;jstl&lt;/artifactId&gt;
  &lt;version&gt;1.2&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p>tld文件内，主要是方法function，通过java类静态方法的定义和引用，在jsp中通过${}方式输出 例如: 则可以${stu:method(params)}的方式输出 tld文件的定义</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;

&lt;taglib xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot;
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd&quot;
        version=&quot;2.0&quot;&gt;

    &lt;description&gt;JSTL 1.1 Global library&lt;/description&gt;
    &lt;display-name&gt;JSTL Global&lt;/display-name&gt;
    &lt;tlib-version&gt;1.1&lt;/tlib-version&gt;
    &lt;short-name&gt;gbl&lt;/short-name&gt;
    &lt;uri&gt;http://java.sun.com/jsp/jstl/stu&lt;/uri&gt;

    &lt;function&gt;
        &lt;description&gt;获得学生名称&lt;/description&gt;
        &lt;name&gt;getStudentName&lt;/name&gt;
        &lt;function-class&gt;com.fsats.synthesis.customizetag.util.GlobalUtil&lt;/function-class&gt;
        &lt;function-signature&gt;java.lang.String getStudentName(int)&lt;/function-signature&gt;
        &lt;example&gt;$&#123;stu:getStudentName(index)&#125;&lt;/example&gt;
    &lt;/function&gt;
&lt;/taglib&gt;</code></pre><p>文件根标签头部是必须的，其次定义描述，显示名称，标签版本，短名称，uri。对于uri可以按示例格式定义，修改后面一个路径就好 然后是function标签，定义方法，依次是描述，名称，方法全类名，方法签名，示例。对于name就是${stu:name},需要正确定义，参数除基本数据类型外，均写完全限定名。可多参数传递。 可以为参数设置为对象类型，对象值可以通过model携带属性传递到jsp的，例如，项目中传递的student属性就是一个student对象，并直接作为参数，不必要再写${}了。 当然参数还可以是自定义的function，例如:${stu:getStudent(stu:getXxx(param))}。</p>
<h3 id="自定义tag文件"><a href="#自定义tag文件" class="headerlink" title="自定义tag文件"></a>自定义tag文件</h3><p>tag自定义文件主要用于对重复jsp代码的自定义，也可以进行其他操作 引用示例: 自定义标签需要使用tagdir属性，路径到tag文件的目录，通过 <strong>前缀:文件名</strong>的方式使用自定义标签 示例是通过id获得对应的Student对象,通过ajax请求返回数据并设置到页面，返回的json数据可进行处理，只是转json的时候中文出现乱码问题没有解决。 在tag文件中，可使用jsp指令，tag，attribute，taglib，include等，不可使用page。也可以添加标签元素和js代码，完全可以当作jsp页面。 另外，只要引用了tld文件，依然是可以用静态方法调用的。</p>
<blockquote>
<p>实例在customizetag包</p>
</blockquote>
<h2 id="Js-Mustache模板引擎"><a href="#Js-Mustache模板引擎" class="headerlink" title="Js Mustache模板引擎"></a>Js Mustache模板引擎</h2><p>Mustache模板引擎需要引入mustache.min.js的js文件，它的官网在<a href="https://github.com/janl/mustache.js">Mustache</a> 官网简单示例:</p>
<pre><code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body onload=&quot;loadUser()&quot;&gt;
&lt;div id=&quot;target&quot;&gt;Loading...&lt;/div&gt;
&lt;script id=&quot;template&quot; type=&quot;x-tmpl-mustache&quot;&gt;
Hello &#123; &#123; name &#125;&#125;!
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

function loadUser() &#123;
  var template = $(&apos;#template&apos;).html();
  var rendered = Mustache.render(template, &#123;name: &quot;Luke&quot;&#125;);
  $(&apos;#target&apos;).html(rendered);
&#125;</code></pre><p>定义script标签，为模板类型，通过{ {}}设置属性,如{ {name}},{ {emp.name}},与${}一个道理。 js代码，先获取模板html，然后如果想要显示列表，那么可以拼接字符串，通过json循环，追加html模板字符串。</p>
<pre><code>Mustache.render(template, &#123;name: &quot;Luke&quot;&#125;);</code></pre><p>该方法可以将模板转换，属性设置，在第二个参数，json格式，key为模板属性名称，值为模板属性值。第一个参数为模板转换的字符串。 翻看view下的mustache文件下的jsp文件以及mustache包下的controller。</p>
<h2 id="jQuery-TreeTable-js"><a href="#jQuery-TreeTable-js" class="headerlink" title="jQuery TreeTable js"></a>jQuery TreeTable js</h2><p>js文件包,statics文件夹下的treeTable文件夹，整个文件夹都是，少了文件可能就导致小三角显示不出来，不能打开关闭树。 默认表格样式不好看，所以添加了bootstrap的表格样式。 先得到list的json字符串，随后通过模板进行append，但要注意的是，模板的tr标签一定要有id和pid属性，一个是该实例id，一个是该实例的父级id。 另外需要通过addRow迭代方法按照顺序append显示，否则它不会自动排序</p>
<pre><code>function addRow(list,tpl,data,pid) &#123;
    for (var i=0;i&lt;data.length;i++)&#123;
        var row = data[i];//获得某一个实例
        //判断该实例的父级id是否是传递来的pid，是则是其子级元素，将追加到后面
        if(row.parentId==pid)&#123;
            $(list).append(Mustache.render(tpl,&#123;area:row,areatype:row.type,pid:pid&#125;));
            addRow(list,tpl,data,row.id);
        &#125;

    &#125;
&#125;</code></pre><p>该排序，简而言之就是，首先循环，判断该父级id是否是传递的父级id，是则是父子级关系，会追加到其父的后面，然后再循环。 按着这个格式写就好。所有完毕后，通过$(“#treeTable”).treeTable({ expandable: true ,expandLevel : 5});显示，expandLevel表示拓展几级。 后台手动创建area list，用gson转为json字符串传递到后台可直接循环。 java类在jquerytreetable包中，jsp在bst/bstable.jsp，最重要的就是statics中包文件的的齐全。</p>
<blockquote>
<p>如果console出现$(‘’).treetabl不是一个函数的话，注意js引入是否正确，以及statics包是否完全导入项目。<br>另外row.type为数值，使用tld静态类时，无法使用，完全被转化为空。</p>
</blockquote>
<h2 id="jquery-DateTimer-jeDate时间控件"><a href="#jquery-DateTimer-jeDate时间控件" class="headerlink" title="jquery DateTimer jeDate时间控件"></a>jquery DateTimer jeDate时间控件</h2><p>添加jeDate插件,添加包到静态文件夹，jsp引入js和css，以及一个test.js文件。test.js文件主要就是定义文本框中日期字符串格式的。自己定义，如果不定义则js中会弹框。并且test.js必须放在body中的随后位置，以保证得到日期文本框的id</p>
<pre><code>&lt;form:form id=&quot;deptForm&quot; action=&quot;$&#123;pageContext.request.contextPath&#125;/dept/save&quot; method=&quot;post&quot; modelAttribute=&quot;dept&quot;&gt;
    &lt;form:label path=&quot;name&quot;&gt;部门名称&lt;/form:label&gt;&lt;form:input path=&quot;name&quot;&gt;&lt;/form:input&gt;&lt;br/&gt;
    &lt;form:label path=&quot;area&quot;&gt;部门面积&lt;/form:label&gt;&lt;form:input path=&quot;area&quot;&gt;&lt;/form:input&gt;&lt;br/&gt;
    &lt;form:label path=&quot;address&quot;&gt;部门地址&lt;/form:label&gt;&lt;form:input path=&quot;address&quot;&gt;&lt;/form:input&gt;&lt;br/&gt;
    &lt;form:label path=&quot;phone&quot;&gt;部门电话&lt;/form:label&gt;&lt;form:input path=&quot;phone&quot;&gt;&lt;/form:input&gt;&lt;br/&gt;
    &lt;form:label path=&quot;establishDate&quot;&gt;成立日期&lt;/form:label&gt;
    &lt;input type=&quot;text&quot; name=&quot;establishDate&quot; value=&quot;&lt;fmt:formatDate value=&quot;$&#123;dept.establishDate&#125;&quot;/&gt;&quot; class=&quot;jeinput&quot; id=&quot;enYMD&quot; placeholder=&quot;YYYY-MM-DD&quot;/&gt;&lt;br/&gt;

    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;
&lt;/form:form&gt;</code></pre><p>对于日期控件，简单的日期，添加倒数第三行那一行就好，但是不能使用form:input控件当作日期文本框，因为这样会导致标签变成字符串。 此日期插件有更多的显示方式，如：面板主题颜色，区域范围，自定义格式，双击弹出，有效无效日期限制，直接显示日历等。 具体可查看jeDate包，也可以看官网<a href="http://www.jemui.com/index.html">JEUI</a>里的jeDate控件。 另外如果你发现引入后导致400 bad request，那么可以详细看看form及其属性标签定义的对不对，如果没问题，<strong>就看你是否有Date，String转换器，这是导致错误的最大可能。</strong>如果是其他报错则查看jsp也main与controller是否编写错误。 StringToDate转换器配置如下:</p>
<pre><code>&lt;mvc:annotation-driven conversion-service=&quot;myConversionService&quot;/&gt;

&lt;bean id=&quot;myConversionService&quot; class=&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;
    &lt;property name=&quot;converters&quot;&gt;
        &lt;set&gt;
            &lt;!-- 引入自己配置的自定义转换器，将String类型转换为Date日期 --&gt;
            &lt;bean class=&quot;com.fsats.synthesis.jqueryvalidate.converter.MyConversionDateToString&quot;&gt;
                &lt;constructor-arg name=&quot;patten&quot; value=&quot;yyyy-MM-dd&quot;/&gt;
            &lt;/bean&gt;
        &lt;/set&gt;
    &lt;/property&gt;
&lt;/bean&gt;</code></pre><blockquote>
<p>java文件在jqueryvalidate包，jsp在jvalidate文件夹下</p>
</blockquote>
<h2 id="jQuery-validate校验框架"><a href="#jQuery-validate校验框架" class="headerlink" title="jQuery validate校验框架"></a>jQuery validate校验框架</h2><p>引入js文件jquery.validate.min.js和messages_zh.js用于中文输出信息,还有必要的jquery.js文件 <a href="http://www.runoob.com/jquery/jquery-plugin-validate.html">jquery validate菜鸟教程</a> <a href="https://jqueryvalidation.org/">jquery validate官网</a>及<a href="https://jqueryvalidation.org/files/demo/">官网演示案例</a></p>
<h3 id="默认标签校验规则"><a href="#默认标签校验规则" class="headerlink" title="默认标签校验规则"></a>默认标签校验规则</h3><p>校验规则众多，许多规则名称，HTML5 Input标签都有。 像是取值为true的，如required、email、url、digits等，都可以直接写在class属性中，也可以单独写成一个属性。maxlength，range带值的这种，如果标签本来就有的就写上去，没有的也可以作为属性并赋值。 完成后，就可以进行校验,如:</p>
<pre><code>$.validator.setDefaults(&#123;
    //使用其他方式代替默认的submit
    submitHandler: function(form) &#123;
        alert(&quot;提交事件!&quot;);
        form.submit();
    &#125;
&#125;);
$(function()&#123;
    $(&quot;#deptForm&quot;).validate();
&#125;)</code></pre><p>测试后，如果不符合条件就会出现默认错误信息。</p>
<h3 id="js设置校验规则"><a href="#js设置校验规则" class="headerlink" title="js设置校验规则"></a>js设置校验规则</h3><p>刚才校验规则都是写在标签里的，可以使用js代码写 rules属性可以设置规则</p>
<pre><code>$(function()&#123;
    $(&quot;#deptForm&quot;).validate(&#123;
        submitHandler: function(form) &#123;
            alert(&quot;提交事件!&quot;);
        &#125;,
        rules:&#123;
            name:&quot;required&quot;,
            address:&quot;required&quot;,
            phone:&#123;
                required:true,
                maxlength:11
            &#125;,
            area:&#123;
                required:true,
                digits:true
            &#125;,
            establishDate:&quot;required&quot;
        &#125;
    &#125;);
&#125;)</code></pre><h3 id="其他方法级问题"><a href="#其他方法级问题" class="headerlink" title="其他方法级问题"></a>其他方法级问题</h3><ol>
<li>使用其他方式代替type=submit提交</li>
</ol>
<p>上面的示例代码是一种，注意:对于$.validator.setDefaults方法，只是设置默认和其他js校验代码，必须设置$(“#deptForm”).validate();才能校验，否则直接提交。 或者:</p>
<pre><code>$().ready(function() &#123;
 $(&quot;#signupForm&quot;).validate(&#123;
        submitHandler:function(form)&#123;
            alert(&quot;提交事件!&quot;);   
            form.submit();
        &#125;    
    &#125;);
&#125;);</code></pre><ol start="2">
<li><p>debug，只验证不提交表单</p>
<p>$(“#signupForm”).validate({</p>
<pre><code>debug:true</code></pre><p>});</p>
</li>
</ol>
<ol start="3">
<li>errorContainer，错误容器</li>
</ol>
<p>显示或者隐藏验证信息，可以自动实现有错误信息出现时把容器属性变为显示，无错误时隐藏，用处不大。 errorContainer: “#messageBox1, #messageBox2” 没有太大用处</p>
<ol start="4">
<li>errorPlacement,更改错误信息显示的位置</li>
</ol>
<p>默认放在元素后面</p>
<pre><code>errorPlacement: function(error, element) &#123;  
    error.appendTo(element.parent());  
&#125;</code></pre><p>你可以修改，函数内的代码段</p>
<ol start="5">
<li><p>定义错误样式,定义类名为error的css即可</p>
</li>
<li><p>异步验证</p>
</li>
</ol>
<p>remote属性 示例:</p>
<pre><code>remote: &#123;
    url: &quot;dept/remote&quot;,     //后台处理程序
    type: &quot;post&quot;,               //数据发送方式
    dataType: &quot;json&quot;,           //接受数据格式   
    data: &#123;                     //要传递的数据
        name: function() &#123;
            return $(&quot;input[name=name]&quot;).val();
        &#125;
    &#125;
&#125;</code></pre><ol start="7">
<li>自定义验证 addMethod(name, method, message);</li>
</ol>
<p>示例:</p>
<pre><code>jQuery.validator.addMethod(&quot;checkPhone&quot;, function(value, element) &#123;
    var tel = /^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\d&#123;8&#125;$/;
    return this.optional(element) || (tel.test(value));
&#125;, &quot;请正确填写您的手机号&quot;);</code></pre><p>校验的话，只需要在rules对应属性中设置，checkPhone:true。或者标签中class=”checkPhone”,或标签属性,checkPhone=”true”。</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jeesite开源项目SSM基础搭建——系统管理释义</title>
    <url>/2018/07/26/%E5%BC%80%E6%BA%90/Jeesite%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AESSM%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA%E2%80%94%E2%80%94%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E9%87%8A%E4%B9%89/</url>
    <content><![CDATA[<p>dbunit技术 maven dbunit导入导出数据库 oracle数据库i 1.jeesite。properties文件需要改配置为oracle 2.pom文件需要改，使用dbunit技术。更改pom的依赖，不同数据库版本，使用不同的jar包； 更改maven-antrun-plugin插件中，target中的配置，property标签 注释mysql，解除oracle注释 dbunit标签，注释mysql的，解除oracle 只要数据导入到数据库中就先启动项目 3项目启动No matching authentication protocol错误异常问题， 解决：在Oracle用户（不是grid用户）下，将$ORACLE_HOME/network/admin/sqlnet.ora文件原来的SQLNET.ALLOWED_LOGON_VERSION=8注释掉（如果没有sqlnet.ora文件，那么就创建一个），修改为如下的行</p>
<pre><code>SQLNET.ALLOWED_LOGON_VERSION_SERVER=8

SQLNET.ALLOWED_LOGON_VERSION_CLIENT=8</code></pre><p>spring jsp自定义标签 tag文件和tld文件 tag文件：自定义控件标签，直接就是自定义的控件标签 tld文件：自定义方法标签通过,${名称:方法名(参数)}的方式调用 Mustache库，render回调函数，模板引擎 模板中变量使用{ {name}}的方式显示值 treeTable 树形网格 jquery validate校验框架 jQuery pagination插件 SpringContextHolder类，静态持有SpringContext引用 package com.thinkgem.jeesite.common.utils;</p>
<pre><code>private static UserDao userDao = SpringContextHolder.getBean(UserDao.class);</code></pre><p>WdatePicker日期插件||jeDate日期控件 跨站脚本XSS又叫CSS (Cross Site Script)。它指的是恶意攻击者往Web页面里插入恶意html代码 将所有传递进来的String进行HTML编码，防止XSS攻击 StringEscapeUtils类，HTML转解码，XML转解码 com.thinkgem.jeesite.common.utils.Encodes类,fns.tld引用 BaseController下的initBinder类 NamedThreadLocal类，多线程模式 jquery jbox通知插件</p>
<h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="区域管理-一般模块"><a href="#区域管理-一般模块" class="headerlink" title="区域管理(一般模块)"></a>区域管理(一般模块)</h3><p>List: 列表页进入，默认显示列表，list方法的请求路径为list和””，那么点击区域管理可直接执行此方法显示列表 列表通过table表显示，使用jQuery treetable树形表格显示，每个tr使用Mustache模板库，来解析，将所有解析的值带入到模板中并追加到tbody中。 将list数据解析为前台js可操纵的json格式，以便可循环设置模板属性值。 通过迭代循环，if判断当前节点id的parentid是否为上次调用传来pid，是则表示为上下级。</p>
<pre><code>addRow(&quot;#treeTableList&quot;, tpl, data, rootId, true);

//list:tbody标签id，tpl为js中解析的模板,data为将areaList解析的json字符串，pid为父id，root表示根节点值
function addRow(list, tpl, data, pid, root)&#123;
    for (var i=0; i&lt;data.length; i++)&#123;
        var row = data[i];
        if (($&#123;fns:jsGetVal(&apos;row.parentId&apos;)&#125;) == pid)&#123;
            //使用js Mustache模板库，render回调设置模板参数和值
            $(list).append(Mustache.render(tpl, &#123;
                dict: &#123;
                    type: getDictLabel($&#123;fns:toJson(fns:getDictList(&apos;sys_area_type&apos;))&#125;, row.type)
                &#125;, 
                pid: (root?0:pid),
                row: row
            &#125;));
            addRow(list, tpl, data, row.id);
        &#125;
    &#125;
&#125;</code></pre><p>Form: 可通过区域操作添加下级区域的超链接，也可以通过添加按钮添加新的区域。 为保证进入Form页时，上级区域有默认值，所以需要有parent.id属性值，这样在进入页面时才能显示。对于点击按钮和超链接都是创建一个空实例，超链接带parent.id属性，所以直接设置parent属性为上级area对象；而对于按钮点击的空实例对象，parent属性就设置为当前用户所在机构的区域对象。 save: 上级区域使用自定义sys标签，选择树treeSelect,默认值value为area实例的parent.id属性值，数据树通过url请求方法返回list 保存前表单通过jquery validate校验 保存消息提示，通过基类BaseController的addMessage方法设置通用Flash消息,并重定向至列表请求。 页面上通过sys的message标签，通过其标签设置显示信息。 delete 删除提示，执行删除，并通过sys:message标签显示消息信息。</p>
<h3 id="字典管理"><a href="#字典管理" class="headerlink" title="字典管理"></a>字典管理</h3><p>List: 列表页进入，默认显示列表，list方法的请求路径为list和””，那么点击字典管理可直接执行此方法显示列表 搜索方法，设置类型和描述，以及可能的page对象,提交到list请求，页面显示。list请求方法，会传递typeList和page对象，页面list通过page.list属性显示，分页使用jQuery pagination插件 form: 依旧是两种，按钮和超链接添加 该添加主要用于新的字典类型添加，按钮将携带sort=10参数 超链接主要是为当前字典类型添加新键值，携带类型，描述和sort参数，sort参数的值为当前sort值+10(这样做可能会导致排序重复，但对于插入操作并无影响) insert: 根据Dict对象显示信息，提交前进行校验,之后方法里，还需要服务端校验，之后返回list请求方法，并携带type参数可只在list显示该类型的字典值 delete： 删除提示，执行删除，返回消息,显示该类型的字典列表</p>
<h3 id="日志查询"><a href="#日志查询" class="headerlink" title="日志查询"></a>日志查询</h3><p>List: 查询日志，设置参数，title，createBy.id，requesturi，begindate，enddate，查询，业务层使用Page对象封装，到list页面显示 list显示通过page.list，判断exception属性是否有值，为空则不显示该列，不为空则显示该异常信息</p>
<pre><code>$&#123;fn:replace(fn:replace(fns:escapeHtml(log.exception), strEnter, &apos;&lt;br /&gt;&apos;), strTab, &apos;&amp;nbsp; &amp;nbsp; &apos;)&#125;</code></pre><p>div.pagination 显示分页div导航 Insert: 使用 com.thinkgem.jeesite.modules.sys.interceptor.LogInterceptor拦截器类 preHandle和postHandle方法用户与计时显示，afterCompletion方法在渲染后执行，可以进行日志记录。 日志记录通过LogUtils类的saveLog方法执行，具体日志保存，通过内部线程类，异步保存日志。title属性值的设置，通过获得@RequiresPermissions注解的value属性值，并通过getMenuNamePath方法解析。</p>
<h3 id="菜单管理"><a href="#菜单管理" class="headerlink" title="菜单管理"></a>菜单管理</h3><p>List: 查询所有菜单，并创建一个新List</p>
<p>通过Menu类的静态sort方法惊醒排序，将sourcelist排好序放在新创建的list中</p>
<pre><code>Menu.sortList(list, sourcelist, Menu.getRootId(), true);

public static void sortList(List&lt;Menu&gt; list, List&lt;Menu&gt; sourcelist, String parentId, boolean cascade)&#123;
    for (int i=0; i&lt;sourcelist.size(); i++)&#123;
        Menu e = sourcelist.get(i);
        if (e.getParent()!=null &amp;&amp; e.getParent().getId()!=null
                &amp;&amp; e.getParent().getId().equals(parentId))&#123;
            list.add(e);
            if (cascade)&#123;
                // 判断是否还有子节点, 有则继续获取子节点
                for (int j=0; j&lt;sourcelist.size(); j++)&#123;
                    Menu child = sourcelist.get(j);
                    if (child.getParent()!=null &amp;&amp; child.getParent().getId()!=null
                            &amp;&amp; child.getParent().getId().equals(e.getId()))&#123;
                        sortList(list, sourcelist, e.getId(), true);
                        break;
                    &#125;
                &#125;
            &#125;
        &#125;
    &#125;
&#125;</code></pre><p>该方法简而言之，从sourcelist中一次获得对象，判断该菜单的父id是否为参数的parentId，则说明是其子类，并添加到list，随后判断该节点是否有子节点，再次循环sourcelise，如果某个菜单id的父id等于刚才被添加到list中的菜单，那么是父子关系则add到list，因为多级菜单，所以用到迭代方法，，只不过第一次调用此方法是，传递parentid是根root。 该代码与区域管理都是tree table，排序的方式也是一样的。不过区域排序是在前台js写的。 form: 还是和区域管理一样，一个按钮，一个超链接创建下级，创建实例时，一个parent为root，一个为当前id。 为传入form页面的新menu对象设置sort值，方式：排序，值通过最大值+30 Save: 上级菜单选项，使用tree select树形选择框，请求路径/sys/menu/treeData。显示树形选择 保存时,验证是否为管理员权限，之后进行服务端参数有效性校验 Delete: 删除,逻辑删除，更新del_flag字段为1 menuTree页面是最左侧导航 menuTreeSelect</p>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>List: 分页显示列表 搜索查询，归属公司，归属部门使用treeselect显示， 用户信息导入导出，请求后台导出信息，file upload导入上传用户信息 form: 根据对象的id值，判断form页如何显示表单 save: jquery validate校验 保存 info: 信息修改保存，基本信息修改 modifyPwd： 密码修改，密码修改前校验</p>
<h3 id="角色管理"><a href="#角色管理" class="headerlink" title="角色管理"></a>角色管理</h3><p>List: 显示list角色信息 edit/insert: 角色授权，树结构，${role.menuIds]与${role.officeIds}如何而来,以及保存方式 Assign角色分配： 为用户分配当前角色 selectUserToRole页面显示 用户 用户与机构 用户与角色 角色 角色与机构 角色与菜单 区域 机构 机构与区域 机构与机构的上下级关系 parent_id,grade 菜单 父子级菜单 字典 按type和key，value。与parentId无关</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java使用阿里云短信服务实现手机验证码注册验证</title>
    <url>/2018/07/22/Java/Java%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B3%A8%E5%86%8C%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h2 id="java使用阿里云短信服务发送短信验证"><a href="#java使用阿里云短信服务发送短信验证" class="headerlink" title="java使用阿里云短信服务发送短信验证"></a>java使用阿里云短信服务发送短信验证</h2><h3 id="查看短信服务API文档"><a href="#查看短信服务API文档" class="headerlink" title="查看短信服务API文档"></a>查看短信服务API文档</h3><p><a href="https://help.aliyun.com/document_detail/55284.html?spm=a2c4g.11186623.6.557.e5v3e6">Java API文档</a></p>
<h3 id="阿里账号短信服务方面设置"><a href="#阿里账号短信服务方面设置" class="headerlink" title="阿里账号短信服务方面设置"></a>阿里账号短信服务方面设置</h3><ol>
<li>创建阿里云账号</li>
<li>开通短信服务，之后获取访问密钥，AccessKeyId和AccessKeySecret，通过添加子账号并赋予短信操作权限，或直接在之前的子账户中添加短信操作权限。创建用户的时候会给你一个密钥</li>
<li>在短信控制台添加短信签名和短信模板，审核时间最多再两个小时以内，短信模板选择验证码</li>
<li>短信模板的id和短信签名的名称需要在代码中用到</li>
</ol>
<h3 id="java操作短信发送"><a href="#java操作短信发送" class="headerlink" title="java操作短信发送"></a>java操作短信发送</h3><ol>
<li><p>添加maven依赖包</p>
<dependency>
      <groupId>org.json</groupId>
      <artifactId>json</artifactId>
      <version>20160810</version>
    </dependency>
    <dependency>
      <groupId>com.aliyun</groupId>
      <artifactId>aliyun-java-sdk-core</artifactId>
      <version>3.7.1</version>
    </dependency>
    <dependency>
      <groupId>com.aliyun</groupId>
      <artifactId>aliyun-java-sdk-dysmsapi</artifactId>
      <version>1.1.0</version>
    </dependency>


</li>
</ol>
<p>这是阿里云短信服务所需要的必要包，其他项目测试需要用的框架包自己添加。</p>
<ol start="2">
<li><p>添加API文档中的样例程序</p>
<p>//设置超时时间-可自行调整<br>System.setProperty(“sun.net.client.defaultConnectTimeout”, “10000”);<br>System.setProperty(“sun.net.client.defaultReadTimeout”, “10000”);<br>//初始化ascClient需要的几个参数<br>final String product = “Dysmsapi”;//短信API产品名称（短信产品名固定，无需修改）<br>final String domain = “dysmsapi.aliyuncs.com”;//短信API产品域名（接口地址固定，无需修改）<br>//替换成你的AK<br>final String accessKeyId = “yourAccessKeyId”;//你的accessKeyId,参考本文档步骤2<br>final String accessKeySecret = “yourAccessKeySecret”;//你的accessKeySecret，参考本文档步骤2<br>//初始化ascClient,暂时不支持多region（请勿修改）<br>IClientProfile profile = DefaultProfile.getProfile(“cn-hangzhou”, accessKeyId,<br>accessKeySecret);<br>DefaultProfile.addEndpoint(“cn-hangzhou”, “cn-hangzhou”, product, domain);<br>IAcsClient acsClient = new DefaultAcsClient(profile);<br> //组装请求对象<br> SendSmsRequest request = new SendSmsRequest();<br> //使用post提交<br> request.setMethod(MethodType.POST);<br> //必填:待发送手机号。支持以逗号分隔的形式进行批量调用，批量上限为1000个手机号码,批量调用相对于单条调用及时性稍有延迟,验证码类型的短信推荐使用单条调用的方式；发送国际/港澳台消息时，接收号码格式为00+国际区号+号码，如“0085200000000”<br> request.setPhoneNumbers(“1500000000”);<br> //必填:短信签名-可在短信控制台中找到<br> request.setSignName(“云通信”);<br> //必填:短信模板-可在短信控制台中找到<br> request.setTemplateCode(“SMS_1000000”);<br> //可选:模板中的变量替换JSON串,如模板内容为”亲爱的${name},您的验证码为${code}”时,此处的值为<br> //友情提示:如果JSON中需要带换行符,请参照标准的JSON协议对换行符的要求,比如短信内容中包含\r\n的情况在JSON中需要表示成\r\n,否则会导致JSON在服务端解析失败<br> request.setTemplateParam(“{&quot;name&quot;:&quot;Tom&quot;, &quot;code&quot;:&quot;123&quot;}”);<br> //可选-上行短信扩展码(扩展码字段控制在7位或以下，无特殊需求用户请忽略此字段)<br> //request.setSmsUpExtendCode(“90997”);<br> //可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者<br> //request.setOutId(“yourOutId”);<br>//请求失败这里会抛ClientException异常<br>SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);<br>if(sendSmsResponse.getCode() != null &amp;&amp; sendSmsResponse.getCode().equals(“OK”)) {<br>//请求成功<br>}</p>
</li>
<li><p>只需修改密钥所用的两个属性；</p>
</li>
<li><p>setPhoneNumbers方法，值为注册手机号码；</p>
</li>
<li><p>短信模板id和短信签名名称；</p>
</li>
<li><p>模板参数：填写模板时，${code}就是参数，可以自行添加</p>
</li>
</ol>
<p>最后sendSmsResponse对象的getCode方法可以活的响应码，返回OK码即发送成功。 SendSmsRequest对象即请求对象，其设置的参数，就包含上面的四个属性，详细的有 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180722160432.png" alt="入参列表"> SendSmsResponse对象即响应对象，其属性如下 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180722160500.png" alt="出参列表"></p>
<h3 id="前后台页面设置"><a href="#前后台页面设置" class="headerlink" title="前后台页面设置"></a>前后台页面设置</h3><h4 id="前台设置"><a href="#前台设置" class="headerlink" title="前台设置"></a>前台设置</h4><p>添加form表单，添加phone，checkcode文本框和button表单按钮 步骤: 当点击该按钮时，获得电话号码，并发送ajax请求，后台通过phone执行消息发送，这边前台将执行success函数，在其中设置timer函数计时。 注:如下情况都没有写出，只是测试一个短信发送。将在之后写出详细的代码 1. 电话号码验证，用户名验证等没有写； 2. 后台随机验证码没有写，可通过一个表来解决,以避免session域数据过多导致压力增大 3. 后台的验证码有效时间，就可以通过表解决，一个号码对相应一个验证码和一个时间，如若超过有效期，则无法注册,重新发送 4. 验证码失效，后台传递信息提示前台 5. 单击注册按钮前，进行ajax验证 验证码，不过不对则，拒绝注册请求 <strong>代码:</strong></p>
<pre><code>$(function()&#123;
    var curcount = 0;
    var intervalTimer = null;
    $(&quot;input[type=button]&quot;).click(function()&#123;
        var phone = $(&quot;input[name=phone]&quot;).val();
        $.post(&quot;check&quot;,&#123;phone:phone&#125;,function(data)&#123;
            if(data==&quot;true&quot;)&#123;
                curcount= 60;
                //设置按钮禁用
                $(&quot;input[type=button]&quot;).attr(&quot;disabled&quot;,&quot;disabled&quot;);
                //循环回调函数，每一秒均设置按钮显示的秒数
                intervalTimer = window.setInterval(function()&#123;
                    $(&quot;#send&quot;).val(&quot;请&quot;+curcount+&quot;后重新发送&quot;);
                    curcount = curcount-1;
                    timer(curcount);//每次循环，每次调用判断
                &#125;,1000);
            &#125;
        &#125;);
    &#125;);
    //计时判断，当读秒为0时，恢复按钮可用
    function timer(curcount)&#123;
        if(curcount==0)&#123;
            window.clearInterval(intervalTimer);// 停止计时器
            $(&quot;input[type=button]&quot;).removeAttr(&quot;disabled&quot;);// 启用按钮
            $(&quot;input[type=button]&quot;).val(&quot;发送验证码&quot;);
        &#125;
    &#125;

&#125;);</code></pre><h4 id="后台设置"><a href="#后台设置" class="headerlink" title="后台设置"></a>后台设置</h4><p>如果使用的时Spring MVC框架，则在方法上添加@ResponseBody注解，返回一个值或json字符串，注意添加了Gson的json包。 后台代码就是上面的代码，修改一下信息，方法就是普通的ajax请求方法。 之后完整的代码在后面写出来。 <a href="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/dysmsapi.zip">目前代码示例</a> 项目使用IDEA+Maven</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>JAXB——从Java对象到XML的序列化和反序列化</title>
    <url>/2018/07/07/Java/JAXB%E2%80%94%E2%80%94%E4%BB%8EJava%E5%AF%B9%E8%B1%A1%E5%88%B0XML%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="JAXB"><a href="#JAXB" class="headerlink" title="JAXB"></a>JAXB</h2><p>JAXB（Java Architecture for XML Binding) 是一个业界的标准，是一项可以根据XML Schema产生Java类的技术。该过程中，JAXB也提供了将XML实例文档反向生成Java对象树的方法，并能将Java对象树的内容重新写到XML实例文档。从另一方面来讲，JAXB提供了快速而简便的方法将XML模式绑定到Java表示，从而使得Java开发者在Java应用程序中能方便地结合XML数据和处理函数。 哔哔说了那么多，简单地说就是，Java对象生成XML文档，XML文档反向生成Java对象。</p>
<h4 id="在JDK中JAXB重要的类和接口-抽象类"><a href="#在JDK中JAXB重要的类和接口-抽象类" class="headerlink" title="在JDK中JAXB重要的类和接口/抽象类"></a>在JDK中JAXB重要的类和接口/抽象类</h4><ul>
<li>JAXB类：提供marshaller和unmarshaller方法，用来序列化和反序列化。</li>
<li>JAXBContext类:应用的入口，创建自身实例，创建Marshaller,Ummarshaller,Binder实例</li>
<li>Marshaller接口:将Java对象序列化为XML数据</li>
<li>Unmarshaller接口:将XML数据反序列化为Java对象</li>
</ul>
<h4 id="在JDK中JAXB重要的注解"><a href="#在JDK中JAXB重要的注解" class="headerlink" title="在JDK中JAXB重要的注解"></a>在JDK中JAXB重要的注解</h4><ul>
<li>@XmlRootElement：将Java类或枚举类型映射到XML元素,该元素唯一，并且作为XML根元素</li>
<li>@XmlElement：将Java类的一个属性映射到与属性同名的一个XML元素</li>
<li>@XmlAttribute：将Java类的一个属性映射到与属性同名的一个XML属性</li>
<li>@XmlType：将Java类或枚举类型映射到XML模式类型，propOrder属性定义字段生成的XML节点顺序</li>
<li>@XmlAccessorType(XmlAccessType.FIELD)：控制字段或属性的序列化,<strong>FIELD</strong>表示自动绑定Java类中的每个非静态的，非瞬态的字段到XML，除非@XmlTransient，<strong>PROPERTY</strong>表示绑定Java中所有getter/setter的属性到XML，除非标识了@XmlTransient,<strong>PUBLIC_MEMBER</strong>表示每个public修饰的成员变量和每个通过公共getter/setter访问的变量自动绑定到XML,除非标识了@XmlTransient，<strong>NONE</strong>表示所有属性都不映射到XML,除非使用专门注解(@XmlElement或@XmlAttribute等专门标注的)。</li>
<li>@XmlAccessorOrder：控制JAXB绑定类中的属性和字段的排序,XmlAccessOrder枚举的<strong>UNDEFINED</strong>值表示不定义排序,<strong>ALPHABETICAL</strong>表示按字母顺序排序</li>
<li>@XmlElementWrapper：对于数组或集合，生成一个包装该数组或集合的XML元素(包装器)</li>
<li>@XmlJavaTypeAdapter:使用定制的适配器（即扩展抽象类XmlAdapter并覆盖marshal()和unmarshal()方法）</li>
<li>@XmlTransient：对于标注了此注解的java属性，将不被映射。</li>
</ul>
<h4 id="简单的类转换"><a href="#简单的类转换" class="headerlink" title="简单的类转换"></a>简单的类转换</h4><pre><code>@XmlRootElement
@XmlAccessorType
@XmlType
public class Student implements Serializable&#123;

    private static final long serialVersionUID = -7928946466770112840L;

    public Student() &#123;
    &#125;

    public Student(Integer id, String name, Integer age, String sex, String address) &#123;
        this.id = id;
        this.name = name;
        this.age = age;
        this.sex = sex;
        this.address = address;
    &#125;

    private Integer id;
    private String name;

    private Integer age;
    private String sex;
    private String address;

    public Integer getId() &#123;
        return id;
    &#125;

    public void setId(Integer id) &#123;
        this.id = id;
    &#125;

    public String getName() &#123;
        return name;
    &#125;

    public void setName(String name) &#123;
        this.name = name;
    &#125;
    @XmlAttribute
    public Integer getAge() &#123;
        return age;
    &#125;


    public void setAge(Integer age) &#123;
        this.age = age;
    &#125;

    public String getSex() &#123;
        return sex;
    &#125;

    public void setSex(String sex) &#123;
        this.sex = sex;
    &#125;

    public String getAddress() &#123;
        return address;
    &#125;

    public void setAddress(String address) &#123;
        this.address = address;
    &#125;

    @Override
    public String toString() &#123;
        return &quot;Student&#123;&quot; +
                &quot;id=&quot; + id +
                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +
                &quot;, age=&quot; + age +
                &quot;, sex=&apos;&quot; + sex + &apos;\&apos;&apos; +
                &quot;, address=&apos;&quot; + address + &apos;\&apos;&apos; +
                &apos;&#125;&apos;;
    &#125;</code></pre><p>测试:</p>
<pre><code>Student student = new Student(1,&quot;Chen&quot;,19,&quot;男&quot;,&quot;北京丰台&quot;);
File file = new File(&quot;student.xml&quot;);

JAXBContext jaxbContext = JAXBContext.newInstance(Student.class);
Marshaller marshaller = jaxbContext.createMarshaller();
marshaller.setProperty(Marshaller.JAXB_ENCODING, &quot;UTF-8&quot;);
marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
marshaller.setProperty(Marshaller.JAXB_FRAGMENT, false);
marshaller.marshal(student, file);
System.out.println(&quot;序列化完成&quot;);
或
JAXB.marshal(student,file);

//反序列化
File file = new File(&quot;student.xml&quot;);
JAXBContext jaxbContext = null;

jaxbContext = JAXBContext.newInstance(Student.class);
Unmarshaller marshaller = jaxbContext.createUnmarshaller();
Student student = (Student) marshaller.unmarshal(file);
System.out.println(student);
或
JAXB.unmarshal(file, Student.class);</code></pre><ol>
<li><p>在为实体类添加注解时，向@XmlElement,@XmlAttrbute,@XmlTransient都放在getter方法上,以避免放在私有属性上导致重复映射报错。</p>
</li>
<li><p>@XmlAccessorType注解的四个值用于指定什么情况将什么字段进行映射</p>
</li>
<li><p>@XmlType注解的propOrder属性用于列出属性映射的顺序，但如果某个值为空或未映射，将发生错误。如果不指定顺序，将出现未知的顺序。</p>
</li>
<li><p>如果想直接系列化或反序列化，可以直接使用JAXB的静态方法。如果需要在转换前设置一些必要的参数，可以通过创建Marshaller实例设置，和Unmarshaller都由JAXBContext对象创建的。JAXB的静态。</p>
</li>
<li><p>如果你指定了propOrder属性，那么除了标注了@XmlTransient注解的，其他的都必须写在属性中。</p>
</li>
</ol>
<h4 id="简单对象处理"><a href="#简单对象处理" class="headerlink" title="简单对象处理"></a>简单对象处理</h4><p>将对象类型作为实体类的一个属性，设置与实体类一致。</p>
<pre><code>@XmlRootElement
@XmlAccessorType
@XmlType(propOrder = &#123;&quot;school&quot;,&quot;grade&quot;,&quot;classes&quot;&#125;)
public class Classes &#123;

    public Classes() &#123;
    &#125;

    public Classes(String school, String grade, String classes) &#123;
        this.school = school;
        this.grade = grade;
        this.classes = classes;
    &#125;
    //学校
    private String school;
    //年级
    private String grade;
    //班级
    private String classes;

    public String getSchool() &#123;
        return school;
    &#125;

    public void setSchool(String school) &#123;
        this.school = school;
    &#125;

    public String getGrade() &#123;
        return grade;
    &#125;

    public void setGrade(String grade) &#123;
        this.grade = grade;
    &#125;
    @XmlElement(name = &quot;class&quot;)
    public String getClasses() &#123;
        return classes;
    &#125;

    public void setClasses(String classes) &#123;
        this.classes = classes;
    &#125;

    @Override
    public String toString() &#123;
        return &quot;Classes&#123;&quot; +
                &quot;school=&apos;&quot; + school + &apos;\&apos;&apos; +
                &quot;, grade=&apos;&quot; + grade + &apos;\&apos;&apos; +
                &quot;, classes=&apos;&quot; + classes + &apos;\&apos;&apos; +
                &apos;&#125;&apos;;
    &#125;
&#125;</code></pre><p>测试</p>
<pre><code>Student student = new Student(1,&quot;Chen&quot;,19,&quot;男&quot;,&quot;北京丰台&quot;);
student.setClasses(new Classes(&quot;xxx学校&quot;,&quot;三年级&quot;,&quot;十一班&quot;));
File file = new File(&quot;class-student.xml&quot;);
JAXB.marshal(student, file);</code></pre><ol>
<li>如果要指定对象属性的xml元素名称，在@XmlRootElement中指定是不起作用的，必需要在实体类的对象属性getter方法上通过@XmlElement的name属性指定。</li>
</ol>
<h4 id="集合对象的操作"><a href="#集合对象的操作" class="headerlink" title="集合对象的操作"></a>集合对象的操作</h4><p>需要在集合对象上添加@XmlElementWrapper注解 注释Student类中的Classes对象以及propOrder属性中的值，然后我们再重新创建一个Classes2类</p>
<pre><code>@XmlRootElement
@XmlAccessorType
@XmlType(propOrder = &#123;&quot;grade&quot;,&quot;classs&quot;,&quot;student&quot; &#125;)
public class Classes2 implements Serializable &#123;

    public Classes2() &#123;
    &#125;

    public Classes2(String grade, String classs) &#123;
        this.grade = grade;
        this.classs = classs;
    &#125;

    private static final long serialVersionUID = 3265433234257907279L;

    private String grade;
    //class不可用，直接在后面加个s吧
    private String classs;

    private List&lt;Student&gt; student;

    @XmlAttribute
    public String getGrade() &#123;
        return grade;
    &#125;

    public void setGrade(String grade) &#123;
        this.grade = grade;
    &#125;
    @XmlAttribute
    public String getClasss() &#123;
        return classs;
    &#125;

    public void setClasss(String classs) &#123;
        this.classs = classs;
    &#125;
    @XmlElementWrapper(name = &quot;students&quot;)
    public List&lt;Student&gt; getStudent() &#123;
        return student;
    &#125;

    public void setStudent(List&lt;Student&gt; student) &#123;
        this.student = student;
    &#125;

    @Override
    public String toString() &#123;
        return &quot;Classes2&#123;&quot; +
                &quot;grade=&apos;&quot; + grade + &apos;\&apos;&apos; +
                &quot;, classs=&apos;&quot; + classs + &apos;\&apos;&apos; +
                &quot;, students=&quot; + student +
                &apos;&#125;&apos;;
    &#125;
&#125;</code></pre><p>测试</p>
<pre><code>Classes2 classes2 = new Classes2(&quot;三年级&quot;,&quot;十一班&quot;);
List&lt;Student&gt; students = new ArrayList&lt;Student&gt;();

Student student1 = new Student(123,&quot;Chen&quot;,19,&quot;男&quot;,&quot;北京丰台&quot;);
Student student2 = new Student(124,&quot;Li&quot;,19,&quot;女&quot;,&quot;北京丰台&quot;);
students.add(student1);
students.add(student2);
classes2.setStudent(students);

JAXB.marshal(classes2, file);

//反序列化
File file = new File(&quot;class-student.xml&quot;);
Classes2 classes2 = JAXB.unmarshal(file, Classes2.class);
System.out.println(classes2);</code></pre><ol>
<li><p>在不加上@XmlElementWrapper注解时，是没问题的，只是直接把多个student显示出来了，外层parent没有一个students元素包裹着，如果你指定这个注解，那么外侧就会包裹住了。可根据自己的情况。</p>
</li>
<li><p>集合属性的属性名作为每个集合元素的xml名称，而@XmlElementWrapper注解指定的name值将是包裹外侧元素的名称。所以建议集合属性名称不带s，而注解的name值带s。</p>
</li>
<li><p>属性的顺序也是可以在propOrder属性中指定的,其中属性作为属性的顺序，元素作为元素的顺序。</p>
</li>
<li><p>不管如何操作，都肯定涉及到文件，那就会有FileNotFoundException的异常，所以需要捕获，我这里既没有写了,开发中使用以防万一。</p>
</li>
</ol>
<h4 id="格式化处理"><a href="#格式化处理" class="headerlink" title="格式化处理"></a>格式化处理</h4><p>修改Student类，添加birth属性,（别忘了propOrder添加birth）,并配置日期转换适配器</p>
<pre><code>public class DateFormtAdapter extends XmlAdapter&lt;String,Date&gt; &#123;

    private static DateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);

    public Date unmarshal(String v) throws Exception &#123;
        return format.parse(v);
    &#125;

    public String marshal(Date v) throws Exception &#123;
        return format.format(v);
    &#125;
&#125;


@XmlJavaTypeAdapter(DateFormtAdapter.class)
public Date getBirth() &#123;
    return birth;
&#125;</code></pre><p>之后只需要为Student对象setBirth属性就好。 <strong>注:如果你在测试中出现了问题，则注意看测试下面的1,2,3,4标号问题，是否出现了一些失误。</strong></p>
<h4 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h4><p>使用idea开发工具，maven项目，mavenHelper插件更利于maven依赖包管理 <a href="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/learnxml.rar">下载地址</a></p>
]]></content>
      <categories>
        <category>XML</category>
      </categories>
      <tags>
        <tag>JAXB</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>XML的使用——DOM4J以及XPath语法</title>
    <url>/2018/07/06/XML/XML%E7%9A%84%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94DOM4J%E4%BB%A5%E5%8F%8AXPath%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="dom4J"><a href="#dom4J" class="headerlink" title="dom4J"></a>dom4J</h2><p>基于Java Collections Framework的XML文档对象模型 <a href="https://dom4j.github.io">官网地址及文档</a> maven pom添加依赖</p>
<pre><code> &lt;dependency&gt;
    &lt;groupId&gt;org.dom4j&lt;/groupId&gt;
    &lt;artifactId&gt;dom4j&lt;/artifactId&gt;
    &lt;version&gt;2.1.1&lt;/version&gt;
&lt;/dependency&gt;</code></pre><h4 id="创建XML"><a href="#创建XML" class="headerlink" title="创建XML"></a>创建XML</h4><p>首先通过DocumentHelper对象创建一个Document实例。 然后通过Element设置元素节点 最后可通过document.write写到文件中，或者通过OutputFormat对象和XMLWriter对象打印出特定格式和特定设置的文件</p>
<pre><code>//获得Document对象
Document document = DocumentHelper.createDocument();

//开始建立dom树根元素
Element bookstoreEle = document.addElement(&quot;bookstore&quot;);

//创建子元素
Element bookEle = bookstore.addElement(&quot;book&quot;);

Element bookNameEle = bookEle.addElement(&quot;bookName&quot;).addText(&quot;巴黎圣母院&quot;);
Element priceEle = bookEle.addElement(&quot;price&quot;).addText(&quot;20&quot;);
Element authorEle = bookEle.addElement(&quot;author&quot;).addText(&quot;雨果&quot;);

//直接写入到文件
//document.write(new FileWriter(&quot;bookstore.xml&quot;));
或

//设置xml格式和参数
OutputFormat format = OutputFormat.createPrettyPrint();
FileOutputStream outputStream = new FileOutputStream(new File(&quot;bookstore.xml&quot;));
XMLWriter writer = new XMLWriter(outputStream,format);
//是否转义
writer.setEscapeText(false);
writer.write(document);</code></pre><p>Element对象还有很多方法，根据方法名能判断该方法是干什么的。 在创建之前，不仅可以设置xml的输出格式,还可以自己通过OutputFormat对象设置一些属性。 以及设置DocumentType,XMLEncoding,以及EntityResolver解析器(XML解析器，默认是SAXEntityResolver),都可以在Document中设置，然后在解析时再获得。</p>
<h4 id="解析xml"><a href="#解析xml" class="headerlink" title="解析xml"></a>解析xml</h4><p>首先需要通过File文件获得Document对象，再通过iterator迭代器循环得到元素。</p>
<pre><code>//实例化SAXReader对象,并获得Document
SAXReader reader = new SAXReader();
Document document = reader.read(file);
//获得xml的根节点
Element rootEle = document.getRootElement();

//1.通过迭代器的方式获得该元素的子节点
Iterator iterator = rootEle.element(&quot;book&quot;).elementIterator();
while(iterator.hasNext())&#123;
    Element element = (Element) iterator.next();
    System.out.println(element.getName() +&quot;---&quot; + element.getText());
&#125;

//2.通过elements的方式遍历子节点
List&lt;Element&gt; elements = rootEle.element(&quot;chanel&quot;).elements();
for (Element element:elements)&#123;
    System.out.println(element.getName()+ &quot;----&quot; + element.getText());
&#125;

//3.通过xpath的方式遍历子节点
List&lt;Node&gt; nodes = rootEle.selectNodes(&quot;//chanel&quot;);
if (nodes.get(0) instanceof Element)&#123;
    Element element = (Element) nodes.get(0);
    System.out.println(element.elements().size());
&#125;</code></pre><p>除了遍历元素Element之外，还可以遍历该元素的所有属性。 通过attributeIterator()方法,attributes()等，以及通过索引获得。 Element对象的部分方法 <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180706144222.png" alt="Element的部分Element开头方法"> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180706144254.png" alt="Element的部分attribute开头方法"> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180706145854.png" alt="Element的部分attribute开头方法"> Element.element(String s)表示获得某个子节点的Element对象 Element.elements()表示获得该节点元素的所有子节点集合 Element.selectNodes(String s)方法通过xpath语法获得一个节点集合 如果想跟方便的看文档获得方法说明，建议使用idea+maven+mavenHelper插件，通过mavenHelper插件下载包的source和documention</p>
<h4 id="Document对象的其他操作"><a href="#Document对象的其他操作" class="headerlink" title="Document对象的其他操作"></a>Document对象的其他操作</h4><ol>
<li><p>将document对象或Node，Element，Attribute，通过asXML()方法转换成字符串</p>
<p>Document document = …;<br>String text = document.asXML();</p>
</li>
</ol>
<p>或者通过DocumentHelper对象的parseText()方法将字符串转换为Document对象</p>
<pre><code>String text = &quot;&lt;person&gt; &lt;name&gt;James&lt;/name&gt; &lt;/person&gt;&quot;;
Document document = DocumentHelper.parseText(text);</code></pre><ol start="2">
<li><p>获得文档的类型，字符编码</p>
<p>System.out.println(document.getDocType());<br>System.out.println(document.getXMLEncoding());</p>
</li>
</ol>
<p>需判断DocType是否为空，它将获得DocumentType对象，在生成XML时，通过Document对象设置documentType属性。</p>
<ol start="3">
<li><p>通过Element实例获得path路径</p>
<p>document.getPath(Element e);</p>
</li>
</ol>
<p>以及各节点对象的节点类型，getNodeType()可获得节点类型的short值，getNodeTypeName()获得节点类型的名称。 getPath()获得节点对象的所在路径</p>
<h4 id="XPath语法"><a href="#XPath语法" class="headerlink" title="XPath语法"></a>XPath语法</h4><p>XPath 使用路径表达式来选取 XML 文档中的节点或者节点集。这些路径表达式和我们在常规的电脑文件系统中看到的表达式非常相似。 需添加依赖包</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;jaxen&lt;/groupId&gt;
    &lt;artifactId&gt;jaxen&lt;/artifactId&gt;
    &lt;version&gt;1.1.6&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p>然后通过任意节点类型的selectNodes方法和selectSingleNode方法，并设置xpath值，返回List<Node>或Node对象 <strong>选取节点</strong> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180706150204.png" alt="选取节点"> <strong>查找特定节点或某个指定值的节点</strong> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180706150225.png" alt="获得特定或指定值或范围的节点"> <strong>选取未知节点</strong> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180706150237.png" alt="选取未知节点"> <strong>通过|符号选取若干路径</strong> <img src="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/20180706150246.png" alt="通过|符号选取若干路径"></p>
<h4 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h4><p>使用idea开发工具，maven项目，mavenHelper插件更利于maven依赖包管理 <a href="https://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/07/learnxml.rar">下载地址</a></p>
]]></content>
      <categories>
        <category>XML</category>
      </categories>
      <tags>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle序列Sequence</title>
    <url>/2018/06/27/Oracle/Oracle%E5%BA%8F%E5%88%97Sequence/</url>
    <content><![CDATA[<h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>序列是一个数据库对象，对个用户可以从种生成唯一整数。我们可以使用序列自动生成主键值。 生成序列时，顺序会递增，而与事务提交或回滚无关。</p>
<h4 id="创建序列"><a href="#创建序列" class="headerlink" title="创建序列"></a>创建序列</h4><p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/06/create_sequence.gif" alt=""> <strong>语法:</strong></p>
<pre><code>CREATE SEQUENCE [schema.]sequence_name
    [START WITH integer]     
    [INCREMENT BY integer]     
    [MAXVALUE integer | [NOMAXVALUE]]
    [MINVALUE integer | [NOMINVALUE]]
    [CYCLE | NOCYCLE]   
    [CACHE integer | NOCACHE]
    [ORDER | NOORDER]
    [KEEP | NO KEEP]
    [SESSION | GLOBAL]</code></pre><p><strong>语法说明:</strong></p>
<ul>
<li><p>START WITH integer：生成的第一个列序号，对于升序默认为序列最小值，降序默认为序列最大值</p>
</li>
<li><p>INCREMENT BY integer：增量，默认１，为正则升序，为负为降序</p>
</li>
<li><p>MAXVALUE integer | [NOMAXVALUE]：生成最大值 ,NOMAXVALUE指默认升序最大10的27次方,降序最大-1</p>
</li>
<li><p>MINVALUE integer | [NOMINVALUE]：生成最小值,NOMINVALUE默认升序最小1,降序最小负10的26次方</p>
</li>
<li><p>CYCLE | NOCYCLE：那个序列达到最小或最大后，是否继续从头开始生成，默认CYCLE</p>
</li>
<li><p>CACHE integer | NOCACHE：加快速度，预先分配列序号，默认缓存20个</p>
</li>
<li><p>ORDER | NOORDER：是否按请求顺序生成序列号，默认NOORDER</p>
<p>CREATE SEQUENCE seq_pri</p>
<pre><code>START WITH 10
INCREMENT BY 1
MAXVALUE 2000
NOCYCLE
CACHE 30;</code></pre></li>
</ul>
<h4 id="使用序列"><a href="#使用序列" class="headerlink" title="使用序列"></a>使用序列</h4><p>使用NEXTVAL和CURRVAL伪列来访问该序列的值，可以从伪列中选择值，但不能操作它们的值。</p>
<ul>
<li><p>NEXTVAL：创建序列后第一次使用返回初始值，再引用时通过INCREMENT BY增加序列值。</p>
</li>
<li><p>CURRVAL：返回序列的当前值</p>
<p>INSERT INTO product VALUES(seq_pri.NEXTVAL,’网易小风扇’,59.00,255,NULL);<br>INSERT INTO product VALUES(seq_pri.NEXTVAL,’网易黑凤梨女生版’,129.00,1200,NULL);<br>COMMIT;</p>
</li>
</ul>
<h4 id="修改序列"><a href="#修改序列" class="headerlink" title="修改序列"></a>修改序列</h4><p><strong>语法:</strong></p>
<pre><code>ALTER SEQUENCE [schema.]sequence_name
    [INCREMENT BY integer]
    [MAXVALUE integer | NOMAXVALUE]
    [MINVALUE integer |  NOMINVALUE]
    [CYCLE | NOCYCLE]
    [CACHE integer | NOCACHE]
    ...;</code></pre><p>对于已经创建的序列，无法修改初始值。</p>
<h4 id="删除序列"><a href="#删除序列" class="headerlink" title="删除序列"></a>删除序列</h4><pre><code>DROP SEQUENCE [schema.]sequence_name;</code></pre><p>可以为一个或多个表使用相同的序列。 单个序列号可能会跳过，导致不连续情况，一般情况有:</p>
<ul>
<li>如果事务回滚，且依然连续使用NEXTVAL会导致序列不连续，导致除 回滚前最后一条NEXTVAL语句 之前的序列号断掉。你只能获得最后一条的值，通过CURRVAL得到。</li>
<li>大量请求是，为了申请序列更快，允许通过CACHE提前将n个序列存到内存中，而如果数据库服务器重启，断点等情况也会导致内存序列丢失。</li>
</ul>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle事务和锁</title>
    <url>/2018/06/27/Oracle/Oracle%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81/</url>
    <content><![CDATA[<h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>事务在数据库中主要用于保证数据的一致性，防止出现错误的数据。事务内的语句被看成一个单元，一旦有一个失败，那么所有的都会失败。在编程过程中经常用到事务。</p>
<h4 id="认识事务"><a href="#认识事务" class="headerlink" title="认识事务"></a>认识事务</h4><p>事务就是一组包含一条或多条语句的逻辑单元，事务中的与具备作为一个整体，要么一起被提交，要么回滚。提交后数据将会永久保存。 对于银行转账操作中的事务来说，有以下3步完成: 1. 源账户减少金额1000 2. 目标账户增加存储金额1000 3. 事务日志中记录该事务 在整个交易过程，我们看做一个事务，如果操作失败事务便会回滚，将事务中的操作撤销，回到原始情况，如果操作成功则对数据库永久修改。一旦事务提交就不能回滚了。 Oracle控制事务的语句有以下几个:</p>
<ul>
<li>SET TRANSACTION：设置事务的属性</li>
<li>COMMIT：提交事务</li>
<li>SAVEPOINT：设置保存点</li>
<li>ROLLBACK：回滚事务</li>
<li>ROLLBACK TO SAVEPOINT：回滚至保存点</li>
</ul>
<h5 id="事务的使用类型"><a href="#事务的使用类型" class="headerlink" title="事务的使用类型"></a>事务的使用类型</h5><ol>
<li><p><strong>显式方式：</strong>显式事务，就是手动通过命令完成</p>
</li>
<li><p><strong>隐式方式：</strong>该类型的事务没有明确的开始和结束标志，由数据库自动开启，设置AUTOCOMMIT设置是否自动提交。</p>
</li>
</ol>
<pre><code>SET AUTOCOMMIT ON/OFF</code></pre><p>默认为关闭状态，当程序执行DDL语言时会自动提交，失败会自动回滚。只有打开后每次执行的DML操作才会自动提交。 什么时候事务会结束:</p>
<ul>
<li>使用COMMIT事务提交或ROLLBACK事务回滚</li>
<li>执行DDL语句，事务自动提交。数据定义语言，CREATE、DROP、GRANT等</li>
<li>正常退出SQL*Plus时自动提交事务，非正常退出则ROLLBACK事务回滚</li>
</ul>
<h4 id="事务ACID特性"><a href="#事务ACID特性" class="headerlink" title="事务ACID特性"></a>事务ACID特性</h4><p><strong>Atomic原子性</strong> 指事务是数据库的逻辑工作单位，事务包含的所有操作要么都完成，要么都不完成 <strong>Consistency一致性</strong> 事务的执行结果必须从一个一致性状态转换为另一个一致性状态，也就是说，在事务之前数据库的数据与事务之后数据数据处于一致，不能A账户+1000，B账户确被迫中断没有更改，这样就处于了不一致性。 <strong>lsolation隔离性</strong> 一个事务的执行不能被其他事务干扰，当多个用户并发访问数据库，操作同一张表，数据库为每个用户开启的事务，不能被其他事务干扰，多个事物之间要相互隔离。对于数据库的隔离级别，数据库提供了多种隔离级别。 <strong>Durability持久性</strong> 事务一旦被提交了，那么对数据库的改变将是永久的，即便在断电或数据库系统故障下也不会丢失提交事务的操作。</p>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>锁出现在数据共享的环境中，它是一种机制，在访问相同资源时，可以防止事务之间的破坏性交互。在多个会话同时操作某表时，优先操作的回话需要对其锁定。</p>
<h4 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h4><p>Oracle中分为两种模式的锁，一种是排它锁(X锁)，另一种是共享锁(S锁)。</p>
<ul>
<li>排它锁也叫写锁。它禁止资源的共享，用作数据的修改。假如有事务T给数据A加上该锁，那么么其他事务将不能为A添加任何锁，因此只允许T对该数据进行读取和修改，直到失误完成将该锁释放为止。</li>
<li>共享锁也叫读锁。该模式下的数据只能被读取，不能被修改。如果有事务T给数据A加上共享锁后，那么其他事务不能对其加排它锁，只能加共享锁。加了该锁的数据可以被并发地读取。</li>
</ul>
<p>锁是实现并发地主要手段。</p>
<h4 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h4><p>Oracle为了使数据库实现高度的并发访问，它使用了不同类型的锁来管理并发会话对数据对象操作。按作用对象分为以下几种:</p>
<ul>
<li>DML锁：该类型的锁被称为数据锁，用于保护数据。</li>
<li>DDL锁：可以保护模式中的对象结构。</li>
<li>内部锁：保护数据库的内部结构。</li>
</ul>
<p>其中DML锁保证的并发访问时数据的完整性。如果再细分可分为以下两种：</p>
<ol>
<li><p>行级锁(TX),也可以成为事务锁。当修改表中的某行记录时，需要对将要修改的记录加行级锁，防止两个事务同时修改相同记录，事务结束，该锁也会释放，是粒度最小的锁。该锁只能属于排它锁(X锁)。</p>
</li>
<li><p>表级锁(TM)，主要作用是防止在修改表的数据时，表的结构发生变化。</p>
</li>
</ol>
<p>表级锁包含如下几种模式:</p>
<ul>
<li>ROW SHARE，行级共享锁(RS)。该模式下不许与其他并行会话对同一张表使用排他锁，但允许利用DML语句或lock命令锁定同一张表的其他记录。</li>
<li>ROW EXCLUSIVE，行级排他锁(RX)。该模式下允许并行会话对同一张表的其他数据进行修改，但不允许并行会话对同一张表使用排他锁。</li>
<li>SHARE，共享锁(S)。该模式下，不允许会话更新表，但允许对表添加RS锁。</li>
<li>SHARE ROW EXCLUSIVE，共享行级排他锁(SRX)。该模式下，不能对同一张表进行DML操作，也不能添加S锁。</li>
<li>EXCLUSIVE,排他锁(X)。该模式下，其他的并行会话不能对表进行DML和DDL操作。该表只能读。</li>
</ul>
<p>在Oracle中除了执行DML时自动为表添加TM锁外，也可以主动的为表添加TM锁。 <strong>语法:</strong></p>
<pre><code>LOCK TABLE tablename IN
    [EXCLUSIVE]
    [SHARE]
    [ROW EXCLUSIVE]
    [SHARE ROW EXCLUSIVE]
    [ROW SHARE* | SHARE UPDATE*]
    MODE [NOWAIT]</code></pre><p>要释放它们，需要使用ROLLBACK命令。</p>
<h4 id="锁等待与死锁"><a href="#锁等待与死锁" class="headerlink" title="锁等待与死锁"></a>锁等待与死锁</h4><p>在某些情况下，由于占用的资源不能及时释放，而造成锁等待，也可叫锁冲突。所等待会严重得影响数据库性能和日冲工作。 死锁是锁等待的一个特例，通常发生在两会话之间。A,B两个会话互相占用都占用相同的两个资源，一个资源被A锁定，一个被B锁定，而A要获得另一个资源时，因为B已经锁了，而B要获得另一个资源时，A所占的资源也锁了。两边都锁了，两个会话都不能得到想要的对象，于是出现了死锁。 此时Oracle自动做出处理，并重新回到锁等待的情况。出现锁等待应尽快找出错误原因并对其处理。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle PL/SQL 游标</title>
    <url>/2018/06/27/Oracle/Oracle%20PLSQL%20%E6%B8%B8%E6%A0%87/</url>
    <content><![CDATA[<p>###游标的概念 游标的使用可以让用户像操作数组一样操作查询出来的数据集。 把游标形象的看成一个变动的光标，实际上是一个指针，它在Oracle存放数据查询结果集的内存中，每当指针指向一条记录，就可以得到所指向的数据，初始时，它指向第一条记录的之前</p>
<h4 id="游标可分为静态游标和REF游标"><a href="#游标可分为静态游标和REF游标" class="headerlink" title="游标可分为静态游标和REF游标"></a>游标可分为静态游标和REF游标</h4><p>静态游标就像是一个数据快照，打开游标后的结果集是对数据数据的备份，数据不随着对标执行DML操作而改变。</p>
<h4 id="静态游标"><a href="#静态游标" class="headerlink" title="静态游标"></a>静态游标</h4><p>包括两种类型：显式游标和隐式游标 1. <strong>显示游标</strong> 显式游标是用户或开发者管理的游标，在使用前<strong>必须有明确的游标声明和定义，这样的游标会关联数据查询语句，打开游标后，用户可利用游标的位置对结果集检索，返回单一行记录，关闭游标后不能进行任何操作。一切由用户自己完成。</strong></p>
<ol start="2">
<li><strong>隐式游标</strong> 隐式游标也成为SQL游标，由PL/SQL构造和管理，该游标用户无法控制，但能得到它的属性信息。</li>
</ol>
<h4 id="显示游标"><a href="#显示游标" class="headerlink" title="显示游标"></a>显示游标</h4><p>通过显式游标，用户可以操作返回的数据。 通常以如下方式处理查询结果集:</p>
<ul>
<li>打开显式游标(OPEN语句)，从结果集中获取行(FETCH语句)，关闭显式游标(CLOSE语句)</li>
<li>在FOR LOOP语句中使用显式游标，更加方便</li>
</ul>
<ol>
<li><p>要使用游标必须声明并定义游标变量</p>
<p>—声明游标<br>CURSOR cursor_name [parameter_list] RETURN return_type;<br>—定义游标<br>CURSOR cursor_name [ parameter_list ] [ RETURN return_type ]<br>  IS select_statement;</p>
</li>
</ol>
<p><strong>示例:游标声明</strong></p>
<pre><code>DECLARE
    CURSOR c1 RETURN product%ROWTYPE;       --声明c1

    CURSOR c2 IS SELECT *  FROM product WHERE productPrice&gt;10;      --声明并定义c2,省略返回类型


BEGIN
    NULL;       --NULL表示跳过此处
END;</code></pre><ol start="2">
<li><p>打开游标 对数据集操作，必须先打开游标初始化了游标指针，一旦打开，其结果集都是静态的</p>
<p>OPEN cursor_name;</p>
</li>
</ol>
<ol start="3">
<li><p>提取游标，读取数据 该语句检索结果集的当前行，将该行的列值存储到变量或记录中，并将游标指针移动到下一行。一般与循环语句一起使用，使用FETCH时游标属性%ROWCOUNT会不断累加。</p>
<p>FETCH cursor_name INTO variables;</p>
</li>
</ol>
<ol start="4">
<li>关闭游标 关闭后无法从结果集中提取记录或引用其属性，如果尝试操作则引发预定义异常INVALID_CURSOR。</li>
</ol>
<p>当然你可以重新打开一个已经关闭的游标，在重新打开它之前，你必须关闭显示游标，否则引发CURSOR_ALREADY_OPEN预定义异常。</p>
<pre><code>CLOSE cursor_name;</code></pre><p><strong>示例：使用LOOP语句提取游标</strong> 获得产品名称和产品价格</p>
<pre><code>DECLARE
    v_name product.productName%TYPE;
    v_price product.productPrice%TYPE;
    CURSOR cur_nameAndPrice IS SELECT  productName,productPrice FROM product;
BEGIN
    OPEN cur_nameAndPrice;
    LOOP
        FETCH cur_nameAndPrice INTO v_name,v_price;
        EXIT WHEN cur_nameAndPrice%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_name || &apos;----&apos; || v_price);
    END LOOP;
    CLOSE cur_nameAndPrice;
END;</code></pre><h5 id="显式游标的属性"><a href="#显式游标的属性" class="headerlink" title="显式游标的属性"></a>显式游标的属性</h5><p>利用游标属性可以获得游标执行的相关信息。</p>
<ul>
<li>%ISOPEN：用于判断游标是否打开，如果已经打开则返回TRUE，否则返回FALSE。</li>
<li>%FOUND：检测行数据是否有效，有效则返回TRUE，否则返回FALSE</li>
<li>%NOTFOUND：与%FOUND相反。</li>
<li>%ROWCOUNT：累积到当前为止，使用FETCH提取数据的行数。</li>
</ul>
<p><strong>示例:显式游标属性</strong></p>
<pre><code>DECLARE
    v_product product%ROWTYPE;
    CURSOR cur_product IS SELECT *  FROM product;
BEGIN
    OPEN cur_product;                                       --打开游标
    IF cur_product%ISOPEN THEN                  --判断是否打开游标
        LOOP                                                        ---循环
            FETCH cur_product INTO v_product;       ---提取数据
            IF cur_product%FOUND THEN
                DBMS_OUTPUT.PUT_LINE(&apos;第&apos; || cur_product%ROWCOUNT || &apos;条数据,产品名称=&apos; || v_product.productName || &apos;,价格=&apos; || v_product.productPrice);
            ELSE
                EXIT;                                       --当%FOUND返回FALSE时，说明无数据了，退出循环
            END IF;
        END LOOP;
    END IF;
    CLOSE cur_product;
END;</code></pre><h5 id="BULK-COLLECT提取数据"><a href="#BULK-COLLECT提取数据" class="headerlink" title="BULK COLLECT提取数据"></a>BULK COLLECT提取数据</h5><p>通常使用FETCH…INTO…语句提取数据，这种方式是提取单条数据，在数据量大的情况下，执行效率不是很理想。而BULK COLLECT语句可以批量提取数据，在数据量大的情况下，效率会比单条数据高。 <strong>示例：BULK COLLECT提取数据</strong></p>
<pre><code>DECLARE
    TYPE proc_tab IS TABLE OF product%ROWTYPE;      --定义索引表
    v_product proc_tab;                                                     --声明索引表变量
    CURSOR cur_product IS SELECT *  FROM product;   --声明并定义游标变量
BEGIN
    OPEN cur_product;

    LOOP                                                                            --外层LOOP批量提取数据
        FETCH cur_product BULK COLLECT INTO v_product LIMIT 2;  --批量提取两条数据
        FOR i IN 1..v_product.count LOOP                                    --内层FOR LOOP对一次批量提取的数据进行循环处理
            DBMS_OUTPUT.PUT_LINE(&apos;产品ID=&apos; || v_product(i).productId || &apos;，产品名称=&apos; || v_product(i).productName || &apos;,产品价格=&apos; || v_product(i).productPrice);
        END LOOP;
        EXIT WHEN cur_product%NOTFOUND;                     --无数据后退出
    END LOOP;

    CLOSE cur_product;
END;</code></pre><p>该案例使用索引表来存储每次提取出的数据，LIMIT 表示每次提取2条数据，v_product.count表示获得索引表中的记录数。</p>
<h5 id="使用CURSOR-FOR-LOOP循环简化游标的读取"><a href="#使用CURSOR-FOR-LOOP循环简化游标的读取" class="headerlink" title="使用CURSOR FOR LOOP循环简化游标的读取"></a>使用CURSOR FOR LOOP循环简化游标的读取</h5><p>使用 CURSOR FOR LOOP的方式，它并不需要特别声明变量。不需要手动打开游标，且自动从集中获取行，处理完成后自动关闭。</p>
<pre><code>DECLARE
    CURSOR cur_product  IS SELECT *  FROM product;
BEGIN
    FOR prod_record IN cur_product LOOP
        DBMS_OUTPUT.PUT_LINE(&apos;产品ID=&apos; || prod_record.productId || &apos;，产品名称=&apos; || prod_record.productName || &apos;,产品价格=&apos; || prod_record.productPrice);
    END LOOP;
END;</code></pre><p>FOR LOOP循环中的prod_record变量就是自动声明的记录变量，类型为%ROWTYPE。 <strong>注意：</strong>该CURSOR FOR LOOP与循环结构中的FOR LOOP语句是不一样的，所以在循环控制中，关于游标的FOR LOOP没有说，才放到这里解释。</p>
<h5 id="带参数的游标"><a href="#带参数的游标" class="headerlink" title="带参数的游标"></a>带参数的游标</h5><p>使用显示游标可以指定参数，指定的参数包括参数的顺序和参数的类型。参数可以传递给游标在查询是使用，这样就方便了使用不同条件的查询，也方便了游标在存储过程中使用。 简而言之，如果你学过Java语言或其他语言，那么他就相当于方法差不多的情况，具有形参和实参的说法，定义游标时的形参以及FETCH游标时传递的实参。 <strong>示例：带参数的游标</strong></p>
<pre><code>DECLARE
    v_name product.productName%TYPE := &apos;晨光&apos;;    --程序变量
    v_product product%ROWTYPE;                      ---行记录类型
    CURSOR cur_product (name VARCHAR2)      ---声明定义带参数的游标
        IS SELECT *  FROM product WHERE productName LIKE name||&apos;%&apos;;
BEGIN
    OPEN cur_product(v_name);                   --添加实参并开启游标

    LOOP
        FETCH cur_product INTO v_product;   
        EXIT WHEN cur_product%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(&apos;产品ID=&apos; || v_product.productId || &apos;，产品名称=&apos; || v_product.productName || &apos;,产品价格=&apos; || v_product.productPrice);
    END LOOP;

    CLOSE cur_product;
END;</code></pre><p>当然可以添加默认值，如果不在开启游标时传递实参的话将使用默认值。 <strong>示例：默认参数</strong></p>
<pre><code>----游标声明定义处
CURSOR cur_product (name VARCHAR2 DEFAULT &apos;HUAWEI&apos;)         ---声明定义带参数的游标
        IS SELECT *  FROM product WHERE productName LIKE name||&apos;%&apos;;

----开启游标处
OPEN cur_product;</code></pre><p>当然，如果定义时有参数，且没有默认值，而开启游标时不赋予实参，则会发生错误。  </p>
<h4 id="隐式游标"><a href="#隐式游标" class="headerlink" title="隐式游标"></a>隐式游标</h4><p>每当运行SELECT或DML语句时，PL/SQL会打开一个隐式游标，隐式游标受用户控制，隐式游标与显式游标的不同之处:</p>
<ul>
<li>隐式游标由PL/SQL自动管理</li>
<li>隐式游标的默认名称是SQL</li>
<li>SELECT或DML操作产生隐式游标</li>
<li>隐式游标的属性值始终是最新执行的SQL语句</li>
</ul>
<p><strong>隐式游标的属性</strong> 虽然与显式游标属性相似，但却有不同之处。</p>
<ul>
<li>SQL%ISOPEN属性：总返回FALSE，隐式游标在关联语句运行后总是关闭</li>
<li>SQL%FOUND属性：是否受到行影响。没有SELECT或DML语句运行则返回NULL，如果SELECT或DML返回影响多行数据则返回TRUE，否则返回FALSE</li>
<li>SQL%NOTFOUND：当没有受影响行时，返回TRUE，否则返回FALSE；</li>
<li>SQL%ROWCOUNT：返回受影响的行数</li>
</ul>
<ol>
<li><p><strong>示例:SQL%FOUND</strong></p>
<p>DECLARE<br>  v_product product%ROWTYPE;<br>BEGIN<br>  SELECT * INTO v_product FROM product WHERE productId=1;<br>  IF SQL%FOUND THEN</p>
<pre><code>DBMS_OUTPUT.PUT_LINE(&apos;得到受影响行数，受影响行数为&apos; || SQL%ROWCOUNT);</code></pre><p>  ELSE</p>
<pre><code>DBMS_OUTPUT.PUT_LINE(&apos;未收到行影响&apos;);</code></pre><p>  END IF;<br>END;</p>
</li>
</ol>
<ol start="2">
<li><strong>SQL%NOTFOUND属性</strong> SQL%NOTFOUND与SQL%FOUND相反。</li>
</ol>
<p>但SQL%NOTFOUND属性对PL/SQL SELECT INTO语句无用。因为如果SELECT INTO不返回行会先引发NO_DATA_FOUND预定义异常，然后才能检查SQL%NOTFOUND。而如果只要使用聚合函数总会返回一个值，则SQL%NOTFOUND总是为FALSE。</p>
<ol start="3">
<li><strong>SQL%ROWCOUNT</strong> SQL%ROWCOUNT属性的值与事务的状态无关。因此：</li>
</ol>
<ul>
<li><p>当事务回滚到保存点时，值SQL%ROWCOUNT不会恢复到保存点之前的值。</p>
</li>
<li><p>当事务结束时，SQL%ROWCOUNT不会恢复到父事务中的原始值。</p>
<p>CREATE TABLE product_temp AS SELECT *  FROM PRODUCT;</p>
<p>DECLARE</p>
<pre><code>v_num number(6) := 5;</code></pre><p>BEGIN</p>
<pre><code>DELETE FROM product_temp WHERE productId=v_num;
DBMS_OUTPUT.PUT_LINE(&apos;删除产品数量&apos; || to_char(SQL%ROWCOUNT));
COMMIT;</code></pre><p>END;</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle PL/SQL异常处理</title>
    <url>/2018/06/26/Oracle/Oracle%20PLSQL%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="PL-SQL异常"><a href="#PL-SQL异常" class="headerlink" title="PL/SQL异常"></a>PL/SQL异常</h3><p>PL/SQL运行过程中可能出现错误，有程序本身原因或者来自法开发人员自定义的数据，而所有的这些错误我们称为异常。 为了使程序更具有健壮性，需要捕获这些异常并进行处理。当异常发生时，程序会调到异常块处，将控制权限交给异常处理程序。 例如一个数除以0时，会导致异常发生，并提示出错误号。而除以0的异常属于Oracle内部定义异常。 <strong>处理异常的语法:</strong></p>
<pre><code>EXCEPTION
    WHEN exception1 [OR exception2...] THEN
        statement...
    WHEN exception3 [OR exception4...] THEN
        statement...
    [WHEN OTHERS THEN statement..]</code></pre><p><strong>语法解释:</strong></p>
<ul>
<li>EXCEPTION表示异常块的关键字</li>
<li>WHEN exception THEN则是用来匹配异常名称，并执行对应的语句</li>
<li>WHEN OTHERS THEN则表示当其他异常都不匹配时，执行对应的语句</li>
</ul>
<p>这个异常代码放在那，在最开始PL/SQL结构中就写了,加上EXCEPTION,通常就是这样的:</p>
<pre><code>DECLARE
BEGIN
EXECEPTION
END;</code></pre><p>Oracle中的异常分为三类:</p>
<ul>
<li>预定义异常</li>
<li>非预定义异常(官网的说法是<strong>内部定义异常</strong>)</li>
<li>自定义异常</li>
</ul>
<h4 id="预定义异常"><a href="#预定义异常" class="headerlink" title="预定义异常"></a>预定义异常</h4><p>Oracle中为每个错误提供一个错误号，而捕获异常则需要异常有名称。Oracle提供了一些已经定义好名称的常用异常，就是预定义异常。</p>
<p>Exception</p>
<p>ORA Error</p>
<p>Condition</p>
<p>CASE_NOT_FOUND</p>
<p>ORA-06592</p>
<p>case语句中，when子句没有匹配条件，且没有else语句，则触发该异常</p>
<p>NO_DATA_FOUND</p>
<p>ORA-01403</p>
<p>不存在请求的行时出现，当引用引用已删除的元素时，也会触发</p>
<p>TOO_MANY_ROWS</p>
<p>ORA-01422</p>
<p>执行SELECT INTO语句后返回多行时出现</p>
<p>DUP_VAL_ON_INDEX</p>
<p>ORA-00001</p>
<p>试图将重复值插入在唯一索引的列时触发异常</p>
<p>VALUE_ERROR</p>
<p>ORA-06502</p>
<p>赋值时，产生大小错误限制或变量长度不够时，引发异常</p>
<p>ZERO_DIVIDE</p>
<p>ORA-01476</p>
<p>除数为0的时候引发该异常</p>
<p>STORAGE_ERROR</p>
<p>ORA-6500</p>
<p>内存溢出或破坏时引发</p>
<p>TIMEOUT_ON_RESOURCE</p>
<p>ORA-00051</p>
<p>等待资源超时引发该异常</p>
<p>CURSOR_ALREADY_OPEN</p>
<p>ORA-06511</p>
<p>打开一个已经打开的游标引发该异常</p>
<p>INVALID_CURSOR</p>
<p>ORA-1001</p>
<p>执行一个未打开的游标时出现</p>
<p>ACCESS_INTO_NULL</p>
<p>ORA-6530</p>
<p>未初始化对象时</p>
<p>当然，预定义异常也不止这些，这些只是在开发中比较常用的异常。到Oracle12c为止，一共提供了25中预定义异常。利用下面的语句可查看Oracle的预定义异常。</p>
<pre><code>SELECT *  FROM DBA_SOURCE WHERE NAME=&apos;STANDARD&apos; AND TEXT LIKE &apos;%EXCEPTION_INIT%&apos;;</code></pre><p><strong>示例:</strong> 就拿除以0的例子.</p>
<pre><code>DECLARE
    v_num number(8);
BEGIN
    v_num := 20/0;
EXCEPTION
    WHEN ZERO_DIVIDE THEN
        DBMS_OUTPUT.PUT_LINE(&apos;除数为0&apos;);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(&apos;其他异常&apos;);
END;</code></pre><p>当除数出现0时，程序会马上进入异常捕获部分，当发生的异常和列表中的异常名称匹配成功时，执行对应语句，异常匹配的顺序是从上往下的,所以尽量把合适的异常放在第一位。</p>
<h4 id="非预定义异常-内部定义异常"><a href="#非预定义异常-内部定义异常" class="headerlink" title="非预定义异常(内部定义异常)"></a>非预定义异常(内部定义异常)</h4><p>Oracle中有很多异常都是非预定义异常。他们只有错误编号和错误描述，而没有名称是不能被异常捕获的。 为了解决该问题，Oralce允许开发人员为这些异常添加一个名称，使它们被异常捕获到。 <strong>注：用户声明名称的内部定义异常仍然是内部定义的异常，而不是用户定义的异常</strong> 为一个非预定义异常定义名称需要如下步骤: 1. 声明一个异常的名称 2. 把名称与异常编号相互关联 <strong>声明部分定义异常名称:</strong></p>
<pre><code>exception_name EXCEPTION;</code></pre><p>将定义好的异常与错误编号关联起来，需使用如下语句</p>
<pre><code>PRAGMA EXCEPTION_INIT(exception_name,exception_code)； </code></pre><p><strong>示例:</strong></p>
<pre><code>DECLARE
    v_id provider.providerId%TYPE :=456;
    my_exception EXCEPTION;
    PRAGMA EXCEPTION_INIT(my_exception, -2291);
BEGIN
    UPDATE PRODUCT SET providerId = v_id where productId = 8;
EXCEPTION
    WHEN my_exception THEN
      DBMS_OUTPUT.PUT_LINE(&apos;违反完整约束条件&apos;);
      DBMS_OUTPUT.PUT_LINE(SQLCODE);
      DBMS_OUTPUT.PUT_LINE(SQLERRM);
      ROLLBACK;
END;</code></pre><p>这样可以捕获异常，可能你会不太清楚SQL CODE是多少，没办法关联。我似乎也没有找到办法。只能在开发时尝试通过SQLCODE函数获得错误号，SQLERRM获得错误信息。</p>
<h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>通常我们想自己定义异常，来控制自己的业务情况，比如产品数量不为负数，生产日期等，预定义和非预定义都无法捕获。 <strong>语法:</strong></p>
<pre><code>--声明异常
exception_name EXCEPTION;
--抛出异常
RAISE exception_name;</code></pre><p><strong>自定义异常示例:</strong></p>
<pre><code>DECLARE
    v_price product.productPrice%TYPE;      ---产品数量
    my_price_excep EXCEPTION;
BEGIN
    select productPrice INTO v_price FROM product WHERE productId=1;
    IF v_price&lt;=0 THEN
        RAISE my_price_excep;
    END IF;
EXCEPTION
    WHEN my_price_excep THEN
        DBMS_OUTPUT.PUT_LINE(&apos;价格不正确，需大于0&apos;);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(&apos;出现其他错误&apos;);
END;</code></pre><p>该例子看起来似乎没有什么意义，只是介绍如何使用。</p>
<h4 id="重新定义错误消息"><a href="#重新定义错误消息" class="headerlink" title="重新定义错误消息"></a>重新定义错误消息</h4><p>RAISE_EXCEPTION_ERROR存储过程可以重新定义异常错误信息。用于抛出一个异常并给异常赋予一个错误号以及错误信息。</p>
<pre><code>RAISE_EXCEPTION_ERROR(error_number,error_message[,&#123; TRUE | FALSE &#125;]);</code></pre><p>错误号的范围是-20,000到-20,999。错误信息是文本字符串，最多为2048字节。 TRUE和FALSE表示是添加(TRUE)进错误堆(ERROR STACK)还是覆盖(overwrite)错误堆(FALSE)。缺省情况下是FALSE。 <strong>示例:</strong></p>
<pre><code>DECLARE
    v_num number(8);
BEGIN
    v_num := 20;
  IF v_num&gt;10 THEN
    raise_application_error(-20000,&apos;错误&apos;);
  END IF;
END;</code></pre>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle PL/SQL中执行DML数据操作语言和DDL数据定义语言</title>
    <url>/2018/06/26/Oracle/Oracle%20PLSQL%E4%B8%AD%E6%89%A7%E8%A1%8CDML%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80%E5%92%8CDDL%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h3 id="PL-SQL中使用DML和DDL语言"><a href="#PL-SQL中使用DML和DDL语言" class="headerlink" title="PL/SQL中使用DML和DDL语言"></a>PL/SQL中使用DML和DDL语言</h3><p>PL/SQL中除了可以执行查询语句外，还可以执行DML数据操纵语言和DDL数据定义语言。</p>
<h4 id="DML数据操作语言语句的使用"><a href="#DML数据操作语言语句的使用" class="headerlink" title="DML数据操作语言语句的使用"></a>DML数据操作语言语句的使用</h4><p><strong>示例:</strong> 添加一条新纪录，编号为表中最大编号+1</p>
<pre><code>DECLARE
    v_new_id product.productId%TYPE;
BEGIN
    SELECT MAX(productId) INTO v_new_id FROM product;
    v_new_id := v_new_id+1;
    INSERT INTO product VALUES(v_new_id,&apos;MacBook Pro 13.3&apos;,12000,1500,NULL);
    COMMIT;
END;</code></pre><h4 id="DDL数据定义语言的使用"><a href="#DDL数据定义语言的使用" class="headerlink" title="DDL数据定义语言的使用"></a>DDL数据定义语言的使用</h4><p>要想在PL/SQL中使用，需要一条命令来执行，该命令是<strong>EXECUTE IMMEDIATE</strong>,利用它可以执行动态的SQL语句，也就是不仅可以执行DDL语句，也可以执行DML语句。 <strong>示例</strong></p>
<pre><code>DECLARE
    prod_createStr varchar2(200);
BEGIN
    prod_createStr := &apos;CREATE TABLE TAB_STUDENT
                                (
                                    STUDENTID number(8) primary key,
                                    STUDENTNAME varchar2(20),
                                    AGE nchar(2)
                                )&apos;;

    EXECUTE IMMEDIATE prod_createStr;
END;


DECLARE
  v_alter_address varchar2(200);
BEGIN
  v_alter_address := &apos;ALTER TABLE TAB_STUDENT ADD ADDRESS VARCHAR2(50)&apos;;

  EXECUTE IMMEDIATE v_alter_address;
END;</code></pre><p>需要注意，将数据定义语言作为字符串，通过EXECUTE IMMEDATE动态执行的时候，最后的分号要去掉，否则错误，这是与一般执行DDL的不同之处。 通常情况下，利用EXECUTE IMMEDATE命令执行DDL语句用在存储过程当中。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle PL/SQL结构控制</title>
    <url>/2018/06/26/Oracle/Oracle%20PLSQL%E7%BB%93%E6%9E%84%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h3 id="PL-SQL结构控制"><a href="#PL-SQL结构控制" class="headerlink" title="PL/SQL结构控制"></a>PL/SQL结构控制</h3><h4 id="IF条件控制"><a href="#IF条件控制" class="headerlink" title="IF条件控制"></a>IF条件控制</h4><p><strong>条件语句，控制流程</strong> IF语句的三种方式:IF…、IF…ELSE…、IF…ELSIF…。根据实际业务灵活选择。 <strong>语法:</strong></p>
<pre><code>IF condition THEN
    statements;
END IF;


IF condition THEN
    statements;
 ELSE
    statements;
 END IF;


IF condition THEN
    statements;
ELSIF condition THEN
    statements;
...
[ELSE statements;]
END IF;</code></pre><ol>
<li><p>对于这三种IF的使用不需要多说，不管什么面向对象的解释语言，基础都有控制结构的。</p>
</li>
<li><p>而你只需要记住语法结构，最后会有END IF。而ELSIF一定不要写错。</p>
</li>
<li><p>关于数值表达式+、-、<em>、/、*</em>都可以用。以及关系表达式和逻辑表达式NOT、OR、AND。</p>
</li>
<li><p>condition可以使用任何表达式和变量，常量等。</p>
</li>
</ol>
<h4 id="CASE条件控制"><a href="#CASE条件控制" class="headerlink" title="CASE条件控制"></a>CASE条件控制</h4><p>与IF语句有同样的效果。</p>
<h5 id="简单CASE控制"><a href="#简单CASE控制" class="headerlink" title="简单CASE控制"></a>简单CASE控制</h5><p>只有当CASE子句中表达式的值等于某个WHEN的表达式的值时，才执行响应的THEN子句。 <strong>语法:</strong></p>
<pre><code>[&lt;&lt;label_name&gt;&gt;]
CASE case_operand
WHEN when_operand THEN
    statements;
[
    WHEN when_operand THEN
        statements;
] ...
[ELSE statements]
END CASE [label_name];</code></pre><p><strong>语法说明:</strong></p>
<ul>
<li>&lt;<label_name>&gt;：一个CASE标签，可用于结束当前这个CASE语句。</li>
<li>case_operand：表达式，通常是一个变量。除了BLOB、BFILE、对象类型、记录类型、索引表、变长数组或嵌套表，其他类型都允许。</li>
<li>when_operand ：case_operand对应结果，如果两者值相同，则执行statement语句。可以有多个WHEN..THEN</li>
<li>ELSE statement：当所有值都不能对应上时，执行此处的语句。</li>
</ul>
<p><strong>CASE示例</strong> 模拟获得当前日期得到月份</p>
<pre><code>DECLARE
  v_month nvarchar2(3);
BEGIN
  SELECT trim(to_char(sysdate,&apos;MONTH&apos;)) INTO v_month FROM product WHERE productId=1;

  CASE v_month
  WHEN &apos;1月&apos; THEN
    DBMS_OUTPUT.PUT_LINE(&apos;一月&apos;);
  WHEN &apos;2月&apos; THEN
    DBMS_OUTPUT.PUT_LINE(&apos;二月&apos;);
  WHEN &apos;3月&apos; THEN
    DBMS_OUTPUT.PUT_LINE(&apos;三月&apos;);
  WHEN &apos;4月&apos; THEN
    DBMS_OUTPUT.PUT_LINE(&apos;四月&apos;);
  WHEN &apos;5月&apos; THEN
    DBMS_OUTPUT.PUT_LINE(&apos;五月&apos;);
  WHEN &apos;6月&apos; THEN
    DBMS_OUTPUT.PUT_LINE(&apos;六月&apos;);
  ELSE
    DBMS_OUTPUT.PUT_LINE(&apos;不在一到六月&apos;);
END CASE;

END;</code></pre><p>CASE语句执行的顺序是从上往下的顺序，当WHEN子句的语句被执行后，CASE结构就执行完毕。</p>
<h5 id="搜索式的CASE语句"><a href="#搜索式的CASE语句" class="headerlink" title="搜索式的CASE语句"></a>搜索式的CASE语句</h5><p>这种与IF非常非常类似,将<strong>WHEN子句的表达式只能是布尔值，布尔表达式</strong>。这与IF相同 <strong>语法:</strong></p>
<pre><code>[&lt;&lt;label_name&gt;&gt;]
CASE
WHEN boolean_expression THEN statement;
[WHEN boolean_expression THEN statement;]...
[ELSE statement];
END CASE [label_name];</code></pre><h4 id="LOOP循环控制"><a href="#LOOP循环控制" class="headerlink" title="LOOP循环控制"></a>LOOP循环控制</h4><p>LOOP语句也就是循环语句，能重复的执行指定的语句。有四种形式的LOOP。</p>
<ul>
<li>LOOP;</li>
<li>WHILE…LOOP;</li>
<li>FOR…LOOP;</li>
<li>CURSOR FOR LOOP;</li>
</ul>
<h5 id="基本LOOP循环"><a href="#基本LOOP循环" class="headerlink" title="基本LOOP循环"></a>基本LOOP循环</h5><p>基本的LOOP语句本身没有包含中断循环的条件，通常情况下利用EXIT、GOTO等可以中断LOOP循环使用。异常也使LOOP语句中断。 <strong>基本LOOP循环语法:</strong></p>
<pre><code>[&lt;&lt;label_name&gt;&gt;]
LOOP
    statement...
END LOOP;</code></pre><h6 id="1-通过IF语句和EXIT的组合结束循环"><a href="#1-通过IF语句和EXIT的组合结束循环" class="headerlink" title="1. 通过IF语句和EXIT的组合结束循环"></a>1. 通过IF语句和EXIT的组合结束循环</h6><p>EXIT必须在循环体内部，它可以是循环正常无条件终止循环，而终止循环后会正常执行循环外的语句 <strong>操作示例:</strong> 循环变量，当变量值大于某值时退出循环。</p>
<pre><code>DECLARE
    v_num NUMBER(8) := 1;       --声明并初始化变量
BEGIN
    &lt;&lt;basic_loop&gt;&gt;
    LOOP
        v_num := v_num+1;   --循环中，自增1
        IF v_num&gt;5 THEN         --判断条件，是否需要退出
            EXIT basic_loop;
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(&apos;LOOP循环已经结束,v_num的值为&apos; || v_num);
END;</code></pre><p>一般像有多个嵌套的循环的话，建议还是加上LOOP标签的，这样能更直观的看出退出的是哪个循环</p>
<h6 id="2-通过EXIT…WHEN语句退出循环"><a href="#2-通过EXIT…WHEN语句退出循环" class="headerlink" title="2. 通过EXIT…WHEN语句退出循环"></a>2. 通过EXIT…WHEN语句退出循环</h6><p>就是和IF EXIT差不多意思的退出，当什么条件的时候退出。没有loop标签也是可以的。</p>
<pre><code>DECLARE
    v_num NUMBER(8) := 1;       --声明并初始化变量
BEGIN
    &lt;&lt;basic_loop&gt;&gt;
    LOOP
        v_num := v_num+1;   --循环中，自增1
        EXIT basic_loop WHEN v_num&gt;5;       
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(&apos;LOOP循环已经结束,v_num的值为&apos; || v_num);
END;</code></pre><h5 id="WHILE…LOOP循环语句"><a href="#WHILE…LOOP循环语句" class="headerlink" title="WHILE…LOOP循环语句"></a>WHILE…LOOP循环语句</h5><p>该语句本身可以终止LOOP循环，当WHILE后的布尔值为TRUE时，将执行一次，然后重新判断是否为TRUE，否则直接退出循环。 <strong>语法结构:</strong></p>
<pre><code>[&lt;&lt;label_name&gt;&gt;]
WHILE boolean_expression
LOOP
    statement...
END LOOP [label_name];</code></pre><p><strong>WHILE…LOOP示例</strong> 输出20以内被3整除的数</p>
<pre><code>DECLARE
    v_num NUMBER(8) := 1;
BEGIN
    WHILE v_num&lt;=20
    LOOP
        IF MOD(v_num,3) = 0 THEN
            DBMS_OUTPUT.PUT_LINE(v_num);
        END IF;
        v_num := v_num+1;
    END LOOP;
END;</code></pre><h5 id="FOR…LOOP循环语句"><a href="#FOR…LOOP循环语句" class="headerlink" title="FOR…LOOP循环语句"></a>FOR…LOOP循环语句</h5><p>语句循环遍历指定范围内的整数，主要用于固定次数的循环。 <strong>语法:</strong></p>
<pre><code>[&lt;&lt;label_name&gt;&gt;]
FOR index_name IN [REVERSE] lower .. upper LOOP
    statement..
END LOOP [label_name];</code></pre><p><strong>语法说明</strong></p>
<ul>
<li>index_name：循环计数器，通过该值得到当前的循环次数。</li>
<li>REVERSE：指定循环方式，从lower到upper，还是相反。使用REVERSE关键字，循环方式正好相反</li>
<li>lower..upper：循环范围的下标界到上标界，中间的两个点是必须的，不能省略。</li>
</ul>
<p><strong>FOR…LOOP示例:</strong> 1-20的整数的和</p>
<pre><code>DECLARE
    v_num number(8) := 0;
BEGIN
    FOR idx IN 1..20 LOOP
        v_num := v_num + idx;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(&apos;LOOP循环结束，值为&apos; || v_num);
END;</code></pre><p>对于循环范围lower和upper可以使用数值型的变量代替，而当两者相等时，只循环一次。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle PL/SQL介绍，声明部分的标量和复合变量</title>
    <url>/2018/06/26/Oracle/Oracle%20PLSQL%E4%BB%8B%E7%BB%8D%EF%BC%8C%E5%A3%B0%E6%98%8E%E9%83%A8%E5%88%86%E7%9A%84%E6%A0%87%E9%87%8F%E5%92%8C%E5%A4%8D%E5%90%88%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h3 id="PL-SQL"><a href="#PL-SQL" class="headerlink" title="PL/SQL"></a>PL/SQL</h3><h4 id="什么是PL-SQL"><a href="#什么是PL-SQL" class="headerlink" title="什么是PL/SQL"></a>什么是PL/SQL</h4><p>PL/SQL(Procedural Language/Structured Query Language)是Oracle公司在标准SQL语言基础上进行拓展而形成的一种可以在数据库上进行设计编程的语言，通过Oracle公司的PL/SQL引擎执行。 PL/SQL完全可以像Java语言一样实现逻辑判断、条件循环以及异常处理等。 PL/SQL有以下几个特点:</p>
<ul>
<li>支持事务控制和SQL数据操作命令</li>
<li>支持SQL的数据类型、并且在此基础上扩展了新的数据类型，也支持SQL的函数以及运算符。</li>
<li>PL/SQL可以存储在Oracle服务器中</li>
<li>Oracle有自己的DBMS包，可以处理数据的控制和定义命令</li>
</ul>
<h4 id="PL-SQL的优势"><a href="#PL-SQL的优势" class="headerlink" title="PL/SQL的优势"></a>PL/SQL的优势</h4><ol>
<li><p>提高程序运行性能 标准的SQL被执行时，只能一条一条的向服务器发送,多次连接数据库服务器很耗费资源。如果使用PL/SQL，<strong>PL/SQL的语句块可以包含多条SQL语句，而语句块可以嵌入到程序中，</strong>甚至存储在Oracle服务器上，用户只需一次连接，就可以在Oracle内部执行。</p>
</li>
<li><p>使程序模块化 在程序块中可以实现一个或几个功能。我们可以把多张表的操作都放在一个块里，而对外只需要提供一个调用方法和需要传递的参数。这种操作就是通过存储过程完成。</p>
</li>
<li><p>采用逻辑控制语言控制程序结构 PL/SQL语句块中可以通过if判断，循环等等，通过限制语句的执行，从而完成复杂的业务。</p>
</li>
<li><p>利用处理运行时的错误信息 标准SQL在遇到错误时会提示异常，但提示却非常不友好，并不能直接告诉你错误的准确位置，并且批量执行SQL出现错误时导致SQL执行终止。而PL/SQL语句块中可以处理一些程序上的异常，不至于因SQL操作，而造成调用的SQL页出现错误提示。</p>
</li>
</ol>
<h4 id="PL-SQL的结构"><a href="#PL-SQL的结构" class="headerlink" title="PL/SQL的结构"></a>PL/SQL的结构</h4><p>PL/SQL程序的基本单位是块(block)，PL/SQL块很明确的分三部分，其中包括声明部分、执行部分和异常处理部分。</p>
<pre><code>[DECLARE]       --声明部分的关键字
                        /*声明部分的代码，用于声明变量、常量以及类型*/
BEGIN               --执行部分的关键字
                        /*执行部分，也是PL/SQL的主体部分，包括SQL语句以及逻辑控制语句*/
[EXCEPTION] --异常部分关键字
                        /*异常处理部分，当出现异常时，程序将进入此处*/
END;                    --执行结束关键字，程序结束</code></pre><p><strong>示例:</strong></p>
<pre><code>BEGIN
    DBMS_OUTPUT.PUT_LINE(&apos;这是执行部分&apos;);
END;


DECLARE
    v_result NUMBER(8,2);
BEGIN
    v_result := 100/6;
    DBMS_OUTPUT.PUT_LINE(&apos;结果是:&apos; || v_result);
END;</code></pre><h4 id="PL-SQL基本规则"><a href="#PL-SQL基本规则" class="headerlink" title="PL/SQL基本规则"></a>PL/SQL基本规则</h4><ul>
<li>标识符不分大小写</li>
<li>标识符中只允许字母、数字、下划线、字母开头</li>
<li>不能使用保留字</li>
<li>语句使用分号结束</li>
</ul>
<p>建议要求:</p>
<ul>
<li>每行只写一条语句</li>
<li>全部保留字、关键字、内置函数、程序包以及用户定义的数据类型都是用大写</li>
<li>所有过程名大写</li>
<li>命名以”_”连接，且均有意义，看下图命名方式</li>
<li>建议添加注释</li>
</ul>
<p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/06/Oracle%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99.png" alt=""> <strong>注释</strong> 1. 单行注释 使用两个短横线开头”–”,可以注释掉后面的语句</p>
<ol start="2">
<li>多行注释 使用“/<em>…</em>/”可以注释掉中间的部分，与java多行注释一样。</li>
</ol>
<p><strong>示例</strong></p>
<pre><code>DECLARE
    v_result NUMBER(8,2);
BEGIN
    --为变量赋值
    v_result := 100/6;
    /*
        打印结果
    */
    DBMS_OUTPUT.PUT_LINE(&apos;结果是:&apos; || v_result);
END;</code></pre><h3 id="PL-SQL声明部分，标量，复合变量的使用"><a href="#PL-SQL声明部分，标量，复合变量的使用" class="headerlink" title="PL/SQL声明部分，标量，复合变量的使用"></a>PL/SQL声明部分，标量，复合变量的使用</h3><h4 id="声明部分变量，常量使用"><a href="#声明部分变量，常量使用" class="headerlink" title="声明部分变量，常量使用"></a>声明部分变量，常量使用</h4><ol>
<li><p>变量声明语法结构</p>
<p>variable_name datatype<br>[</p>
<pre><code>[NOT NULL]
&#123;:= | DEFAULT&#125; expression;</code></pre><p>];</p>
</li>
</ol>
<p><strong>语法说明:</strong></p>
<ul>
<li>variable_name:变量名称</li>
<li>datatype:变量的数据类型</li>
<li>NOT NULL:非空约束</li>
<li>{:= | DEFAULT} express : “:=”表示为变量在声明时直接赋值的符号，而DEFAULT表示无值,默认值的关键字。值为express,可以是表达式或函数</li>
</ul>
<ol start="2">
<li><p>常量声明语法结构</p>
<p>constant_name CONSTANT datatype<br>[NOT NULL]<br>{ := | DEFAULT} expression;</p>
</li>
</ol>
<p>结构与常量类似，只不过多了一个常量关键字CONSTANT。</p>
<h4 id="标量类型的变量"><a href="#标量类型的变量" class="headerlink" title="标量类型的变量"></a>标量类型的变量</h4><p>表量类型的变量是最简单类型的变量，也是最常用的变量类型，<strong>它本身是一个单一值，不包含任何的类型组合</strong>。标量类型主要包含数值类型、字符类型、布尔类型和日期类型，还有一种<strong>特殊声明变量类型的方式，就是利用%TYPE。</strong> 其他的不再说，就说一下 %TYPE方式定义变量类型。 <strong>%TYPE引用:</strong> <strong>它利用已存在的数据类型来定义新数据的数据类型</strong>。例如：当定义多个相同类型的变量常量时，第一个定义变量，后面的只需要利用%TYPE引用。<strong>最常见的就是表中的字段类型作为变量或常量的数据类型</strong>,这样可以保证定义变量类型可以与表中字段类型同步，避免字段类型发生变化而修改。 <strong>示例:</strong></p>
<pre><code>DECLARE
  v_productId product.productId%TYPE;       --产品编号
  v_productName varchar2(18);                   --产品名称
  v_productPrice number(8,2);                       --产品价格
  v_test CONSTANT v_productName%TYPE:=&apos;测试&apos;;
  v_date date DEFAULT sysdate;                  --默认值为当前日期
BEGIN
  SELECT productId,productName,productPrice INTO v_productId,v_productName,v_productPrice FROM product WHERE productId=1;

  DBMS_OUTPUT.PUT_LINE(&apos;v_productId=&apos; || v_productId);
  DBMS_OUTPUT.PUT_LINE(&apos;v_productName=&apos; || v_productName);
  DBMS_OUTPUT.PUT_LINE(&apos;v_productPrice=&apos; || v_productPrice);
  DBMS_OUTPUT.PUT_LINE(&apos;v_test=&apos; || v_test);
  DBMS_OUTPUT.PUT_LINE(&apos;v_date=&apos; || v_date);
END;</code></pre><p><strong>代码说明:</strong> 1. 代码运行在PL/SQL Developer软件中，新建SQL窗口，SQL页执行，输出页查看输出内容。 2. 代码第二行表示v_productId的类型为product表中中productId字段的类型 3. 代码第五行表示声明常量v_test，变量类型为v_productName的变量类型 4. 代码第六行表示变量v_date为date类型，且默认值为sysdate函数的值 5. 变量不仅可以在声明部分赋值也可以在主体BEGIN中赋值，但是前提是必须声明了才能赋值。 6. BEGIN中SELECT代码，INTO关键字，表示将前面的表字段值赋值给后面的变量，顺序需要一一对应，且只能返回一行数据 7. 最后几行DBMS库的PUT_LINE来输出一行，在输出选项框查看。</p>
<h4 id="复合类型的变量"><a href="#复合类型的变量" class="headerlink" title="复合类型的变量"></a>复合类型的变量</h4><p>复合类型就是，每个变量包含几个元素，可以存储多个值。与标量类型有差异，需先定义才能声明。 最常用的三种类型，<strong>记录类型，索引表类型，VARRAY数组。</strong></p>
<h5 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h5><p>该类型可以包含多个成员，每个成员的类型可以不同，成员可以是标量类型，也可以是引用其他变量的类型(%TYPE)。 该类型比较适合处理查询语句中有多个列的情况，就如上面的例子，多个列都在同一张表或多张表中。 然后想要得到成员的值，可以通过“变量名称.成员名称”的方式。 <strong>两种声明方式:</strong> 1. <strong>记录定义</strong> <strong>语法结构:</strong></p>
<pre><code>TYPE type_name IS RECORD
(
field_name datatype
[ [NOT NULL] &#123; := | DEFAULT &#125; expression ]

[,...]
);</code></pre><p><strong>语法说明:</strong></p>
<ul>
<li>TYPE关键字表示类型，IS是固定的关键字，RECORD关键字证明了定义该类型为记录类型。</li>
<li>成员属性的写法和变量声明是一样的，可以有多个成员属性</li>
<li>另外，注意，跟创建表差不太远，成员属性后跟的是逗号，不是分号了。</li>
</ul>
<p><strong>示例:定义“记录类型”变量</strong></p>
<pre><code>DECLARE
TYPE product_record IS RECORD
(
  v_productId product.productId%TYPE,       --编号
  v_productName varchar2(18),               --名称
  v_productPrice number(8,2)                --价格
);
v_product product_record;
BEGIN
    SELECT productId,productName,productPrice INTO v_product FROM product WHERE productId=1;

    DBMS_OUTPUT.PUT_LINE(&apos;v_productId=&apos; || v_product.v_productId);
    DBMS_OUTPUT.PUT_LINE(&apos;v_productName=&apos; || v_product.v_productName);
    DBMS_OUTPUT.PUT_LINE(&apos;v_productPrice=&apos; || v_product.v_productPrice);
END;</code></pre><p><strong>代码解释:</strong>注意在定义时，不要忘记成员属性后加逗号，定义结束后加分号，少一个符号都会导致错误。尽管已经定义了记录类型，但是仍然摆脱不了顺序的问题，仍需要跟定义记录中的成员属性顺序保持一致。</p>
<ol start="2">
<li><strong>使用%ROWTYPE声明记录类型数据</strong> 利用%ROWTYPE，这种声明方式可以<strong>直接引用表中的行作为变量类型</strong>，与%TYPE类似，它将得到整个行的数据类型。</li>
</ol>
<p><strong>%ROWTYPE示例</strong></p>
<pre><code>DECLARE
    v_product product%ROWTYPE;
BEGIN
    SELECT *  INTO v_product FROM product WHERE productId=2;

    DBMS_OUTPUT.PUT_LINE(&apos;v_productId=&apos; || v_product.productId);
    DBMS_OUTPUT.PUT_LINE(&apos;v_productName=&apos; || v_product.productName);
    DBMS_OUTPUT.PUT_LINE(&apos;v_productPrice=&apos; || v_product.productPrice);
END;</code></pre><p><strong>代码说明:</strong>变量v_product的数据类型是表product的行记录类型，用%ROWTYPE方式声明了变量数据类型。仅此可以通过*把所有字段都赋值给v_product,而调用时，因为使用的是product的行记录类型，所以直接“.表字段名”即可。 这张方法较为方便，不过如果表字段很多很多，只需要用到几个字段的话，就未免有些浪费了。</p>
<h5 id="索引表类型"><a href="#索引表类型" class="headerlink" title="索引表类型"></a>索引表类型</h5><p>该类型与数组类似，利用键值查找对应的值。但这里的键可以使用字符串，且长度不固定而自动增长。 键可以是数值或字符串，值可以是标量类型或记录类型。如果某键已有对应数据，那么将会覆盖更改。 <strong>定义语法:</strong></p>
<pre><code>TYPE type_name IS TABLE OF
&#123;
    column_type | variable_name%TYPE | table_name.colum_name%TYPE | table_name%ROWTYPE
&#125;
[NOT NULL]
INDEX BY &#123;PLS_INTEGER | BINARY_INTEGER | VARCHAR2(v_size)&#125;;</code></pre><p><strong>语法解释：</strong> 1. 花括号中表示索引表中的数据类型，可以是标量类型，通过%TYPE引用变量的类型，表字段的类型和%ROWTYPE行记录类型。 2. INDEX BY后面表示数组下标的数据类型。PLS_INTEGER和BINARY_INTEGER是属于数值类型，也算是标量类型中。 3. 这只是定义，接下来就可以声明变量了。 <strong>PLS_INTEGER和BINARY_INTEGER类型延伸</strong></p>
<blockquote>
<p>两个类型通常可以认为是一样的类型。存储有符号的整形值，范围在，-2^31~2^31-1之间。 不一样的地方就是BINARY_INTEGER发生溢出时能指派NUMBER类型(不超出NUMBER精度范围)而不至于发生异常,而PLS_INTEGER运算溢出时会触发异常，建议使用PLS_INTEGER。 SIMPLE_INTEGER类型属于PLS_INTEGER的子类型取值范围与PLS_INTEGER相同，只是<strong>该类型不允许为空。如果数据本身不需要溢出检查而且也不可能为空，则选择该类型，该类型性能比PLS_INTEGER高。</strong></p>
</blockquote>
<p><strong>示例:</strong></p>
<pre><code>DECLARE
TYPE product_table_fst IS TABLE OF product%ROWTYPE      --定义索引表，类型%ROWTYPE,索引类型PLS_INTEGER
    INDEX BY PLS_INTEGER;
TYPE product_table_sec IS TABLE OF nvarchar2(20)                --定义索引表，类型nvarchar2(20),索引类型PLS_INTEGER
    INDEX BY PLS_INTEGER;

v_product_row product_table_fst;
v_char product_table_sec;
BEGIN
    v_char(1) := &apos;第一位&apos;;
    v_char(-1) := &apos;也可以是正数或负数，但不能溢出&apos;;

    SELECT *  INTO v_product_row(1) FROM product WHERE productId=1;

    DBMS_OUTPUT.PUT_LINE(&apos;行数据v_product_row(1)的值为&apos; || &apos;---&apos; || v_product_row(1).productId || v_product_row(1).productName);
    DBMS_OUTPUT.PUT_LINE(&apos;v_char(1)---&apos; || v_char(1));
    DBMS_OUTPUT.PUT_LINE(&apos;v_char(-1)---&apos; || v_char(-1));
END;</code></pre><h5 id="VARRAY数组"><a href="#VARRAY数组" class="headerlink" title="VARRAY数组"></a>VARRAY数组</h5><p>该类型的元素个数时需要限制的，是一个存储有序元素的集合。集合下标从1开始，适合较少数据的使用。 <strong>语法声明:</strong></p>
<pre><code>TYPE type_name IS   &#123; VARRAY | VARYING ARRAY&#125; (size)
    OF element_type [NOT NULL];</code></pre><p><strong>语法说明:</strong></p>
<ul>
<li>type_name : VARRAY数组名称</li>
<li>VARRAY | VARYING ARRAY：两者一个意思，varying array简写为varray</li>
<li>size：数组长度</li>
<li>element_type：数组中元素类型</li>
</ul>
<p><strong>示例:</strong></p>
<pre><code>DECLARE
    TYPE varr IS VARRAY(100) OF product.productName%TYPE;

    v_test varr := varr(&apos;a&apos;,&apos;b&apos;);
BEGIN
    SELECT productName INTO v_test(1) FROM product WHERE productId=3;
    v_test(2) := &apos;This chanage&apos;;

    DBMS_OUTPUT.PUT_LINE(&apos;productName--&apos; || v_test(1));
    DBMS_OUTPUT.PUT_LINE(&apos;v_test(2)--&apos; || v_test(2));

END;</code></pre><p>第三行v_test赋初始值，varr是VARRAY数组的类型名称，通过上面那种方式，直接赋值。使用 变量名(i)赋值或调用。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle字符数值日期等常用SQL函数</title>
    <url>/2018/06/23/Oracle/Oracle%E5%AD%97%E7%AC%A6%E6%95%B0%E5%80%BC%E6%97%A5%E6%9C%9F%E7%AD%89%E5%B8%B8%E7%94%A8SQL%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="SQL函数"><a href="#SQL函数" class="headerlink" title="SQL函数"></a>SQL函数</h3><h4 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h4><p>函数名</p>
<p>说明</p>
<p>示例</p>
<p>ABS(n)</p>
<p>绝对值</p>
<p>MOD(n2,n1)</p>
<p>n2除以n1取余</p>
<p>sign(n)</p>
<p>返回参数n的符号，正数返回1，负数返回-1</p>
<p>cos(n)</p>
<p>余弦值</p>
<p>sin(n)</p>
<p>正弦值</p>
<p>tan(n)</p>
<p>正切值</p>
<p>sqrt(n)</p>
<p>返回n的平方根</p>
<p>power(n2,n1)</p>
<p>返回n2的n1次幂</p>
<p>exp(n)</p>
<p>返回e的n次幂，e为数学常量,e=2.71828183…</p>
<p>log(n1,n2)</p>
<p>返回以n1为底n2的对数</p>
<p>ceil(n)</p>
<p>向上取整，大于n的最小整数值</p>
<p><a href="#n1">示例</a></p>
<p>floor(n)</p>
<p>向下取整,小于n的最大整数值</p>
<p><a href="#n1">示例</a></p>
<p>round(n[,i])</p>
<p>四舍五入</p>
<p><a href="#n2">示例</a></p>
<p>trunc(n[,i])</p>
<p>数字截取</p>
<p><a href="#n3">示例</a></p>
<h5 id="向上向下取整函数"><a href="#向上向下取整函数" class="headerlink" title="向上向下取整函数"></a>向上向下取整函数</h5><pre><code>select ceil(-23.4),ceil(23.4),floor(23.5),floor(-23.4) from product where productId=1</code></pre><p>由此可见，ceil函数不管n是正数还是负数都往大的走，floor都往小的走。</p>
<h5 id="四舍五入函数"><a href="#四舍五入函数" class="headerlink" title="四舍五入函数"></a>四舍五入函数</h5><p><strong>语法：</strong>round(n[,i])</p>
<pre><code>select round(3.14),round(3.14159,2),round(3151.5926,-2),round(3141.5926,-5) from product where productId=1</code></pre><ol>
<li>将n四舍五入，可选参数i表示要保留的位数，不指定则不保留小数。</li>
<li>参数i要求为整数，若为正数，则保留i为小数，</li>
<li>负数则虚拟小数点向左i位，虚拟小数点后的一位四舍五入，虚拟小数点至源小数点之间的数变为0，舍去源小数部分。(废话较多理解就好)</li>
<li>如果i为负数且绝对值大于等于整数部分的长度，则为0</li>
</ol>
<h5 id="数字截取函数"><a href="#数字截取函数" class="headerlink" title="数字截取函数"></a>数字截取函数</h5><p><strong>语法：</strong>trunc(n[,i]) 效果与round函数类似，不过小数点后一位并不会四舍五入，而直接截断</p>
<pre><code>select trunc(3.14),trunc(3.14159,3),trunc(3151.5926,-2),trunc(3141.5926,-5) from product where productId=1</code></pre><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><p>函数名</p>
<p>说明</p>
<p>示例</p>
<p>chr(n)</p>
<p>把给定ASCII码转换为字符</p>
<p>ascii(char)</p>
<p>返回参数首字母的ASCII码</p>
<p>length(char)</p>
<p>获取字符串长度,一个中文一个长度</p>
<p>substr(type,char,position[,substring_length])</p>
<p>根据类型截取</p>
<p><a href="#1">示例</a></p>
<p>concat(char1,char2)</p>
<p>将char2连接到char1的尾部，效果与“||”相似</p>
<p>instr(type,str,substring[,position[,occurrence]])</p>
<p>在字符串中搜索是否存在另一个字符串</p>
<p><a href="#2">示例</a></p>
<p>upper(char)</p>
<p>指定参数全部转换为大写字母</p>
<p>lower(char)</p>
<p>指定参数全部转换成小写字母</p>
<p>initcap(char)</p>
<p>单词首字母大写,空格或逗号或点分割的字符串</p>
<p><a href="#3">示例</a></p>
<p>replace(char,search_string[,replacement_string])</p>
<p>字符串替换</p>
<p><a href="#4">示例</a></p>
<p>rpad(expr1,n[,expr2])</p>
<p>字符串填充函数</p>
<p><a href="#5">示例</a></p>
<p>trim(char)</p>
<p>删除首尾空格或字符</p>
<p><a href="#6">示例</a></p>
<p>rtrim(char[,set])</p>
<p>将char右边出现在set中的字符删除</p>
<p>ltrim(char[,set])</p>
<p>将char左边出现在set中的字符删除</p>
<pre><code>select chr(97),ascii(&apos;abc&apos;),length(&apos;abc我们666&apos;) from product where productId=2;</code></pre><p>chr函数与ascii函数相反,length函数中，汉字字母数字都占一个长度。</p>
<h5 id="字符串截取函数substr"><a href="#字符串截取函数substr" class="headerlink" title="字符串截取函数substr"></a>字符串截取函数substr</h5><p>字符串截取函数不光有按字符的，还有字节的等等。 <strong>语句结构为</strong> {[substr|substrb|substrc|substr2|substr4]}(char,posistion[,substring_length]) 各参数如下:</p>
<ul>
<li><p>substr：以字符为单位,中文为一个字符</p>
</li>
<li><p>substrb：以字节为单位，中文需要三个字节</p>
</li>
<li><p>substrc：以unicode字符为单位</p>
</li>
<li><p>substr2：UCS2代码点为单位</p>
</li>
<li><p>substr4：以UCS4代码点为点位</p>
</li>
<li><p>char：被截取的字符串</p>
</li>
<li><p>posistion:要截取的开始位置，初始值为1，第一个字符字节均为1，若为负数则从右往左</p>
</li>
<li><p>substring_length：截取的长度，无值截取到末尾。根据截取的类型，如果字节截到汉字时需要3个才能截出来，否则无这个中文。</p>
<p>select substr(‘abcd我爱你’,2,5),substrb(‘abcd我爱你’,2,5),substrc(‘abcd我爱你’,2,5) from product where productId=1;</p>
</li>
</ul>
<pre><code>select substr(&apos;abcd我爱你&apos;,-2,5),substrb(&apos;abcd我爱你&apos;,-3,5),substrc(&apos;abcd我爱你&apos;,-2,5) from product where productId=2;</code></pre><h5 id="字符串搜索函数"><a href="#字符串搜索函数" class="headerlink" title="字符串搜索函数"></a>字符串搜索函数</h5><p>instr函数，在指定的字符串中搜索另一个字符串的，不存在返回0，存在<strong>返回首字符位置</strong> <strong>语句结构</strong> {[substr|substrb|substrc|substr2|substr4]}(string,substring[,posistion[,occurence]]) 语法参数</p>
<ul>
<li><p>搜索函数的类型与字符串截取一致</p>
</li>
<li><p>string：待搜索字符擦混</p>
</li>
<li><p>substring：要搜索的字符串</p>
</li>
<li><p>position：搜索开始的位置，默认为1</p>
</li>
<li><p>occurence：第几次出现,默认为1</p>
<p>select instr(‘dabc我爱abc你’,’abc’,1,1),instr(‘dabc我爱abc你’,’abc’,1,2),instr(‘dabc我爱abc你’,’abc’,-1,1) from product where productId=2;</p>
</li>
</ul>
<p>以此为例，最后一个参数设为1(默认为1),则检索第一个匹配的字符串获得位置，在2 检索第二次匹配，字符串的位置是7 那我将position设置为-1，从右往左检索，则第一个匹配到abc的就是位置为7的了。</p>
<h5 id="字母大小写转换"><a href="#字母大小写转换" class="headerlink" title="字母大小写转换"></a>字母大小写转换</h5><p>upper,lower,initcap函数</p>
<pre><code>select upper(&apos;etvhERGdg&apos;),lower(&apos;etvhERGdg&apos;),initcap(&apos;this,is,a,test&apos;) from product where productId=2;</code></pre><p>initcap函数，只要字符串里，几个字符串通过空格，逗号，点 分隔开，则每个字符串的首字母为大写 一般用于标题大写。</p>
<h5 id="字符串替换函数"><a href="#字符串替换函数" class="headerlink" title="字符串替换函数"></a>字符串替换函数</h5><p><strong>语法:</strong> replace(char,search_string[,replacement_string])</p>
<ul>
<li><p>char：表示搜索的目标字符串</p>
</li>
<li><p>search_string：目标字符串中要搜索的字符串</p>
</li>
<li><p>replacement_string：可选，用来替代被搜索的字符串，如无此参数，则删除搜索的字符串</p>
<p>select replace(‘this is a abcTest’,’abc’),replace(‘this is a abcTest’,’abc’,12) from product where productId=1;</p>
</li>
</ul>
<h5 id="字符串填充函数"><a href="#字符串填充函数" class="headerlink" title="字符串填充函数"></a>字符串填充函数</h5><p>rpad(expr1,n[,expr2]) 在字符串expr1的右边用字符串expr2填充，直到字符串长度为n为止，如果expr2不存在则空格填充。 如果n小于字符串expr1的长度，则从左至右截取为n个长度。</p>
<pre><code>select rpad(&apos;this is a abcTest&apos;,3,&apos;1&apos;),rpad(&apos;this is a abcTest&apos;,20,&apos;1&apos;) from product where productId=1;</code></pre><h5 id="字符串首尾空格清除函数"><a href="#字符串首尾空格清除函数" class="headerlink" title="字符串首尾空格清除函数"></a>字符串首尾空格清除函数</h5><p>trim,rtrim,ltrim函数 <strong>语法:</strong> TRIM([LEADING|TRAILING|BOTH] [trim_character FROM] trim_source)</p>
<ul>
<li><p>LEADING：删除trim_source的前缀字符</p>
</li>
<li><p>TRAILING：删除trim_source的后缀字符</p>
</li>
<li><p>BOTH：删除trim_source的前缀和后缀字符</p>
</li>
<li><p>trim_character:删除的指定字符，默认删除空格,只能是单个字符</p>
</li>
<li><p>trim_source：被操作的字符串</p>
<p>select trim(‘    abcdefga  ‘),trim(leading ‘a’ from ‘abcdefga’),trim(trailing from ‘    abcdefga  ‘) from product where productId=2;</p>
</li>
</ul>
<p>如果使用LEADING、TRAILING、BOTH，则必须要使用FROM关键字,但是删除指定字符可以是默认空格。 <strong>语法:</strong> {[RTRIM|LTRIM]|(char,[set]) 右清除和左清除空格函数 1. 默认无set可选参数，则清除左边或右边全部空格 2. 设置set字符为要删除的字符</p>
<pre><code>select ltrim(&apos;   my name is abc  &apos;),ltrim(&apos;aaaa name is abc&apos;,&apos;a&apos;),rtrim(&apos;   my name is abc  &apos;),rtrim(&apos;my name is abc&apos;,&apos;abc&apos;) from product where productId=1;</code></pre><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><p>函数名</p>
<p>说明</p>
<p>示例</p>
<p>sysdate</p>
<p>获得当前日期</p>
<p><a href="#d1">示例</a></p>
<p>systimestamp</p>
<p>获得系统时间包含时区信息精确到微秒</p>
<p>add_months(date,integer)</p>
<p>返回指定日期加上一个月份数后的日期</p>
<p><a href="#d2">示例</a></p>
<p>last_day(date)</p>
<p>返回指定日期对应月份的最后一天</p>
<p>next_day(date,char)</p>
<p>返回当前日期的下一周几的对应日期,char为星期几</p>
<p><a href="#d3">示例</a></p>
<p>extract(type FROM datetime)</p>
<p>提取指定日期的特定部分</p>
<p><a href="#d4">示例</a></p>
<p>months_between(date1,date2)</p>
<p>date1-date2相差月份数,可能为小数</p>
<p>h5 id=”d1”&gt;获得当前日期、时区时间函数</p>
<pre><code>select sysdate,systimestamp from product where productId=2;</code></pre><h5 id="为日期加上指定月份函数"><a href="#为日期加上指定月份函数" class="headerlink" title="为日期加上指定月份函数"></a>为日期加上指定月份函数</h5><p><strong>语法：</strong> ADD_MONTHS(date,integer)</p>
<ul>
<li><p>date：指定的日期</p>
</li>
<li><p>integer：要加的月份数，如果为负数，则减月份数</p>
<p>select add_months(sysdate,2),add_months(‘2018-11-8’,-2) from product where productId=2;</p>
</li>
</ul>
<h5 id="指定日期的下星期几对应的日期"><a href="#指定日期的下星期几对应的日期" class="headerlink" title="指定日期的下星期几对应的日期"></a>指定日期的下星期几对应的日期</h5><p><strong>语法:</strong> next_day(date,char)</p>
<ul>
<li><p>date：当前指定日期</p>
</li>
<li><p>char：星期几，值可以为，’星期一’ –’星期日’’，以外国<strong>周日为每星期的第一天</strong>,为空则返回空</p>
<p>select next_day(sysdate,’’),next_day(sysdate,’星期日’) from product where productId=2;</p>
</li>
</ul>
<h5 id="提取指定日期的特定部分"><a href="#提取指定日期的特定部分" class="headerlink" title="提取指定日期的特定部分"></a>提取指定日期的特定部分</h5><p><strong>语法：</strong> EXTRACT(YEAR|MONTH|DAY FROM datetime)</p>
<pre><code>select extract(year from sysdate),extract(month from sysdate),extract(day from sysdate) from product where productId=2;</code></pre><p>通过指定类型获得当前日期的年、月、日。</p>
<h4 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h4><p>函数名</p>
<p>说明</p>
<p>示例</p>
<p>cast(expr as type_name)</p>
<p>类型转换,基本上是数字与字符，日期与字符之间</p>
<p><a href="#z1">示例</a></p>
<p>to_char(n[,fmt[,nlsparam]])</p>
<p>数值或日期转换为字符串</p>
<p><a href="#z2">示例</a></p>
<p>to_date(char[,fmt])</p>
<p>字符串转换为日期</p>
<p><a href="#z3">示例</a></p>
<p>to_number(expr[,fmt[,nls]])</p>
<p>字符串转数字，一般直接可转换</p>
<p><a href="#z4">示例</a></p>
<h5 id="数据类型转换函数"><a href="#数据类型转换函数" class="headerlink" title="数据类型转换函数"></a>数据类型转换函数</h5><p><strong>示例:</strong></p>
<pre><code>select cast(123 as varchar2(3)),cast(sysdate as varchar2(20))  from product where productId=1;</code></pre><h5 id="字符转换函数"><a href="#字符转换函数" class="headerlink" title="字符转换函数"></a>字符转换函数</h5><ol>
<li>TO_CHAR(number[,fmt[,nls]])</li>
</ol>
<ul>
<li><p>number:数值型数据</p>
</li>
<li><p>fmt：转换成字符串的格式</p>
<p>select to_char(168.568),to_char(168.568,’999.99’),to_char(168.568,’$999.99’) from product where productId=1;</p>
</li>
</ul>
<ol start="2">
<li>TO_CHAR(date[,fmt[,nls]])</li>
</ol>
<ul>
<li><p>nls:使用的语言类型</p>
<p>select to_char(sysdate),to_char(sysdate,’YYYY-MM-DD’),to_char(sysdate,’HH24:MI:SS’),to_char(sysdate,’J’),<br>to_char(sysdate,’MONTH’),to_char(sysdate,’Month’,’NLS_DATE_LANGUAGE=ENGLISH’)<br>from product where productId=’1’;</p>
</li>
</ul>
<p>fmt可取值有</p>
<ul>
<li>YYYY-MM-DD：年月日</li>
<li>HH24:MI:SS：时分秒</li>
<li>YEAR：年份，英文方式,twenty eighteen</li>
<li>MONTH：月,6月</li>
<li>DAY：星期,星期六</li>
<li>J：公元制时间戳</li>
<li>YYYY/MM/DD：返回的值为纯数字,年份四位，月日两位</li>
<li>……</li>
</ul>
<h5 id="日期转换函数"><a href="#日期转换函数" class="headerlink" title="日期转换函数"></a>日期转换函数</h5><p><strong>语法:</strong> TO_DATE(char[,fmt[,nls]])</p>
<ul>
<li><p>char：待转换的字符，可以使CHAR、VARCHAR2、NCHAR、NVARCHAR2</p>
</li>
<li><p>fmt：转换格式</p>
</li>
<li><p>nls：控制格式化时使用语言类型</p>
<p>SELECT TO_DATE(‘2018-6-23’,’YYYY-MM-DD’),TO_DATE(‘2458293’,’J’) from product where productId=1;</p>
</li>
</ul>
<p>公元制时间戳反过来可以转换成日期</p>
<h5 id="数字转换函数"><a href="#数字转换函数" class="headerlink" title="数字转换函数"></a>数字转换函数</h5><p><strong>语法:</strong> TO_NUMBER(char[,fmt[,nls]]) 最简单的数字转字符，不需要函数，直接就自动转换</p>
<pre><code>SELECT TO_NUMBER(&apos;2345.304&apos;),TO_NUMBER(&apos;2345.304&apos;,&apos;9999.999&apos;) FROM product where productId=1;</code></pre><h4 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h4><p>函数名</p>
<p>说明</p>
<p>NVL(expr1,expr2)</p>
<p>如果expr1的值为NULL，则返回expr2，否则返回expr1</p>
<p>NVL2(expr1,expr2,expr3)</p>
<p>如果expr1为NULL，则返回expr3，否则返回expr2</p>
<p>DECODE(value,if1,then1,if2,then2,…,else)</p>
<p>如果value的值为if1，则返回then1；如果值为if2，则返回then2，…，否则返回else</p>
<p>COALESCE(expr)</p>
<p>返回列表中第一个不为NULL的表达式,参数必须是同一类型。</p>
<p><strong>示例:</strong></p>
<pre><code>select nvl(null,&apos;abc&apos;),nvl2(&apos;0&apos;,&apos;abc&apos;,123),coalesce(null,5,158) from product where productId=1;</code></pre><p>案例较为简单</p>
<pre><code>select decode(to_char(sysdate,&apos;MM&apos;),&apos;01&apos;,&apos;一月&apos;,&apos;02&apos;,&apos;二月&apos;,&apos;06&apos;,&apos;六月&apos;,&apos;其他月份&apos;) from product where productId=1;</code></pre><p>to_char()函数中，获得值为06，则返回六月。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle相关子查询与非相关子查询</title>
    <url>/2018/06/18/Oracle/Oracle%E7%9B%B8%E5%85%B3%E5%AD%90%E6%9F%A5%E8%AF%A2%E4%B8%8E%E9%9D%9E%E7%9B%B8%E5%85%B3%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>子查询就是嵌套查询，嵌套在另外一个语句中的SELECT语句。为何有这种情况？因为where子句可能是不固定的，需要select查询得到值作为父select的where条件。</p>
<h4 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h4><p>相关子查询的执行依赖于外部查询。多数情况下是子查询的WHERE子句中引用了外部查询表。 <strong>1.子查询返回单行</strong></p>
<pre><code>SELECT *  FROM product WHERE productId = (SELECT productId FROM product WHERE productName=&apos;晨光签字笔&apos;);</code></pre><p>一般像子查询而言，都先执行括号里的，执行子SELECT，得到值后作为父SELECT的条件再进行查询。 <strong>2.子查询返回多行</strong></p>
<pre><code>SELECT *  FROM product WHERE productId IN (SELECT productId FROM product WHERE productName=&apos;晨光签字笔&apos; OR productName=&apos;康师傅矿泉水&apos;);</code></pre><p>子查询返回的值为多行值，需要用到IN关键字，用法与前面一致，只是括号中返回多行时不能用“=”号。 除此之外也可以使用比较关键字SOME,ANY,ALL，需要配合&lt;、、&gt;=使用。</p>
<ul>
<li>ANY:满足子查询结果的任意一个,与&gt;、&gt;=搭配表示查询列表中 条件 <strong>大于等于子查询中的最小值</strong>。&lt;、、&gt;=搭配表示查询列表中 条件 <strong>大于等于子查询列表中的最大值</strong>。</li>
<li>SOME:与ANY类似</li>
<li>ALL:满足子查询的所有结果,与&gt;、&gt;=搭配表示查询列表中 条件 <strong>大于等于子查询列表中的最大值</strong>。</li>
</ul>
<p><strong>ANY示例:</strong></p>
<pre><code>select *  from product where providerId &gt;any (select providerId from provider where providerId != 1);</code></pre><p>子查询中供应商编号！=1，返回2,3,4号，那么将返回产品中对应供应商编号大于最小值(2)的数据,即返回的产品都是编号为3和4的。 <strong>SOME示例:</strong></p>
<pre><code>select * from product where productPrice =some(select productPrice from product where productId=3) and productId!=3;</code></pre><p>SOME与ANY用法一样，只不过ANY多用于非“=”的环境。 该语句表示的是，产品价格为 编号3价格 的产品，但不包括编号3。它将返回其他与产品3价格相等的产品。 <strong>ALL示例：</strong></p>
<pre><code>select  * from product where productPrice &lt; ALL (select productPrice from product where productId=3);</code></pre><p>找出比指定产品的价格低的产品。 当然，这个语句里完全可以不使用ALL关键字，因为子查询结果只返回了一行。</p>
<h4 id="非相关子查询"><a href="#非相关子查询" class="headerlink" title="非相关子查询"></a>非相关子查询</h4><p>EXISTS与NOT EXISTS关键字 EXISTS用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False EXISTS 指定一个子查询，检测 行 的存在。</p>
<pre><code>select  * from product where exists (select productName from product where productId=1);</code></pre><p>NOT EXISTS则与之相反</p>
<h4 id="子查询应用于FROM子句"><a href="#子查询应用于FROM子句" class="headerlink" title="子查询应用于FROM子句"></a>子查询应用于FROM子句</h4><p>同时，子查询，子SELECT语句不仅可以放在条件，也可以放在seelct列表中，FROM子句中。 <strong>FROM示例:</strong> 查询员工的编号，姓名，以及对应部门id，和部门平均薪资</p>
<pre><code>select emp.eId,emp.eName,d_avg_sal.deptId,d_avg_sal.avgsal from emp,(select deptId,avg(sal) avgsal from dept group by deptId) d_avg_sal where emp.deptId=d_avg_sal.deptId;</code></pre><p>我们只需要将FROM子句中子查询查出来的数据作为一张表来看。</p>
<h4 id="通过子查询创建表"><a href="#通过子查询创建表" class="headerlink" title="通过子查询创建表"></a>通过子查询创建表</h4><pre><code>CREATE TABLE semp
as
select * from emp where empId&gt;100;</code></pre><p>而当然，像这些语句也能使用表连接查询，那既然表连接能办到还需要子查询呢，因为子查询能办到的表连接不一定可以。 <strong>其实两者各有使用情况:</strong></p>
<ul>
<li>如果SELECT列表中包含的列来自多个表，那么这时连接的优势比较大。</li>
<li>如果需要及时计算聚集值并用于外部查询比较时，子查询就比较优势，如max(column)列值作为父查询的条件值。</li>
</ul>
<p>不过，仍要考虑其效率和难易程度。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle表连接查询</title>
    <url>/2018/06/18/Oracle/Oracle%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h4 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h4><p><strong>表文件:</strong></p>
<pre><code>create table product
(
productId number(6) not null,
productName nvarchar2(20) not null,
productPrice number(8,2),
productWeight number(6,2),
providerId number(6),
constraint pk_productId primary key(productId)
);

CREATE TABLE provider
(
providerId number(6) not null,
providerName nvarchar2(20) not null,
CONSTRAINT pk_providerId primary key(providerId)
);

ALTER TABLE product ADD CONSTRAINT fk_provider_product FOREIGN KEY(providerId) REFERENCES provider(providerId);

insert into provider values(1,&apos;晨光文具店&apos;);
insert into provider values(2,&apos;康师傅实体店&apos;);
insert into provider values(3,&apos;当当网&apos;);
insert into provider values(4,&apos;三只松鼠旗舰店&apos;);

insert into product values(1,&apos;晨光签字笔&apos;,12,120,1);
insert into product values(2,&apos;康师傅矿泉水&apos;,2.5,550,2);
insert into product values(3,&apos;《少有人走的路》白金版&apos;,34,430,3);
insert into product values(4,&apos;《少有人走的路》白金版&apos;,34,430,3);
insert into product values(5,&apos;康师傅红烧牛肉面&apos;,4,120,2);
insert into product values(6,&apos;皇冠笔&apos;,7.8,60,1);
insert into product(productId,productName,productPrice,productWeight) values(7,&apos;HUAWEI Mate10&apos;,4199,320);</code></pre><p>连接查询是关系型数据库中最重要的查询，主要包括内连接，外连接，全连接等。</p>
<h5 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h5><p>即把两个或多个表进行连接，只查询出匹配的记录，不匹配的记录无法查询 如图1 [caption id=”attachment_175” align=”alignnone” width=”300”]<img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/06/1516281310252_13.png?x-oss-process=image/resize,m_fill,w_300,h_197" alt=""> 内连接示意图[/caption] <strong>语法:</strong></p>
<pre><code>//等值连接
select &lt;select_list&gt; from TableA A,TableB B where A.key=B.key

//内连接
select &lt;select_list&gt; from TableA A INNER JOIN TableB B on A.key=B.key


select *  from product,provider where product.providerId=provider.providerId;

select  * from product pd inner join provider pv on pd.providerId=pv.providerId;</code></pre><p><img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/06/.png?x-oss-process=image/resize,m_fill,w_300,h_41" alt=""></p>
<h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><p>外连接分为左外连接、右外连接、全外连接。 <strong>1.左外连接</strong> 返回结果为左边全部记录，如果左表的记录在右表没有匹配项，则在返回列表中右表的所有选择列表为均为NULL。 如图2 [caption id=”attachment_177” align=”alignnone” width=”300”]<img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/06/1516281310214_12.png?x-oss-process=image/resize,m_fill,w_300,h_197" alt=""> 左外连接示意图[/caption] <strong>语法:</strong></p>
<pre><code>select &lt;select_list&gt; from TableA A LEFT JOIN TableB B on A.key=B.key


select  * from product pd left join provider pv on pd.providerId=pv.providerId;</code></pre><p>HUAWEI Mate10并未与provider中的任何一项关联，所以此左表查询中，该条数据右表选择列表为NULL。 <strong>2.右外连接</strong> 返回结果为右表全部记录，如果右表的记录在左表没有匹配项，则返回列表中左表的所有选择列表项均为NULL。 如图3 [caption id=”attachment_178” align=”alignnone” width=”300”]<img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/06/1516281310671_15.jpeg?x-oss-process=image/resize,m_fill,w_300,h_197" alt=""> 右外连接示意图[/caption] <strong>语法:</strong></p>
<pre><code>select &lt;select_list&gt; from TableA A RIGHT JOIN TableB B on A.key=B.key


select  * from product pd left join provider pv on pd.providerId=pv.providerId;</code></pre><p>供应商 三只松鼠没有与商品中匹配的，所以左表都是空的。 <strong>3.全外连接</strong> 除了返回内连接匹配的数据之外，也返回两表中不匹配的数据 如图4 [caption id=”attachment_179” align=”alignnone” width=”300”]<img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/06/1516281310164_10.png?x-oss-process=image/resize,m_fill,w_300,h_197" alt="全外连接示意图"> 全外连接示意图[/caption] <strong>语法:</strong></p>
<pre><code>select &lt;select_list&gt; from TableA A FULL JOIN TableB B on A.key=B.key


select  * from product pd left join provider pv on pd.providerId=pv.providerId;</code></pre><p>将返回内连接的匹配的项和左右表的不匹配项。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据查询语言select</title>
    <url>/2018/06/10/Oracle/Oracle%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80select/</url>
    <content><![CDATA[<h3 id="数据查询语言"><a href="#数据查询语言" class="headerlink" title="数据查询语言"></a>数据查询语言</h3><p>SELECT数据查询，可以检索数据，由一系列字句组成，根据字句条件满足情况查询，按照复杂程度可分为简单查询、WHERE条件查询、多表查询、子查询等。</p>
<blockquote>
<p>注意：ORACLE中语句字母大小写无影响，字段均转换为大写。建议关键字大写。</p>
</blockquote>
<p><strong>语法结构:</strong></p>
<pre><code>SELECT 
    [DISTINCT|ALL]
        select _list
    FROM table_list
    [where_clause]
    [group_by_clause]
    [HAVING condition]
    [order_by_clause]</code></pre><p><strong>语法说明：</strong></p>
<ul>
<li>SELECT：查询关键字</li>
<li>[DISTINCT|ALL]：字段数据中的数据是否去除重复记录</li>
<li>select_list：需要查询的字段列表</li>
<li>FROM：查询必须关键字，数据来源</li>
<li>[where_clause]：查询的WHERE条件部分</li>
<li>[group_by_clause]：GROUP BY 子语句部分</li>
<li>[HAVING condition]：HAVING字句部分,排序后筛选</li>
</ul>
<h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><p><strong>1.指定字段查询</strong></p>
<pre><code>SELECT productId,productName,productPrice FROM product;</code></pre><p>各字段使用逗号分割。 <strong>2.获得所有字段数据</strong></p>
<pre><code>SELECT *  FROM product;</code></pre><p>使用星号省略所有字段，但这样做导致查询缓慢，在生产环境中并不建议使用。 <strong>3.使用别名代替字段</strong></p>
<pre><code>SELECT productId as 产品编号,productName as 产品名称,productPrice as 产品价格 FROM product;</code></pre><p>别名一般使用在开发环境中，生产环境也不适用。 <strong>4.使用表达式操作字段</strong></p>
<pre><code>SELECT productId,productName,productPrice || &apos;*&apos; || 1.25 || &apos;=&apos; || productPrice*1.25 as new_productPrice FROM PRODUCT;</code></pre><p>语句中有“||”表示字符连接符号和“<em>”符号表示算数乘号 *</em>5.使用函数操作查询字段**</p>
<pre><code>SELECT count(*) FROM product;
或
SELECT count(0) FROM product;

SELECT lengthb(productName) FROM product;</code></pre><p>count函数查询表中记录，lengthb获得字符串字节数。 <strong>6.去处检索数据中重复记录</strong></p>
<pre><code>select distinct productName,productPrice from product;</code></pre><p>如果我再插入一条除主键外相同记录，那么此语句将根据distinct后的字段列进行去重,若查询出来有相同的，则以第一条为准。如果字段列有主键，那么永远不会重复。</p>
<h4 id="WHERE条件查询"><a href="#WHERE条件查询" class="headerlink" title="WHERE条件查询"></a>WHERE条件查询</h4><p>WHERE字句用于条件筛选，对字段进行筛选,满足条件查询。 WHERE字句中可以使用的操作符有关系操作符、比较操作符、罗技操作符。 1) 关系操作符包括：&lt;、、&gt;=、=、!= 2) 比较操作符包括:</p>
<ul>
<li>IS NULL：操作数为NULL返回TRUE。</li>
<li>LIKE：模糊匹配比较字符串。</li>
<li>BETWEEN..AND…：在两值范围中。</li>
<li>IN：验证操作数在一系列值中。</li>
</ul>
<p>3) 逻辑操作符:</p>
<ul>
<li>AND：并且，两个条件都满足</li>
<li>OR：或者</li>
<li>NOT：某个逻辑值取反</li>
</ul>
<p><strong>1.单一条件查询</strong></p>
<pre><code>SELECT * FROM product WHERE productPrice&gt;10;
SELECT * FROM product WHERE productName != &apos;晨光签字笔&apos;</code></pre><p>通过比较运算符，比较,字符要用引号引起来。 <strong>2.多条件查询</strong></p>
<pre><code>SELECT * FROM product WHERE productId&gt;2 AND productWeight IS NULL;

SELECT * FROM product WHERE productId&gt;2 OR productWeight&gt;10;

SELECT * FROM product WHERE NOT productWeight&lt;10;

SELECT * FROM product WHERE NOT productWeight IS NULL;

SELECT * FROM product WHERE productPrice BETWEEN 10 AND 50;</code></pre><p><strong>3.LIKE模糊匹配查询</strong></p>
<ul>
<li><p>_：可以代替一个字符</p>
</li>
<li><p>%：可以代替多个字符</p>
<p>SELECT *  FROM product WHERE productName LIKE ‘晨光%’;</p>
<p>SELECT  * FROM product WHERE productName LIKE ‘_光%笔’;</p>
</li>
</ul>
<p><strong>4.限制条件在某范围内</strong></p>
<pre><code>SELECT *  FROM product WHERE productId IN (1,3,4);</code></pre><p>它将筛选出productId为1,3,4的记录,<strong>一般IN用于子查询中</strong>，而且括号中的值一般都为主键值。</p>
<h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h5><ul>
<li><p>AVG(column)：列所有值的平均数</p>
</li>
<li><p>SUM(column)：列所有值的总和</p>
</li>
<li><p>MAX(column)：列所有值中的最大值</p>
</li>
<li><p>MIN(column)：列所有值的中的最小值</p>
<p>SELECT AVG(productPrice),SUM(productPrice),MAX(productPrice),MIN(productPrice) FROM product;</p>
</li>
</ul>
<p>GROUP BY子句用于分组，HAVING子句用于分组后的筛选。 <strong>笔记:</strong></p>
<ul>
<li><p>聚合函数只能出现在查询列表、HAVING、ORDER BY 子句中(不能出现在WHERE子句中)。</p>
</li>
<li><p>如果再SELECT语句中关键字排序为GROUP BY,HAVING、ORDER BY、LIMIT</p>
</li>
<li><p>在查询列表中如果有列、表达式、聚合函数，那么这些列和表达式必须出现在GROUP BY子句中，否则出错</p>
<p>SELECT SUM(productPrice),productName FROM product GROUP BY productName;</p>
</li>
</ul>
<p>按产品名称分组，获得该分组每个Name值对应价格的和。如果查询列表出现productName则GROUP BY中必须有productName，如果查询列表没有，那么GROUP BY子句中也可以有。 当然GROUP BY子句中可以有多个列名。 <strong>HAVING子句放在GROUP BY后面，用于WHERE之后分组完再次筛选，与WHERE用法一致</strong></p>
<pre><code>SELECT SUM(productPrice),productName FROM product GROUP BY productName HAVING SUM(productPrice)&gt;30;</code></pre><h4 id="检索结果排序"><a href="#检索结果排序" class="headerlink" title="检索结果排序"></a>检索结果排序</h4><p>ORDER BY子句用于排序操作,字段名后跟排序方式，ASC表示升序，DESC表示降序</p>
<pre><code>SELECT *  FROM product ORDER BY productPrice;

SELECT SUM(productPrice),productName FROM product GROUP BY productName ORDER BY SUM(productPrice) DESC;</code></pre>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据定义语言，数据操作语言</title>
    <url>/2018/06/05/Oracle/Oracle%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80%EF%BC%8C%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h3 id="数据定义语言数据库表的创建"><a href="#数据定义语言数据库表的创建" class="headerlink" title="数据定义语言数据库表的创建"></a>数据定义语言数据库表的创建</h3><p>前面已经有简单的了解数据定义语言，那么直接切入正题。 在创建表之前，先说一下。数据库的问题。 与MySQL数据库不一样，mysql可以创建多个数据库，而Oracle只有一个数据库orcl，它通过用户来操作，每个用户访问到的数据是不一样的。你需要创建用户，创建并分配表空间，赋予权限。并登陆创建的用户来操作。在后面讲，他与sql操作无关，可跳过学习。</p>
<h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><p><strong>创建语法:</strong></p>
<pre><code>CREATE TABLE table_name
(
column_name datatype [null|not null],
column_name datatype [null|not null],
...
[constraint]
)</code></pre><p><strong>语法说明:</strong></p>
<ul>
<li>table_name：数据表名称，在同一数据库中数据表名是不能重复的</li>
<li>column_name:列名，或字段名，在一个表中不能重复</li>
<li>datatype:数据类型，上节课说的</li>
<li>[null | not null]:表明该列是否为空或者不为空</li>
<li>[constraint]:设置表中列的约束，主要包括主键约束、外键约束、检查约束等。</li>
</ul>
<p>示例:</p>
<pre><code>CREATE TABLE product
(
productId number(4) not null,
productName nvarchar2(20),
productPrice number(10,2),
CONSTRAINT pk_product primary key(productId)
)</code></pre><p>语法已经说了，约束上章已经讲了，代码就不解释了。</p>
<h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p>示例：</p>
<pre><code>DROP TABLE table_name;</code></pre><p>删除整张表，删除后将无法使用。</p>
<h4 id="ALTER-语句修改表"><a href="#ALTER-语句修改表" class="headerlink" title="ALTER 语句修改表"></a>ALTER 语句修改表</h4><p>如果想更改表的属性或是列，可使用LATER TABLE语句 <strong>语法:</strong></p>
<pre><code>ALTER TABLE table_name 
ADD column_name | MODIFY column_name | DROP COLUMN column_name</code></pre><p><strong>语法说明:</strong></p>
<ul>
<li>ADD:用于向表中添加列</li>
<li>MODIFY:用来修改表中已存在的信息</li>
<li>DOP COLUMN:删除表中的列删除列时有时要加上<strong>CASCADE CONSTRAINTS</strong>,把该列有关的约束一并删掉。</li>
</ul>
<p><strong>示例:</strong></p>
<pre><code>//假如还是上面创建的product表,要为其添加productWeight重量字段
ALTER TABLE product ADD productWeight number(6,2);

//修改productName的数据类型为varchar2(40),查看数据类型是否修改看下一个代码块
ALTER TABLE product MODIFY productName varchar2(40);

//删除列productWeight字段
ALTER TABLE product DROP COLUMN productWeight;

//更改列名,productName改为productN
ALTER TABLE product RENAME COLUMN productName to productN;</code></pre><p>通常删除列字段可能会到你没有权限,无法删除属于sys的表中的列</p>
<pre><code>//查看表数据结构
SELECT table_name, column_name, data_type, char_length
  FROM all_tab_cols
 WHERE table_name = &apos;PRODUCT&apos; ;</code></pre><p>这是表的特性的增删改字段操作，而通过ALTER TABLE添加约束，上个文章中也是说了的。</p>
<h3 id="数据操作语言"><a href="#数据操作语言" class="headerlink" title="数据操作语言"></a>数据操作语言</h3><h4 id="INSERT语句"><a href="#INSERT语句" class="headerlink" title="INSERT语句"></a>INSERT语句</h4><p>INSERT语句是对表数据的新增操作. <strong>语法:</strong></p>
<pre><code>INSERT INTO table_name(column1，column2，column3...) VALUES(val1,val2,val3...);</code></pre><p>如果你要插入整个列的字段,那么不必写列名了</p>
<pre><code>INSERT INTO table_name VALUES(val1,val2,val3...);</code></pre><p>当然如果主键是自增的,那就不需要添加主键列了，但是需要为主键列设置序列(后面讲)。 <strong>示例:</strong></p>
<pre><code>INSERT INTO product(PRODUCTID,PRODUCTNAME,PRODUCTPRICE,PRODUCTWEIGHT) VALUES(1,&apos;晨光笔&apos;,12,20);
INSERT INTO product VALUES(2,&apos;怡宝矿泉水&apos;,4,1500);</code></pre><h4 id="DELETE语句"><a href="#DELETE语句" class="headerlink" title="DELETE语句"></a>DELETE语句</h4><p>DELETE语句用于表数据的删除，根据条件进行删除，一般通过获得主键值删除。 <strong>语法:</strong></p>
<pre><code>DELETE FROM table_name WHERE condition</code></pre><p><strong>示例:</strong></p>
<pre><code>DELETE FROM product WHERE productId=1;
DELETE FROM product WHERE productName=&apos;怡宝矿泉水&apos;;</code></pre><p>WHERE条件后可以添加任何条件。 如果你想删除整个表格数据，而不删除表结构，可使用如下语句</p>
<pre><code>TRUNCATE TABLE table_name;</code></pre><p><strong>区别:</strong></p>
<ul>
<li>DELETE：删除表数据会记录日志，相对比较慢,commit前是可以回滚恢复的</li>
<li>TRUNCATE：不记录日志，永久删除，数据不能恢复，速度快，但不会删除表结构</li>
<li>DROP TABLE：直接删除整个表，不可恢复</li>
</ul>
<h3 id="UPDATE-语句"><a href="#UPDATE-语句" class="headerlink" title="UPDATE 语句"></a>UPDATE 语句</h3><p>进行数据更改的操作 <strong>语法:</strong></p>
<pre><code>UPDATE  table_name SET column1=val1[,column2=val2....] WHERE [condition]</code></pre><p><strong>示例:</strong></p>
<pre><code>UPDATE product SET productWeight=550,productName=&apos;康师傅小瓶矿泉水&apos; WHERE productId= 2;</code></pre><p>一般更改条件根据主键获得，而一般不会更改主键，因为这会导致不好的情况。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle约束类型主键,外键,唯一约束</title>
    <url>/2018/06/03/Oracle/Oracle%E7%BA%A6%E6%9D%9F%E7%B1%BB%E5%9E%8B%E4%B8%BB%E9%94%AE,%E5%A4%96%E9%94%AE,%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h3 id="约束的使用"><a href="#约束的使用" class="headerlink" title="约束的使用"></a>约束的使用</h3><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><p>主键在每个表中只有一个，主键列是唯一标识，它的值是唯一的不可重复，不能为空。 例如像产品表中，productId,productName，productPrice,productAddress等，productId就相当于主键，用来唯一标识这条数据。 1.可在创建表语句中通过primary key(字段名)设置 2.还可以使用ALTER TABLE语句为表添加主键约束和移除主键约束。</p>
<pre><code>//创建时添加
CONSTRAINT constraint_name PRIMARY KEY(column_name)
//添加约束
ALTER TABLE table_name ADD CONSTRAINT constraint_name PRIMARY KEY(column_name);
//移除约束
ALTER ATBLE table_name DROP CONSTRAINT constraint_name;</code></pre><ul>
<li>constraint_name:约束的名称</li>
<li>column_name:作为主键列的列名</li>
</ul>
<h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><p>1.外键是指在表（子表）中定义外键的字段的列的值必须在另一张表（父表）中出现。外键是用来实现参照完整性的方法之一。 2.被参照的表称为父表，创建外键的表称为子表。子表中的外键关联的是父表中的主键 3.外键可以在建表的时候定义，也可以通过alter table语句来创建。 例如:班级和学生,<strong>为学生添加约束前需已经创建了主表Class表,否则无从参考</strong>，在学生表中添加约束，外键列为学生表里的class_id,参考的表为Class，参考的列为Class的id。当class的id删除之后，学生表中关联该id的记录都会被级联删除。</p>
<pre><code>//在创建表中添加
CONSTRAINT constraint_name FOREIGN KEY (column_name) 
REFERENCES table_name (column_name)
[ON DELETE CASCADE];
//创建表之后添加
ALTER TABLE table_name ADD CONSTRAINT FOREIGN KEY (column_name) REFERENCES table_name (column_name);
//删除约束
ALTER TABLE table_name DROP CONSTRAINT constraint_name;</code></pre><ul>
<li><p>constraint_name:创建的外检约束的名称</p>
</li>
<li><p>FOREIGN KEY(column_name):指定外键约束的列名(子表外键列名)</p>
</li>
<li><p>table_name(column_name):要引用的表名,列名(主表主键名)</p>
</li>
<li><p>[ON DELETE CASCADE]:可选，设置级联删除，当主键的字段被删除，外键对应的记录也被删除。</p>
<p>CONSTRAINT FK_class_student FOREIGN KEY(classId) REFERENCES class(Id) ON DELETE CASCADE;</p>
<p>ALTER TABLE student ADD CONSTRAINT fk_stu_class FOREIGN KEY (classId) references classes (Id) ON DELETE CASCADE;</p>
<p>ALTER TABLE student DROP CONSTRAINT fk_stu_class;</p>
</li>
</ul>
<h4 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h4><p>检查约束就是CHECK约束，规定该列能输入的值，以保证数据的正确性 1.在创建表时添加约束 2.使用ALTER TABLE添加约束</p>
<pre><code>CONSTRAINT constraint_name CHECK(condition);

ALTER TABLE table_name ADD CONSTRAINT constraint_name CHECK(condition);

ALTER TABLE table_name DROP CONSTRAINT constraint_name;</code></pre><p>condition指约束条件,可以使用between and,&gt;&lt;,and,or等。</p>
<pre><code>CONSTRAINT chk_age CHECK(age&gt;=18 and age&lt;=60);
ALTER TABLE employee CONSTRAINT chk_sex CHECK(sex=&apos;男&apos; or sex=&apos;女&apos;);
ALTER TABLE employee CONSTRAINT chk_age CHECK(age between 18 and 60);</code></pre><h4 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h4><p>UNIQUE约束也称为唯一约束，设置后表示该列的值时<strong>唯一的，不允许重复，可以为空格</strong>，一个表中可以有多个唯一约束的列 1.在创建表时添加约束 2.使用ALTER TABLE添加约束</p>
<pre><code>CONSTRAINT constraint_name UNIQUE(column_name);
ALTER TABLE ADD ....//与上面的格式一致
ALTER TABLE DROP</code></pre><h4 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h4><p>NOT NULL约束，表示该列的值不能为空 1.在创建表时，在列名后面写 2.通过ALTER TABLE添加删除约束</p>
<pre><code>//创建时添加,不写后面的NOT NULL则默认可以为空
empName nvarchar2(10) NOT NULL
//创建后设置为NOT NULL
ALTER TABLE table_name MODIFY column_name NOT NULL;
//创建后设置为NULL
ALTER TABLE  dept MODIFY name NULL;</code></pre>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云域名加速服务阿里云CDN加速配置</title>
    <url>/2018/06/03/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E9%98%BF%E9%87%8C%E4%BA%91CDN%E5%8A%A0%E9%80%9F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="CDN简介"><a href="#CDN简介" class="headerlink" title="CDN简介"></a>CDN简介</h3><p>内容分发网络(Content Delivery Network，简称CDN),是建立并覆盖在承载网之上、由分布在不同区域的边缘节点服务器群共同组成的分布式网络，替代以Web Server为中心的传统数据传输模式。 CDN的工作原理就是将您源站的资源缓存到各地的边缘节点服务器（CDN节点）上，用户请求访问和获取资源时，就近调用CDN节点上缓存的资源。这种分布式数据传输方式，使得用户请求的资源不需要都回您的源站获取，从而避免网络拥塞、分担源站压力，保证用户访问资源的速度和体验。 不多说功能其他文字叙述了。 <strong>简而言之它能加速网站内容的加载速度，从而缩短网页加载时间。通俗的讲就是，变快。</strong> <strong>使用场景:</strong> 使用场景和相应的配置，是根据你自身站点的业务来选择的。 阿里云CDN主要提供了以下五种业务类型。</p>
<ul>
<li>图片小文件加速(网站应用静态加速)</li>
<li>大文件下载</li>
<li>音视频点播加速</li>
<li>直播流媒体加速</li>
<li>全站加速</li>
<li>移动加速</li>
</ul>
<p>对于目前的小站点，博客，论坛等。不应用视频，下载方面的站点，可以选择<strong>图片小文件加速</strong>。 站点中有动态资源(php,aps等)和静态资源(img,js,css等)，对于大量静态资源的加载，需要静态分离。动态资源放在服务器上，静态资源使用阿里云CDN加速，可以结合OSS对象存储使用。 可以有效地搞定网站图片，短视频等内容分发。 阿里云CDN帮助文档的架构图: <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/06/CDN1.jpg?x-oss-process=image/resize,m_fill,w_1024,h_602" alt=""> 接下来就开始动手做。</p>
<h3 id="开通CDN"><a href="#开通CDN" class="headerlink" title="开通CDN"></a>开通CDN</h3><p>在开启阿里云CDN服务之前，确保你的域名是一定要备案通过的。 <strong>1.开通CDN服务</strong> 首先进入阿里云的CDN产品详情页,你可以查看产品价格，以及帮助文档。计费分为两种，按带宽峰值和按流量。根据在产品价格页面查看，按理来说，按流量应该便宜一点吧。你也可以选择CDN流量包。 在你进入产品详情页后，有<strong>立即开通</strong>，这就是开通服务入口，选择按流量开通，如果服务已经开通，则之即进入CDN控制台。服务开通后你就可以选择左边的流量包套餐，根据情况选择。 <strong>2.</strong> 添加加速域名 进入控制台后，选择左侧的域名管理或者右边的添加域名。填写你要<strong>加速的域名</strong>,业务类型就是<strong>图片小文件</strong>，源站类型选择<strong>IP</strong>,并输入你的<strong>服务器IP地址</strong>，端口默认80，点击下一步。域名将添加完成。 可能需要一到两天的审核，在域名管理的列表中，状态栏会显示<strong>审核中</strong>。不过很快，十分钟左右不到就显示<strong>正在运行</strong>了。不过此时还没有加速，审核完毕后，会给你一个CNAME值 点击配置按钮,确保你的回源设置中，源站设置的值是<strong>你的服务器地址:80</strong>,回源host的值设置成你的<strong>加速域名</strong>。 <strong>3.</strong> 配置域名解析CNAME 在解析之前，你需要知道，A解析与CNAME解析会存在冲突，在此处你可以了解<a href="https://help.aliyun.com/knowledge_detail/39787.html?spm=a2c4g.11186623.2.5.itkqEW">解析规则冲突</a> 当你确保你的第2步没有问题后，打开云解析CDN控制台，找到你的加速域名对应解析。不要加速域名是fsats.com,解析到xiaoxx6.com里了。点击<strong>添加解析</strong>。 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/06/CDN_CNAME.png" alt=""> 主机记录:</p>
<ul>
<li>如果你在加速域名填写xxx.com那么此处写@</li>
<li>如果加速域名填写<em>.xxx.com,那么此处写</em></li>
<li>如果加速域名写<a href="http://www.xxx.com，那么此处写www">www.xxx.com，那么此处写www</a></li>
</ul>
<p>记录值填写，CDN控制台加速域名审核通过后那个CNAME值，然后点击确定。 如果提示你，与A类型解析冲突，那么你就删除A记录类型吧。 <strong>4.</strong> 查看是否生效 不同服务商，响应时间不同。通过cmd，ping 加速域名,如果被转向 <em>.</em>kunlun*.com,则解析生效。 <img src="http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/pic/27112/cn_zh/1511517154079/77.png" alt=""> 等待几分钟，等等那边服务处理完毕，你就可以访问了。 具体阿里云的帮助文档你可以<a href="https://help.aliyun.com/document_detail/27144.html?spm=a2c4g.11186623.2.17.XHf6tO">访问你这里</a>还有<a href="https://help.aliyun.com/document_detail/27101.html?spm=a2c4g.11186623.6.539.fLo0Z8">这里</a></p>
<h3 id="设置CDN中的问题"><a href="#设置CDN中的问题" class="headerlink" title="设置CDN中的问题"></a>设置CDN中的问题</h3><p>在我设置CDN之前，发现A和CNAME是冲突的，你要是在A里设置@记录，在CNAME里就不能设置@了。于是配置成@，发现访问域名不能到站点。随后提交工单询问开发人员发现，<strong>回源设置错误</strong>。 当我回到源站设置，将其值改为服务器地址，回源host改为加速域名，这样它就能回源访问。 当你为<strong>源站设置</strong>设置为服务器地址后，就已经<strong>指向了服务器</strong>，这样你就可以删除A记录，而<strong>回源host</strong>就是自定义在CDN节点回源过程中所需访问的WEB服务器域名。根据更改之后，过了几分钟就可以访问了。 然而对于<strong>源站设置</strong>这个设置，帮助文档中说，推荐和OSS对象存储搭配，当我将源站设置成OSS地址时才发生了上述现象。 这个CDN加速就是对于域名网站的CDN加速，你可以在你的云虚拟主机的管理中，左侧的CDN管理，在页面上就可以看见是否开启了CDN加速。 对于OSS对象存储而言，它也有CDN加速,就是<strong>源站类型</strong>这个选项，一个是OSS域名，一个是IP，一个是源站域名。它选择的就是OSS域名，也就是OSS外网域名。我就是这个问题错的，不过对于其加速的选择，源站的选择有什么区别，有什么作用我还没明白。</p>
]]></content>
      <categories>
        <category>aliyun</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云OSS对象存储的作为媒体库上传</title>
    <url>/2018/06/02/%E4%B8%AD%E9%97%B4%E4%BB%B6/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%9A%84%E4%BD%9C%E4%B8%BA%E5%AA%92%E4%BD%93%E5%BA%93%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h3 id="购买OSS对象存储并创建存储"><a href="#购买OSS对象存储并创建存储" class="headerlink" title="购买OSS对象存储并创建存储"></a>购买OSS对象存储并创建存储</h3><p><strong>1.</strong>在阿里云选择产品，对象存储OSS,购买资源包。 选择存储包，全国大陆通用，选择你的存储包规格，选择你的时长。根据你的需求进行购买。 <strong>2.</strong>回到控制台，点击创建Bucket,输入名称，查看旁边的命名规范，设置区域，选择你的存储类型，下面都有解释的。 创建完毕。 <strong>3.</strong>设置你的bucket的读写权限，默认创建后是私有。点击基础设置，读写权限，设置，选择公共读，这样在显示图片时可以通过宽高调整，但没有写的权限。</p>
<h4 id="添加子账户"><a href="#添加子账户" class="headerlink" title="添加子账户"></a>添加子账户</h4><p>现在访问的话，你使用的是主账户，其Access Key和Secret Key具有操作阿里云账户的所有权限，所以为了安全你要根据你的需要禁用这个账户并创建一个新的子账户，并赋予子账户操作OSS的权限。 <strong>1.</strong>触碰你的头像，点击Accesskey，进入控制台。它会自动姿势你创建一个新的子账户，你可以选不创建，那么么进入控制台后将显示你的主账户，你可以禁用它。 <strong>2.</strong>重新进入控制台，点击弹出来的，创建子账户，然后点击新建用户，完善表单信息，点击复选框生成Accesskey。 <strong>3.</strong>创建完成后，保存你的AK信息，将会以vcs格式的方式保存到你的本地，可通过excel表格打开,一定好好保存，不要泄露。 <strong>4.</strong>刚创建出来的用户，点击右边的管理，点击左侧的用户授权策略，点击右上角的编辑授权策略,选择OSS对象存储，添加到你的权限中，然后确定，设置完毕。 <strong>5.</strong>如果你要删除用户，则返回到用户管理，点击对应用户后面的删除按钮,选择复选框删除用户并撤销权限。</p>
<h4 id="访问防盗链设置"><a href="#访问防盗链设置" class="headerlink" title="访问防盗链设置"></a>访问防盗链设置</h4><p>你可以设置防盗链,只有该网站路径下发出的请求才能访问OSS存储，具体看旁边文档。 你可以设置成你的网站路径，这样只有在你的网站上发出请求才能访问。 <strong>该OSS对象存储，都是以文字的方式叙述，但步骤则是很完全的，如果你看不太懂，则在下方留言，我会随时关注并给予反馈。</strong></p>
<h3 id="下载oss上传插件"><a href="#下载oss上传插件" class="headerlink" title="下载oss上传插件"></a>下载oss上传插件</h3><p><a href="https://wordpress.org/plugins/oss-upload/">官方下载地址</a> 目前是4.1版本，该版本最后更新在一天前，但是呢，通过刚才的测试发现，当上传完成之后出现的附件大小设置，就是通过图片服务显示样式，选中等像素大小的时候，显示的却是最高文件大小，即原图大小。不知道是IE浏览器的问题还是什么情况，具体看下次更新。</p>
<h3 id="后台配置"><a href="#后台配置" class="headerlink" title="后台配置"></a>后台配置</h3><p>下载完毕后，通过后台的插件系统，上传插件，并启动。然后会在settings中出现 OSS Upload选项，点进去就可以设置。 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/06/wordpress%E6%8F%92%E4%BB%B6ossupload%E8%AE%BE%E7%BD%AE1.png" alt=""> 1.勾选启用OSS最为媒体库 2.设置你的Access Key和Secret Key 3.上传路径设置为框处的格式，oss://存储名称,还可以在后面加上一个目录{path}。但是呢你的原始上传本地库，settings设置里设置了文件上传位置和目录。所以他会根据每年和每月作为目录存储，所以最终的文件在，访问域名/{path}/year/month/文件。 4.访问链接就是你的存储区域的访问域名,可以在OSS管理控制台中看到 5.上传端域就是endpoint，就是你的访问域名去掉bucketName，控制台上也有。如果你的服务器所在区域和OSS所在区域一致，就是机房位置，比如，都在华北2(北京)或者华北1(青岛),那么么可以内网访问，这样可以免去一些流量，可以设置内网的域名。具体的情况你可以看 使用文档或者表单右边的小问号。 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/06/wordpress%E6%8F%92%E4%BB%B6ossupload%E8%AE%BE%E7%BD%AE2.png" alt=""> 1.图片缩略图设置，你可以选择第三个，介绍一下这几个:</p>
<ul>
<li>第一个就是原图，你上传什么大小，就显示什么大小，如果图片较大，则加载页面时耗费的时间的流量也比较大。</li>
<li>第二个则生成缩略图，不光上传原图，而且还生成缩略图，占用更多空间，且扰乱文件结构</li>
<li>第三种则是，上传原图，通过图片服务，你可以设置参数，规定图片显示的大小，且不生成缩略图，花括号中的width和height就可以更改显示图片的宽高</li>
<li>第四种是，你可以为显示的图片设置一个样式，这样访问图片是携带样式，样式设置可以为图片添加水印啊，等各种图片的设置，你可以访问OSS管理控制台，图片处理选项。然后查看文档。</li>
</ul>
<p>2.然后后面有备份的选项，即，上传到OSS，又在本地服务器上传一份。如果你的空间大小不大，你可以不选择。 3.配置这几个就可以了，其他的就不多说了，自行测试。</p>
<h3 id="媒体库测试上传"><a href="#媒体库测试上传" class="headerlink" title="媒体库测试上传"></a>媒体库测试上传</h3><p>媒体库上传文件最大大小默认为2MB，你可以在settings中更改。 选择上传图片，上传完成后，会在右侧的url表单处显示路径，然后在下面的附件设置中出现尺寸选择，这是插件添加的，默认媒体库没有。 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/06/wordpress%E6%8F%92%E4%BB%B6ossupload%E8%AE%BE%E7%BD%AE3.png" alt=""> 但是呢设个尺寸问题，如果你选择缩略图，太小，中等也太小，完整的可能又太大，那么你的选择是，要么显示全图，要么就更改它的width和height了，你先点缩略图插入，会出现如下的路径。 <img src="http://fsats-blog.oss-cn-beijing.aliyuncs.com/2018/06/wordpress%E6%8F%92%E4%BB%B6ossupload%E8%AE%BE%E7%BD%AE4.png" alt=""> 你可以更改它的宽和高，根据你的设定显示。 之后，就可以显示了。</p>
]]></content>
      <categories>
        <category>aliyun</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>OSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据类型</title>
    <url>/2018/06/02/Oracle/Oracle%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><p>常用的字符类型有char、nchar、varchar2、nvarchar2和long五种，它们在数据库中是以ASCII码的格式存储。</p>
<p>数据类型</p>
<p>取值范围</p>
<p>说明</p>
<p>char</p>
<p>1~2000</p>
<p>存储定长的字符型数据</p>
<p>nchar</p>
<p>1~1000</p>
<p>存储Unicode字符集的定长字符型数据</p>
<p>varchar2</p>
<p>1~4000</p>
<p>存储变长度的字符串</p>
<p>nvarchar2</p>
<p>1~2000</p>
<p>用来存储Unicode字符集的变长字符型数据</p>
<p>long</p>
<p>不大于2GB</p>
<p>用来存储变长的字符串</p>
<p><strong>说明：</strong>很少使用long类型，大部分都通过clob类型代替，clob类型比long类型的限制要少。关于long类型的总结请<a href="https://www.2cto.com/database/201006/50144.html">转到</a> <strong>什么是变长,定长?</strong> 1.存储定长的字符数据类型有char和nchar，变长字符数据类型有varchar2,nvarchar2. 2.定长是指如果定义的长度比存储的实际长度长，则剩余长度通过空格补充，而变长则不是，它的总长度为实际的长度。 3.通过length函数和lengthb函数获得字段的长度。length函数返回字符串长度，单位是字符，lengthb函数返回字符串长度，单位是字节。 例: <strong>name char(5)</strong>:长度为5，即可以<strong>存储五个英文字符</strong>,一个英文字符占一个字节，存储<strong>一个汉字和2个英文字符，汉字占用3个字节</strong></p>
<ul>
<li>假设插入值为’abc’和’中’,则length(name),两值分别为5和3,lengthb(name),两值分别为5和5。为何?</li>
<li>我们已经知道length返回字符常，lengthb返回字节长度。那么’abc’是三个字符，但因定长原因，补空格2个到长度5，所以字符为5个，字节也是5个。</li>
<li>而’中’,为1个字符，占用3个字节,因定长补2个空格到长度5，所以，字符变成了3，字节为3+2为5。</li>
</ul>
<p><strong>注意:</strong></p>
<blockquote>
<p>1.当你执行程序时，可能会疑惑’中’字符为何length(name)还是为3，难道没有补空格吗?不是，实际上就是补了2个空格加上原来的一个字符，注意不要把字符和字节搞混。 2.所以如果有中文，那么Length() != Lengthb() 3.如果没有中文，那么Length() == Lengthb()</p>
</blockquote>
<p><strong>name nchar(5):存储Unicode字符,英文和中文都占1个字符，都占2个字节</strong></p>
<ul>
<li>依然以’abc’和’中’为例,首先都得补空格，所以length都占5个字符。</li>
<li>而lengthb，因为补满空格，每个字符占两个字节，所以都是10和10个字节。</li>
</ul>
<p><strong>varchar2(5):中文占3个字节,可存储1个汉字2个英文字符或最多5个英文字符</strong>(与char存储相同,但却是变长)</p>
<ul>
<li>因为是变长数据类型，所以不会补空格，所以length函数的得到的值为’abc’:<strong>3</strong>和’中’:<strong>1</strong>。</li>
<li>而lengthb，非unicode字符集，它跟char一样汉字占用3个字节，所以就是3和3.</li>
</ul>
<p><strong>nvarchar2(5):存储Unicode字符,可存储5个英文数字或5个汉字,(跟nchar存储相同，但却是变长)</strong></p>
<ul>
<li>存储Unicode字符集，所以length返回的字符，’abc’是3，’中’是1。</li>
<li>lengthb返回字节，因字母和汉字都占2个字节，所以分别为6和2。</li>
</ul>
<p>你只需记住加粗体，占用的字节即可，对于length和lengthb返回的值可以通过两个函数来测试。 <strong>字符与字节的区别?</strong></p>
<ul>
<li>字节(Byte)是一种计量单位，是数据存储最小单位，用于计算机存储容量的计量单位。</li>
<li>字符指计算机使用的文本和字符，如:1,2,3,a,b,c,+,-,),(中，国 等等</li>
<li>通过解释意思，两者并没关联，只不过在不同的编码格式中对应关系不同</li>
<li>UTF-8中一个英文字符为1个字节，一个中文为3个字节</li>
<li>Unicode编码中，英文和汉字都占用2个字节</li>
<li>ASCII码中，英文占用一个字节，汉字占用2个字节</li>
</ul>
<h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><p>常用的数字类型有number和float两种，用来表示整数小数。</p>
<p>数据类型</p>
<p>说明</p>
<p>number(p,s)</p>
<p>p最大精度是38位(十进制) p为精度，表示数字的有效位数,在1-38之间,s代表保留的小数位数。用来存储定长的整数和小数。</p>
<p>float(n)</p>
<p>n 指示位的精度，可以存储的值的数目。N 值的范围可以从 1 到 126。若要从二进制转换为十进制的精度，请将 n 乘以 0.30103。要从十进制转换为二进制的精度，请用 3.32193 乘小数精度</p>
<p>FLOAT类型是NUMBER的子类型，如果不太理解float类型，我们都可以使用NUMBER类型代替。 <strong>NUMBER(p,s)</strong> p指的是整个数字的整数部分+小数部分的长度(不含小数点),而s指的是小数的位数。<strong>小数长度不足补0，超过则四舍五入。</strong> 示例:</p>
<pre><code>price number(6,3)  //表示精度为6，小数位数为3
23.235  //总精度不超过6，小数不超过3，正确
4.1234  //小数位数大于4，s为后面的数字四舍五入，4舍去，插入4.123正确
856.1562 //虽然总长度大于6，但需先经过小数的四舍五入，计算后为6，正确
1200.23  //小数不足3位，补0，而加上整数部分超过长度，所以总共是7，错误
1230.123  //明显错误，不需四舍五入，总精度超过6，错误</code></pre><h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><p>常用的数据类型有DATE和TIMESTAMP。</p>
<p>数据类型</p>
<p>说明</p>
<p>DATE</p>
<p>存储日期和时间数据，使用7字节固定长度，每字节分别存储世纪，年月日时分秒。值为公元前4712年1月1日到公元9999年12月31日。SYSDATE函数是返回当前的日期和时间</p>
<p>TIMESTAMP</p>
<p>存储日期的年月日以及时分秒，秒值精确到小数点后6位，同时包含时区时间。SYSTIMESTAMP函数返回当前日期，时间和时区</p>
<p><strong>DATE类型</strong> 存储在数据库中是2018/6/2 11:11:20这种方式存储并显示的，不是-连接,但如果你想使用-连接进行插入，使用to_date(val,fmt)函数。 示例:</p>
<pre><code>insert into c1(today) values(sysdate)
insert into c1(today) values(to_date(&apos;2018-12-12&apos;,&apos;yyyy-mm-dd&apos;))
insert into c1(today) values(to_date(&apos;2018-12-12 12:15:58&apos;,&apos;yyyy-mm-dd hh24:mi:ss&apos;))</code></pre><p><strong>TIMESTAMP类型</strong> 更加的精确，精确到秒，而且具有时区,显示上下午。</p>
<pre><code>insert into c1(times) values(systimestamp)
insert into c1(times) values(TO_TIMESTAMP(&apos;2018-12-01 12:12:09.123456&apos;, &apos;YYYY-MM-DD HH24:MI:SS.FF&apos;));</code></pre><p>通常你要查询时转换，可以通过Java的Date类型进行转换。</p>
<h4 id="大数据量类型"><a href="#大数据量类型" class="headerlink" title="大数据量类型"></a>大数据量类型</h4><p>数据类型</p>
<p>说明</p>
<p>BLOB</p>
<p>存储二进制数据，视频，图片，最多4GB</p>
<p>CLOB</p>
<p>存储大量字符串数据，新闻，文章,最多4GB</p>
<p>NCLOB</p>
<p>存储大的NCHAR数据，同时支持固定宽度和可变宽度字符(Unicode)</p>
<p>BFILE</p>
<p>将二进制文件存储在数据库外部的操作系统文件中。BFILE列存储一个BFILE定位器，指向位于服务器文件系统上的二进制文件。支持文件最大为4GB</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库介绍——三大范式，数据操作语言</title>
    <url>/2018/06/01/Oracle/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D%E2%80%94%E2%80%94%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F%EF%BC%8C%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h3 id="数据库简介"><a href="#数据库简介" class="headerlink" title="数据库简介"></a>数据库简介</h3><h4 id="数据库三大范式"><a href="#数据库三大范式" class="headerlink" title="数据库三大范式"></a>数据库三大范式</h4><p><strong>1.第一范式——数据表中的字段都是单一属性，不可再分</strong> 例如一个产品，你需要描述它的编号，单价，数量，名称等，那么这一个个信息是不能再查分的，例如单价属性就不能再拆分，还能拆成什么，整数和小数吗，那就没有意义了。 <strong>2.第二范式——在满足1NF基础上，表中必须有一个主键，且除主键外的每一列都必须完全依赖于主键。要求每个表只描述一件事</strong> 像是产品和订单，本应该是两个表，如果订单编号，产品编号，订购日期和单价在一张表里，订购日期可能依赖于订单编号，而与单价无关。所以不依赖，并不适合在一张表里，应该分开在两个表中。 <strong>3.第三范式——在满足2NF的基础上，消除非主键字段对任意候选键的传递依赖</strong> 例如员工表中，员工的编号，名称，年龄，所在部门，部门电话。员工编号作为员工信息的主键，那么就决定了后面的这些信息。<strong>员工编号决定了所在的部门，而部门又决定了部门电话，就是说部门电话依赖了所在部门</strong>。存在一种传递的关系，称之为传递函数依赖。所以根据这种情况，需要将所在部门和部门电话单独分开出来。 4.另外还有BC范式，鲍依斯-科得范式BCNF。满足3NF基础上，不存在任何字段对任意候选关键字段的传递函数依赖。 <strong>解释一下关键字,主关键字，候选关键字:</strong> 1.某个字段或多个字段的值可以唯一的标识一条记录，则该字段或字段组称关键字。 2.如果一个关键字是用以<strong>标识每条记录的唯一性，并作为该表与其他表实现关联之用</strong>，则称其为主关键字(简称主键)。 3.除主关键字以外的其他关键字称为候选关键字。 4.如id name IDCard都可以是关键字，而id为主关键字，name，IDCard就是候选关键字。</p>
<h4 id="数据库操作语言种类"><a href="#数据库操作语言种类" class="headerlink" title="数据库操作语言种类"></a>数据库操作语言种类</h4><p><strong>1.数据库定义语言(DDL)</strong> 定义数据库中数据如何存储，包括数据库中对象的创建、修改、删除操作，这些对象主要有数据库、数据表、视图、索引等。简单的来说就是定义，创建数据库，删除数据库，创建索引，删除索引的语句，如CREATE,DROP等。 <strong>2.数据操纵语言(DML)</strong> 对数据库表进行操作，主要包括对数据库表中的数据进行增删改的操作，也就是INSERT,DELETE,UPDATE。 <strong>3.数据查询语言(DQL)</strong> 对数据库表进行查询的，既可以单表查询，也可以多表查询，同时按不同条件检索数据。 <strong>4.数据控制语言(DCL)</strong> 对数据库中的对象权限进行权限设置和取消等操作，但只有数据库管理员这个角色才有权限对象数据库对象的权限进行操作。为数据库中不同的用户设置不同的权限，提高数据库的安全性。 如果关于这些操作语言不太懂，可以先看后面的，等清楚一些语句之后就能知道了。</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router路由</title>
    <url>/2018/05/29/Vue/vue-router%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用Vue.js开发SPA（Single Page Application）单页面应用。 vue-router可以通过html5的history API或者hash实现单页应用，即不刷新跳转，切换地址，只是页面上的组件的切换； vue-router可以实现页面间传参等其他功能；</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>当你要把 vue-router 添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。 首先我们需要定义链接url，而vue-router使用<router-link>对a标签进行包装。 <strong>HTML:</strong></p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    &lt;div&gt;
        &lt;!-- 通过router-link来导航，to属性指定链接， 默认 会渲染成a标签 --&gt;
        &lt;router-link to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;
        &lt;router-link to=&quot;/user&quot;&gt;User&lt;/router-link&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;!-- 路由出口，路由匹配到的组件将在这里渲染 --&gt;
        &lt;router-view&gt;&lt;/router-view&gt;
    &lt;/div&gt;
&lt;/div&gt;</code></pre><p><strong>Javascript:</strong></p>
<pre><code>//1.定义(路由)组件
    var home = &#123;template:&apos;&lt;p&gt;This is Home Page。。。&lt;/p&gt;&apos;&#125;
    var user = &#123;template:&apos;&lt;p&gt;This is User Page&lt;/p&gt;&apos;&#125;
    //2.定义路由，这是一组路由，每个路由使用一个大括号
    const routes = [
        &#123;path:&apos;/home&apos;,component:home&#125;,
        &#123;path:&apos;/user&apos;,component:user&#125;
    ];
    //3.创建路由实例,然后传入路由配置
    var router= new VueRouter(&#123;
       routes   //缩写，相当于routes:routes
    &#125;);
    //4.在Vue实例中注入路由
    var vm = new Vue(&#123;
        el:&apos;#app&apos;,
        router   //缩写,相当于router:router
    &#125;);</code></pre><p>运行一下，可以完美的跑起来。</p>
<h3 id="router-link类样式"><a href="#router-link类样式" class="headerlink" title="router-link类样式"></a>router-link类样式</h3><p>我们看一下控制台Elements，发现确实变成了<a>标签,并且还为当前选定的<router-link>添加了class “router-link-exact-active”和“router-link-active”，我们可以为其添加类样式。 还可以重新设置它的名称只需要在router路由实例中配置。</p>
<pre><code>linkActiveClass:&apos;active&apos;//或其他值</code></pre><h3 id="HTML5-History模式"><a href="#HTML5-History模式" class="headerlink" title="HTML5 History模式"></a>HTML5 History模式</h3><p>我们看路径，默认会给前面加上#号，可能会看起来很丑,我们可以使用HTML5 History模式。这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面</p>
<pre><code>const router = new VueRouter(&#123;
  mode: &apos;history&apos;,
  routes: [...]
&#125;);</code></pre><p>而如果你这样做的话，后台服务器需要配置，因为我们的应用是个单页客户端应用，如果后台没有正确的配置，可能就会出现404页面。那么就需要一个通配符的方法解决,你可以使用重定向。 <strong>3.重定向</strong> <strong>1.通过路径方式</strong></p>
<pre><code>const routes=[
    ....
    //若为/,表示默认重定向/home路径，*则表示匹配任何则重定向到
    &#123;path:&apos;/&apos;,redirect:&apos;/home&apos;&#125;//或者&#123;path:&apos;*&apos;,redirect:&apos;/home&apos;&#125;
]</code></pre><p>当匹配找不到的时候，就会转到这个路由。 <strong>2.通过路由名称</strong> 当然还可以通过路由名称的方式重定向,前提是你为路由设置了name参数</p>
<pre><code>const routes = [
    &#123;path:&apos;/user&apos;,component:user,name:&apos;user&apos;&#125;,//此时通过name设置路由名称
    &#123;path:&apos;/&apos;,redirect:&#123;name:&apos;user&apos;&#125;&#125;//此处通过name属性给与路由名称
];</code></pre><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>嵌套路由无非是在路由里再加路由，与组件一样。 假如user中需要login和regist</p>
<pre><code>//重新为user定义模板
&lt;template id=&quot;user&quot;&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;router-link to=&quot;/user/login&quot;&gt;User Login&lt;/router-link&gt;&lt;/li&gt;
            &lt;li&gt;&lt;router-link to=&quot;/user/regist&quot;&gt;User Regist&lt;/router-link&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;router-view&gt;&lt;/router-view&gt;
    &lt;/div&gt;
&lt;/template&gt;
//为user路由添加子路由
children:[
    &#123;path:&apos;login&apos;,component:login&#125;,
    &#123;path:&apos;regist&apos;,component:regist&#125;
&#125;
//定义组件
var login = &#123;template:&apos;&lt;p&gt;用户登录&lt;/p&gt;&apos;&#125;
var regist = &#123;template:&apos;&lt;p&gt;用户注册&lt;/p&gt;&apos;&#125;</code></pre><p>运行一下，可以正常显示。 注意user模板中的router-link和router-view，他俩是一一对应的，跟外面的不一样。</p>
<h3 id="router-link标签渲染"><a href="#router-link标签渲染" class="headerlink" title="router-link标签渲染"></a>router-link标签渲染</h3><p>前面说过，router-link的默认渲染为<a>标签，我们可以更改,通过<strong>tag属性</strong></p>
<pre><code>&lt;router-link to=&quot;/user/login&quot; tag=&quot;li&quot;&gt;User Login&lt;/router-link&gt;
&lt;router-link to=&quot;/user/regist&quot; tag=&quot;li&quot;&gt;User Regist&lt;/router-link&gt;</code></pre><h3 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h3><p>如果我们通过路径路径来匹配到某个路由。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用『动态路径参数』。 通俗地讲就是参数嘛，</p>
<ul>
<li>字符串参数 ?uname=xiao&amp;pwd=123</li>
<li>rest风格传参 /yao/456</li>
</ul>
<p>当然我们这样映射路由的话，肯定是要参数值的，字符串的获得参数和rest获得参数使用了不同的方法</p>
<ul>
<li><p>字符串参数 $route.query</p>
</li>
<li><p>rest风格参数 $route.params</p>
<p>//字符串参数的方式无需配置映射路径,直接显示<br>var login = {template:’<p>用户登录,获取参数,{ {$route.query}}</p>‘}</p>
<p>//rest方式<br>children:[</p>
<pre><code>&#123;path:&apos;login&apos;,component:login&#125;,
&#123;path:&apos;regist/:uname/:pwd&apos;,component:regist&#125;</code></pre><p>]<br>var regist = {template:’<p>用户注册,获取参数,{ {$route.params}}</p>‘}</p>
</li>
</ul>
<p>主要说一下第二种动态路径参数，它类似REST ful,匹配的路径都能够映射,<strong>一个『路径参数』使用冒号</strong> ** *: 标记* ** <strong>,当匹配到一个路由时，参数值会被设置到 this.$route.params，可以在每个组件内使用</strong>。</p>
<h3 id="响应路由参数的变化"><a href="#响应路由参数的变化" class="headerlink" title="响应路由参数的变化"></a>响应路由参数的变化</h3><p>当使用路由参数时，例如从 /user/login 导航到 /user/regist，<strong>原来的组件实例会被复用</strong>。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，<strong>这也意味着组件的生命周期钩子不会再被调用</strong> 复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch（监测变化） $route 对象</p>
<pre><code>watch: &#123;
    &apos;$route&apos; (to, from) &#123;
      // 对路由变化作出响应...
    &#125;
  &#125;</code></pre><h3 id="匹配优先级"><a href="#匹配优先级" class="headerlink" title="匹配优先级"></a>匹配优先级</h3><p>有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。</p>
<h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><h3 id="router-push向当前添加一个路由并使用"><a href="#router-push向当前添加一个路由并使用" class="headerlink" title="router.push向当前添加一个路由并使用"></a>router.push向当前添加一个路由并使用</h3><p>除了使用 <router-link> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。 <strong>router.push(location, onComplete?, onAbort?)</strong> <strong>注意:在 Vue 实例内部，你可以通过 $router 访问路由实例。因此你可以调用 this.$router.push</strong> <strong>这个方法会向 history 栈添加一个新的记录</strong>，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。 当你点击 <router-link> 时，这个方法会在内部调用，所以说，点击 <router-link :to="..." > 等同于调用 router.push(…)。</p>
<p>声明式</p>
<p>编程式</p>
<router-link :to="..." >

<p>router.push(…)</p>
<pre><code>//this.$router.push(&quot;home&quot;);//字符串，值为路由名称
//this.$router.push(&#123;path:&apos;/user&apos;&#125;);//对象，path指定路径
//this.$router.push(&#123;name:&apos;regist&apos;,params:&#123;uname:&apos;chen&apos;,pwd:123&#125;&#125;);//动态参数路由
//this.$router.push(&#123;path:&apos;/user/login&apos;,query:&#123;uname:&apos;chen&apos;,pwd:123&#125;&#125;);//带查询参数
以及
router.push(&#123; name: &apos;user&apos;, params: &#123; userId &#125;&#125;) // -&gt; /user/123
router.push(&#123; path: `/user/$&#123;userId&#125;` &#125;) // -&gt; /user/123</code></pre><p><strong>注意：如果提供了 path，params 会被忽略</strong> <strong>你还需注意，你使用的方式是query还是params，如果你的path使用的是：标注方式的，则使用params，否则使用query</strong></p>
<h3 id="router-replace替换掉当前记录"><a href="#router-replace替换掉当前记录" class="headerlink" title="router.replace替换掉当前记录"></a>router.replace替换掉当前记录</h3><p>跟 router.push 很像，唯一的不同就是，<strong>它不会向 history 添加新记录</strong>，而是跟它的方法名一样 —— <strong>替换掉当前的 history 记录。</strong></p>
<p>声明式</p>
<p>编程式</p>
<p>router-link :to=”…” replace</p>
<p>router.replace(…)</p>
<p>其语法结构与router.push方法完全一样，只不过重要的是，不会生成一条历史记录。</p>
<h3 id="router-go-n-前进或后退"><a href="#router-go-n-前进或后退" class="headerlink" title="router.go(n)前进或后退"></a>router.go(n)前进或后退</h3><p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。</p>
<pre><code>// 在浏览器记录中前进一步，等同于 history.forward()
router.go(1)

// 后退一步记录，等同于 history.back()
router.go(-1)

// 前进 3 步记录
router.go(3)

// 如果 history 记录不够用，那就默默地失败呗
router.go(-100)
router.go(100)</code></pre>]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0组件3</title>
    <url>/2018/05/29/Vue/Vue2.0%E7%BB%84%E4%BB%B63/</url>
    <content><![CDATA[<h2 id="非父子组件之间的通信"><a href="#非父子组件之间的通信" class="headerlink" title="非父子组件之间的通信"></a>非父子组件之间的通信</h2><p>非父子关系的两个组件之间也需要通信。在简单的场景下，可以使用一个空的 Vue 实例作为事件总线。 这句话呢是官网原话，我们看官网的说明和例子。其通信的方法还是，<strong>触发与监听事件</strong>的方式，与子向父组件传递数据为相同的元素。也就是$emit方法和$on方法。接下来我们具体看看这个例子。 <strong>示例:</strong></p>
<pre><code>//空的Vue实例
var emptyVm = new Vue();

var vm = new Vue(&#123;
    el:&apos;#app&apos;,
    components:&#123;
        &apos;xiao-x&apos;:xiao_x,
        &apos;xiao-y&apos;:xiao_y,
        &apos;xiao-z&apos;:xiao_z
    &#125;
&#125;);

var xiao_x=&#123;
    template:&apos;&lt;div&gt;&lt;p&gt;组件x:&#123; &#123;name&#125;&#125;&lt;/p&gt;&lt;button @click=&quot;send&quot;&gt;传递数据&lt;/button&gt;&lt;/div&gt;&apos;,
    data:function()&#123;
        return &#123;
            name:&apos;xiao&apos;,
            username:&apos;yao&apos;
        &#125;
    &#125;,
    methods:&#123;
        send()&#123;
            emptyVm.$emit(&apos;xiao-x&apos;,this.name);
        &#125;
    &#125;
&#125;
var xiao_y=&#123;
    template:&apos;&lt;div&gt;&lt;p&gt;组件y:&#123; &#123;age&#125;&#125;&lt;/p&gt;&lt;button @click=&quot;send&quot;&gt;传递数据&lt;/button&gt;&lt;/div&gt;&apos;,
    data:function()&#123;
        return &#123;
            age:18
        &#125;
    &#125;,
    methods:&#123;
        send()&#123;
            emptyVm.$emit(&apos;xiao-y&apos;,this.age);
        &#125;
    &#125;
&#125;

var xiao_z=&#123;
    template:&apos;&lt;p&gt;组件z:&#123; &#123;name&#125;&#125;,&#123; &#123;age&#125;&#125;&lt;/p&gt;&apos;,
    data:function()&#123;
        return &#123;
            name:&apos;&apos;,
            age:&apos;&apos;
        &#125;
    &#125;
&#125;

&lt;div id=&quot;app&quot;&gt;
    &lt;xiao-x&gt;&lt;/xiao-x&gt;
    &lt;xiao-y&gt;&lt;/xiao-y&gt;
    &lt;xiao-z&gt;&lt;/xiao-z&gt;
&lt;/div&gt;</code></pre><p>运行实例，我们已经把该准备的已经准备好了。 x和y的模板呢，因为不想写那么高的篇幅代码，就是稍微挤一块了，接下来就是点击按钮触发，然后z里监听就好了。 但是需要注意：<strong>必须先监听，再触发</strong>，才能够监听到，不然当然是接收不到的。所以监听一定是在触发执行前的。 <strong>代码:</strong></p>
<pre><code>//x组件的事件方法
methods:&#123;
    send()&#123;
        emptyVm.$emit(&apos;xiao-x&apos;,this.name);
    &#125;
&#125;
//y的事件方法
methods:&#123;
    send()&#123;
        emptyVm.$emit(&apos;xiao-y&apos;,this.age);
    &#125;
&#125;
//z，在挂载组件模板实例之后就进行监听，所以需要用的生命周期钩子函数
mounted()&#123;//模板挂载之后执行
    emptyVm.$on(&apos;xiao-x&apos;, function(name)&#123;
        vm.$children[2].name=name;
    &#125;);
    emptyVm.$on(&apos;xiao-y&apos;,age =&gt;&#123;
        this.age=age;
    &#125;);
&#125;</code></pre><p>好了，如此如此这般这般，就好了。运行案例，单击按钮，可以显示出来。 <strong>接下来，解释一下这些代码:</strong> - 首先呢，三个组件拉出来单独写，没问题吧，声明一个变量，对象赋给它就行 - 然后就是模板问题，我单独挤一块了，代码多的话还是单独写吧 - 按钮单击事件触发这个这个这两个事件，给它参数，另一边写上事件名，加上回调函数。 - 然后，你要想监听必须是在触发前吧，什么时候最早，挂载之后呗，所以整个$on监听，回调函数里跟上实参，就好了。 <strong>说明两个问题:</strong> <strong>1.就是为什么要空的Vue实例:</strong> <strong>主要就是创建一个空的实例作为中转站</strong>继而能通过$emit和$on这两个函数来实现，为什么呢，因为，这两个方法是，<strong>触发当前实例/监听当前实例</strong>的事件，所以你需要一个共同的实例啊，所以搞一个空的实例咯。 <strong>2.$on事件方法回调问题:</strong> 就例如第一个监听name的，如果你直接this.name=name,你觉得会不会错。之所以这么写肯定是有问题的，但是它不会报错。只不过赋值赋错了，打印一下这个this，通过_data属性在某个实例中的方法_发现这个this是emptyVm的实例，因为回调函数里的this是新的this，指向emptyVm。所以你需要得到z的组件实例才能复制，所以通过$children得到子实例才能赋值，当然这个$children可能是有问题的，因为官方说它是不保证顺序的，我也不太清楚。 所以你需要使用的是第二种，箭头的方式，它不会在函数中创建一个新的this。 箭头函数的格式是：实参列表 =&gt;{//操作内容}</p>
<h2 id="slot内容分发"><a href="#slot内容分发" class="headerlink" title="slot内容分发"></a>slot内容分发</h2><p>原意是，槽，插槽的意思。 有什么用呢，我们先看一下下面的例子。 <strong>示例:</strong></p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    &lt;my-xiao&gt;&lt;/my-xiao&gt;
&lt;/div&gt;

&lt;template id=&quot;xiao&quot;&gt;
    &lt;div&gt;
        &#123; &#123;arr.join(&apos; &apos;)&#125;&#125;&lt;br/&gt;
    &lt;/div&gt;
&lt;/template&gt;

components:&#123;
    &apos;my-xiao&apos;:&#123;
        template:&apos;#xiao&apos;,
        data:function()&#123;
            return &#123;
                name:&apos;xiao&apos;,
                arr:[&apos;what&apos;,&apos;are&apos;,&apos;you&apos;,&apos;doing&apos;]
            &#125;
        &#125;
    &#125;
&#125;</code></pre><p>这个例子看起来也没怎么样，但是呢，你会发现<my-xiao>这个标签内空空如也，是不是想加点文字，可是无论怎么加，都会被模板替换掉的。 <strong>1.</strong> 这时，就是使用插槽的时候了，它<strong>使用<slot></slot>标签来显示，只需将它放在模板中任意为值即可，要注意的是，slot也是一个组件哦,内置的</strong>。</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    &lt;my-xiao&gt;空空如也 —— 任然&lt;/my-xiao&gt;
&lt;/div&gt;

&lt;template id=&quot;xiao&quot;&gt;
    &lt;div&gt;
        &#123; &#123;arr.join(&apos; &apos;)&#125;&#125;&lt;br/&gt;
        &lt;slot&gt;&lt;/slot&gt;&lt;!-- 代替标签内的文字 --&gt;
    &lt;/div&gt;
&lt;/template&gt;
//或者，当内有内容时显示默认的值
&lt;template id=&quot;xiao&quot;&gt;
    &lt;div&gt;
        &#123; &#123;arr.join(&apos; &apos;)&#125;&#125;&lt;br/&gt;
        &lt;slot&gt;只有在没有要分发的内容时才会显示。&lt;/slot&gt;
    &lt;/div&gt;
&lt;/template&gt;</code></pre><p><strong>2.</strong>你更可以在<my-xiao>标签中添加任意代码，如常用的ul，li.同样会显示。</p>
<pre><code>&lt;my-xiao&gt;
        &lt;ul&gt;
            &lt;li&gt;111&lt;/li&gt;
            &lt;li&gt;222&lt;/li&gt;
            &lt;li&gt;333&lt;/li&gt;
            &lt;li&gt;444&lt;/li&gt;
        &lt;/ul&gt;
&lt;/my-xiao&gt;</code></pre><p><strong>3.</strong>你可以通过<slot></slot>指定某个元素在模板的哪里显示</p>
<pre><code>&lt;my-xiao&gt;
    &lt;ul slot=&quot;one&quot;&gt;
        &lt;li&gt;111&lt;/li&gt;
        &lt;li&gt;222&lt;/li&gt;
        &lt;li&gt;333&lt;/li&gt;
        &lt;li&gt;444&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p slot=&quot;QianSiXian&quot;&gt;你褴褛我彩绘 并肩行过山与水&lt;/p&gt;
&lt;/my-xiao&gt;

&lt;template id=&quot;xiao&quot;&gt;
    &lt;div&gt;
        &lt;slot name=&quot;QianSiXian&quot;&gt;&lt;/slot&gt;
        &#123; &#123;arr.join(&apos; &apos;)&#125;&#125;&lt;br/&gt;
        &lt;slot name=&quot;one&quot;&gt;&lt;/slot&gt;
    &lt;/div&gt;
&lt;/template&gt;</code></pre><p>你可以为元素设置slot属性，并随意设置一个值，只需要在slot标签中通过name指定名称即可。</p>
]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0组件2</title>
    <url>/2018/05/29/Vue/Vue2.0%E7%BB%84%E4%BB%B62/</url>
    <content><![CDATA[<h2 id="组件组合"><a href="#组件组合" class="headerlink" title="## 组件组合"></a>## 组件组合</h2><h3 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h3><p>组件 A 在它的模板中使用了组件 B。它们之间必然需要相互通信：父组件可能要给子组件下发数据，子组件则可能要将它内部发生的事情告知父组件。 <img src="http://i2.51cto.com/images/blog/201804/22/a108f0df519d83ccfd5261fdd349bd01.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="父子组件数据传递图"></p>
<hr>
<p>首先，需要在Vue实例里定义一个组件，设置data，然后在这个组件里再添加一个conponents选项，注意不要添错位置。 <strong>示例:</strong></p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    &lt;my-father&gt;&lt;/my-father&gt;
&lt;/div&gt;
//父组件的模板
&lt;template id=&quot;fatherTl&quot;&gt;
    &lt;div&gt;
        &lt;p&gt;这是父组件&lt;/p&gt;
        &lt;p&gt;访问父组件数据:&#123; &#123;name&#125;&#125;,&#123; &#123;age&#125;&#125;,姓名:&#123; &#123;user.name&#125;&#125;,年龄:&#123; &#123;user.age&#125;&#125;&lt;/p&gt;
        &lt;my-child&gt;&lt;/my-child&gt;
    &lt;/div&gt;
&lt;/template&gt;
//子组件的模板
&lt;template id=&quot;childTl&quot;&gt;
    &lt;div&gt;
        &lt;p&gt;这是子组件&lt;/p&gt;
        &lt;p&gt;访问子组件数据:性别:&#123; &#123;sex&#125;&#125;,身高:&#123; &#123;height&#125;&#125;&lt;/p&gt;
    &lt;/div&gt;
&lt;/template&gt;


var vm = new Vue(&#123;
    el:&apos;#app&apos;,
    components:&#123;
        &apos;my-father&apos;:&#123;
            template:&apos;#fatherTl&apos;,
            data:function()&#123;
                return &#123;
                    name:&apos;Xiao&apos;,
                    age:19,
                    user:&#123;name:&apos;小幂幂&apos;,age:31&#125;
                &#125;
            &#125;,
            components:&#123;
                &apos;my-child&apos;:&#123;
                    template:&apos;#childTl&apos;,
                    data:function()&#123;
                        return &#123;
                            height:166,
                            sex:&apos;Female&apos;
                        &#125;
                    &#125;
                &#125;
            &#125;
        &#125;
    &#125;
&#125;);</code></pre><p>作为子组件my-child，<my-child></my-child>标签应放在父组件标签<my-father></my-father>标签内，而不能是实例挂载元素下。 如果你尝试直接在父组件模板或子组件模板中通过{ {}}模板语法引用则会出现错误。 运行此案例，完美运行,你可以通过vue-devtool查看组件结构图。 目前还没有通信，只是显示了一下各自的数据，接下来传递数据了。</p>
<h4 id="父向子传递数据"><a href="#父向子传递数据" class="headerlink" title="父向子传递数据"></a>父向子传递数据</h4><p>父向子传递数据，我们需要做的就是<strong>将要传递的数据绑定到子组件的标签上，并在子组件内通过props选项来接收。</strong></p>
<pre><code>//father模板中添加
&lt;my-child :childName=&quot;user.name&quot; :age=&quot;user.age&quot;&gt;&lt;/my-child&gt;
//接着，在my-child组件中添加选项
props:[&apos;childName&apos;,&apos;age&apos;]
//最后，我们引用name和age
//my-child模板中
&lt;div&gt;
    &lt;p&gt;这是子组件&lt;/p&gt;
    &lt;p&gt;访问子组件数据:性别:&#123; &#123;sex&#125;&#125;,身高:&#123; &#123;height&#125;&#125;&lt;/p&gt;
    &lt;p&gt;访问父组件数据:&#123; &#123;childName&#125;&#125;,&#123; &#123;age&#125;&#125;&lt;/p&gt;//添加了这一条
&lt;/div&gt;</code></pre><p>接下来访问，即可看到数据显示了。 分析一下,：name和：age，这个冒号“：”后的name和age，就是，props中接收的属性名，<strong>将作为子组件的属性名</strong>，就是说这两个名可以改，无论改成什么，最后都需要通过这个名字访问。 而属性值就是引号中的user.name,user.age，它直接也是<strong>父组件的属性名</strong>。</p>
<h4 id="子向父传递数据"><a href="#子向父传递数据" class="headerlink" title="子向父传递数据"></a>子向父传递数据</h4><p>子向父传递书序需要通过事件的方式向上传递数据。要做的就是通过<strong>$emit方法触发事件，并添加附加参数(就是属性)，通过事件传递数据,父组件中的事件方法接收这参数即可</strong>。 <strong>示例:</strong></p>
<pre><code>//my-child模板中定义一个按钮，作为媒介，用来触发
&lt;button @click=&quot;send&quot;&gt;向上传递给父组件数据&lt;/button&gt;
//组组件定义
methods:&#123;
    send()&#123;
        this.$emit(&apos;child-up&apos;,this.sex,this.height);
    &#125;
&#125;
//my-father组件模板中监听这个事件
&lt;my-child :name=&quot;user.name&quot; :age=&quot;user.age&quot;  @child-up=&quot;getData&quot;&gt;&lt;/my-child&gt;
//所以你需要在my-father组件中定义这个getData方法来接收
//但你需注意，你必须提前初始化这些属性
methods:&#123;
    getData(sex,height)&#123;
        this.sex=sex;
        this.height=height;
    &#125;
&#125;
//myfather模板中
&lt;h3&gt;访问子组件数据,&#123; &#123;sex&#125;&#125;,&#123; &#123;height&#125;&#125;&lt;/h3&gt;</code></pre><p>这样，通过某个媒介(点击或其他方式)作为触发事件的方式，来传递数据，并在该实例处监听该事件，并接收数据。 此处将监听在my-child标签中，因my-chlid标签作为myfather标签的子组件，所以将getData方法定义在父组件methods中。</p>
<hr>
<h2 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h2><p>props 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。 另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop。如果你这么做了，Vue 会在控制台给出警告。 接下来我们想试着修改父组件内属性的值，看看是不是会跟着修改,且如果修改prop中属性是否会出现错误。 <strong>示例:</strong> 代码较多，我们再新建一个html。我们只注册使用一个组件，因为Vue实例本身也是一个组件，它是根组件，所以在实例中components中注册一个组件作为子组件。</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    &lt;p&gt;父组件:&#123; &#123;age&#125;&#125;&lt;/p&gt;
    &lt;p&gt;&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;&lt;/p&gt;
    &lt;hr/&gt;
    &lt;my-component :username=&quot;name&quot; :age=&quot;age&quot;&gt;&lt;/my-component&gt;
&lt;/div&gt;

&lt;template id=&quot;templ&quot;&gt;
    &lt;p&gt;子组件中父组件的数据,&#123; &#123;username&#125;&#125;&lt;/p&gt;
&lt;/template&gt;


var vm = new Vue(&#123;
    el:&apos;#app&apos;,
    data:&#123;
        name:&apos;XiaoYao&apos;,
        age:19
    &#125;,
    components:&#123;
        &apos;my-component&apos;:&#123;
            template:&apos;#templ&apos;,
            props:[&apos;username&apos;,&apos;age&apos;]
        &#125;
    &#125;
&#125;);</code></pre><p>我们已经通过props属性进行向下传递数据了，父组件中我们把name属性设置为双向绑定的属性，以便于修改。 接下来直接在文本框中修改name的值，子组件模板中，值就跟着变了。 那么，我们开始尝试着修改它。 <strong>示例:</strong></p>
<pre><code>//在组件模板中添加如下按钮。注意模板中只有一个根元素，需要div包起来
&lt;button @click=&quot;change&quot;&gt;直接修改父组件传递下来的值&lt;/button&gt;

//在子组件中定义方法，注意不要写错位置，会发生错误的
methods:&#123;
    change()&#123;
        this.username=&apos;I Love You&apos;;//直接修改它的值
    &#125;
&#125;</code></pre><p>运行结果，浏览器控制台发生异常了。</p>
<pre><code>Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop&apos;s value. Prop being mutated: &quot;username&quot;</code></pre><p>由此可见，它是不可以更改的，因为它是自动更新值的。</p>
<h3 id="如果你很需要在子组件中修改它的话"><a href="#如果你很需要在子组件中修改它的话" class="headerlink" title="如果你很需要在子组件中修改它的话"></a>如果你很需要在子组件中修改它的话</h3><p>当然如果非要这么做的话，也还是有方法的，因为你很有必要用它。</p>
<ul>
<li>你可能希望把它当做局部变量处理</li>
<li>你可能需要得到它的值显示出来，并修改它</li>
</ul>
<p>那么你有两种选择，</p>
<ul>
<li>一种是定义局部变量，来操作它。</li>
<li>另一种就是定义计算属性，依据原值的修改来动态的改变这个计算属性，而你使用的就是这个计算属性</li>
</ul>
<p>接下来我们只需要这样：</p>
<pre><code>//1.添加属性，并将传来的属性复制给新的局部定义属性
data:function()&#123;
    return &#123;
        myName:this.username
    &#125;
&#125;
//2.接下来要改变和使用的值就都是myName了
methods:&#123;
    change()&#123;
        this.myName=&apos;I Love you&apos;
    &#125;
&#125;
//模板中
&lt;p&gt;子组件中父组件的数据,&#123; &#123;myName&#125;&#125;&lt;/p&gt;</code></pre><p>对于使用计算属性，我们可以做:</p>
<pre><code>props: [&apos;size&apos;],
computed: &#123;
  normalizedSize: function () &#123;
    return this.size.trim().toLowerCase()
  &#125;
&#125;
//接下来就是使用normalizedSize属性显示了</code></pre><p>以上是单项数据流的问题，如果需要双向呢，看下面。</p>
<hr>
<h3 id="双向数据流，父子双向绑定"><a href="#双向数据流，父子双向绑定" class="headerlink" title="双向数据流，父子双向绑定"></a>双向数据流，父子双向绑定</h3><p>我们使用<strong>.sync修饰符</strong>,该修饰符在1.0中使用，在2.0中废除，后又在2.3中重新引用，只是错了稍加修改，具体情况看官网。</p>
<pre><code>//父组件向下传递时，子组件标签上传递的属性后面添加.sync修饰符
&lt;my-component :username.sync=&quot;name&quot; :age=&quot;age&quot;&gt;&lt;/my-component&gt;</code></pre><p>然后需要显式的触发一个更新事件。</p>
<pre><code>methods:&#123;
    change()&#123;
        this.$emit(&apos;update:username&apos;, &apos;I Love You&apos;);
        //this.username=&apos;I Love you&apos;;
    &#125;
&#125;</code></pre><p>通过$emit事件方法，然后第一个参数，<strong>update：</strong>是固定写法，后面是新属性值，这样就可以双向绑定了。使用按钮触发不是必需的，只要在某处调用这个触发方法即可。</p>
<h4 id="假如你向下传递的是对象，那么如果要修改的话会更方便。"><a href="#假如你向下传递的是对象，那么如果要修改的话会更方便。" class="headerlink" title="假如你向下传递的是对象，那么如果要修改的话会更方便。"></a>假如你向下传递的是对象，那么如果要修改的话会更方便。</h4><p>我们可以直接修改对象的属性值而不需要.sync修饰符。</p>
<pre><code>//为父组件定义一个对象,并且显示他
emp:&#123;salary:6000,workingAge:2,name:&apos;XiaoChenchen&apos;&#125;
&lt;p&gt;父组件emp:&#123; &#123;emp&#125;&#125;&lt;/p&gt;

//在单击按钮方法中直接设置对象的属性值
this.emp.salary=8000;</code></pre><p>单击按钮，发现salarys从6000变成了8000，而且不会不会发生任何错误。 这是因为对象的引用地址没有发生改变，改变的只是里面的属性，属性改变并不会影响对象地址。 所以我们建议封装成对象更方便，但有时也是需要到.sync修饰符的，主要是看情况了。 谢谢观看，下节继续讲组件，非父子间通信，以及slot插槽分发。</p>
<hr>
<p>爱自己，更爱需要爱的人。。。</p>
]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0组件1</title>
    <url>/2018/05/28/Vue/Vue2.0%E7%BB%84%E4%BB%B61/</url>
    <content><![CDATA[<p>组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。 组件是自定义元素，Vue.js 的编译器为它添加特殊功能。</p>
<h2 id="使用组件"><a href="#使用组件" class="headerlink" title="## 使用组件"></a>## 使用组件</h2><h3 id="组件的注册与使用"><a href="#组件的注册与使用" class="headerlink" title="组件的注册与使用"></a>组件的注册与使用</h3><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><p>我们需要通过一个全局的API来构造。 <strong>Vue.extend(options)</strong> <strong>用法:</strong>使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。 同时还需要一个API通过这个构造器来注册组件，之后才能使用。 <strong>Vue.component(id, [definition])</strong> <strong>用法:</strong>注册或获取全局组件。注册还会自动使用给定的id设置组件的名称。注意:他仅仅是个构造器而已。 <strong>示例:</strong></p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    &lt;my-global&gt;&lt;/my-global&gt;
&lt;/div&gt;

var myComponent = Vue.extend(&#123;
    template:&apos;&lt;div&gt;&lt;h2&gt;This is the use of a global component&lt;/h2&gt;&lt;/div&gt;&apos;
&#125;);
Vue.component(&apos;my-global&apos;,myComponent);</code></pre><p>通过测试后，我们发现最终被渲染为:</p>
<pre><code>&lt;div&gt;
    &lt;h2&gt;This is the use of a global component&lt;/h2&gt;
&lt;/div&gt;</code></pre><p><my-global></my-global>就可以使用组件。 template属性就是模板，该组件将被渲染后代替。 你可以写两个标签</p>
<pre><code>&lt;my-global&gt;&lt;/my-global&gt;
&lt;my-global&gt;&lt;/my-global&gt;</code></pre><p><strong>但是注意:</strong>这两个组件是相互独立的，虽然是通过各构造器注册的，但各自独立，局部的注册也是一样的。 这样写，又定义构造器，又注册，再使用，未免有些麻烦，也不常用。可以简短点写。</p>
<pre><code>//我们是直接可以这样写的，也是全局注册最常用的方式
Vue.component(&apos;my-global&apos;,&#123;
    template:&apos;&lt;div&gt;&lt;h2&gt;This is the use of a global component&lt;/h2&gt;&lt;/div&gt;&apos;
&#125;);</code></pre><h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><p>即在某个Vue实例中通过components选项中注册。 <strong>示例:</strong></p>
<pre><code>data:&#123;
    msg:&apos;Hello Vue2.0&apos;
&#125;,
components:&#123;
    &apos;my-local&apos;:&#123;
        data:function()&#123;
            return &#123;
                msg:&apos;Hello Vue2.0---Local&apos;
            &#125;
        &#125;,
        template:&apos;&lt;div&gt;&lt;h2&gt;&#123; &#123;msg&#125;&#125;&lt;/h2&gt;&lt;/div&gt;&apos;
    &#125;
&#125;</code></pre><p>好了，这就是局部的注册，我们这里在template属性里使用了模板语法{ {}}，而不过要在子组件中使用模板的到属性值得话，就必须使用子组件自己的data，虽然是子组件，但也不能直接使用父组件的data。需要定义data，注意，<strong>组件的data必须是一个函数</strong>，属性由函数返回，多个属性使用对象{}的方式。</p>
<blockquote>
<p>官方原话：构造 Vue 实例时传入的各种选项大多数都可以在组件里使用。只有一个例外：data 必须是函数 如果这么做，那么 Vue 会停止运行，并在控制台发出警告，告诉你在组件实例中 data 必须是一个函数</p>
</blockquote>
<p>所以此时，打印的语句为Hello Vue2.0—Local。 如果有Vue的开发工具插件vue-devtools，我们就可以看到。 <img src="http://i2.51cto.com/images/blog/201804/21/aeebe30bf0af8d5604e740fc9b253266.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="vue-devtools工具查看到组件图"> 应官方的要求，这个id，即组件定义的这个标签名不强制遵循 W3C 规则 (小写，并且包含一个短杠)。但是在vue-devtool中就被改成这种名字了，驼峰命名法吧。当然我们可以定义name属性，它是通过name属性来显示的，默认的值就是id变成驼峰，我们可以自己写name。依然是没问题的。</p>
<h4 id="引用模板"><a href="#引用模板" class="headerlink" title="引用模板"></a>引用模板</h4><p>如果我们的template属性中的内容太多，未免会造成麻烦，不仅影响美感，还容易出错，所以我们通过template标签定义引用。</p>
<pre><code>//挂载元素div外定义的模板
&lt;template id=&quot;templ&quot;&gt;
    &lt;ul&gt;
        &lt;li v-for=&quot;(val,key) in arr&quot;&gt;&#123; &#123;val&#125;&#125;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/template&gt;
components:&#123;
    &apos;my-local&apos;:&#123;
        name:&apos;MyLocal2&apos;,
        data:function()&#123;
            return &#123;
                msg:&apos;Hello Vue2.0---Local&apos;,
                arr:[&apos;what&apos;,&apos;are&apos;,&apos;you&apos;,&apos;doing&apos;]
            &#125;
        &#125;,
        template:&apos;#templ&apos;
    &#125;
&#125;</code></pre><p>我们在挂载元素div外定义模板元素template，然后添加一个id元素，在子组件template属性中，通过’#templ’对其引用。 然而有一中易错误现象，当在template元素中使用两个独立的标签时会出错。</p>
<pre><code>&lt;template id=&quot;templ&quot;&gt;
    &lt;ul&gt;
        &lt;li v-for=&quot;(val,key) in arr&quot;&gt;&#123; &#123;val&#125;&#125;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;你好，你是谁&lt;/p&gt;&lt;!-- 或是&#123; &#123;msg&#125;&#125; --&gt;
&lt;/template&gt;</code></pre><p>此时它会给你一个错误，这个错误主要说的就是，“<strong>模板中有且仅有一个根元素</strong>”,就是说要么你template标签中有一个ul，要么有一个p，你只能在template中有一个根元素，所以你需要做的是<strong>添加一个div标签在所有标签的最外层作为根元素</strong>。</p>
<h4 id="DOM-模板解析注意事项"><a href="#DOM-模板解析注意事项" class="headerlink" title="DOM 模板解析注意事项"></a>DOM 模板解析注意事项</h4><p>这篇就不写了，看官网的<a href="https://cn.vuejs.org/v2/guide/components.html#DOM-%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">DOM 模板解析注意事项</a>来详细看，最后的要求就是说<strong>尽可能使用字符串模板。</strong></p>
<h3 id="动态组件的渲染"><a href="#动态组件的渲染" class="headerlink" title="动态组件的渲染"></a>动态组件的渲染</h3><p>有时候你可能由于一个if判断，根据数据该选择到底显示渲染哪个组件。此时就需要动态渲染。 动态渲染需要使用到内置的组件<strong>component</strong>，如果可能的话还有<strong>keep-alive</strong>。 component的作用就是<strong>渲染一个“元组件”为动态组件。依 is 的值，来决定哪个组件被渲染。</strong> 我们需要做的就是设置这个is的值，值得内容是什么，就显示名字叫什么组件。</p>
<h4 id="component"><a href="#component" class="headerlink" title="component"></a>component</h4><p>示例:</p>
<pre><code>//我们再定义一个子组件
&apos;my-chen&apos;:&#123;
    data:function()&#123;
        return &#123;
            msg:&apos;My name is Xiaoxiaochen Xiansen&apos;
        &#125;
    &#125;,
    template:&apos;&lt;p&gt;&#123; &#123;msg&#125;&#125;&lt;/p&gt;&apos;
&#125;
//同时，为Vue实例添加一个currentView属性
data:&#123;
    currentView:&apos;my-local&apos;
&#125;
//Vue实例挂载处。:is就是v-bind:is的简写
&lt;div id=&quot;app&quot;&gt;
    &lt;component :is=&quot;currentView&quot;&gt;&lt;/component&gt;
&lt;/div&gt;</code></pre><p>然后测试，默认显示的就是my-local组件的模板内容，通过按钮点击的方式改变currentView的值就可以动态的改变组件了。</p>
<h4 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h4><p>如果你想把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染，那么你就可以使用<strong>keep-alive</strong>内置组件了。 <strong><keep-alive></strong>包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。 只需要把这个标签套在component标签的外边就好了。</p>
<pre><code>&lt;keep-alive&gt;
    &lt;component :is=&quot;currentView&quot;&gt;
        &lt;!-- 非活动组件将被缓存！ --&gt;
    &lt;/component&gt;
&lt;/keep-alive&gt;</code></pre><p>2.它有两个属性可以设置“<strong>include</strong>”和“<strong>exclude</strong>”，值为字符串或正则表达式,只有匹配的组件才会被缓存或不缓存。 <strong>示例:</strong></p>
<pre><code>&lt;!-- 逗号分隔字符串 --&gt;
&lt;keep-alive include=&quot;a,b&quot;&gt;
  &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;
&lt;/keep-alive&gt;

&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;
&lt;keep-alive :include=&quot;/a|b/&quot;&gt;
  &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;
&lt;/keep-alive&gt;

&lt;!-- 数组 (使用 `v-bind`) --&gt;
&lt;keep-alive :include=&quot;[&apos;a&apos;, &apos;b&apos;]&quot;&gt;
  &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;
&lt;/keep-alive&gt;</code></pre><p>匹配首先检查组件自身的 name 选项，如果 name 选项不可用，则匹配它的局部注册名称 (父组件 components 选项的键值)。匿名组件不能被匹配。</p>
<blockquote>
<p><keep-alive> 不会在函数式组件中正常工作，因为它们没有缓存实例。</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0自定义指令</title>
    <url>/2018/05/28/Vue/Vue2.0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>自定义指令主要用于，除系统提供外，自己对DOM的底层操作。 例如当页面加载时需要将一个文本框为自动获得焦点。只要你在打开这个页面后还没点击过任何内容，这个输入框就应当还是处于聚焦状态。 我们通过全局自定义指令和局部自定义指令来讲解autofouce案例。</p>
<h4 id="全局自定义指令"><a href="#全局自定义指令" class="headerlink" title="全局自定义指令"></a>全局自定义指令</h4><p>在全局API中通过<strong>Vue.directive( id, [definition] )</strong>来注册或获取全局指令。 <strong>参数:</strong></p>
<ul>
<li>id表示自定义的指令名称</li>
<li>definition为自定义指令的定义，一般可以含有几个生命周期钩子函数</li>
<li>bind() 指令第一次绑定到元素上时调用，且只调用一次，可执行初始化操作</li>
<li>inserted() 被绑定元素插入到DOM时调用</li>
<li>update() 被绑定元素所在模板更新时调用</li>
<li>componentUpdated() 被绑定元素所在模板完成一次更新周期时调用</li>
<li>unbind() 指令与元素解绑时调用，只调用一次</li>
</ul>
<blockquote>
<p>bind与inserted在加载页面初始化实例并挂载之后调用 update，componentUpdated 当指令所绑定的元素模板更新时调用 unbind解绑时调用</p>
</blockquote>
<p><strong>语法:</strong></p>
<pre><code>// 注册
Vue.directive(&apos;my-directive&apos;, &#123;
  bind: function () &#123;&#125;,
  inserted: function () &#123;&#125;,
  update: function () &#123;&#125;,
  componentUpdated: function () &#123;&#125;,
  unbind: function () &#123;&#125;
&#125;)

// 注册 (指令函数)
Vue.directive(&apos;my-directive&apos;, function () &#123;
  // 这里将会被 `bind` 和 `update` 调用
&#125;)

// getter，返回已注册的指令
var myDirective = Vue.directive(&apos;my-directive&apos;)</code></pre><p><strong>示例:</strong></p>
<pre><code>//el参数为绑定的元素，自动载入
Vue.directive(&apos;focus&apos;,&#123;
    inserted:function(el)&#123;
        console.log(el);
        el.focus();
    &#125;
&#125;);

&lt;div id=&quot;app&quot;&gt;
    &lt;input type=&quot;text&quot; v-focus&gt;
&lt;/div&gt;</code></pre><p>2.当然，你也可以使用简单的指令函数。</p>
<pre><code>// 注册 (指令函数)
Vue.directive(&apos;my-directive&apos;, function () &#123;
  // 这里将会被 `bind` 和 `update` 调用
&#125;)</code></pre><p>3.我们可以在bind函数中为其添加两个参数，第一个是绑定的元素，第二个是当前自定义指令对象。</p>
<pre><code>Vue.directive(&apos;focus&apos;,&#123;
    bind(el,binding)&#123;
        console.log(binding);
    &#125;
&#125;);</code></pre><h4 id="局部，实例的自定义指令"><a href="#局部，实例的自定义指令" class="headerlink" title="局部，实例的自定义指令"></a>局部，实例的自定义指令</h4><p>局部的自定义指令定义在<strong>directives选项</strong>中，所配置的数据与全局的完全一样。</p>
<pre><code>directives:&#123;
    focus:&#123;
        inserted(el)&#123; //当被绑定元素插入到DOM的时候，进行自动获焦
        el.focus();
    &#125;
&#125;</code></pre><p>focus即为指令名称，使用时直接，v-focus即可。</p>
<blockquote>
<p>el参数和binding参数，获得绑定元素与当前指令对象只有在bind函数绑定之后才能得到值。所以inserted，update也是可以的。</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue常用实例属性，实例方法</title>
    <url>/2018/05/28/Vue/Vue%E5%B8%B8%E7%94%A8%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%EF%BC%8C%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><ul>
<li><strong>vm.$el</strong></li>
<li><strong>vm.$data</strong></li>
<li><strong>vm.options</strong></li>
<li><strong>vm.$refs</strong></li>
<li><strong>vm.$root</strong></li>
</ul>
<h4 id="vm-el"><a href="#vm-el" class="headerlink" title="vm.$el"></a>vm.$el</h4><p>该实例属性用于获取Vue实例使用的根DOM元素,即el选项所指的元素DOM</p>
<pre><code>&lt;body&gt;
&lt;div id=&quot;app&quot;&gt;
    &lt;h4&gt;你好，这是四级标题&lt;/h4&gt;
    &lt;p&gt;这是一个段落，我什么都不想说&lt;/p&gt;
&lt;/div&gt;
&lt;button onclick=&quot;getEl()&quot;&gt;获得el选项的DOM元素&lt;/button&gt;
&lt;script&gt;
    var vm = new Vue(&#123;
        el:&apos;#app&apos;
    &#125;)
    function getEl()&#123;
        console.log(vm.$el);//获得DOM元素
        vm.$el.style.color=&apos;red&apos;;//设置字体颜色
    &#125;
&lt;/script&gt;
&lt;/body&gt;</code></pre><h4 id="vm-data"><a href="#vm-data" class="headerlink" title="vm.$data"></a>vm.$data</h4><p>Vue 实例观察的数据对象。Vue 实例代理了对其 data 对象属性的访问。 即可以访问data选项中的数据。</p>
<pre><code>&lt;button onclick=&quot;getData()&quot;&gt;vm.$data获得数据值&lt;/button&gt;
data:&#123;
    msg:&apos;你好你好&apos;,
    arr:[&apos;what&apos;,&apos;are&apos;,&apos;you&apos;,&apos;doing&apos;,&apos;?&apos;]
&#125;
function getData()&#123;
    console.log(vm.$data.msg);
    console.log(vm.$data.arr.join(&apos; &apos;));
&#125;</code></pre><p>获得msg属性，获得arr数组，并通过join生成字符串。</p>
<h4 id="vm-options"><a href="#vm-options" class="headerlink" title="vm.$options"></a>vm.$options</h4><p>用于当前 Vue 实例的初始化选项。需要在选项中包含自定义属性时会有用处。：</p>
<pre><code>var vm = new Vue(&#123;
    el:&apos;#app&apos;,
    data:&#123;
        msg:&apos;你好你好&apos;,
        arr:[&apos;what&apos;,&apos;are&apos;,&apos;you&apos;,&apos;doing&apos;,&apos;?&apos;]
    &#125;,
    name:&apos;小小陈先森&apos;,
    user:&#123;name:&apos;小小陈先森&apos;,age:18,sex:&apos;男&apos;&#125;，
    show()&#123;
            console.log(this.user.sex);
    &#125;
&#125;)

console.log(vm.$options.name);
console.log(vm.$options.user.age);
console.log(vm.$options.show());</code></pre><p>这个自定义属性，就是跟data选项同级，定义的属性或方法函数。通过$options可以操作调用。</p>
<h4 id="vm-refs"><a href="#vm-refs" class="headerlink" title="vm.$refs"></a>vm.$refs</h4><p>返回持有注册过 ref 特性 的所有 DOM 元素和组件实例，该类型为Object，且只读。 因为有好多ref，所以通过.名称获得组件实例。</p>
<pre><code>&lt;input type=&quot;text&quot; ref=&quot;name&quot; value=&quot;this is text&quot;/&gt;
&lt;p ref=&quot;hello&quot;&gt;HelloWorld&lt;/p&gt;

console.log(vm.$refs.hello);
vm.$refs.name.value=&apos;whats&apos;;//.style.color=&apos;red&apos;;</code></pre><p>Vue实例中不需要任何设置，只要持有ref属性的元素在根节点元素中即可。</p>
<h4 id="vm-root"><a href="#vm-root" class="headerlink" title="vm.$root"></a>vm.$root</h4><p>当前组件树的根 Vue 实例。如果当前实例没有父实例，此实例将会是其自己。</p>
<pre><code>console.log(vm.$root);</code></pre><p>若果只有这个一个vm实例，那么么vm.$root将返回自己，返回自己，直接相当于vm。 其他几个实例属性，将在讲解<strong>组件</strong>的时候介绍，而且组件很重要。</p>
<h3 id="实例方法-数据操作"><a href="#实例方法-数据操作" class="headerlink" title="实例方法(数据操作)"></a>实例方法(数据操作)</h3><h4 id="vm-watch"><a href="#vm-watch" class="headerlink" title="vm.$watch"></a>vm.$watch</h4><p>语法:</p>
<pre><code>vm.$watch( expOrFn, callback, [options] )</code></pre><p>观察Vue实例变化中的一个表达式或计算属性函数。监视某个属性，如果被更该，将执行回调函数。 表达式只接受监督的键路径。对于更复杂的表达式，用一个函数取代。 + 第一个参数为表达式或计算属性函数，也可以是一个属性。 + 第二个参数为，触发的回调函数 + 第三个参数为，可添加的选项</p>
<pre><code>&lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;
data:&#123;
    msg:&apos;你好你好&apos;
&#125;
vm.$watch(&apos;msg&apos;,function(newVal,oldVal)&#123;
    console.log(&apos;新值为:&apos; + newVal + &apos;,旧值为:&apos; +oldVal);
&#125;);</code></pre><p>你可以把第一个参数设置为计算属性函数。</p>
<pre><code>vm.$watch(
        function()&#123;
            return Number(this.a) +Number(this.b);
        &#125;,
        function(newVal,oldVal)&#123;
            console.log(&apos;新值为:&apos; + newVal + &apos;,旧值为:&apos; +oldVal);
        &#125;
    );</code></pre><p>另外vm.$watch返回一个取消观察函数，用来停止触发回调:</p>
<pre><code>var unwatch = vm.$watch(&apos;a&apos;, cb)
// 之后取消观察
unwatch()</code></pre><p>一旦执行unwatch()函数，就不会触发回调,且不再监视它。</p>
<blockquote>
<p>[options]可选参数，可以放值deep:true,用来深度监视。 immediate：true,立即以表达式的当前值触发回调。 另外vm.$watch方法与实例的watch选项具有相同的作用。</p>
</blockquote>
<h4 id="vm-set"><a href="#vm-set" class="headerlink" title="vm.$set"></a>vm.$set</h4><p>语法:</p>
<pre><code>vm.$set( target, key, value )</code></pre><p>参数: + {Object | Array} target + {string | number} key + {any} value 设置对象的属性。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新 <strong>示例：</strong></p>
<pre><code>data:&#123;
    user:&#123;
        id:1001,
            name:&apos;tom&apos;
        &#125;
&#125;

 //通过普通方式为对象添加属性时vue无法实时监视到
this.user.age=25;
//通过vue实例的$set方法为对象添加属性，可以实时监视
this.$set(this.user,&apos;age&apos;,18); 
//通过全局API方式设置，全局API在后面介绍
Vue.set(this.user,&apos;age&apos;,22);</code></pre><blockquote>
<p>注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象</p>
</blockquote>
<h4 id="vm-delete"><a href="#vm-delete" class="headerlink" title="vm.$delete"></a>vm.$delete</h4><p>语法:</p>
<pre><code>Vue.delete( target, key )</code></pre><p>参数: + {Object | Array} target + {string | number} key/index</p>
<blockquote>
<p>仅在 2.2.0+ 版本中支持 Array + index 用法。</p>
</blockquote>
<p>删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。</p>
<pre><code>//使用js的方式无效
delete this.user.age; 
//使用vm.$delete
vm.$delete(this.user,&apos;name&apos;);
//使用全局API的方式
Vue.delete(this.user,&apos;age&apos;);</code></pre><blockquote>
<p>目标对象不能是一个 Vue 实例或 Vue 实例的根数据对象。</p>
</blockquote>
<h3 id="实例方法-事件操作"><a href="#实例方法-事件操作" class="headerlink" title="实例方法(事件操作)"></a>实例方法(事件操作)</h3><h4 id="vm-on-vm-emit"><a href="#vm-on-vm-emit" class="headerlink" title="vm.$on,vm.$emit"></a>vm.$on,vm.$emit</h4><p>语法:</p>
<pre><code>vm.$on( event, callback )</code></pre><p>监听当前实例上的自定义事件。事件可以由vm.$emit触发。回调函数会接收所有传入事件触发函数的额外参数。 语法:</p>
<pre><code>vm.$emit( event, […args] )</code></pre><p>触发当前实例上的事件。附加参数都会传给监听器回调。 <strong>示例:</strong></p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    &lt;p v-on:click=&quot;test($event,&apos;123&apos;)&quot;&gt;自定义事件&lt;/p&gt;
&lt;/div&gt;
methods:&#123;
    test(event,num)&#123;
        vm.$emit(&apos;test&apos;,num);
    &#125;
&#125;

vm.$on(&apos;test&apos;,function(num)&#123;
    console.log(&apos;已监听，并执行回调函数&apos;);
    console.log(&apos;获得的值为:&apos; + num);
&#125;);</code></pre><p>当单击p标签文字时，将触发自定义的单击事件test,我们可以在test函数里进行单击后的操作。 通过vm.$on监听这个自定义的test事件，可以执行回调函数，但是它需要通过vm.$emit方法来触发，第一个参数为自定义事件名，第二个参数为附加参数。</p>
<blockquote>
<p>vm.$emit方法在父子组件中也用于子组件向上传递数据。</p>
</blockquote>
<h4 id="vm-once"><a href="#vm-once" class="headerlink" title="vm.$once"></a>vm.$once</h4><p>语法:</p>
<pre><code>vm.$once( event, callback )</code></pre><p>监听一个自定义事件，但是只触发一次，在第一次触发之后移除监听器。 <strong>示例:</strong></p>
<pre><code>&lt;button v-on:mouseover=&quot;mouseover&quot;&gt;只执行一次监听&lt;/button&gt;

methods:&#123;
    mouseover()&#123;
        console.log(&apos;移动到了此节点&apos;)
        vm.$emit(&apos;mouseover&apos;);//可随时，在任何处触发.
    &#125;
&#125;

vm.$once(&apos;mouseover&apos;,function()&#123;
    console.log(&apos;已监听，并执行回调函数&apos;);
&#125;);</code></pre><p>通过测试发现，第一次触碰按钮，将打印“移动到了此节点”，“已监听，并执行回调函数”,但是，等第二次在触碰则只打印“移动到了此节点”。将不会在调用监听的回调函数，因为它已不再被监听。</p>
<h4 id="vm-off"><a href="#vm-off" class="headerlink" title="vm.$off"></a>vm.$off</h4><p>语法:</p>
<pre><code>vm.$off( [event, callback] )</code></pre><p>移除自定义事件监听器。 + 如果没有提供参数，则移除所有的事件监听器； + 如果只提供了事件，则移除该事件所有的监听器； + 如果同时提供了事件与回调，则只移除这个回调的监听器。</p>
<h3 id="实例方法-生命周期"><a href="#实例方法-生命周期" class="headerlink" title="实例方法(生命周期)"></a>实例方法(生命周期)</h3><h4 id="vm-mount"><a href="#vm-mount" class="headerlink" title="vm.$mount"></a>vm.$mount</h4><p>语法:</p>
<pre><code>vm.$mount( [elementOrSelector] )</code></pre><p>如果 Vue 实例在实例化时没有收到 el 选项，则它处于“未挂载”状态，没有关联的 DOM 元素。可以使用 vm.$mount() 手动地挂载一个未挂载的实例。 这个方法返回实例自身，因而可以链式调用其它实例方法。 <strong>示例:</strong></p>
<pre><code>vm.$mount(&apos;#app&apos;);
//或
var vm=new Vue(&#123;
    data:&#123;
        msg:&apos;小小陈先森&apos;,
        name:&apos;tom&apos;
    &#125;
&#125;).$mount(&apos;#app&apos;);</code></pre><p><a href="http://blog.51cto.com/zouzhelu/2105104">查看Vue实例生命周期</a></p>
<h4 id="vm-forceUpdate"><a href="#vm-forceUpdate" class="headerlink" title="vm.$forceUpdate()"></a>vm.$forceUpdate()</h4><p>迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</p>
<h4 id="vm-nextTick-callback"><a href="#vm-nextTick-callback" class="headerlink" title="vm.$nextTick( [callback] )"></a>vm.$nextTick( [callback] )</h4><p>将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。 <strong>在DOM更新完成后再执行回调函数</strong>，一般在修改数据之后使用该方法，以便获取更新后的DOM。 <strong>举个小例子:</strong></p>
<pre><code>&lt;p ref=&quot;thisP&quot;&gt;&#123; &#123;name&#125;&#125;&lt;/p&gt;

data:&#123;
    name:&apos;小小陈先森&apos;
&#125;
//js代码
vm.name=&apos;Tom&apos;;
console.log(vm.$refs.thisP.textContent);</code></pre><p>如果你没有添加最后一行的.textContent,那么你执行起来也没什么数据的错误。 设置为“Tom”值，console.log依然为“Tom”。如果你加上.textContent或的其内容。 你会发现，虽然设置了值为“Tom”，但打印控制台在依然为“小小陈先森”。 <strong>原因:</strong> 就如，该函数的介绍所说，当实例渲染加载完毕后显示Tom，但因为<strong>Vue数据更新后，需要渲染视图</strong>，所以需要等待这块DOM更新后才能显示出新值，而js代码执行较快，而直接通过.$refs获得了内容，没等得及DOM加载渲染完毕。 而此方法就是来处理它的。 <strong>代码:</strong></p>
<pre><code>vm.$nextTick(function()&#123;
    console.log(vm.$refs.thisP.textContent);
&#125;);</code></pre><p>将其放在回调函数里，等DOM执行完后，在执行回调函数。这样就额可以了。</p>
<h4 id="vm-destroy"><a href="#vm-destroy" class="headerlink" title="vm.$destroy()"></a>vm.$destroy()</h4><p>完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器。 触发 beforeDestroy 和 destroyed 的钩子函数。</p>
<blockquote>
<p>在大多数场景中你不应该调用这个方法。最好使用 v-if 和 v-for 指令以数据驱动的方式控制子组件的生命周期。 + 参考<a href="http://www.fsats.com/2018/05/28/41/">生命周期</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 Vue实例</title>
    <url>/2018/05/28/Vue/Vue2.0%20Vue%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h3 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h3><p>每个 Vue 应用都是通过用 Vue 函数创建一个新的 Vue 实例开始的：</p>
<pre><code>var vm = new Vue(&#123;
    // 选项
&#125;)</code></pre><p>当创建一个 Vue 实例时，你可以传入一个选项对象,就如前面所提到的如:data,methods,computed,watch等等。 一个 Vue 应用由一个通过 new Vue 创建的根 Vue 实例，以及可选的嵌套的、可复用的组件树组成。举个例子，一个 todo 应用的组件树可以是这样的：</p>
<pre><code>根实例Root
└─ TodoList
   ├─ TodoItem
   │  ├─ DeleteTodoButton
   │  └─ EditTodoButton
   └─ TodoListFooter
      ├─ ClearTodosButton
      └─ TodoListStatistics</code></pre><p>我们会在稍后的组件系统章节具体展开。</p>
<h3 id="数据和方法"><a href="#数据和方法" class="headerlink" title="数据和方法"></a>数据和方法</h3><p>只要是包含在Vue实例中的属性都是响应式的。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。</p>
<pre><code>// 我们的数据对象
var data = &#123; a: 1 &#125;

// 该对象被加入到一个 Vue 实例中
var vm = new Vue(&#123;
  data: data
&#125;)

// 获得这个实例上的属性
// 返回源数据中对应的字段
vm.a == data.a // =&gt; true

// 设置属性也会影响到原始数据
vm.a = 2
data.a // =&gt; 2

// ……反之亦然
data.a = 3
vm.a // =&gt; 3</code></pre><p>当这些数据改变时，视图会进行重渲染。值得注意的是只有当实例被创建时 data 中存在的属性才是响应式的。 如果你晚些需要使用到某个属性，你可以为它定义初始值，以防止后面无法直接使用到属性。 当然，可以不对属性进行响应式追踪，<strong>Object.freeze()</strong>，这会阻止修改现有的属性，也意味着响应系统无法再_追踪_变化。</p>
<pre><code>var obj = &#123;
    foo: &apos;bar&apos;
&#125;

Object.freeze(obj)

new Vue(&#123;
    el: &apos;#app&apos;,
    data: obj
&#125;)</code></pre><p>除了数据属性，还暴露了实例的属性和方法，他们都有前缀<strong>$</strong>,如$set,$delete,$watch,以便于用户自定义的属性区分开来。 这些属性方法在下节述说。可以查看<a href="https://cn.vuejs.org/v2/api/#vm-data">官方API</a></p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>跟其他语言实例对象一样，Vue实例也有自己的生命周期。 而这些生命周期中的过程，运行的一些函数叫<strong>生命周期钩子</strong> 这些函数分别为: + beforeCreate //实例刚创建，为监视或配置属性，事件，只进行了new操作 + created //创建实例已经完成，并完成了属性的监视和事件配置 + beforeMount //模板编译之前，未挂载，数据还未显示到视图已依旧为模板{ {}} + mounted //模板编译之后，已经挂载，渲染页面，显示数据 + beforeUpdate //组件更新之前执行 + updated //组件更新之后执行 + beforeDestroy //组件销毁之前执行 + destroyed //组件销毁，清理它与其它实例的连接，解绑它的全部指令及事件监听器 举个案例：</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    message:&#123; &#123;msg&#125;&#125;
    &lt;br/&gt;
    &lt;button @click=&quot;changeMsg&quot;&gt;修改message属性&lt;/button&gt;&lt;br/&gt;
    &lt;button onclick=&quot;destory()&quot;&gt;销毁实例&lt;/button&gt;
&lt;/div&gt;


var vm = new Vue(&#123;
        el:&apos;#app&apos;,
        data:&#123;
            msg:&apos;this is Vue Test&apos;
        &#125;,
        methods:&#123;
            changeMsg()&#123;
                this.msg = &apos;此章节为Vue2.0笔记——Vue实例&apos;;
            &#125;
        &#125;,
        beforeCreate()&#123;
            alert(&apos;组件实例刚刚创建，还未进行数据观测和事件配置&apos;);
        &#125;,
        created()&#123;  //常用！！！
            alert(&apos;实例已经创建完成，并且已经进行数据观测和事件配置&apos;);
        &#125;,
        beforeMount()&#123;
            alert(&apos;模板编译之前，还没挂载&apos;);
        &#125;,
        mounted()&#123; //常用！！！
            alert(&apos;模板编译之后，已经挂载，此时才会渲染页面，才能看到页面上数据的展示&apos;);
        &#125;,
        beforeUpdate()&#123;
            alert(&apos;组件更新之前&apos;);
        &#125;,
        updated()&#123;
            alert(&apos;组件更新之后&apos;);
        &#125;,
        beforeDestroy()&#123;
            alert(&apos;组件销毁之前&apos;);
        &#125;,
        destroyed()&#123;
            alert(&apos;组件销毁之后&apos;);
        &#125;

    &#125;)
    function destory()&#123;
        vm.$destroy();
    &#125;</code></pre><p>当执行完毕后，更新会自动触发，销毁后，无法更改值。</p>
<blockquote>
<p>在其中created函数和mounted函数是较为常用的钩子函数 另外:不要在选项属性或回调上使用箭头函数 比如 created: () =&gt; console.log(this.a) 或 vm.$watch(‘a’, newValue =&gt; this.myMethod())。因为箭头函数是和父级上下文绑定在一起的，this 不会是如你所预期的 Vue 实例，经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。</p>
</blockquote>
<p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="生命周期图片"> 如果此文章未能让您更明白，请参考<a href="https://www.cnblogs.com/xiaofenguo/p/6605091.html?_blank">Vue实例与生命周期</a></p>
]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0计算属性和侦听器</title>
    <url>/2018/05/28/Vue/Vue2.0%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BE%A6%E5%90%AC%E5%99%A8/</url>
    <content><![CDATA[<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>在模板使用表达式会非常便利，但是仅适用于简单的运算。当放入太多的逻辑，使得模板过于难以维护。对于这样，就像一个数据需要根据另一个数据的变动而变动。也因此计算属性有了可以监视的能力。<br>所以，对于任何复杂逻辑，你都应当使用计算属性。 计算属性也是用来存储数据，但具有以下几个特点：</p>
<ul>
<li>数据可以进行逻辑处理操作</li>
<li>对计算属性中的数据进行监视</li>
</ul>
<h4 id="计算属性逻辑处理"><a href="#计算属性逻辑处理" class="headerlink" title="计算属性逻辑处理"></a>计算属性逻辑处理</h4><p>计算属性跟data选项一样，也是用来存储数据的。 计算属性写在<strong>computed</strong>选项里。 可以看下面一个例子:</p>
<pre><code>var vm = new Vue(&#123;
        el:&apos;#app&apos;,
        data:&#123;
            message:&apos;Hello&apos;
        &#125;,
        computed:&#123;
            //计算属性的getter方法
            reversedMessage:function()&#123;
                return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;);
            &#125;
        &#125;
&#125;)
&lt;div id=&quot;app&quot;&gt;
    &lt;p&gt;message:&#123; &#123;message&#125;&#125;&lt;/p&gt;
    &lt;p&gt;Computed reversed message:&#123; &#123; reversedMessage &#125;&#125;&lt;/p&gt;
&lt;/div&gt;</code></pre><p>通过执行代码，message属性值为Hello，翻转了值为olleH。 reversedMessage属性的值为一个函数，这个函数是一个getter方法，<strong>如果该属性所依赖的属性(message)发生变更，此计算属性会重新触发</strong>。 <strong>修改代码如下:</strong></p>
<pre><code>&lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;
&#123; &#123;message&#125;&#125;
&lt;p&gt;Computed reversed message:&#123; &#123; reversedMessage &#125;&#125;&lt;/p&gt;</code></pre><p>该message属性进行了双向绑定，message值一更改，reversedMessage就会执行，并的到新的值，这就是它的监听的能力。  </p>
<h4 id="计算属性的setter方法"><a href="#计算属性的setter方法" class="headerlink" title="计算属性的setter方法"></a>计算属性的setter方法</h4><p>当然计算属性默认只有getter方法，你还可以添加setter方法。</p>
<pre><code>computed: &#123;
  fullName: &#123;
    // getter
    get: function () &#123;
      return this.firstName + &apos; &apos; + this.lastName
    &#125;,
    // setter
    set: function (newValue) &#123;
      var names = newValue.split(&apos; &apos;)
      this.firstName = names[0]
      this.lastName = names[names.length - 1]
    &#125;
  &#125;
&#125;</code></pre><h4 id="计算属性缓存与方法的比较"><a href="#计算属性缓存与方法的比较" class="headerlink" title="计算属性缓存与方法的比较"></a>计算属性缓存与方法的比较</h4><p>方法和计算属性都能为其进行单词翻转，结果都是一样的，但是不同的是，<strong>计算属性是基于他们的依赖进行缓存的</strong>，也就是说，只要message不改变，多次访问将返回原来的计算结果，而不必再执行函数。 相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。</p>
<h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。 局部的侦听器写在<strong>watch选项</strong>中。</p>
<pre><code>watch:&#123;
            name:function(newName,oldName)&#123;
                console.log(&apos;新值:&apos; +newName +&apos;,&apos; + &apos;旧值：&apos; + oldName);
            &#125;
        &#125;</code></pre><p>name为监听的某个属性，第一个参数是的得到新值，第二个参数是旧值。  </p>
<h4 id="选项deep"><a href="#选项deep" class="headerlink" title="选项deep"></a>选项deep</h4><p>如果你监视对象，，你改变了此对象的属性，但是并不会改变对象的地址，因为它监视的是地址, 如果不发生改变就不会执行这个处理器，为了<strong>发现对象内部值变化</strong>，需要设置选项deep:true,注意监听数组是不用这么做。</p>
<pre><code>user:&#123; 
    handler:function(newVal,oldVal)&#123;
        console.log(&apos;原值为&apos; + oldVal.name + &apos;新值为&apos; + newVal.name);
    &#125;,
    deep:true 
&#125;</code></pre><p>加了之后会执行这个处理器函数，显示值。但是newVal和oldVal都是新的值， 因为对象时引用类型，两个变量都指向那个对象，所以，改变了值之后，自然oldVal.name也会改变成新值</p>
<h4 id="选项：immediate"><a href="#选项：immediate" class="headerlink" title="选项：immediate"></a>选项：immediate</h4><p>在选项参数中指定 immediate: true 将立即以表达式的当前值触发回调：</p>
<pre><code>user:&#123; 
    handler:function(newVal,oldVal)&#123;
        console.log(&apos;原值为&apos; + oldVal.name + &apos;新值为&apos; + newVal.name);
    &#125;,
    immediate:true
&#125;
// 立即以 `name` 的当前值触发回调</code></pre>]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0Ajax，JSONP跨域</title>
    <url>/2018/05/28/Vue/Vue2.0Ajax%EF%BC%8CJSONP%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h3 id="Ajax实现"><a href="#Ajax实现" class="headerlink" title="Ajax实现"></a>Ajax实现</h3><p>vue本身不支持发送AJAX请求，需要使用vue-resource、axios等插件实现。 axios是一个基于Promise的HTTP请求客户端，用来发送请求，也是vue2.0官方推荐的，同时不再对vue-resource进行更新和维护。 参考GitHub上的<a href="https://github.com/axios/axios">axios</a>,dist目录下的文件就是axios.min.js。 语法:</p>
<pre><code>axios([options])
axios.get(url[,options])
    传参方式:
        1.通过url传参
        2.通过params选项传参</code></pre><h4 id="案例-axios-options"><a href="#案例-axios-options" class="headerlink" title="案例:axios([options])"></a>案例:axios([options])</h4><pre><code>data:&#123;
            id:1001
        &#125;,
    methods:&#123;
            sendAjax()&#123;
                axios(&#123;
                    method:&apos;get&apos;,
                    url:&apos;https://api.github.com/users/&apos; + vm.id
                &#125;).then(function(resp)&#123; //表示请求成功，将执行的回调函数
                    console.log(resp.data);
                    vm.user=resp.data;
                &#125;).catch(function()&#123;  //请求失败，将执行的回调函数
                    console.log(&apos;请求失败&apos; + resp.status + &apos;,&apos; + resp.statusText);
                &#125;);
            &#125;
        &#125;</code></pre><p>在这个代码中，github是一个开源网站，所以可以访问到用户的信息。 1.vm.id表示vm引用当前Vue实例的属性，在后面Vue实例中说明。 2.axios表示执行ajax请求，method选项表示请求方式，url表示请求路径。 3..then回调函数，表示请求成功将被执行,resp为请求成功返回的数据。 4.catch表示请求失败将被执行的回调函数。。</p>
<h4 id="axiso-get-url-options"><a href="#axiso-get-url-options" class="headerlink" title="axiso.get(url[,options])"></a>axiso.get(url[,options])</h4><p>与其类似，但需要注意，第一个参数为url，后面才是选项。</p>
<pre><code>sendAjaxGet()&#123;
                axios.get(&apos;/user&apos;,&#123;
                    params:&#123;
                        id:1001
                    &#125;
                &#125;).then(function(resp)&#123;
                    console.log(resp.data);
                    vm.user=resp.data;
                &#125;).catch(function()&#123;
                    console.log(&apos;请求失败&apos; + resp.status + &apos;,&apos; + resp.statusText);
                &#125;);
            &#125;</code></pre><h4 id="axios-post-url-data-options"><a href="#axios-post-url-data-options" class="headerlink" title="axios.post(url,data,[options])"></a>axios.post(url,data,[options])</h4><p>post方式请求，第一个参数为请求路径，第二个参数直接就是需要传递的数据，格式为json格式，后面的为选项。</p>
<pre><code>sendAjaxPost()&#123;
    axios.post(&apos;server.php&apos;,&#123;
        name:&apos;KaiEr&apos;,
        age:19
    &#125;).then(function(resp)&#123;
        console.log(resp.data);
    &#125;).catch(function()&#123;
        console.log(&apos;请求失败&apos; + resp.status + &apos;,&apos; + resp.statusText);
    &#125;);
&#125;</code></pre><p>还有其他的Request Config请求配置 如:<strong>transformRequest</strong></p>
<pre><code>transformRequest: [function (data, headers) &#123;
    // Do whatever you want to transform the data
    return data;
  &#125;],</code></pre><p>按照文档的意思是说，在请求数据发到服务器之前对其进行更改，仅适用于’PUT’,’POST’和’PATCH’。 该值为数组， 数组中最后一个函数应返回一个字符串或Buffer，ArrayBuffer实例。其实返回字符串就可以。 该函数接收的data参数表示传递的数据，即post方式请求的第二个参数。<br>还有如 + timeout：表示请求超时的毫秒数 + heads：自定义头部文件 + responseType：响应类型 + responseEncoding：响应编码格式 等等，都可以在Github的axios项目的README.md文件中查看文档。 <a href="https://github.com/axios/axios">GitHub的axios开源项目</a></p>
<h3 id="JSONP跨域请求"><a href="#JSONP跨域请求" class="headerlink" title="JSONP跨域请求"></a>JSONP跨域请求</h3><p>axios本身并不支持发送跨域的请求，没有提供相应的API。 尽管vue-resource不再维护，但是还可以使用它来进行跨域请求。 您可以考虑使用Jquery.js来进行跨域请求和Ajax请求。然而还有其他使用ajax跨域的更好方法。我们只是说明Vue也可以支持此功能，但如果需要，你任然可以选择。 引入vue-resource.js文件,可以访问<a href="https://github.com/pagekit/vue-resource">Github的vue-resource项目</a> <strong>文档语法</strong>:</p>
<pre><code>this.$http.jsonp(&apos;/someUrl&apos;, [config]).then(successCallback, errorCallback);
this.$http.get(&apos;/someUrl&apos;, [config]).then(successCallback, errorCallback);</code></pre><ul>
<li>get(url, [config])</li>
<li>head(url, [config])</li>
<li>delete(url, [config])</li>
<li>jsonp(url, [config])</li>
<li>post(url, [body], [config])</li>
<li>put(url, [body], [config])</li>
<li>patch(url, [body], [config])</li>
</ul>
<p><strong>Example</strong>:</p>
<pre><code>&#123;
  // GET /someUrl
  this.$http.get(&apos;/someUrl&apos;).then(response =&gt; &#123;
    // get body data
    this.someData = response.body;
  &#125;, response =&gt; &#123;
    // error callback
  &#125;);
&#125;</code></pre><p>案例: 通过跨域请求Baidu的搜索,打开百度，F12，输入a字符，搜索，Ajax请求，network中找到这样一条请求。 <a href="#">https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=a&amp;json=1&amp;p=3&amp;sid=1444_12897_21084_26182_22158&amp;req=2&amp;csor=1&amp;cb=jQuery110209410333632536945_1523889174484&amp;_=1523889174489</a> wd代表搜索的单词a,我们只需要前边的。 另外我们可以在heads中看到百度使用的jsonp参数名为cb，所以需要修改。</p>
<pre><code>sendJsonp()&#123;
    this.$http.jsonp(&apos;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su&apos;,&#123;
        params:&#123;
            wd:&apos;a&apos;
        &#125;,
        jsonp:&apos;cb&apos; //百度使用的jsonp参数名为cb，所以需要修改
        &#125;).then(resp =&gt; &#123;
            console.log(resp.data.s);
        &#125;);
&#125;</code></pre><p>通过测试，发现可以得到结果</p>
<pre><code>(10) [&quot;爱奇艺&quot;, &quot;阿里云&quot;, &quot;安居客&quot;, &quot;阿里巴巴&quot;, &quot;阿里巴巴批发网&quot;, &quot;爱奇艺网&quot;, &quot;阿里云邮箱&quot;, &quot;安卓模拟器&quot;, &quot;爱思助手&quot;, &quot;acfun&quot;]</code></pre><p>文档访问<a href="https://github.com/pagekit/vue-resource">Github的vue-resource项目</a> 另外，我也不怎么建议使用这个跨域，况且也不是经常用到。 可以使用<a href="https://segmentfault.com/a/1190000011145364">Jquery，document.domain + iframe跨域以及nodejs中间件代理跨域</a></p>
]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0{{}}模板与自定义过滤器</title>
    <url>/2018/05/28/Vue/Vue2.0%7B%7B%7D%7D%E6%A8%A1%E6%9D%BF%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>让我们回到最开始</p>
<pre><code>    &lt;div id=&quot;app&quot;&gt;
        &lt;h1&gt;&#123; &#123;message&#125;&#125;&lt;/h1&gt;
    &lt;/div&gt;
&lt;script&gt;
    var vm = new Vue(&#123;
        el:&apos;#app&apos;,
        data:&#123;
            message:&apos;HelloWorld&apos;
        &#125;
    &#125;)
&lt;/script&gt;</code></pre><p>这是一个HelloWorld，简单的通过模板输出。我们称之为数据绑定，而最常见的就是“Mustache”语法 (双大括号) 。 <strong>v-once</strong>指令，前面介绍过，一次性绑定，数据改变时，绑定的值是不会改变的。</p>
<pre><code>&lt;span v-once&gt;这个将不会改变&#123; &#123;message&#125;&lt;/span&gt;</code></pre><h4 id="原始HTML"><a href="#原始HTML" class="headerlink" title="原始HTML"></a>原始HTML</h4><p>使用{ {}}语法，输出时普通文本，而如果要输出带有HTML的，则要使用<strong>v-html</strong>指令</p>
<pre><code>data:&#123;
    message:&apos;HelloWorld&apos;,
    htmlText:&apos;&lt;h2&gt;这是一个标题,h2的标题&lt;/h2&gt;&apos;
&#125;

&#123; &#123;htmlText&#125;&#125;&lt;br/&gt;
&lt;span v-html=&quot;htmlText&quot;&gt;&lt;/span&gt;</code></pre><p>这个 span 的内容将会被替换成为属性值 htmlText</p>
<h4 id="不编译模板"><a href="#不编译模板" class="headerlink" title="不编译模板"></a>不编译模板</h4><p><strong>v-pre</strong>指令，可以跳过该元素和它子元素的编译过程，来显示原始的Mustache标签</p>
<pre><code>&lt;span v-pre&gt;&#123; &#123;message&#125;&#125;&lt;/span&gt;</code></pre><p>输出的结果是{ {message}}，不对其进行编译。</p>
<h4 id="延缓显示"><a href="#延缓显示" class="headerlink" title="延缓显示"></a>延缓显示</h4><p><strong>v-cloak</strong>指令保持在元素上直到关联实例结束编译。 CSS 规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p>
<pre><code> &lt;div v-cloak&gt;
    &#123; &#123;message&#125;&#125;
&lt;/div&gt;


    [v-cloak]&#123;
        display:none;
    &#125;</code></pre><p>当DOM运行到此处时，该模板还未编译，所以将其隐藏，等实例准备完毕后，显示。</p>
<h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><p>在Vue2.0中已经除去了1.0的过滤器，但是可以自定义。分为局部的和全局的。 过滤器可以用在两个地方，双花括号插值和v-bind表达式。 语法为:</p>
<pre><code>&lt;!-- 在双花括号中 --&gt;
&#123; &#123; message | capitalize &#125;&#125;
&lt;!-- 在 `v-bind` 中 --&gt;
&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</code></pre><p>“|”符号 左侧为需要过滤的数据，右侧为过滤器名称。 <strong>另外注意,使用过滤器后，需要返回值，才能正常显示。</strong></p>
<h4 id="局部过滤器定义"><a href="#局部过滤器定义" class="headerlink" title="局部过滤器定义"></a>局部过滤器定义</h4><p>局部过滤器定义在实例中的filters选项中。 示例:过滤数字，四舍五入。</p>
<pre><code>filters:&#123;    //局部过滤器，仅当前Vue实例可用
    number:(data,n) =&gt; &#123;
        return data.toFixed(n);  //四舍五入,参数为保留的位数
    &#125;
&#125;

&#123; &#123;12.356 | number(2)&#125;&#125;</code></pre><p>过滤器方法声明，第一个参数始终未为传递来的数据，后面的参数一次为方法传递的参数。</p>
<h4 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h4><p>语法：Vue.filter( id, [definition] )</p>
<pre><code>// 注册
Vue.filter(&apos;my-filter&apos;, function (value) &#123;
  // 返回处理后的值
&#125;)

// getter，返回已注册的过滤器
var myFilter = Vue.filter(&apos;my-filter&apos;)</code></pre><p>示例:</p>
<pre><code>Vue.filter(&apos;formatDate&apos;,function(val)&#123;
        var d = new Date(val);
        return d.getFullYear() + &apos;-&apos; + (d.getMonth()+1) + &apos;-&apos; + d.getDate() + &apos; &apos; + d.getHours() + &apos;:&apos; + d.getMinutes();
    &#125;);

&lt;h3&gt;时间:&lt;span&gt;&#123; &#123;currentDate | formatDate&#125;&#125;&lt;/span&gt;&lt;/h3&gt;</code></pre>]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0属性绑定和Class与Style绑定</title>
    <url>/2018/05/28/Vue/Vue2.0%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A%E5%92%8CClass%E4%B8%8EStyle%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><p>通过指令v-bind可以绑定属性,该指令同v-on一样，也有一个简写，“：”冒号。 绑定元素的属性，并且可与元素的原属性共存。当原属性有值时则显示原属性的值，无值则使用绑定的值。</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    &lt;img :src=&quot;url&quot; :width=&quot;width&quot; width=&quot;800&quot; :height=&quot;height&quot;/&gt;
&lt;/div&gt;

data:&#123;
    url:&quot;https://www.baidu.com/img/bd_logo1.png&quot;,
    width:300,
    height:300
&#125;</code></pre><p>这是属性绑定的用法。</p>
<h3 id="Class与Style绑定"><a href="#Class与Style绑定" class="headerlink" title="Class与Style绑定"></a>Class与Style绑定</h3><p>我们同常绑定class时，直接写在class中,这是普通的css绑定。</p>
<pre><code>&lt;style&gt;
    .aa&#123;
        color: red;
    &#125;
    .bb&#123;
        color: blue;
    &#125;
&lt;/style&gt;

&lt;p class=&quot;aa&quot;&gt;这是一段文字，用来测试Class与Style绑定&lt;/p&gt;</code></pre><p>而如果将这种普通绑定应用在Vue中是不行的。不能直接写:class=’aa’</p>
<pre><code>&lt;p :class=&quot;aa&quot;&gt;这是一段文字，用来测试Class与Style绑定&lt;/p&gt;</code></pre><p>这样做它是不会显示出来的。 我们需要通过Vue数据data来动态实现。</p>
<h4 id="直接通过data选项中变量-的方式"><a href="#直接通过data选项中变量-的方式" class="headerlink" title="直接通过data选项中变量 的方式"></a>直接通过data选项中变量 的方式</h4><p>先定义class样式，然后再:class里填写与样式名绑定的名称</p>
<pre><code>data:&#123;
    color:&apos;aa&apos;
&#125;
&lt;p :class=&quot;color&quot;&gt;通过Vue中data选项的变量来动态控制&lt;/p&gt;</code></pre><p>此时color值为aa，那么么颜色就是red,如果动态的为color属性值赋值为bb，那么字体颜色就为blue了。</p>
<h4 id="通过数组的方式"><a href="#通过数组的方式" class="headerlink" title="通过数组的方式"></a>通过数组的方式</h4><pre><code>.line&#123;
        text-decoration: underline;
    &#125;
&lt;p :class=&quot;[color,line]&quot;&gt;通过数组的方式来控制多个&lt;/p&gt;</code></pre><p>另外，指令中是可以有表达式的，就如上面的数组，还可以对data选项的某个number类型的属性进行数据操作，它仅能实现小的操作，而不能去实现语句。</p>
<h4 id="通过json格式的方式绑定"><a href="#通过json格式的方式绑定" class="headerlink" title="通过json格式的方式绑定"></a>通过json格式的方式绑定</h4><p>这次可以不与data选项的属性有牵扯,直接通过设置类样式的值为true|false 为true则使用这个样式，为false则不使用这个样式，通过true|false来判定是否出现样式。这种方式也是最佳常用的。</p>
<pre><code>&lt;p :class=&quot;&#123;bb:false,line:true&#125;&quot;&gt;通过json的方式来绑定class&lt;/p&gt;</code></pre><p>由于，值为true|false，那么么我们也可以通过值大小的方式给定true或false。</p>
<pre><code>data:&#123;
    num:-99
&#125;
&lt;p :class=&quot;&#123;bb:false,line:num&gt;0&#125;&quot;&gt;通过json的方式来绑定class&lt;/p&gt;</code></pre><p>此时line的属性值是返回false，此时不会显示下划线。</p>
<h4 id="通过变量引用json形式"><a href="#通过变量引用json形式" class="headerlink" title="通过变量引用json形式"></a>通过变量引用json形式</h4><p>就是不把json数据写在：class中了，而是定义为实例的一个属性，放在data中。 格式还是这样，不过是放在一个属性中。</p>
<pre><code>data:&#123;
    line_blue:&#123;aa:true,line:true&#125;
&#125;
&lt;p :class=&quot;line_blue&quot;&gt;通过json变量的方式来绑定&lt;/p&gt;</code></pre><blockquote>
<p>另外，在数组和json中都可以使用三元表达式？ ：的方式。</p>
</blockquote>
<h3 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h3><p>即通过绑定style, :style方式</p>
<pre><code>data:&#123;
    color:red,
    fontSize:20,

&#125;
&lt;p :style=&quot;&#123;color:color,fontSize:fontSize + &apos;px&apos;&#125;&quot;&gt;绑定内联&lt;/p&gt;</code></pre><p>因为内联的style可以直接在元素中写，所以json中的key都是css属性，color,textDecoration,fontSize这些内联的样式，(内联的和style文件内的样式名不一样,文件里是横杠，内联是驼峰首字母大写)。 另一个就是直接通过属性的方式了，把json赋值给属性。</p>
<pre><code>data:&#123;
    style1:&#123;color:&apos;blue&apos;,fontSize:&apos;15px&apos;&#125;
&#125;
&lt;p :style=&quot;style1&quot;&gt;绑定内联&lt;/p&gt;</code></pre><p>同样，数组也是可以的。</p>
<h4 id="多重值"><a href="#多重值" class="headerlink" title="多重值"></a>多重值</h4><p>绑定中的属性提供一个包含多个值的数组，常用于提供多个带前缀的值</p>
<pre><code>&lt;div :style=&quot;&#123; display: [&apos;-webkit-box&apos;, &apos;-ms-flexbox&apos;, &apos;flex&apos;] &#125;&quot;&gt;&lt;/div&gt;</code></pre><p>这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 display: flex。</p>
]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0事件对象，事件冒泡，默认行为及键盘事件</title>
    <url>/2018/05/28/Vue/Vue2.0%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%EF%BC%8C%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA%E5%8F%8A%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>关于事件即v-on在指令中已经介绍过，@简写也说过,就不再说明如何声明使用了。 我们可以在调用事件方法是为方法添加参数 $event,表示一个事件实例。 在处理方法中，得到这个实参，可通过这个对象获得一些方法和作用。</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    &lt;button @click=&quot;clickPrint($event,&apos;你好&apos;)&quot;&gt;点击，事件对象&lt;/button&gt;
&lt;/div&gt;

methods:&#123;
            clickPrint(e,str)&#123;
                console.log(str);
                console.log(e);
                console.log(e.type);
                console.log(e.target);//获得事件的目标对象DOM
            &#125;
&#125;</code></pre><p>如果有多个参数，那么将$event设置为第一个参数。</p>
<h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>当事件发生后，这个事件就要开始传播(从里到外或者从外向里)，如何阻止事件冒泡，在js中是通过stopPropagation()方法来阻止事件冒泡的。</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
        &lt;div @click=&quot;printD()&quot;&gt;
            &lt;p @click=&quot;printP()&quot;&gt;
                &lt;button @click=&quot;clickPrint($event,&apos;你好&apos;)&quot;&gt;点击，事件对象&lt;/button&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;</code></pre><p>此时将会出现向上冒泡情况。 只需在触发事件的指令后添加修饰符.stop</p>
<pre><code>&lt;button @click.stop=&quot;clickPrint($event,&apos;你好&apos;)&quot;&gt;点击，事件对象&lt;/button&gt;</code></pre><h3 id="默认行为"><a href="#默认行为" class="headerlink" title="默认行为"></a>默认行为</h3><p>阻止默认行为，在js中调用event.preventDefault(),在Vue中，添加修饰符.prevent</p>
<pre><code>&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot; @click.stop=&quot;study&quot;&gt;链接&lt;/a&gt;</code></pre><p>此时添加.stop将不会链接到百度的主页面。 当然也可以通过串联的方式</p>
<pre><code>&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot; @click.stop.prevent=&quot;study&quot;&gt;链接&lt;/a&gt;</code></pre><p>还有，如：.once，只触发一次事件</p>
<pre><code>&lt;button v-on:click.once=&quot;clickOnce()&quot;&gt;该事件只触发一次&lt;/button&gt;</code></pre><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。 键盘事件有@keydown,@keypress,@keyup 案例:</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;text&quot; name=&quot;username&quot; @keydown=&quot;show($event)&quot;/&gt;&lt;br/&gt;
        &lt;input type=&quot;text&quot; name=&quot;name&quot; @keydown.enter=&quot;print($event)&quot;/&gt;&lt;br/&gt;
        &lt;input type=&quot;text&quot; name=&quot;one&quot; @keydown.up=&quot;print($event)&quot;/&gt;&lt;br/&gt;
&lt;/div&gt;

methods:&#123;
    show(e)&#123;
        console.log(e.target.value);
    &#125;,
    print(e)&#123;
        console.log(e.keyCode);
    &#125;
&#125;</code></pre><p>我们运行这个例子，第一个文本框中，每更改一次文本值就会触发一次事件 第二个文本框中，无论如何更改，只要按下enter键才能触发事件，这个.enter是内置的。下面的.up也是内置的，还可以使用keyCode值,如13是enter，使用.13也可以代表enter。 还有许多内置的，可以一一试试，也可以自定义全局的。</p>
<h4 id="全局配置keyCodes"><a href="#全局配置keyCodes" class="headerlink" title="全局配置keyCodes"></a>全局配置keyCodes</h4><p>类型：{ [key: string]: number | Array<number> } key为string类型，职位number类型或number类型的数组。 全局的，要定义在Vue实例外面</p>
<pre><code>Vue.config.keyCode=&#123;
    a:65,
    space:32
&#125;

&lt;input type=&quot;text&quot; name=&quot;add&quot; @keydown.space=&quot;print($event)&quot;/&gt;
&lt;input type=&quot;text&quot; name=&quot;add&quot; @keydown.a=&quot;print($event)&quot;/&gt;</code></pre><p>一般我们定义的这些，如果是可输出字符的键的话，就会先触发事件再输出这个字符。 配置全局的语法都是Vue.config.xxx，不只有keyCodes，还有很多。 <a href="https://cn.vuejs.org/v2/api/#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE">全局配置</a></p>
<hr>
<h3 id="还有其他修饰符"><a href="#还有其他修饰符" class="headerlink" title="还有其他修饰符"></a>还有其他修饰符</h3><ul>
<li>.stop - 调用 event.stopPropagation()。</li>
<li>.prevent - 调用 event.preventDefault()。</li>
<li>.capture - 添加事件侦听器时使用 capture 模式。</li>
<li>.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li>
<li>.{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。</li>
<li>.native - 监听组件根元素的原生事件。</li>
<li>.once - 只触发一次回调。</li>
<li>.left - (2.2.0) 只当点击鼠标左键时触发。</li>
<li>.right - (2.2.0) 只当点击鼠标右键时触发。</li>
<li>.middle - (2.2.0) 只当点击鼠标中键时触发。</li>
<li>.passive - (2.3.0) 以 { passive: true } 模式添加侦听器 更多，需要查看官网<a href="https://cn.vuejs.org/v2/api/#v-on">v-on指令事件描述</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0常用指令</title>
    <url>/2018/05/28/Vue/Vue2.0%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="v-model指令"><a href="#v-model指令" class="headerlink" title="v-model指令"></a>v-model指令</h3><p>该指令用于数据的双向绑定，即通过input text文本框，和Vue进行双向的显示。 一般用于表单元素。 只需要这样编写挂载目标：</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    &lt;input type=&quot;text&quot; v-model=&quot;message&quot;/&gt;&lt;br/&gt;
    文本框的内容为:&#123; &#123;message&#125;&#125;
&lt;/div&gt;</code></pre><p>Vue实例的内容跟上节一样不用变。 通过对文本框的输入，Vue实例会自动解析并绑定到{ {message}}进行渲染。</p>
<blockquote>
<p>v-model为Vue的内部指令，到后面我们是可以指令的。</p>
</blockquote>
<h3 id="v-for指令"><a href="#v-for指令" class="headerlink" title="v-for指令"></a>v-for指令</h3><p>该指令，顾名思义，使用来循环的。 我们通过，手动编写和循环介绍: 1.首先在Vue实例的data选项中建立数组</p>
<pre><code>data:&#123;
    arr:[&apos;51CTO&apos;,&apos;走着路&apos;,&apos;Vue&apos;,&apos;v-for&apos;]
&#125;</code></pre><p>2.然后再div中编写</p>
<pre><code>&lt;div id=&quot;app&quot;&gt;
    &lt;ol&gt;
        &lt;li&gt;51CTO博客&lt;/li&gt;
        &lt;li&gt;走着路&lt;/li&gt;
        &lt;li&gt;Vue&lt;/li&gt;
        &lt;li&gt;v-for&lt;/li&gt;
    &lt;/ol&gt;
    &lt;hr/&gt;
    &lt;ul&gt;
        &lt;li v-for=&quot;val in arr&quot;&gt;&#123; &#123;val&#125;&#125;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;</code></pre><p>ol是手动写的有序列表，下面的ul是我们通过v-for指令的无序列表。运行可看到显示成功。 但如果想要索引和值，那么修改:</p>
<pre><code>&lt;li v-for=&apos;(val,key) in arr&apos;&gt;&#123; &#123;key&#125;&#125;=&#123; &#123;val&#125;&#125;&lt;/li&gt;</code></pre><p>即可,注意，括号里val在前，而模板显示时时，key在前。需注意。</p>
<h3 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h3><p>用于绑定事件的,类似onclick,onblur等等。 用法：v-on:事件=”函数” 既然使用事件，那么就要有一个新的选项methods来制定方法。 例如：</p>
<pre><code>&lt;div id=&apos;app&apos;&gt;
    &lt;button v-on:click=&quot;sayHi()&quot;&gt;点击方法，sayHi&lt;/button&gt;
    &lt;button @mouseover=&apos;mousevoer()&apos;&gt;鼠标经过&lt;/button&gt;
&lt;/div&gt;

&lt;script&gt;
    var vm = new Vue(&#123;
        el:&apos;#app&apos;,
        data:&#123;
            arr:[&apos;51CTO&apos;,&apos;走着路&apos;,&apos;Vue&apos;,&apos;v-for&apos;]
        &#125;,
        methods:&#123;
            sayHi:function()&#123;
                console.log(&apos;HelloWorld&apos;);
            &#125;,
            mousevoer()&#123;
                console.log(&apos;mouseover&apos;);
            &#125;
        &#125;
    &#125;)
&lt;/script&gt;</code></pre><p>然后，打开控制台，点击按钮，控制台就会显示HelloWorld，点击多次，前面会有数字显示次数。 此外还可以通过对象语法来编写事件:</p>
<pre><code>&lt;button v-on=&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;&gt;&lt;/button&gt;</code></pre><p>此方式可以一次定义多个事件，在Vue实例的mothods选项中如平常一样编写。</p>
<blockquote>
<p>v-on指令可以简写为@</p>
</blockquote>
<h3 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h3><p>用于只绑定一次</p>
<pre><code>&lt;input type=&quot;text&quot; v-model=&quot;message&quot;/&gt;&lt;br/&gt;
&lt;h2 v-once&gt;&#123; &#123;message&#125;&#125;&lt;/h2&gt;
&lt;h3&gt;&#123; &#123;message&#125;&#125;&lt;/h3&gt;</code></pre><p>尽管v-model绑定message如何更改，message值总会变，但是h2通过v-once指令，它却只能显示一次，即’HelloWorld’这个初始绑定。而h3却始终动态渲染。</p>
<hr>
<p>其余常用的v-if,v-show在 条件渲染 中介绍 v-bind在 Class与Style绑定 中介绍</p>
]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
  </entry>
  <entry>
    <title>Vue2.0起步</title>
    <url>/2018/05/28/Vue/Vue2.0%E8%B5%B7%E6%AD%A5/</url>
    <content><![CDATA[<h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>同其他jquery一样，Vue也是需要引用的通过\<script>标签引入js文件</p>
<pre><code>&lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;</code></pre><p>你可以去github下载，也可以直接引用Vue的js</p>
<pre><code>https://github.com/vuejs/vue/releases
或
&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</code></pre><h3 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h3><p>一个简单的HelloWorld 1.创建html，引入vue.js，只需要在script中编写如下代码</p>
<pre><code>var vm = new Vue(&#123;
    el:&apos;#app&apos;,
    data:&#123;
        message:&apos;HelloWorld&apos;
    &#125;
&#125;)</code></pre><p>2.然后在body中添加div标签，并添加id为app,如下代码:</p>
<pre><code>&lt;div id=&apos;app&apos;&gt;
    &#123; &#123;message&#125;&#125;
&lt;div&gt;</code></pre><p>3.注意DOM编译顺序，按需添加windows.onload方法。 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的</p>
<blockquote>
<p>new Vue({})即表示一个实例对象，el选项为Vue实例挂载的目标，实例挂载后，元素可用vm.$el访问。具体更多选项在后篇文章。</p>
</blockquote>
<p>接下来，我将一篇篇的写下自己的笔记。</p>
]]></content>
      <categories>
        <category>Vue2.0</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
</search>
